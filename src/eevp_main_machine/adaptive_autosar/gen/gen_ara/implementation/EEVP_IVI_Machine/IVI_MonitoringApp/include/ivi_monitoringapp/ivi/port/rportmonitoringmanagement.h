///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : rportmonitoringmanagement.h
/// SOFTWARE COMPONENT NAME           : RPortMonitoringManagement
/// GENERATED DATE                    : 2025-08-30 10:53:52
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef PARA_AA_GEN_SOFTWARE_COMPONENT_RPORT_IVI_MONITORINGAPP_IVI_RPORTMONITORINGMANAGEMENT_H
#define PARA_AA_GEN_SOFTWARE_COMPONENT_RPORT_IVI_MONITORINGAPP_IVI_RPORTMONITORINGMANAGEMENT_H
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// INCLUSION HEADER FILES
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "eevp/monitoring/service/monitoringmanagement_proxy.h"
 
#include "ara/log/logger.h"
 
#include <mutex>
#include <thread>
 
namespace ivi_monitoringapp
{
namespace ivi
{
namespace port
{
 
class RPortMonitoringManagement
{
public:
    /// @brief Constructor
    RPortMonitoringManagement();
    
    /// @brief Destructor
    ~RPortMonitoringManagement();
    
    /// @brief Start port
    void Start();
    
    /// @brief Terminate port
    void Terminate();
    
    /// @brief Subscribe event, DistanceLevelFront
    void SubscribeDistanceLevelFront();
     
    /// @brief Stop event subscription, DistanceLevelFront
    void StopSubscribeDistanceLevelFront();
     
    /// @brief Event receive handler, DistanceLevelFront
    void ReceiveEventDistanceLevelFrontTriggered();
     
    /// @brief Event receive handler, DistanceLevelFront
    void ReceiveEventDistanceLevelFrontCyclic();
     
    /// @brief Read event data, DistanceLevelFront
    void ReadDataDistanceLevelFront(ara::com::SamplePtr<eevp::monitoring::service::proxy::events::DistanceLevelFront::SampleType const> samplePtr);
     
    /// @brief Regist callback from software component
    void RegistEventHandlerDistanceLevelFront(std::function<void(const eevp::monitoring::service::proxy::events::DistanceLevelFront::SampleType&)> handler);
    
    /// @brief Subscribe event, DistanceLevelRear
    void SubscribeDistanceLevelRear();
     
    /// @brief Stop event subscription, DistanceLevelRear
    void StopSubscribeDistanceLevelRear();
     
    /// @brief Event receive handler, DistanceLevelRear
    void ReceiveEventDistanceLevelRearTriggered();
     
    /// @brief Event receive handler, DistanceLevelRear
    void ReceiveEventDistanceLevelRearCyclic();
     
    /// @brief Read event data, DistanceLevelRear
    void ReadDataDistanceLevelRear(ara::com::SamplePtr<eevp::monitoring::service::proxy::events::DistanceLevelRear::SampleType const> samplePtr);
     
    /// @brief Regist callback from software component
    void RegistEventHandlerDistanceLevelRear(std::function<void(const eevp::monitoring::service::proxy::events::DistanceLevelRear::SampleType&)> handler);
    
    /// @brief Subscribe event, MbTempStatus
    void SubscribeMbTempStatus();
     
    /// @brief Stop event subscription, MbTempStatus
    void StopSubscribeMbTempStatus();
     
    /// @brief Event receive handler, MbTempStatus
    void ReceiveEventMbTempStatusTriggered();
     
    /// @brief Event receive handler, MbTempStatus
    void ReceiveEventMbTempStatusCyclic();
     
    /// @brief Read event data, MbTempStatus
    void ReadDataMbTempStatus(ara::com::SamplePtr<eevp::monitoring::service::proxy::events::MbTempStatus::SampleType const> samplePtr);
     
    /// @brief Regist callback from software component
    void RegistEventHandlerMbTempStatus(std::function<void(const eevp::monitoring::service::proxy::events::MbTempStatus::SampleType&)> handler);
    
    /// @brief Subscribe event, eventServiceInfo
    void SubscribeeventServiceInfo();
     
    /// @brief Stop event subscription, eventServiceInfo
    void StopSubscribeeventServiceInfo();
     
    /// @brief Event receive handler, eventServiceInfo
    void ReceiveEventeventServiceInfoTriggered();
     
    /// @brief Event receive handler, eventServiceInfo
    void ReceiveEventeventServiceInfoCyclic();
     
    /// @brief Read event data, eventServiceInfo
    void ReadDataeventServiceInfo(ara::com::SamplePtr<eevp::monitoring::service::proxy::events::eventServiceInfo::SampleType const> samplePtr);
     
    /// @brief Regist callback from software component
    void RegistEventHandlereventServiceInfo(std::function<void(const eevp::monitoring::service::proxy::events::eventServiceInfo::SampleType&)> handler);
    
    /// @brief Subscribe event, eventUpdatableService
    void SubscribeeventUpdatableService();
     
    /// @brief Stop event subscription, eventUpdatableService
    void StopSubscribeeventUpdatableService();
     
    /// @brief Event receive handler, eventUpdatableService
    void ReceiveEventeventUpdatableServiceTriggered();
     
    /// @brief Event receive handler, eventUpdatableService
    void ReceiveEventeventUpdatableServiceCyclic();
     
    /// @brief Read event data, eventUpdatableService
    void ReadDataeventUpdatableService(ara::com::SamplePtr<eevp::monitoring::service::proxy::events::eventUpdatableService::SampleType const> samplePtr);
     
    /// @brief Regist callback from software component
    void RegistEventHandlereventUpdatableService(std::function<void(const eevp::monitoring::service::proxy::events::eventUpdatableService::SampleType&)> handler);
    
    /// @brief Subscribe event, resetUcmCompleted
    void SubscriberesetUcmCompleted();
     
    /// @brief Stop event subscription, resetUcmCompleted
    void StopSubscriberesetUcmCompleted();
     
    /// @brief Event receive handler, resetUcmCompleted
    void ReceiveEventresetUcmCompletedTriggered();
     
    /// @brief Event receive handler, resetUcmCompleted
    void ReceiveEventresetUcmCompletedCyclic();
     
    /// @brief Read event data, resetUcmCompleted
    void ReadDataresetUcmCompleted(ara::com::SamplePtr<eevp::monitoring::service::proxy::events::resetUcmCompleted::SampleType const> samplePtr);
     
    /// @brief Regist callback from software component
    void RegistEventHandlerresetUcmCompleted(std::function<void(const eevp::monitoring::service::proxy::events::resetUcmCompleted::SampleType&)> handler);
    
    /// @brief Subscribe field notification, UssStatusFront
    void SubscribeUssStatusFront();
     
    /// @brief Stop field subscription, UssStatusFront
    void StopSubscribeUssStatusFront();
     
    /// @brief Field notification receive handler, UssStatusFront
    void ReceiveFieldUssStatusFrontTriggered();
     
    /// @brief Field notification receive handler, UssStatusFront
    void ReceiveFieldUssStatusFrontCyclic();
     
    /// @brief Read field notification value, UssStatusFront
    void ReadValueUssStatusFront(ara::com::SamplePtr<eevp::monitoring::service::proxy::fields::UssStatusFront::FieldType const> samplePtr);
     
    /// @brief Regist callback from software component
    void RegistFieldHandlerUssStatusFront(std::function<void(const eevp::monitoring::service::proxy::fields::UssStatusFront::FieldType&)> handler);
    
    /// @brief Getter method using by software component, UssStatusFront
    void GetUssStatusFront();
    
    /// @brief Subscribe field notification, UssStatusRear
    void SubscribeUssStatusRear();
     
    /// @brief Stop field subscription, UssStatusRear
    void StopSubscribeUssStatusRear();
     
    /// @brief Field notification receive handler, UssStatusRear
    void ReceiveFieldUssStatusRearTriggered();
     
    /// @brief Field notification receive handler, UssStatusRear
    void ReceiveFieldUssStatusRearCyclic();
     
    /// @brief Read field notification value, UssStatusRear
    void ReadValueUssStatusRear(ara::com::SamplePtr<eevp::monitoring::service::proxy::fields::UssStatusRear::FieldType const> samplePtr);
     
    /// @brief Regist callback from software component
    void RegistFieldHandlerUssStatusRear(std::function<void(const eevp::monitoring::service::proxy::fields::UssStatusRear::FieldType&)> handler);
    
    /// @brief Getter method using by software component, UssStatusRear
    void GetUssStatusRear();
    
    /// @brief Subscribe field notification, soaDmsDeviceNormal
    void SubscribesoaDmsDeviceNormal();
     
    /// @brief Stop field subscription, soaDmsDeviceNormal
    void StopSubscribesoaDmsDeviceNormal();
     
    /// @brief Field notification receive handler, soaDmsDeviceNormal
    void ReceiveFieldsoaDmsDeviceNormalTriggered();
     
    /// @brief Field notification receive handler, soaDmsDeviceNormal
    void ReceiveFieldsoaDmsDeviceNormalCyclic();
     
    /// @brief Read field notification value, soaDmsDeviceNormal
    void ReadValuesoaDmsDeviceNormal(ara::com::SamplePtr<eevp::monitoring::service::proxy::fields::soaDmsDeviceNormal::FieldType const> samplePtr);
     
    /// @brief Regist callback from software component
    void RegistFieldHandlersoaDmsDeviceNormal(std::function<void(const eevp::monitoring::service::proxy::fields::soaDmsDeviceNormal::FieldType&)> handler);
    
    /// @brief Getter method using by software component, soaDmsDeviceNormal
    void GetsoaDmsDeviceNormal();
    
    /// @brief Subscribe field notification, soaDmsSwVersion
    void SubscribesoaDmsSwVersion();
     
    /// @brief Stop field subscription, soaDmsSwVersion
    void StopSubscribesoaDmsSwVersion();
     
    /// @brief Field notification receive handler, soaDmsSwVersion
    void ReceiveFieldsoaDmsSwVersionTriggered();
     
    /// @brief Field notification receive handler, soaDmsSwVersion
    void ReceiveFieldsoaDmsSwVersionCyclic();
     
    /// @brief Read field notification value, soaDmsSwVersion
    void ReadValuesoaDmsSwVersion(ara::com::SamplePtr<eevp::monitoring::service::proxy::fields::soaDmsSwVersion::FieldType const> samplePtr);
     
    /// @brief Regist callback from software component
    void RegistFieldHandlersoaDmsSwVersion(std::function<void(const eevp::monitoring::service::proxy::fields::soaDmsSwVersion::FieldType&)> handler);
    
    /// @brief Getter method using by software component, soaDmsSwVersion
    void GetsoaDmsSwVersion();
    
    /// @brief Subscribe field notification, soaDrvSeatDeviceNormal
    void SubscribesoaDrvSeatDeviceNormal();
     
    /// @brief Stop field subscription, soaDrvSeatDeviceNormal
    void StopSubscribesoaDrvSeatDeviceNormal();
     
    /// @brief Field notification receive handler, soaDrvSeatDeviceNormal
    void ReceiveFieldsoaDrvSeatDeviceNormalTriggered();
     
    /// @brief Field notification receive handler, soaDrvSeatDeviceNormal
    void ReceiveFieldsoaDrvSeatDeviceNormalCyclic();
     
    /// @brief Read field notification value, soaDrvSeatDeviceNormal
    void ReadValuesoaDrvSeatDeviceNormal(ara::com::SamplePtr<eevp::monitoring::service::proxy::fields::soaDrvSeatDeviceNormal::FieldType const> samplePtr);
     
    /// @brief Regist callback from software component
    void RegistFieldHandlersoaDrvSeatDeviceNormal(std::function<void(const eevp::monitoring::service::proxy::fields::soaDrvSeatDeviceNormal::FieldType&)> handler);
    
    /// @brief Getter method using by software component, soaDrvSeatDeviceNormal
    void GetsoaDrvSeatDeviceNormal();
    
    /// @brief Subscribe field notification, soaDrvSeatMotorDirection
    void SubscribesoaDrvSeatMotorDirection();
     
    /// @brief Stop field subscription, soaDrvSeatMotorDirection
    void StopSubscribesoaDrvSeatMotorDirection();
     
    /// @brief Field notification receive handler, soaDrvSeatMotorDirection
    void ReceiveFieldsoaDrvSeatMotorDirectionTriggered();
     
    /// @brief Field notification receive handler, soaDrvSeatMotorDirection
    void ReceiveFieldsoaDrvSeatMotorDirectionCyclic();
     
    /// @brief Read field notification value, soaDrvSeatMotorDirection
    void ReadValuesoaDrvSeatMotorDirection(ara::com::SamplePtr<eevp::monitoring::service::proxy::fields::soaDrvSeatMotorDirection::FieldType const> samplePtr);
     
    /// @brief Regist callback from software component
    void RegistFieldHandlersoaDrvSeatMotorDirection(std::function<void(const eevp::monitoring::service::proxy::fields::soaDrvSeatMotorDirection::FieldType&)> handler);
    
    /// @brief Getter method using by software component, soaDrvSeatMotorDirection
    void GetsoaDrvSeatMotorDirection();
    
    /// @brief Subscribe field notification, soaDrvSeatMotorPosition
    void SubscribesoaDrvSeatMotorPosition();
     
    /// @brief Stop field subscription, soaDrvSeatMotorPosition
    void StopSubscribesoaDrvSeatMotorPosition();
     
    /// @brief Field notification receive handler, soaDrvSeatMotorPosition
    void ReceiveFieldsoaDrvSeatMotorPositionTriggered();
     
    /// @brief Field notification receive handler, soaDrvSeatMotorPosition
    void ReceiveFieldsoaDrvSeatMotorPositionCyclic();
     
    /// @brief Read field notification value, soaDrvSeatMotorPosition
    void ReadValuesoaDrvSeatMotorPosition(ara::com::SamplePtr<eevp::monitoring::service::proxy::fields::soaDrvSeatMotorPosition::FieldType const> samplePtr);
     
    /// @brief Regist callback from software component
    void RegistFieldHandlersoaDrvSeatMotorPosition(std::function<void(const eevp::monitoring::service::proxy::fields::soaDrvSeatMotorPosition::FieldType&)> handler);
    
    /// @brief Getter method using by software component, soaDrvSeatMotorPosition
    void GetsoaDrvSeatMotorPosition();
    
    /// @brief Subscribe field notification, soaDrvSeatSwVersion
    void SubscribesoaDrvSeatSwVersion();
     
    /// @brief Stop field subscription, soaDrvSeatSwVersion
    void StopSubscribesoaDrvSeatSwVersion();
     
    /// @brief Field notification receive handler, soaDrvSeatSwVersion
    void ReceiveFieldsoaDrvSeatSwVersionTriggered();
     
    /// @brief Field notification receive handler, soaDrvSeatSwVersion
    void ReceiveFieldsoaDrvSeatSwVersionCyclic();
     
    /// @brief Read field notification value, soaDrvSeatSwVersion
    void ReadValuesoaDrvSeatSwVersion(ara::com::SamplePtr<eevp::monitoring::service::proxy::fields::soaDrvSeatSwVersion::FieldType const> samplePtr);
     
    /// @brief Regist callback from software component
    void RegistFieldHandlersoaDrvSeatSwVersion(std::function<void(const eevp::monitoring::service::proxy::fields::soaDrvSeatSwVersion::FieldType&)> handler);
    
    /// @brief Getter method using by software component, soaDrvSeatSwVersion
    void GetsoaDrvSeatSwVersion();
    
    /// @brief Subscribe field notification, soaFilmDeviceNormal
    void SubscribesoaFilmDeviceNormal();
     
    /// @brief Stop field subscription, soaFilmDeviceNormal
    void StopSubscribesoaFilmDeviceNormal();
     
    /// @brief Field notification receive handler, soaFilmDeviceNormal
    void ReceiveFieldsoaFilmDeviceNormalTriggered();
     
    /// @brief Field notification receive handler, soaFilmDeviceNormal
    void ReceiveFieldsoaFilmDeviceNormalCyclic();
     
    /// @brief Read field notification value, soaFilmDeviceNormal
    void ReadValuesoaFilmDeviceNormal(ara::com::SamplePtr<eevp::monitoring::service::proxy::fields::soaFilmDeviceNormal::FieldType const> samplePtr);
     
    /// @brief Regist callback from software component
    void RegistFieldHandlersoaFilmDeviceNormal(std::function<void(const eevp::monitoring::service::proxy::fields::soaFilmDeviceNormal::FieldType&)> handler);
    
    /// @brief Getter method using by software component, soaFilmDeviceNormal
    void GetsoaFilmDeviceNormal();
    
    /// @brief Subscribe field notification, soaFilmSwVersion
    void SubscribesoaFilmSwVersion();
     
    /// @brief Stop field subscription, soaFilmSwVersion
    void StopSubscribesoaFilmSwVersion();
     
    /// @brief Field notification receive handler, soaFilmSwVersion
    void ReceiveFieldsoaFilmSwVersionTriggered();
     
    /// @brief Field notification receive handler, soaFilmSwVersion
    void ReceiveFieldsoaFilmSwVersionCyclic();
     
    /// @brief Read field notification value, soaFilmSwVersion
    void ReadValuesoaFilmSwVersion(ara::com::SamplePtr<eevp::monitoring::service::proxy::fields::soaFilmSwVersion::FieldType const> samplePtr);
     
    /// @brief Regist callback from software component
    void RegistFieldHandlersoaFilmSwVersion(std::function<void(const eevp::monitoring::service::proxy::fields::soaFilmSwVersion::FieldType&)> handler);
    
    /// @brief Getter method using by software component, soaFilmSwVersion
    void GetsoaFilmSwVersion();
    
    /// @brief Subscribe field notification, soaHvacDeviceNormal
    void SubscribesoaHvacDeviceNormal();
     
    /// @brief Stop field subscription, soaHvacDeviceNormal
    void StopSubscribesoaHvacDeviceNormal();
     
    /// @brief Field notification receive handler, soaHvacDeviceNormal
    void ReceiveFieldsoaHvacDeviceNormalTriggered();
     
    /// @brief Field notification receive handler, soaHvacDeviceNormal
    void ReceiveFieldsoaHvacDeviceNormalCyclic();
     
    /// @brief Read field notification value, soaHvacDeviceNormal
    void ReadValuesoaHvacDeviceNormal(ara::com::SamplePtr<eevp::monitoring::service::proxy::fields::soaHvacDeviceNormal::FieldType const> samplePtr);
     
    /// @brief Regist callback from software component
    void RegistFieldHandlersoaHvacDeviceNormal(std::function<void(const eevp::monitoring::service::proxy::fields::soaHvacDeviceNormal::FieldType&)> handler);
    
    /// @brief Getter method using by software component, soaHvacDeviceNormal
    void GetsoaHvacDeviceNormal();
    
    /// @brief Subscribe field notification, soaHvacSwVersion
    void SubscribesoaHvacSwVersion();
     
    /// @brief Stop field subscription, soaHvacSwVersion
    void StopSubscribesoaHvacSwVersion();
     
    /// @brief Field notification receive handler, soaHvacSwVersion
    void ReceiveFieldsoaHvacSwVersionTriggered();
     
    /// @brief Field notification receive handler, soaHvacSwVersion
    void ReceiveFieldsoaHvacSwVersionCyclic();
     
    /// @brief Read field notification value, soaHvacSwVersion
    void ReadValuesoaHvacSwVersion(ara::com::SamplePtr<eevp::monitoring::service::proxy::fields::soaHvacSwVersion::FieldType const> samplePtr);
     
    /// @brief Regist callback from software component
    void RegistFieldHandlersoaHvacSwVersion(std::function<void(const eevp::monitoring::service::proxy::fields::soaHvacSwVersion::FieldType&)> handler);
    
    /// @brief Getter method using by software component, soaHvacSwVersion
    void GetsoaHvacSwVersion();
    
    /// @brief Subscribe field notification, soaMlmStatus
    void SubscribesoaMlmStatus();
     
    /// @brief Stop field subscription, soaMlmStatus
    void StopSubscribesoaMlmStatus();
     
    /// @brief Field notification receive handler, soaMlmStatus
    void ReceiveFieldsoaMlmStatusTriggered();
     
    /// @brief Field notification receive handler, soaMlmStatus
    void ReceiveFieldsoaMlmStatusCyclic();
     
    /// @brief Read field notification value, soaMlmStatus
    void ReadValuesoaMlmStatus(ara::com::SamplePtr<eevp::monitoring::service::proxy::fields::soaMlmStatus::FieldType const> samplePtr);
     
    /// @brief Regist callback from software component
    void RegistFieldHandlersoaMlmStatus(std::function<void(const eevp::monitoring::service::proxy::fields::soaMlmStatus::FieldType&)> handler);
    
    /// @brief Getter method using by software component, soaMlmStatus
    void GetsoaMlmStatus();
    
    /// @brief Subscribe field notification, soaMlmSwVersion
    void SubscribesoaMlmSwVersion();
     
    /// @brief Stop field subscription, soaMlmSwVersion
    void StopSubscribesoaMlmSwVersion();
     
    /// @brief Field notification receive handler, soaMlmSwVersion
    void ReceiveFieldsoaMlmSwVersionTriggered();
     
    /// @brief Field notification receive handler, soaMlmSwVersion
    void ReceiveFieldsoaMlmSwVersionCyclic();
     
    /// @brief Read field notification value, soaMlmSwVersion
    void ReadValuesoaMlmSwVersion(ara::com::SamplePtr<eevp::monitoring::service::proxy::fields::soaMlmSwVersion::FieldType const> samplePtr);
     
    /// @brief Regist callback from software component
    void RegistFieldHandlersoaMlmSwVersion(std::function<void(const eevp::monitoring::service::proxy::fields::soaMlmSwVersion::FieldType&)> handler);
    
    /// @brief Getter method using by software component, soaMlmSwVersion
    void GetsoaMlmSwVersion();
    
    /// @brief Subscribe field notification, soaPowerDeviceNormal
    void SubscribesoaPowerDeviceNormal();
     
    /// @brief Stop field subscription, soaPowerDeviceNormal
    void StopSubscribesoaPowerDeviceNormal();
     
    /// @brief Field notification receive handler, soaPowerDeviceNormal
    void ReceiveFieldsoaPowerDeviceNormalTriggered();
     
    /// @brief Field notification receive handler, soaPowerDeviceNormal
    void ReceiveFieldsoaPowerDeviceNormalCyclic();
     
    /// @brief Read field notification value, soaPowerDeviceNormal
    void ReadValuesoaPowerDeviceNormal(ara::com::SamplePtr<eevp::monitoring::service::proxy::fields::soaPowerDeviceNormal::FieldType const> samplePtr);
     
    /// @brief Regist callback from software component
    void RegistFieldHandlersoaPowerDeviceNormal(std::function<void(const eevp::monitoring::service::proxy::fields::soaPowerDeviceNormal::FieldType&)> handler);
    
    /// @brief Getter method using by software component, soaPowerDeviceNormal
    void GetsoaPowerDeviceNormal();
    
    /// @brief Subscribe field notification, soaPowerSwVersion
    void SubscribesoaPowerSwVersion();
     
    /// @brief Stop field subscription, soaPowerSwVersion
    void StopSubscribesoaPowerSwVersion();
     
    /// @brief Field notification receive handler, soaPowerSwVersion
    void ReceiveFieldsoaPowerSwVersionTriggered();
     
    /// @brief Field notification receive handler, soaPowerSwVersion
    void ReceiveFieldsoaPowerSwVersionCyclic();
     
    /// @brief Read field notification value, soaPowerSwVersion
    void ReadValuesoaPowerSwVersion(ara::com::SamplePtr<eevp::monitoring::service::proxy::fields::soaPowerSwVersion::FieldType const> samplePtr);
     
    /// @brief Regist callback from software component
    void RegistFieldHandlersoaPowerSwVersion(std::function<void(const eevp::monitoring::service::proxy::fields::soaPowerSwVersion::FieldType&)> handler);
    
    /// @brief Getter method using by software component, soaPowerSwVersion
    void GetsoaPowerSwVersion();
    
    /// @brief Subscribe field notification, soaRctnStatus
    void SubscribesoaRctnStatus();
     
    /// @brief Stop field subscription, soaRctnStatus
    void StopSubscribesoaRctnStatus();
     
    /// @brief Field notification receive handler, soaRctnStatus
    void ReceiveFieldsoaRctnStatusTriggered();
     
    /// @brief Field notification receive handler, soaRctnStatus
    void ReceiveFieldsoaRctnStatusCyclic();
     
    /// @brief Read field notification value, soaRctnStatus
    void ReadValuesoaRctnStatus(ara::com::SamplePtr<eevp::monitoring::service::proxy::fields::soaRctnStatus::FieldType const> samplePtr);
     
    /// @brief Regist callback from software component
    void RegistFieldHandlersoaRctnStatus(std::function<void(const eevp::monitoring::service::proxy::fields::soaRctnStatus::FieldType&)> handler);
    
    /// @brief Getter method using by software component, soaRctnStatus
    void GetsoaRctnStatus();
    
    /// @brief Subscribe field notification, soaRctnSwVersion
    void SubscribesoaRctnSwVersion();
     
    /// @brief Stop field subscription, soaRctnSwVersion
    void StopSubscribesoaRctnSwVersion();
     
    /// @brief Field notification receive handler, soaRctnSwVersion
    void ReceiveFieldsoaRctnSwVersionTriggered();
     
    /// @brief Field notification receive handler, soaRctnSwVersion
    void ReceiveFieldsoaRctnSwVersionCyclic();
     
    /// @brief Read field notification value, soaRctnSwVersion
    void ReadValuesoaRctnSwVersion(ara::com::SamplePtr<eevp::monitoring::service::proxy::fields::soaRctnSwVersion::FieldType const> samplePtr);
     
    /// @brief Regist callback from software component
    void RegistFieldHandlersoaRctnSwVersion(std::function<void(const eevp::monitoring::service::proxy::fields::soaRctnSwVersion::FieldType&)> handler);
    
    /// @brief Getter method using by software component, soaRctnSwVersion
    void GetsoaRctnSwVersion();
    
    /// @brief Subscribe field notification, soaRoaDetectState
    void SubscribesoaRoaDetectState();
     
    /// @brief Stop field subscription, soaRoaDetectState
    void StopSubscribesoaRoaDetectState();
     
    /// @brief Field notification receive handler, soaRoaDetectState
    void ReceiveFieldsoaRoaDetectStateTriggered();
     
    /// @brief Field notification receive handler, soaRoaDetectState
    void ReceiveFieldsoaRoaDetectStateCyclic();
     
    /// @brief Read field notification value, soaRoaDetectState
    void ReadValuesoaRoaDetectState(ara::com::SamplePtr<eevp::monitoring::service::proxy::fields::soaRoaDetectState::FieldType const> samplePtr);
     
    /// @brief Regist callback from software component
    void RegistFieldHandlersoaRoaDetectState(std::function<void(const eevp::monitoring::service::proxy::fields::soaRoaDetectState::FieldType&)> handler);
    
    /// @brief Getter method using by software component, soaRoaDetectState
    void GetsoaRoaDetectState();
    
    /// @brief Subscribe field notification, soaRoaDeviceNormal
    void SubscribesoaRoaDeviceNormal();
     
    /// @brief Stop field subscription, soaRoaDeviceNormal
    void StopSubscribesoaRoaDeviceNormal();
     
    /// @brief Field notification receive handler, soaRoaDeviceNormal
    void ReceiveFieldsoaRoaDeviceNormalTriggered();
     
    /// @brief Field notification receive handler, soaRoaDeviceNormal
    void ReceiveFieldsoaRoaDeviceNormalCyclic();
     
    /// @brief Read field notification value, soaRoaDeviceNormal
    void ReadValuesoaRoaDeviceNormal(ara::com::SamplePtr<eevp::monitoring::service::proxy::fields::soaRoaDeviceNormal::FieldType const> samplePtr);
     
    /// @brief Regist callback from software component
    void RegistFieldHandlersoaRoaDeviceNormal(std::function<void(const eevp::monitoring::service::proxy::fields::soaRoaDeviceNormal::FieldType&)> handler);
    
    /// @brief Getter method using by software component, soaRoaDeviceNormal
    void GetsoaRoaDeviceNormal();
    
    /// @brief Subscribe field notification, soaRoaSwVersion
    void SubscribesoaRoaSwVersion();
     
    /// @brief Stop field subscription, soaRoaSwVersion
    void StopSubscribesoaRoaSwVersion();
     
    /// @brief Field notification receive handler, soaRoaSwVersion
    void ReceiveFieldsoaRoaSwVersionTriggered();
     
    /// @brief Field notification receive handler, soaRoaSwVersion
    void ReceiveFieldsoaRoaSwVersionCyclic();
     
    /// @brief Read field notification value, soaRoaSwVersion
    void ReadValuesoaRoaSwVersion(ara::com::SamplePtr<eevp::monitoring::service::proxy::fields::soaRoaSwVersion::FieldType const> samplePtr);
     
    /// @brief Regist callback from software component
    void RegistFieldHandlersoaRoaSwVersion(std::function<void(const eevp::monitoring::service::proxy::fields::soaRoaSwVersion::FieldType&)> handler);
    
    /// @brief Getter method using by software component, soaRoaSwVersion
    void GetsoaRoaSwVersion();
    
    /// @brief Subscribe field notification, soaWiperDeviceNormal
    void SubscribesoaWiperDeviceNormal();
     
    /// @brief Stop field subscription, soaWiperDeviceNormal
    void StopSubscribesoaWiperDeviceNormal();
     
    /// @brief Field notification receive handler, soaWiperDeviceNormal
    void ReceiveFieldsoaWiperDeviceNormalTriggered();
     
    /// @brief Field notification receive handler, soaWiperDeviceNormal
    void ReceiveFieldsoaWiperDeviceNormalCyclic();
     
    /// @brief Read field notification value, soaWiperDeviceNormal
    void ReadValuesoaWiperDeviceNormal(ara::com::SamplePtr<eevp::monitoring::service::proxy::fields::soaWiperDeviceNormal::FieldType const> samplePtr);
     
    /// @brief Regist callback from software component
    void RegistFieldHandlersoaWiperDeviceNormal(std::function<void(const eevp::monitoring::service::proxy::fields::soaWiperDeviceNormal::FieldType&)> handler);
    
    /// @brief Getter method using by software component, soaWiperDeviceNormal
    void GetsoaWiperDeviceNormal();
    
    /// @brief Subscribe field notification, soaWiperStatus
    void SubscribesoaWiperStatus();
     
    /// @brief Stop field subscription, soaWiperStatus
    void StopSubscribesoaWiperStatus();
     
    /// @brief Field notification receive handler, soaWiperStatus
    void ReceiveFieldsoaWiperStatusTriggered();
     
    /// @brief Field notification receive handler, soaWiperStatus
    void ReceiveFieldsoaWiperStatusCyclic();
     
    /// @brief Read field notification value, soaWiperStatus
    void ReadValuesoaWiperStatus(ara::com::SamplePtr<eevp::monitoring::service::proxy::fields::soaWiperStatus::FieldType const> samplePtr);
     
    /// @brief Regist callback from software component
    void RegistFieldHandlersoaWiperStatus(std::function<void(const eevp::monitoring::service::proxy::fields::soaWiperStatus::FieldType&)> handler);
    
    /// @brief Getter method using by software component, soaWiperStatus
    void GetsoaWiperStatus();
    
    /// @brief Subscribe field notification, soaWiperSwVersion
    void SubscribesoaWiperSwVersion();
     
    /// @brief Stop field subscription, soaWiperSwVersion
    void StopSubscribesoaWiperSwVersion();
     
    /// @brief Field notification receive handler, soaWiperSwVersion
    void ReceiveFieldsoaWiperSwVersionTriggered();
     
    /// @brief Field notification receive handler, soaWiperSwVersion
    void ReceiveFieldsoaWiperSwVersionCyclic();
     
    /// @brief Read field notification value, soaWiperSwVersion
    void ReadValuesoaWiperSwVersion(ara::com::SamplePtr<eevp::monitoring::service::proxy::fields::soaWiperSwVersion::FieldType const> samplePtr);
     
    /// @brief Regist callback from software component
    void RegistFieldHandlersoaWiperSwVersion(std::function<void(const eevp::monitoring::service::proxy::fields::soaWiperSwVersion::FieldType&)> handler);
    
    /// @brief Getter method using by software component, soaWiperSwVersion
    void GetsoaWiperSwVersion();
    
    /// @brief Request with Response method using by software component, RequestMlmSetRgbColor
    void RequestRequestMlmSetRgbColor(const std::uint8_t& colorTableIndex);
     
    /// @brief Regist callback from software component
    void RegistResponseHandlerRequestMlmSetRgbColor(std::function<void(const eevp::monitoring::service::proxy::methods::RequestMlmSetRgbColor::Output&)> handler);
    
    /// @brief Request with Response method using by software component, RequestMoveDrvSeatHeight
    void RequestRequestMoveDrvSeatHeight(const eevp::control::SoaSeatHeightDirection& dir);
     
    /// @brief Regist callback from software component
    void RegistResponseHandlerRequestMoveDrvSeatHeight(std::function<void(const eevp::monitoring::service::proxy::methods::RequestMoveDrvSeatHeight::Output&)> handler);
    
    /// @brief Request with Response method using by software component, RequestMoveDrvSeatRecline
    void RequestRequestMoveDrvSeatRecline(const eevp::control::SoaSeatReclineDirection& dir);
     
    /// @brief Regist callback from software component
    void RegistResponseHandlerRequestMoveDrvSeatRecline(std::function<void(const eevp::monitoring::service::proxy::methods::RequestMoveDrvSeatRecline::Output&)> handler);
    
    /// @brief Request with Response method using by software component, RequestMoveDrvSeatSlide
    void RequestRequestMoveDrvSeatSlide(const eevp::control::SoaSeatSlideDirection& dir);
     
    /// @brief Regist callback from software component
    void RegistResponseHandlerRequestMoveDrvSeatSlide(std::function<void(const eevp::monitoring::service::proxy::methods::RequestMoveDrvSeatSlide::Output&)> handler);
    
    /// @brief Request with Response method using by software component, RequestMoveDrvSeatTilt
    void RequestRequestMoveDrvSeatTilt(const eevp::control::SoaSeatTiltDirection& dir);
     
    /// @brief Regist callback from software component
    void RegistResponseHandlerRequestMoveDrvSeatTilt(std::function<void(const eevp::monitoring::service::proxy::methods::RequestMoveDrvSeatTilt::Output&)> handler);
    
    /// @brief Request with Response method using by software component, RequestRearCurtainOperation
    void RequestRequestRearCurtainOperation(const eevp::control::SoaRctnMotorDir& motorDir);
     
    /// @brief Regist callback from software component
    void RegistResponseHandlerRequestRearCurtainOperation(std::function<void(const eevp::monitoring::service::proxy::methods::RequestRearCurtainOperation::Output&)> handler);
    
    /// @brief Request with Response method using by software component, RequestRearCurtainPosition
    void RequestRequestRearCurtainPosition(const std::uint8_t& posPercentage);
     
    /// @brief Regist callback from software component
    void RegistResponseHandlerRequestRearCurtainPosition(std::function<void(const eevp::monitoring::service::proxy::methods::RequestRearCurtainPosition::Output&)> handler);
    
    /// @brief Request with Response method using by software component, RequestWiperOperation
    void RequestRequestWiperOperation(const eevp::control::SoaWiperMode& mode);
     
    /// @brief Regist callback from software component
    void RegistResponseHandlerRequestWiperOperation(std::function<void(const eevp::monitoring::service::proxy::methods::RequestWiperOperation::Output&)> handler);
    
    /// @brief Request with Response method using by software component, SetWiperAutoSpeed
    void RequestSetWiperAutoSpeed(const bool& isAutoSpeed);
     
    /// @brief Regist callback from software component
    void RegistResponseHandlerSetWiperAutoSpeed(std::function<void(const eevp::monitoring::service::proxy::methods::SetWiperAutoSpeed::Output&)> handler);
    
    /// @brief Request with Response method using by software component, requestAppInstall
    void RequestrequestAppInstall(const eevp::type::String& controllerServiceName);
     
    /// @brief Regist callback from software component
    void RegistResponseHandlerrequestAppInstall(std::function<void(const eevp::monitoring::service::proxy::methods::requestAppInstall::Output&)> handler);
    
    /// @brief Request with Response method using by software component, requestAppUpdate
    void RequestrequestAppUpdate(const eevp::type::String& controllerServiceName);
     
    /// @brief Regist callback from software component
    void RegistResponseHandlerrequestAppUpdate(std::function<void(const eevp::monitoring::service::proxy::methods::requestAppUpdate::Output&)> handler);
    
    /// @brief Request with Response method using by software component, requestControllerServiceInfo
    void RequestrequestControllerServiceInfo(const eevp::type::String& controllerServiceName);
     
    /// @brief Regist callback from software component
    void RegistResponseHandlerrequestControllerServiceInfo(std::function<void(const eevp::monitoring::service::proxy::methods::requestControllerServiceInfo::Output&)> handler);
    
    /// @brief Request with Response method using by software component, resetUcmTest
    void RequestresetUcmTest();
     
    /// @brief Regist callback from software component
    void RegistResponseHandlerresetUcmTest(std::function<void(const eevp::monitoring::service::proxy::methods::resetUcmTest::Output&)> handler);
    
private:
    /// @brief Callback for find service
    void Find(ara::com::ServiceHandleContainer<eevp::monitoring::service::proxy::MonitoringManagementProxy::HandleType> handles,
              ara::com::FindServiceHandle findHandle);
    
    /// @brief Callback for event receiver, DistanceLevelFront
    void RegistReceiverDistanceLevelFront();
    
    /// @brief Callback for event receiver, DistanceLevelRear
    void RegistReceiverDistanceLevelRear();
    
    /// @brief Callback for event receiver, MbTempStatus
    void RegistReceiverMbTempStatus();
    
    /// @brief Callback for event receiver, eventServiceInfo
    void RegistReceivereventServiceInfo();
    
    /// @brief Callback for event receiver, eventUpdatableService
    void RegistReceivereventUpdatableService();
    
    /// @brief Callback for event receiver, resetUcmCompleted
    void RegistReceiverresetUcmCompleted();
    
    /// @brief Callback for field notification receiver, UssStatusFront
    void RegistReceiverUssStatusFront();
    
    /// @brief Callback for field notification receiver, UssStatusRear
    void RegistReceiverUssStatusRear();
    
    /// @brief Callback for field notification receiver, soaDmsDeviceNormal
    void RegistReceiversoaDmsDeviceNormal();
    
    /// @brief Callback for field notification receiver, soaDmsSwVersion
    void RegistReceiversoaDmsSwVersion();
    
    /// @brief Callback for field notification receiver, soaDrvSeatDeviceNormal
    void RegistReceiversoaDrvSeatDeviceNormal();
    
    /// @brief Callback for field notification receiver, soaDrvSeatMotorDirection
    void RegistReceiversoaDrvSeatMotorDirection();
    
    /// @brief Callback for field notification receiver, soaDrvSeatMotorPosition
    void RegistReceiversoaDrvSeatMotorPosition();
    
    /// @brief Callback for field notification receiver, soaDrvSeatSwVersion
    void RegistReceiversoaDrvSeatSwVersion();
    
    /// @brief Callback for field notification receiver, soaFilmDeviceNormal
    void RegistReceiversoaFilmDeviceNormal();
    
    /// @brief Callback for field notification receiver, soaFilmSwVersion
    void RegistReceiversoaFilmSwVersion();
    
    /// @brief Callback for field notification receiver, soaHvacDeviceNormal
    void RegistReceiversoaHvacDeviceNormal();
    
    /// @brief Callback for field notification receiver, soaHvacSwVersion
    void RegistReceiversoaHvacSwVersion();
    
    /// @brief Callback for field notification receiver, soaMlmStatus
    void RegistReceiversoaMlmStatus();
    
    /// @brief Callback for field notification receiver, soaMlmSwVersion
    void RegistReceiversoaMlmSwVersion();
    
    /// @brief Callback for field notification receiver, soaPowerDeviceNormal
    void RegistReceiversoaPowerDeviceNormal();
    
    /// @brief Callback for field notification receiver, soaPowerSwVersion
    void RegistReceiversoaPowerSwVersion();
    
    /// @brief Callback for field notification receiver, soaRctnStatus
    void RegistReceiversoaRctnStatus();
    
    /// @brief Callback for field notification receiver, soaRctnSwVersion
    void RegistReceiversoaRctnSwVersion();
    
    /// @brief Callback for field notification receiver, soaRoaDetectState
    void RegistReceiversoaRoaDetectState();
    
    /// @brief Callback for field notification receiver, soaRoaDeviceNormal
    void RegistReceiversoaRoaDeviceNormal();
    
    /// @brief Callback for field notification receiver, soaRoaSwVersion
    void RegistReceiversoaRoaSwVersion();
    
    /// @brief Callback for field notification receiver, soaWiperDeviceNormal
    void RegistReceiversoaWiperDeviceNormal();
    
    /// @brief Callback for field notification receiver, soaWiperStatus
    void RegistReceiversoaWiperStatus();
    
    /// @brief Callback for field notification receiver, soaWiperSwVersion
    void RegistReceiversoaWiperSwVersion();
    
private:
    /// @brief Logger for this port
    ara::log::Logger& m_logger;
    
    /// @brief Flag of port status
    bool m_running;
    
    /// @brief Flag of find service status
    bool m_found;
    
    /// @brief Mutex for this port
    std::mutex m_mutex; 
    
    /// @brief AUTOSAR Port Interface
    std::unique_ptr<eevp::monitoring::service::proxy::MonitoringManagementProxy> m_interface;
    
    /// @brief Find service handle
    std::unique_ptr<ara::com::FindServiceHandle> m_findHandle;
    
    /// @brief Callback from software component, DistanceLevelFront
    std::function<void(const eevp::monitoring::service::proxy::events::DistanceLevelFront::SampleType&)> m_receiverDistanceLevelFront;
    
    /// @brief Callback from software component, DistanceLevelRear
    std::function<void(const eevp::monitoring::service::proxy::events::DistanceLevelRear::SampleType&)> m_receiverDistanceLevelRear;
    
    /// @brief Callback from software component, MbTempStatus
    std::function<void(const eevp::monitoring::service::proxy::events::MbTempStatus::SampleType&)> m_receiverMbTempStatus;
    
    /// @brief Callback from software component, eventServiceInfo
    std::function<void(const eevp::monitoring::service::proxy::events::eventServiceInfo::SampleType&)> m_receivereventServiceInfo;
    
    /// @brief Callback from software component, eventUpdatableService
    std::function<void(const eevp::monitoring::service::proxy::events::eventUpdatableService::SampleType&)> m_receivereventUpdatableService;
    
    /// @brief Callback from software component, resetUcmCompleted
    std::function<void(const eevp::monitoring::service::proxy::events::resetUcmCompleted::SampleType&)> m_receiverresetUcmCompleted;
    
    /// @brief Callback from software component, UssStatusFront
    std::function<void(const eevp::monitoring::service::proxy::fields::UssStatusFront::FieldType&)> m_receiverUssStatusFront;
    
    /// @brief Callback from software component, UssStatusRear
    std::function<void(const eevp::monitoring::service::proxy::fields::UssStatusRear::FieldType&)> m_receiverUssStatusRear;
    
    /// @brief Callback from software component, soaDmsDeviceNormal
    std::function<void(const eevp::monitoring::service::proxy::fields::soaDmsDeviceNormal::FieldType&)> m_receiversoaDmsDeviceNormal;
    
    /// @brief Callback from software component, soaDmsSwVersion
    std::function<void(const eevp::monitoring::service::proxy::fields::soaDmsSwVersion::FieldType&)> m_receiversoaDmsSwVersion;
    
    /// @brief Callback from software component, soaDrvSeatDeviceNormal
    std::function<void(const eevp::monitoring::service::proxy::fields::soaDrvSeatDeviceNormal::FieldType&)> m_receiversoaDrvSeatDeviceNormal;
    
    /// @brief Callback from software component, soaDrvSeatMotorDirection
    std::function<void(const eevp::monitoring::service::proxy::fields::soaDrvSeatMotorDirection::FieldType&)> m_receiversoaDrvSeatMotorDirection;
    
    /// @brief Callback from software component, soaDrvSeatMotorPosition
    std::function<void(const eevp::monitoring::service::proxy::fields::soaDrvSeatMotorPosition::FieldType&)> m_receiversoaDrvSeatMotorPosition;
    
    /// @brief Callback from software component, soaDrvSeatSwVersion
    std::function<void(const eevp::monitoring::service::proxy::fields::soaDrvSeatSwVersion::FieldType&)> m_receiversoaDrvSeatSwVersion;
    
    /// @brief Callback from software component, soaFilmDeviceNormal
    std::function<void(const eevp::monitoring::service::proxy::fields::soaFilmDeviceNormal::FieldType&)> m_receiversoaFilmDeviceNormal;
    
    /// @brief Callback from software component, soaFilmSwVersion
    std::function<void(const eevp::monitoring::service::proxy::fields::soaFilmSwVersion::FieldType&)> m_receiversoaFilmSwVersion;
    
    /// @brief Callback from software component, soaHvacDeviceNormal
    std::function<void(const eevp::monitoring::service::proxy::fields::soaHvacDeviceNormal::FieldType&)> m_receiversoaHvacDeviceNormal;
    
    /// @brief Callback from software component, soaHvacSwVersion
    std::function<void(const eevp::monitoring::service::proxy::fields::soaHvacSwVersion::FieldType&)> m_receiversoaHvacSwVersion;
    
    /// @brief Callback from software component, soaMlmStatus
    std::function<void(const eevp::monitoring::service::proxy::fields::soaMlmStatus::FieldType&)> m_receiversoaMlmStatus;
    
    /// @brief Callback from software component, soaMlmSwVersion
    std::function<void(const eevp::monitoring::service::proxy::fields::soaMlmSwVersion::FieldType&)> m_receiversoaMlmSwVersion;
    
    /// @brief Callback from software component, soaPowerDeviceNormal
    std::function<void(const eevp::monitoring::service::proxy::fields::soaPowerDeviceNormal::FieldType&)> m_receiversoaPowerDeviceNormal;
    
    /// @brief Callback from software component, soaPowerSwVersion
    std::function<void(const eevp::monitoring::service::proxy::fields::soaPowerSwVersion::FieldType&)> m_receiversoaPowerSwVersion;
    
    /// @brief Callback from software component, soaRctnStatus
    std::function<void(const eevp::monitoring::service::proxy::fields::soaRctnStatus::FieldType&)> m_receiversoaRctnStatus;
    
    /// @brief Callback from software component, soaRctnSwVersion
    std::function<void(const eevp::monitoring::service::proxy::fields::soaRctnSwVersion::FieldType&)> m_receiversoaRctnSwVersion;
    
    /// @brief Callback from software component, soaRoaDetectState
    std::function<void(const eevp::monitoring::service::proxy::fields::soaRoaDetectState::FieldType&)> m_receiversoaRoaDetectState;
    
    /// @brief Callback from software component, soaRoaDeviceNormal
    std::function<void(const eevp::monitoring::service::proxy::fields::soaRoaDeviceNormal::FieldType&)> m_receiversoaRoaDeviceNormal;
    
    /// @brief Callback from software component, soaRoaSwVersion
    std::function<void(const eevp::monitoring::service::proxy::fields::soaRoaSwVersion::FieldType&)> m_receiversoaRoaSwVersion;
    
    /// @brief Callback from software component, soaWiperDeviceNormal
    std::function<void(const eevp::monitoring::service::proxy::fields::soaWiperDeviceNormal::FieldType&)> m_receiversoaWiperDeviceNormal;
    
    /// @brief Callback from software component, soaWiperStatus
    std::function<void(const eevp::monitoring::service::proxy::fields::soaWiperStatus::FieldType&)> m_receiversoaWiperStatus;
    
    /// @brief Callback from software component, soaWiperSwVersion
    std::function<void(const eevp::monitoring::service::proxy::fields::soaWiperSwVersion::FieldType&)> m_receiversoaWiperSwVersion;
    
    /// @brief Callback from software component, RequestMlmSetRgbColor
    std::function<void(const eevp::monitoring::service::proxy::methods::RequestMlmSetRgbColor::Output&)> m_responderRequestMlmSetRgbColor;
    
    /// @brief Callback from software component, RequestMoveDrvSeatHeight
    std::function<void(const eevp::monitoring::service::proxy::methods::RequestMoveDrvSeatHeight::Output&)> m_responderRequestMoveDrvSeatHeight;
    
    /// @brief Callback from software component, RequestMoveDrvSeatRecline
    std::function<void(const eevp::monitoring::service::proxy::methods::RequestMoveDrvSeatRecline::Output&)> m_responderRequestMoveDrvSeatRecline;
    
    /// @brief Callback from software component, RequestMoveDrvSeatSlide
    std::function<void(const eevp::monitoring::service::proxy::methods::RequestMoveDrvSeatSlide::Output&)> m_responderRequestMoveDrvSeatSlide;
    
    /// @brief Callback from software component, RequestMoveDrvSeatTilt
    std::function<void(const eevp::monitoring::service::proxy::methods::RequestMoveDrvSeatTilt::Output&)> m_responderRequestMoveDrvSeatTilt;
    
    /// @brief Callback from software component, RequestRearCurtainOperation
    std::function<void(const eevp::monitoring::service::proxy::methods::RequestRearCurtainOperation::Output&)> m_responderRequestRearCurtainOperation;
    
    /// @brief Callback from software component, RequestRearCurtainPosition
    std::function<void(const eevp::monitoring::service::proxy::methods::RequestRearCurtainPosition::Output&)> m_responderRequestRearCurtainPosition;
    
    /// @brief Callback from software component, RequestWiperOperation
    std::function<void(const eevp::monitoring::service::proxy::methods::RequestWiperOperation::Output&)> m_responderRequestWiperOperation;
    
    /// @brief Callback from software component, SetWiperAutoSpeed
    std::function<void(const eevp::monitoring::service::proxy::methods::SetWiperAutoSpeed::Output&)> m_responderSetWiperAutoSpeed;
    
    /// @brief Callback from software component, requestAppInstall
    std::function<void(const eevp::monitoring::service::proxy::methods::requestAppInstall::Output&)> m_responderrequestAppInstall;
    
    /// @brief Callback from software component, requestAppUpdate
    std::function<void(const eevp::monitoring::service::proxy::methods::requestAppUpdate::Output&)> m_responderrequestAppUpdate;
    
    /// @brief Callback from software component, requestControllerServiceInfo
    std::function<void(const eevp::monitoring::service::proxy::methods::requestControllerServiceInfo::Output&)> m_responderrequestControllerServiceInfo;
    
    /// @brief Callback from software component, resetUcmTest
    std::function<void(const eevp::monitoring::service::proxy::methods::resetUcmTest::Output&)> m_responderresetUcmTest;
};
 
} /// namespace port
} /// namespace ivi
} /// namespace ivi_monitoringapp
 
#endif /// PARA_AA_GEN_SOFTWARE_COMPONENT_RPORT_IVI_MONITORINGAPP_IVI_RPORTMONITORINGMANAGEMENT_H