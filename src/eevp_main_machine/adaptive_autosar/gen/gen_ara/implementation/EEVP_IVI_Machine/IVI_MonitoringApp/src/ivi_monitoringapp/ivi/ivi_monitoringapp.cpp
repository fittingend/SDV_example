///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : ivi_monitoringapp.cpp
/// SOFTWARE COMPONENT NAME           : IVI_MonitoringApp
/// GENERATED DATE                    : 2025-08-30 10:53:52
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// INCLUSION HEADER FILES
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "ivi_monitoringapp/ivi/ivi_monitoringapp.h"
 
namespace ivi_monitoringapp
{
namespace ivi
{
 
IVI_MonitoringApp::IVI_MonitoringApp()
    : m_logger(ara::log::CreateLogger("DFLT", "SWC", ara::log::LogLevel::kVerbose))
    , m_running{false}
    , m_workers(33)
{
}
 
IVI_MonitoringApp::~IVI_MonitoringApp()
{
}
 
bool IVI_MonitoringApp::Initialize()
{
    m_logger.LogVerbose() << "IVI_MonitoringApp::Initialize";
    
    bool init = true;
    
    m_PPortStateManager = std::make_unique<ivi_monitoringapp::ivi::port::PPortStateManager>();
    m_RPortMonitoringManagement = std::make_unique<ivi_monitoringapp::ivi::port::RPortMonitoringManagement>();
    
    // put your code for initialization
    
    return init;
}
 
void IVI_MonitoringApp::Start()
{
    m_logger.LogVerbose() << "IVI_MonitoringApp::Start";
    
    m_PPortStateManager->Start();
    m_RPortMonitoringManagement->Start();
}
 
void IVI_MonitoringApp::Terminate()
{
    m_logger.LogVerbose() << "IVI_MonitoringApp::Terminate";
    
    // stop running
    m_running = false;
    
    m_PPortStateManager->Terminate();
    m_RPortMonitoringManagement->Terminate();
}
 
void IVI_MonitoringApp::Run()
{
    m_logger.LogVerbose() << "IVI_MonitoringApp::Run";
    
    // start running
    m_running = true;
    
    m_workers.Async([this] { m_PPortStateManager->SendEventNotifySystemStateCyclic(); });
    m_workers.Async([this] { m_PPortStateManager->NotifyFieldNotifyTimeCyclic(); });
    m_workers.Async([this] { m_PPortStateManager->NotifyFieldSystemStateCyclic(); });
    m_workers.Async([this] { m_RPortMonitoringManagement->ReceiveEventDistanceLevelFrontCyclic(); });
    m_workers.Async([this] { m_RPortMonitoringManagement->ReceiveEventDistanceLevelRearCyclic(); });
    m_workers.Async([this] { m_RPortMonitoringManagement->ReceiveEventMbTempStatusCyclic(); });
    m_workers.Async([this] { m_RPortMonitoringManagement->ReceiveEventeventServiceInfoCyclic(); });
    m_workers.Async([this] { m_RPortMonitoringManagement->ReceiveEventeventUpdatableServiceCyclic(); });
    m_workers.Async([this] { m_RPortMonitoringManagement->ReceiveEventresetUcmCompletedCyclic(); });
    m_workers.Async([this] { m_RPortMonitoringManagement->ReceiveFieldUssStatusFrontCyclic(); });
    m_workers.Async([this] { m_RPortMonitoringManagement->ReceiveFieldUssStatusRearCyclic(); });
    m_workers.Async([this] { m_RPortMonitoringManagement->ReceiveFieldsoaDmsDeviceNormalCyclic(); });
    m_workers.Async([this] { m_RPortMonitoringManagement->ReceiveFieldsoaDmsSwVersionCyclic(); });
    m_workers.Async([this] { m_RPortMonitoringManagement->ReceiveFieldsoaDrvSeatDeviceNormalCyclic(); });
    m_workers.Async([this] { m_RPortMonitoringManagement->ReceiveFieldsoaDrvSeatMotorDirectionCyclic(); });
    m_workers.Async([this] { m_RPortMonitoringManagement->ReceiveFieldsoaDrvSeatMotorPositionCyclic(); });
    m_workers.Async([this] { m_RPortMonitoringManagement->ReceiveFieldsoaDrvSeatSwVersionCyclic(); });
    m_workers.Async([this] { m_RPortMonitoringManagement->ReceiveFieldsoaFilmDeviceNormalCyclic(); });
    m_workers.Async([this] { m_RPortMonitoringManagement->ReceiveFieldsoaFilmSwVersionCyclic(); });
    m_workers.Async([this] { m_RPortMonitoringManagement->ReceiveFieldsoaHvacDeviceNormalCyclic(); });
    m_workers.Async([this] { m_RPortMonitoringManagement->ReceiveFieldsoaHvacSwVersionCyclic(); });
    m_workers.Async([this] { m_RPortMonitoringManagement->ReceiveFieldsoaMlmStatusCyclic(); });
    m_workers.Async([this] { m_RPortMonitoringManagement->ReceiveFieldsoaMlmSwVersionCyclic(); });
    m_workers.Async([this] { m_RPortMonitoringManagement->ReceiveFieldsoaPowerDeviceNormalCyclic(); });
    m_workers.Async([this] { m_RPortMonitoringManagement->ReceiveFieldsoaPowerSwVersionCyclic(); });
    m_workers.Async([this] { m_RPortMonitoringManagement->ReceiveFieldsoaRctnStatusCyclic(); });
    m_workers.Async([this] { m_RPortMonitoringManagement->ReceiveFieldsoaRctnSwVersionCyclic(); });
    m_workers.Async([this] { m_RPortMonitoringManagement->ReceiveFieldsoaRoaDetectStateCyclic(); });
    m_workers.Async([this] { m_RPortMonitoringManagement->ReceiveFieldsoaRoaDeviceNormalCyclic(); });
    m_workers.Async([this] { m_RPortMonitoringManagement->ReceiveFieldsoaRoaSwVersionCyclic(); });
    m_workers.Async([this] { m_RPortMonitoringManagement->ReceiveFieldsoaWiperDeviceNormalCyclic(); });
    m_workers.Async([this] { m_RPortMonitoringManagement->ReceiveFieldsoaWiperStatusCyclic(); });
    m_workers.Async([this] { m_RPortMonitoringManagement->ReceiveFieldsoaWiperSwVersionCyclic(); });
    
    m_workers.Wait();
}
 
} /// namespace ivi
} /// namespace ivi_monitoringapp
