///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : rportmonitoringmanagement.cpp
/// SOFTWARE COMPONENT NAME           : RPortMonitoringManagement
/// GENERATED DATE                    : 2025-08-30 10:53:52
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "ivi_monitoringapp/ivi/port/rportmonitoringmanagement.h"
 
namespace ivi_monitoringapp
{
namespace ivi
{
namespace port
{
 
RPortMonitoringManagement::RPortMonitoringManagement()
    : m_logger(ara::log::CreateLogger("DFLT", "PORT", ara::log::LogLevel::kVerbose))
    , m_running{false}
    , m_found{false}
    , m_receiverDistanceLevelFront{nullptr}
    , m_receiverDistanceLevelRear{nullptr}
    , m_receiverMbTempStatus{nullptr}
    , m_receivereventServiceInfo{nullptr}
    , m_receivereventUpdatableService{nullptr}
    , m_receiverresetUcmCompleted{nullptr}
    , m_receiverUssStatusFront{nullptr}
    , m_receiverUssStatusRear{nullptr}
    , m_receiversoaDmsDeviceNormal{nullptr}
    , m_receiversoaDmsSwVersion{nullptr}
    , m_receiversoaDrvSeatDeviceNormal{nullptr}
    , m_receiversoaDrvSeatMotorDirection{nullptr}
    , m_receiversoaDrvSeatMotorPosition{nullptr}
    , m_receiversoaDrvSeatSwVersion{nullptr}
    , m_receiversoaFilmDeviceNormal{nullptr}
    , m_receiversoaFilmSwVersion{nullptr}
    , m_receiversoaHvacDeviceNormal{nullptr}
    , m_receiversoaHvacSwVersion{nullptr}
    , m_receiversoaMlmStatus{nullptr}
    , m_receiversoaMlmSwVersion{nullptr}
    , m_receiversoaPowerDeviceNormal{nullptr}
    , m_receiversoaPowerSwVersion{nullptr}
    , m_receiversoaRctnStatus{nullptr}
    , m_receiversoaRctnSwVersion{nullptr}
    , m_receiversoaRoaDetectState{nullptr}
    , m_receiversoaRoaDeviceNormal{nullptr}
    , m_receiversoaRoaSwVersion{nullptr}
    , m_receiversoaWiperDeviceNormal{nullptr}
    , m_receiversoaWiperStatus{nullptr}
    , m_receiversoaWiperSwVersion{nullptr}
    , m_responderRequestMlmSetRgbColor{nullptr}
    , m_responderRequestMoveDrvSeatHeight{nullptr}
    , m_responderRequestMoveDrvSeatRecline{nullptr}
    , m_responderRequestMoveDrvSeatSlide{nullptr}
    , m_responderRequestMoveDrvSeatTilt{nullptr}
    , m_responderRequestRearCurtainOperation{nullptr}
    , m_responderRequestRearCurtainPosition{nullptr}
    , m_responderRequestWiperOperation{nullptr}
    , m_responderSetWiperAutoSpeed{nullptr}
    , m_responderrequestAppInstall{nullptr}
    , m_responderrequestAppUpdate{nullptr}
    , m_responderrequestControllerServiceInfo{nullptr}
    , m_responderresetUcmTest{nullptr}
{
}
 
RPortMonitoringManagement::~RPortMonitoringManagement()
{
}
 
void RPortMonitoringManagement::Start()
{
    m_logger.LogVerbose() << "RPortMonitoringManagement::Start";
    
    // regist callback
    ara::core::InstanceSpecifier specifier{"IVI_MonitoringApp/IVI/RPortMonitoringManagement"};
    auto handler = [this](ara::com::ServiceHandleContainer<eevp::monitoring::service::proxy::MonitoringManagementProxy::HandleType> handles,
                          ara::com::FindServiceHandle findHandle) {
        this->Find(handles, findHandle);
    };
    
    // find service
    auto find = eevp::monitoring::service::proxy::MonitoringManagementProxy::StartFindService(handler, specifier);
    if (find.HasValue())
    {
        m_logger.LogVerbose() << "RPortMonitoringManagement::Start::StartFindService";
    }
    else
    {
        m_logger.LogError() << "RPortMonitoringManagement::Start::StartFindService::" << find.Error().Message();
    }
    
    // run port
    m_running = true;
}
 
void RPortMonitoringManagement::Terminate()
{
    m_logger.LogVerbose() << "RPortMonitoringManagement::Terminate";
    
    // stop port
    m_running = false;
    
    // clear service proxy
    if (m_interface)
    {
        // stop subscribe
        StopSubscribeDistanceLevelFront();
        StopSubscribeDistanceLevelRear();
        StopSubscribeMbTempStatus();
        StopSubscribeeventServiceInfo();
        StopSubscribeeventUpdatableService();
        StopSubscriberesetUcmCompleted();
        StopSubscribeUssStatusFront();
        StopSubscribeUssStatusRear();
        StopSubscribesoaDmsDeviceNormal();
        StopSubscribesoaDmsSwVersion();
        StopSubscribesoaDrvSeatDeviceNormal();
        StopSubscribesoaDrvSeatMotorDirection();
        StopSubscribesoaDrvSeatMotorPosition();
        StopSubscribesoaDrvSeatSwVersion();
        StopSubscribesoaFilmDeviceNormal();
        StopSubscribesoaFilmSwVersion();
        StopSubscribesoaHvacDeviceNormal();
        StopSubscribesoaHvacSwVersion();
        StopSubscribesoaMlmStatus();
        StopSubscribesoaMlmSwVersion();
        StopSubscribesoaPowerDeviceNormal();
        StopSubscribesoaPowerSwVersion();
        StopSubscribesoaRctnStatus();
        StopSubscribesoaRctnSwVersion();
        StopSubscribesoaRoaDetectState();
        StopSubscribesoaRoaDeviceNormal();
        StopSubscribesoaRoaSwVersion();
        StopSubscribesoaWiperDeviceNormal();
        StopSubscribesoaWiperStatus();
        StopSubscribesoaWiperSwVersion();
        
        // stop find service
        m_interface->StopFindService(*m_findHandle);
        m_found = false;
        
        m_logger.LogVerbose() << "RPortMonitoringManagement::Terminate::StopFindService";
    }
}
 
void RPortMonitoringManagement::Find(ara::com::ServiceHandleContainer<eevp::monitoring::service::proxy::MonitoringManagementProxy::HandleType> handles, ara::com::FindServiceHandle findHandle)
{
    // check finding handles
    if (handles.empty())
    {
        m_logger.LogVerbose() << "RPortMonitoringManagement::Find::Service Instances not found";
        return;
    }
    else
    {
        for (auto& handle : handles)
        {
            m_logger.LogVerbose() << "RPortMonitoringManagement::Find::Searched Instance::ServiceId =" << 
                                     handle.GetServiceHandle().serviceId << 
                                     ", InstanceId =" << 
                                     handle.GetServiceHandle().instanceId;
        }
    }
    
    // create proxy
    if (m_interface)
    {
        m_logger.LogVerbose() << "RPortMonitoringManagement::Find::Proxy is already running";
    }
    else
    {
        m_logger.LogVerbose() << "RPortMonitoringManagement::Find::Using Instance::ServiceId =" << 
                                 handles[0].GetServiceHandle().serviceId << 
                                 ", InstanceId =" << 
                                 handles[0].GetServiceHandle().instanceId;
        m_interface = std::make_unique<eevp::monitoring::service::proxy::MonitoringManagementProxy>(handles[0]);
        m_findHandle = std::make_unique<ara::com::FindServiceHandle>(findHandle);
        m_found = true;
        
        // subscribe events
        SubscribeDistanceLevelFront();
        SubscribeDistanceLevelRear();
        SubscribeMbTempStatus();
        SubscribeeventServiceInfo();
        SubscribeeventUpdatableService();
        SubscriberesetUcmCompleted();
        // subscribe field notifications
        SubscribeUssStatusFront();
        SubscribeUssStatusRear();
        SubscribesoaDmsDeviceNormal();
        SubscribesoaDmsSwVersion();
        SubscribesoaDrvSeatDeviceNormal();
        SubscribesoaDrvSeatMotorDirection();
        SubscribesoaDrvSeatMotorPosition();
        SubscribesoaDrvSeatSwVersion();
        SubscribesoaFilmDeviceNormal();
        SubscribesoaFilmSwVersion();
        SubscribesoaHvacDeviceNormal();
        SubscribesoaHvacSwVersion();
        SubscribesoaMlmStatus();
        SubscribesoaMlmSwVersion();
        SubscribesoaPowerDeviceNormal();
        SubscribesoaPowerSwVersion();
        SubscribesoaRctnStatus();
        SubscribesoaRctnSwVersion();
        SubscribesoaRoaDetectState();
        SubscribesoaRoaDeviceNormal();
        SubscribesoaRoaSwVersion();
        SubscribesoaWiperDeviceNormal();
        SubscribesoaWiperStatus();
        SubscribesoaWiperSwVersion();
    }
}
 
void RPortMonitoringManagement::SubscribeDistanceLevelFront()
{
    if (m_found)
    {
        // regist receiver handler
        // if you want to enable it, please uncomment below code
        // RegistReceiverDistanceLevelFront();
        
        // request subscribe
        auto subscribe = m_interface->DistanceLevelFront.Subscribe(1);
        if (subscribe.HasValue())
        {
            m_logger.LogVerbose() << "RPortMonitoringManagement::SubscribeDistanceLevelFront::Subscribed";
        }
        else
        {
            m_logger.LogError() << "RPortMonitoringManagement::SubscribeDistanceLevelFront::" << subscribe.Error().Message();
        }
    }
}
 
void RPortMonitoringManagement::StopSubscribeDistanceLevelFront()
{
    if (m_found)
    {
        // request stop subscribe
        m_interface->DistanceLevelFront.Unsubscribe();
        m_logger.LogVerbose() << "RPortMonitoringManagement::StopSubscribeDistanceLevelFront::Unsubscribed";
    }
}
 
void RPortMonitoringManagement::RegistReceiverDistanceLevelFront()
{
    if (m_found)
    {
        // set callback
        auto receiver = [this]() -> void {
            return ReceiveEventDistanceLevelFrontTriggered();
        };
        
        // regist callback
        auto callback = m_interface->DistanceLevelFront.SetReceiveHandler(receiver);
        if (callback.HasValue())
        {
            m_logger.LogVerbose() << "RPortMonitoringManagement::RegistReceiverDistanceLevelFront::SetReceiveHandler";
        }
        else
        {
            m_logger.LogError() << "RPortMonitoringManagement::RegistReceiverDistanceLevelFront::SetReceiveHandler::" << callback.Error().Message();
        }
    }
}
 
void RPortMonitoringManagement::ReceiveEventDistanceLevelFrontTriggered()
{
    if (m_found)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_interface->DistanceLevelFront.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
        {
            auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->DistanceLevelFront.GetNewSamples([&](auto samplePtr) {
                RPortMonitoringManagement::ReadDataDistanceLevelFront(std::move(samplePtr));
            }));
            if (recv->HasValue())
            {
                m_logger.LogVerbose() << "RPortMonitoringManagement::ReceiveEventDistanceLevelFront::GetNewSamples::" << recv->Value();
            }
            else
            {
                m_logger.LogError() << "RPortMonitoringManagement::ReceiveEventDistanceLevelFront::GetNewSamples::" << recv->Error().Message();
            }
        }
    }
}
 
void RPortMonitoringManagement::ReceiveEventDistanceLevelFrontCyclic()
{
    while (m_running)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_found)
        {
            if (m_interface->DistanceLevelFront.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
            {
                auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->DistanceLevelFront.GetNewSamples([&](auto samplePtr) {
                    RPortMonitoringManagement::ReadDataDistanceLevelFront(std::move(samplePtr));
                }));
                if (recv->HasValue())
                {
                    m_logger.LogVerbose() << "RPortMonitoringManagement::ReceiveEventDistanceLevelFront::GetNewSamples::" << recv->Value();
                }
                else
                {
                    m_logger.LogError() << "RPortMonitoringManagement::ReceiveEventDistanceLevelFront::GetNewSamples::" << recv->Error().Message();
                }
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void RPortMonitoringManagement::ReadDataDistanceLevelFront(ara::com::SamplePtr<eevp::monitoring::service::proxy::events::DistanceLevelFront::SampleType const> samplePtr)
{
    auto data = *samplePtr.Get();
    if (m_receiverDistanceLevelFront)
    {
        m_receiverDistanceLevelFront(data);
    }
}
 
void RPortMonitoringManagement::RegistEventHandlerDistanceLevelFront(std::function<void(const eevp::monitoring::service::proxy::events::DistanceLevelFront::SampleType&)> handler)
{
    m_receiverDistanceLevelFront = handler;
}
 
void RPortMonitoringManagement::SubscribeDistanceLevelRear()
{
    if (m_found)
    {
        // regist receiver handler
        // if you want to enable it, please uncomment below code
        // RegistReceiverDistanceLevelRear();
        
        // request subscribe
        auto subscribe = m_interface->DistanceLevelRear.Subscribe(1);
        if (subscribe.HasValue())
        {
            m_logger.LogVerbose() << "RPortMonitoringManagement::SubscribeDistanceLevelRear::Subscribed";
        }
        else
        {
            m_logger.LogError() << "RPortMonitoringManagement::SubscribeDistanceLevelRear::" << subscribe.Error().Message();
        }
    }
}
 
void RPortMonitoringManagement::StopSubscribeDistanceLevelRear()
{
    if (m_found)
    {
        // request stop subscribe
        m_interface->DistanceLevelRear.Unsubscribe();
        m_logger.LogVerbose() << "RPortMonitoringManagement::StopSubscribeDistanceLevelRear::Unsubscribed";
    }
}
 
void RPortMonitoringManagement::RegistReceiverDistanceLevelRear()
{
    if (m_found)
    {
        // set callback
        auto receiver = [this]() -> void {
            return ReceiveEventDistanceLevelRearTriggered();
        };
        
        // regist callback
        auto callback = m_interface->DistanceLevelRear.SetReceiveHandler(receiver);
        if (callback.HasValue())
        {
            m_logger.LogVerbose() << "RPortMonitoringManagement::RegistReceiverDistanceLevelRear::SetReceiveHandler";
        }
        else
        {
            m_logger.LogError() << "RPortMonitoringManagement::RegistReceiverDistanceLevelRear::SetReceiveHandler::" << callback.Error().Message();
        }
    }
}
 
void RPortMonitoringManagement::ReceiveEventDistanceLevelRearTriggered()
{
    if (m_found)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_interface->DistanceLevelRear.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
        {
            auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->DistanceLevelRear.GetNewSamples([&](auto samplePtr) {
                RPortMonitoringManagement::ReadDataDistanceLevelRear(std::move(samplePtr));
            }));
            if (recv->HasValue())
            {
                m_logger.LogVerbose() << "RPortMonitoringManagement::ReceiveEventDistanceLevelRear::GetNewSamples::" << recv->Value();
            }
            else
            {
                m_logger.LogError() << "RPortMonitoringManagement::ReceiveEventDistanceLevelRear::GetNewSamples::" << recv->Error().Message();
            }
        }
    }
}
 
void RPortMonitoringManagement::ReceiveEventDistanceLevelRearCyclic()
{
    while (m_running)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_found)
        {
            if (m_interface->DistanceLevelRear.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
            {
                auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->DistanceLevelRear.GetNewSamples([&](auto samplePtr) {
                    RPortMonitoringManagement::ReadDataDistanceLevelRear(std::move(samplePtr));
                }));
                if (recv->HasValue())
                {
                    m_logger.LogVerbose() << "RPortMonitoringManagement::ReceiveEventDistanceLevelRear::GetNewSamples::" << recv->Value();
                }
                else
                {
                    m_logger.LogError() << "RPortMonitoringManagement::ReceiveEventDistanceLevelRear::GetNewSamples::" << recv->Error().Message();
                }
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void RPortMonitoringManagement::ReadDataDistanceLevelRear(ara::com::SamplePtr<eevp::monitoring::service::proxy::events::DistanceLevelRear::SampleType const> samplePtr)
{
    auto data = *samplePtr.Get();
    if (m_receiverDistanceLevelRear)
    {
        m_receiverDistanceLevelRear(data);
    }
}
 
void RPortMonitoringManagement::RegistEventHandlerDistanceLevelRear(std::function<void(const eevp::monitoring::service::proxy::events::DistanceLevelRear::SampleType&)> handler)
{
    m_receiverDistanceLevelRear = handler;
}
 
void RPortMonitoringManagement::SubscribeMbTempStatus()
{
    if (m_found)
    {
        // regist receiver handler
        // if you want to enable it, please uncomment below code
        // RegistReceiverMbTempStatus();
        
        // request subscribe
        auto subscribe = m_interface->MbTempStatus.Subscribe(1);
        if (subscribe.HasValue())
        {
            m_logger.LogVerbose() << "RPortMonitoringManagement::SubscribeMbTempStatus::Subscribed";
        }
        else
        {
            m_logger.LogError() << "RPortMonitoringManagement::SubscribeMbTempStatus::" << subscribe.Error().Message();
        }
    }
}
 
void RPortMonitoringManagement::StopSubscribeMbTempStatus()
{
    if (m_found)
    {
        // request stop subscribe
        m_interface->MbTempStatus.Unsubscribe();
        m_logger.LogVerbose() << "RPortMonitoringManagement::StopSubscribeMbTempStatus::Unsubscribed";
    }
}
 
void RPortMonitoringManagement::RegistReceiverMbTempStatus()
{
    if (m_found)
    {
        // set callback
        auto receiver = [this]() -> void {
            return ReceiveEventMbTempStatusTriggered();
        };
        
        // regist callback
        auto callback = m_interface->MbTempStatus.SetReceiveHandler(receiver);
        if (callback.HasValue())
        {
            m_logger.LogVerbose() << "RPortMonitoringManagement::RegistReceiverMbTempStatus::SetReceiveHandler";
        }
        else
        {
            m_logger.LogError() << "RPortMonitoringManagement::RegistReceiverMbTempStatus::SetReceiveHandler::" << callback.Error().Message();
        }
    }
}
 
void RPortMonitoringManagement::ReceiveEventMbTempStatusTriggered()
{
    if (m_found)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_interface->MbTempStatus.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
        {
            auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->MbTempStatus.GetNewSamples([&](auto samplePtr) {
                RPortMonitoringManagement::ReadDataMbTempStatus(std::move(samplePtr));
            }));
            if (recv->HasValue())
            {
                m_logger.LogVerbose() << "RPortMonitoringManagement::ReceiveEventMbTempStatus::GetNewSamples::" << recv->Value();
            }
            else
            {
                m_logger.LogError() << "RPortMonitoringManagement::ReceiveEventMbTempStatus::GetNewSamples::" << recv->Error().Message();
            }
        }
    }
}
 
void RPortMonitoringManagement::ReceiveEventMbTempStatusCyclic()
{
    while (m_running)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_found)
        {
            if (m_interface->MbTempStatus.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
            {
                auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->MbTempStatus.GetNewSamples([&](auto samplePtr) {
                    RPortMonitoringManagement::ReadDataMbTempStatus(std::move(samplePtr));
                }));
                if (recv->HasValue())
                {
                    m_logger.LogVerbose() << "RPortMonitoringManagement::ReceiveEventMbTempStatus::GetNewSamples::" << recv->Value();
                }
                else
                {
                    m_logger.LogError() << "RPortMonitoringManagement::ReceiveEventMbTempStatus::GetNewSamples::" << recv->Error().Message();
                }
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void RPortMonitoringManagement::ReadDataMbTempStatus(ara::com::SamplePtr<eevp::monitoring::service::proxy::events::MbTempStatus::SampleType const> samplePtr)
{
    auto data = *samplePtr.Get();
    if (m_receiverMbTempStatus)
    {
        m_receiverMbTempStatus(data);
    }
}
 
void RPortMonitoringManagement::RegistEventHandlerMbTempStatus(std::function<void(const eevp::monitoring::service::proxy::events::MbTempStatus::SampleType&)> handler)
{
    m_receiverMbTempStatus = handler;
}
 
void RPortMonitoringManagement::SubscribeeventServiceInfo()
{
    if (m_found)
    {
        // regist receiver handler
        // if you want to enable it, please uncomment below code
        // RegistReceivereventServiceInfo();
        
        // request subscribe
        auto subscribe = m_interface->eventServiceInfo.Subscribe(1);
        if (subscribe.HasValue())
        {
            m_logger.LogVerbose() << "RPortMonitoringManagement::SubscribeeventServiceInfo::Subscribed";
        }
        else
        {
            m_logger.LogError() << "RPortMonitoringManagement::SubscribeeventServiceInfo::" << subscribe.Error().Message();
        }
    }
}
 
void RPortMonitoringManagement::StopSubscribeeventServiceInfo()
{
    if (m_found)
    {
        // request stop subscribe
        m_interface->eventServiceInfo.Unsubscribe();
        m_logger.LogVerbose() << "RPortMonitoringManagement::StopSubscribeeventServiceInfo::Unsubscribed";
    }
}
 
void RPortMonitoringManagement::RegistReceivereventServiceInfo()
{
    if (m_found)
    {
        // set callback
        auto receiver = [this]() -> void {
            return ReceiveEventeventServiceInfoTriggered();
        };
        
        // regist callback
        auto callback = m_interface->eventServiceInfo.SetReceiveHandler(receiver);
        if (callback.HasValue())
        {
            m_logger.LogVerbose() << "RPortMonitoringManagement::RegistReceivereventServiceInfo::SetReceiveHandler";
        }
        else
        {
            m_logger.LogError() << "RPortMonitoringManagement::RegistReceivereventServiceInfo::SetReceiveHandler::" << callback.Error().Message();
        }
    }
}
 
void RPortMonitoringManagement::ReceiveEventeventServiceInfoTriggered()
{
    if (m_found)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_interface->eventServiceInfo.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
        {
            auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->eventServiceInfo.GetNewSamples([&](auto samplePtr) {
                RPortMonitoringManagement::ReadDataeventServiceInfo(std::move(samplePtr));
            }));
            if (recv->HasValue())
            {
                m_logger.LogVerbose() << "RPortMonitoringManagement::ReceiveEventeventServiceInfo::GetNewSamples::" << recv->Value();
            }
            else
            {
                m_logger.LogError() << "RPortMonitoringManagement::ReceiveEventeventServiceInfo::GetNewSamples::" << recv->Error().Message();
            }
        }
    }
}
 
void RPortMonitoringManagement::ReceiveEventeventServiceInfoCyclic()
{
    while (m_running)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_found)
        {
            if (m_interface->eventServiceInfo.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
            {
                auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->eventServiceInfo.GetNewSamples([&](auto samplePtr) {
                    RPortMonitoringManagement::ReadDataeventServiceInfo(std::move(samplePtr));
                }));
                if (recv->HasValue())
                {
                    m_logger.LogVerbose() << "RPortMonitoringManagement::ReceiveEventeventServiceInfo::GetNewSamples::" << recv->Value();
                }
                else
                {
                    m_logger.LogError() << "RPortMonitoringManagement::ReceiveEventeventServiceInfo::GetNewSamples::" << recv->Error().Message();
                }
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void RPortMonitoringManagement::ReadDataeventServiceInfo(ara::com::SamplePtr<eevp::monitoring::service::proxy::events::eventServiceInfo::SampleType const> samplePtr)
{
    auto data = *samplePtr.Get();
    if (m_receivereventServiceInfo)
    {
        m_receivereventServiceInfo(data);
    }
}
 
void RPortMonitoringManagement::RegistEventHandlereventServiceInfo(std::function<void(const eevp::monitoring::service::proxy::events::eventServiceInfo::SampleType&)> handler)
{
    m_receivereventServiceInfo = handler;
}
 
void RPortMonitoringManagement::SubscribeeventUpdatableService()
{
    if (m_found)
    {
        // regist receiver handler
        // if you want to enable it, please uncomment below code
        // RegistReceivereventUpdatableService();
        
        // request subscribe
        auto subscribe = m_interface->eventUpdatableService.Subscribe(1);
        if (subscribe.HasValue())
        {
            m_logger.LogVerbose() << "RPortMonitoringManagement::SubscribeeventUpdatableService::Subscribed";
        }
        else
        {
            m_logger.LogError() << "RPortMonitoringManagement::SubscribeeventUpdatableService::" << subscribe.Error().Message();
        }
    }
}
 
void RPortMonitoringManagement::StopSubscribeeventUpdatableService()
{
    if (m_found)
    {
        // request stop subscribe
        m_interface->eventUpdatableService.Unsubscribe();
        m_logger.LogVerbose() << "RPortMonitoringManagement::StopSubscribeeventUpdatableService::Unsubscribed";
    }
}
 
void RPortMonitoringManagement::RegistReceivereventUpdatableService()
{
    if (m_found)
    {
        // set callback
        auto receiver = [this]() -> void {
            return ReceiveEventeventUpdatableServiceTriggered();
        };
        
        // regist callback
        auto callback = m_interface->eventUpdatableService.SetReceiveHandler(receiver);
        if (callback.HasValue())
        {
            m_logger.LogVerbose() << "RPortMonitoringManagement::RegistReceivereventUpdatableService::SetReceiveHandler";
        }
        else
        {
            m_logger.LogError() << "RPortMonitoringManagement::RegistReceivereventUpdatableService::SetReceiveHandler::" << callback.Error().Message();
        }
    }
}
 
void RPortMonitoringManagement::ReceiveEventeventUpdatableServiceTriggered()
{
    if (m_found)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_interface->eventUpdatableService.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
        {
            auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->eventUpdatableService.GetNewSamples([&](auto samplePtr) {
                RPortMonitoringManagement::ReadDataeventUpdatableService(std::move(samplePtr));
            }));
            if (recv->HasValue())
            {
                m_logger.LogVerbose() << "RPortMonitoringManagement::ReceiveEventeventUpdatableService::GetNewSamples::" << recv->Value();
            }
            else
            {
                m_logger.LogError() << "RPortMonitoringManagement::ReceiveEventeventUpdatableService::GetNewSamples::" << recv->Error().Message();
            }
        }
    }
}
 
void RPortMonitoringManagement::ReceiveEventeventUpdatableServiceCyclic()
{
    while (m_running)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_found)
        {
            if (m_interface->eventUpdatableService.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
            {
                auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->eventUpdatableService.GetNewSamples([&](auto samplePtr) {
                    RPortMonitoringManagement::ReadDataeventUpdatableService(std::move(samplePtr));
                }));
                if (recv->HasValue())
                {
                    m_logger.LogVerbose() << "RPortMonitoringManagement::ReceiveEventeventUpdatableService::GetNewSamples::" << recv->Value();
                }
                else
                {
                    m_logger.LogError() << "RPortMonitoringManagement::ReceiveEventeventUpdatableService::GetNewSamples::" << recv->Error().Message();
                }
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void RPortMonitoringManagement::ReadDataeventUpdatableService(ara::com::SamplePtr<eevp::monitoring::service::proxy::events::eventUpdatableService::SampleType const> samplePtr)
{
    auto data = *samplePtr.Get();
    if (m_receivereventUpdatableService)
    {
        m_receivereventUpdatableService(data);
    }
}
 
void RPortMonitoringManagement::RegistEventHandlereventUpdatableService(std::function<void(const eevp::monitoring::service::proxy::events::eventUpdatableService::SampleType&)> handler)
{
    m_receivereventUpdatableService = handler;
}
 
void RPortMonitoringManagement::SubscriberesetUcmCompleted()
{
    if (m_found)
    {
        // regist receiver handler
        // if you want to enable it, please uncomment below code
        // RegistReceiverresetUcmCompleted();
        
        // request subscribe
        auto subscribe = m_interface->resetUcmCompleted.Subscribe(1);
        if (subscribe.HasValue())
        {
            m_logger.LogVerbose() << "RPortMonitoringManagement::SubscriberesetUcmCompleted::Subscribed";
        }
        else
        {
            m_logger.LogError() << "RPortMonitoringManagement::SubscriberesetUcmCompleted::" << subscribe.Error().Message();
        }
    }
}
 
void RPortMonitoringManagement::StopSubscriberesetUcmCompleted()
{
    if (m_found)
    {
        // request stop subscribe
        m_interface->resetUcmCompleted.Unsubscribe();
        m_logger.LogVerbose() << "RPortMonitoringManagement::StopSubscriberesetUcmCompleted::Unsubscribed";
    }
}
 
void RPortMonitoringManagement::RegistReceiverresetUcmCompleted()
{
    if (m_found)
    {
        // set callback
        auto receiver = [this]() -> void {
            return ReceiveEventresetUcmCompletedTriggered();
        };
        
        // regist callback
        auto callback = m_interface->resetUcmCompleted.SetReceiveHandler(receiver);
        if (callback.HasValue())
        {
            m_logger.LogVerbose() << "RPortMonitoringManagement::RegistReceiverresetUcmCompleted::SetReceiveHandler";
        }
        else
        {
            m_logger.LogError() << "RPortMonitoringManagement::RegistReceiverresetUcmCompleted::SetReceiveHandler::" << callback.Error().Message();
        }
    }
}
 
void RPortMonitoringManagement::ReceiveEventresetUcmCompletedTriggered()
{
    if (m_found)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_interface->resetUcmCompleted.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
        {
            auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->resetUcmCompleted.GetNewSamples([&](auto samplePtr) {
                RPortMonitoringManagement::ReadDataresetUcmCompleted(std::move(samplePtr));
            }));
            if (recv->HasValue())
            {
                m_logger.LogVerbose() << "RPortMonitoringManagement::ReceiveEventresetUcmCompleted::GetNewSamples::" << recv->Value();
            }
            else
            {
                m_logger.LogError() << "RPortMonitoringManagement::ReceiveEventresetUcmCompleted::GetNewSamples::" << recv->Error().Message();
            }
        }
    }
}
 
void RPortMonitoringManagement::ReceiveEventresetUcmCompletedCyclic()
{
    while (m_running)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_found)
        {
            if (m_interface->resetUcmCompleted.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
            {
                auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->resetUcmCompleted.GetNewSamples([&](auto samplePtr) {
                    RPortMonitoringManagement::ReadDataresetUcmCompleted(std::move(samplePtr));
                }));
                if (recv->HasValue())
                {
                    m_logger.LogVerbose() << "RPortMonitoringManagement::ReceiveEventresetUcmCompleted::GetNewSamples::" << recv->Value();
                }
                else
                {
                    m_logger.LogError() << "RPortMonitoringManagement::ReceiveEventresetUcmCompleted::GetNewSamples::" << recv->Error().Message();
                }
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void RPortMonitoringManagement::ReadDataresetUcmCompleted(ara::com::SamplePtr<eevp::monitoring::service::proxy::events::resetUcmCompleted::SampleType const> samplePtr)
{
    auto data = *samplePtr.Get();
    if (m_receiverresetUcmCompleted)
    {
        m_receiverresetUcmCompleted(data);
    }
}
 
void RPortMonitoringManagement::RegistEventHandlerresetUcmCompleted(std::function<void(const eevp::monitoring::service::proxy::events::resetUcmCompleted::SampleType&)> handler)
{
    m_receiverresetUcmCompleted = handler;
}
 
void RPortMonitoringManagement::SubscribeUssStatusFront()
{
    if (m_found)
    {
        // regist receiver handler
        // if you want to enable it, please uncomment below code
        // RegistReceiverUssStatusFront();
        
        // request subscribe
        auto subscribe = m_interface->UssStatusFront.Subscribe(1);
        if (subscribe.HasValue())
        {
            m_logger.LogVerbose() << "RPortMonitoringManagement::SubscribeUssStatusFront::Subscribed";
        }
        else
        {
            m_logger.LogError() << "RPortMonitoringManagement::SubscribeUssStatusFront::" << subscribe.Error().Message();
        }
    }
}
 
void RPortMonitoringManagement::StopSubscribeUssStatusFront()
{
    if (m_found)
    {
        // request stop subscribe
        m_interface->UssStatusFront.Unsubscribe();
        m_logger.LogVerbose() << "RPortMonitoringManagement::StopSubscribeUssStatusFront::Unsubscribed";
    }
}
 
void RPortMonitoringManagement::RegistReceiverUssStatusFront()
{
    if (m_found)
    {
        // set callback
        auto receiver = [this]() -> void {
            return ReceiveFieldUssStatusFrontTriggered();
        };
        
        // regist callback
        auto callback = m_interface->UssStatusFront.SetReceiveHandler(receiver);
        if (callback.HasValue())
        {
            m_logger.LogVerbose() << "RPortMonitoringManagement::RegistReceiverUssStatusFront::SetReceiveHandler";
        }
        else
        {
            m_logger.LogError() << "RPortMonitoringManagement::RegistReceiverUssStatusFront::SetReceiveHandler::" << callback.Error().Message();
        }
    }
}
 
void RPortMonitoringManagement::ReceiveFieldUssStatusFrontTriggered()
{
    if (m_found)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_interface->UssStatusFront.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
        {
            auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->UssStatusFront.GetNewSamples([&](auto samplePtr) {
                RPortMonitoringManagement::ReadValueUssStatusFront(std::move(samplePtr));
            }));
            if (recv->HasValue())
            {
                m_logger.LogVerbose() << "RPortMonitoringManagement::ReceiveFieldUssStatusFront::GetNewSamples::" << recv->Value();
            }
            else
            {
                m_logger.LogError() << "RPortMonitoringManagement::ReceiveFieldUssStatusFront::GetNewSamples::" << recv->Error().Message();
            }
        }
    }
}
 
void RPortMonitoringManagement::ReceiveFieldUssStatusFrontCyclic()
{
    while (m_running)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_found)
        {
            if (m_interface->UssStatusFront.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
            {
                auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->UssStatusFront.GetNewSamples([&](auto samplePtr) {
                    RPortMonitoringManagement::ReadValueUssStatusFront(std::move(samplePtr));
                }));
                if (recv->HasValue())
                {
                    m_logger.LogVerbose() << "RPortMonitoringManagement::ReceiveFieldUssStatusFront::GetNewSamples::" << recv->Value();
                }
                else
                {
                    m_logger.LogError() << "RPortMonitoringManagement::ReceiveFieldUssStatusFront::GetNewSamples::" << recv->Error().Message();
                }
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void RPortMonitoringManagement::ReadValueUssStatusFront(ara::com::SamplePtr<eevp::monitoring::service::proxy::fields::UssStatusFront::FieldType const> samplePtr)
{
    auto value = *samplePtr.Get();
    if (m_receiverUssStatusFront)
    {
        m_receiverUssStatusFront(value);
    }
}
 
void RPortMonitoringManagement::RegistFieldHandlerUssStatusFront(std::function<void(const eevp::monitoring::service::proxy::fields::UssStatusFront::FieldType&)> handler)
{
    m_receiverUssStatusFront = handler;
}
 
void RPortMonitoringManagement::GetUssStatusFront()
{
    if (m_found)
    {
        auto request = m_interface->UssStatusFront.Get();
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "RPortMonitoringManagement::GetUssStatusFront::Responded";
            
            auto result = response.Value();
            if (m_receiverUssStatusFront)
            {
                m_receiverUssStatusFront(result);
            }
        }
        else
        {
            m_logger.LogError() << "RPortMonitoringManagement::GetUssStatusFront::" << response.Error().Message();
        }
    }
}
 
void RPortMonitoringManagement::SubscribeUssStatusRear()
{
    if (m_found)
    {
        // regist receiver handler
        // if you want to enable it, please uncomment below code
        // RegistReceiverUssStatusRear();
        
        // request subscribe
        auto subscribe = m_interface->UssStatusRear.Subscribe(1);
        if (subscribe.HasValue())
        {
            m_logger.LogVerbose() << "RPortMonitoringManagement::SubscribeUssStatusRear::Subscribed";
        }
        else
        {
            m_logger.LogError() << "RPortMonitoringManagement::SubscribeUssStatusRear::" << subscribe.Error().Message();
        }
    }
}
 
void RPortMonitoringManagement::StopSubscribeUssStatusRear()
{
    if (m_found)
    {
        // request stop subscribe
        m_interface->UssStatusRear.Unsubscribe();
        m_logger.LogVerbose() << "RPortMonitoringManagement::StopSubscribeUssStatusRear::Unsubscribed";
    }
}
 
void RPortMonitoringManagement::RegistReceiverUssStatusRear()
{
    if (m_found)
    {
        // set callback
        auto receiver = [this]() -> void {
            return ReceiveFieldUssStatusRearTriggered();
        };
        
        // regist callback
        auto callback = m_interface->UssStatusRear.SetReceiveHandler(receiver);
        if (callback.HasValue())
        {
            m_logger.LogVerbose() << "RPortMonitoringManagement::RegistReceiverUssStatusRear::SetReceiveHandler";
        }
        else
        {
            m_logger.LogError() << "RPortMonitoringManagement::RegistReceiverUssStatusRear::SetReceiveHandler::" << callback.Error().Message();
        }
    }
}
 
void RPortMonitoringManagement::ReceiveFieldUssStatusRearTriggered()
{
    if (m_found)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_interface->UssStatusRear.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
        {
            auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->UssStatusRear.GetNewSamples([&](auto samplePtr) {
                RPortMonitoringManagement::ReadValueUssStatusRear(std::move(samplePtr));
            }));
            if (recv->HasValue())
            {
                m_logger.LogVerbose() << "RPortMonitoringManagement::ReceiveFieldUssStatusRear::GetNewSamples::" << recv->Value();
            }
            else
            {
                m_logger.LogError() << "RPortMonitoringManagement::ReceiveFieldUssStatusRear::GetNewSamples::" << recv->Error().Message();
            }
        }
    }
}
 
void RPortMonitoringManagement::ReceiveFieldUssStatusRearCyclic()
{
    while (m_running)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_found)
        {
            if (m_interface->UssStatusRear.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
            {
                auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->UssStatusRear.GetNewSamples([&](auto samplePtr) {
                    RPortMonitoringManagement::ReadValueUssStatusRear(std::move(samplePtr));
                }));
                if (recv->HasValue())
                {
                    m_logger.LogVerbose() << "RPortMonitoringManagement::ReceiveFieldUssStatusRear::GetNewSamples::" << recv->Value();
                }
                else
                {
                    m_logger.LogError() << "RPortMonitoringManagement::ReceiveFieldUssStatusRear::GetNewSamples::" << recv->Error().Message();
                }
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void RPortMonitoringManagement::ReadValueUssStatusRear(ara::com::SamplePtr<eevp::monitoring::service::proxy::fields::UssStatusRear::FieldType const> samplePtr)
{
    auto value = *samplePtr.Get();
    if (m_receiverUssStatusRear)
    {
        m_receiverUssStatusRear(value);
    }
}
 
void RPortMonitoringManagement::RegistFieldHandlerUssStatusRear(std::function<void(const eevp::monitoring::service::proxy::fields::UssStatusRear::FieldType&)> handler)
{
    m_receiverUssStatusRear = handler;
}
 
void RPortMonitoringManagement::GetUssStatusRear()
{
    if (m_found)
    {
        auto request = m_interface->UssStatusRear.Get();
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "RPortMonitoringManagement::GetUssStatusRear::Responded";
            
            auto result = response.Value();
            if (m_receiverUssStatusRear)
            {
                m_receiverUssStatusRear(result);
            }
        }
        else
        {
            m_logger.LogError() << "RPortMonitoringManagement::GetUssStatusRear::" << response.Error().Message();
        }
    }
}
 
void RPortMonitoringManagement::SubscribesoaDmsDeviceNormal()
{
    if (m_found)
    {
        // regist receiver handler
        // if you want to enable it, please uncomment below code
        // RegistReceiversoaDmsDeviceNormal();
        
        // request subscribe
        auto subscribe = m_interface->soaDmsDeviceNormal.Subscribe(1);
        if (subscribe.HasValue())
        {
            m_logger.LogVerbose() << "RPortMonitoringManagement::SubscribesoaDmsDeviceNormal::Subscribed";
        }
        else
        {
            m_logger.LogError() << "RPortMonitoringManagement::SubscribesoaDmsDeviceNormal::" << subscribe.Error().Message();
        }
    }
}
 
void RPortMonitoringManagement::StopSubscribesoaDmsDeviceNormal()
{
    if (m_found)
    {
        // request stop subscribe
        m_interface->soaDmsDeviceNormal.Unsubscribe();
        m_logger.LogVerbose() << "RPortMonitoringManagement::StopSubscribesoaDmsDeviceNormal::Unsubscribed";
    }
}
 
void RPortMonitoringManagement::RegistReceiversoaDmsDeviceNormal()
{
    if (m_found)
    {
        // set callback
        auto receiver = [this]() -> void {
            return ReceiveFieldsoaDmsDeviceNormalTriggered();
        };
        
        // regist callback
        auto callback = m_interface->soaDmsDeviceNormal.SetReceiveHandler(receiver);
        if (callback.HasValue())
        {
            m_logger.LogVerbose() << "RPortMonitoringManagement::RegistReceiversoaDmsDeviceNormal::SetReceiveHandler";
        }
        else
        {
            m_logger.LogError() << "RPortMonitoringManagement::RegistReceiversoaDmsDeviceNormal::SetReceiveHandler::" << callback.Error().Message();
        }
    }
}
 
void RPortMonitoringManagement::ReceiveFieldsoaDmsDeviceNormalTriggered()
{
    if (m_found)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_interface->soaDmsDeviceNormal.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
        {
            auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaDmsDeviceNormal.GetNewSamples([&](auto samplePtr) {
                RPortMonitoringManagement::ReadValuesoaDmsDeviceNormal(std::move(samplePtr));
            }));
            if (recv->HasValue())
            {
                m_logger.LogVerbose() << "RPortMonitoringManagement::ReceiveFieldsoaDmsDeviceNormal::GetNewSamples::" << recv->Value();
            }
            else
            {
                m_logger.LogError() << "RPortMonitoringManagement::ReceiveFieldsoaDmsDeviceNormal::GetNewSamples::" << recv->Error().Message();
            }
        }
    }
}
 
void RPortMonitoringManagement::ReceiveFieldsoaDmsDeviceNormalCyclic()
{
    while (m_running)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_found)
        {
            if (m_interface->soaDmsDeviceNormal.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
            {
                auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaDmsDeviceNormal.GetNewSamples([&](auto samplePtr) {
                    RPortMonitoringManagement::ReadValuesoaDmsDeviceNormal(std::move(samplePtr));
                }));
                if (recv->HasValue())
                {
                    m_logger.LogVerbose() << "RPortMonitoringManagement::ReceiveFieldsoaDmsDeviceNormal::GetNewSamples::" << recv->Value();
                }
                else
                {
                    m_logger.LogError() << "RPortMonitoringManagement::ReceiveFieldsoaDmsDeviceNormal::GetNewSamples::" << recv->Error().Message();
                }
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void RPortMonitoringManagement::ReadValuesoaDmsDeviceNormal(ara::com::SamplePtr<eevp::monitoring::service::proxy::fields::soaDmsDeviceNormal::FieldType const> samplePtr)
{
    auto value = *samplePtr.Get();
    if (m_receiversoaDmsDeviceNormal)
    {
        m_receiversoaDmsDeviceNormal(value);
    }
}
 
void RPortMonitoringManagement::RegistFieldHandlersoaDmsDeviceNormal(std::function<void(const eevp::monitoring::service::proxy::fields::soaDmsDeviceNormal::FieldType&)> handler)
{
    m_receiversoaDmsDeviceNormal = handler;
}
 
void RPortMonitoringManagement::GetsoaDmsDeviceNormal()
{
    if (m_found)
    {
        auto request = m_interface->soaDmsDeviceNormal.Get();
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "RPortMonitoringManagement::GetsoaDmsDeviceNormal::Responded";
            
            auto result = response.Value();
            if (m_receiversoaDmsDeviceNormal)
            {
                m_receiversoaDmsDeviceNormal(result);
            }
        }
        else
        {
            m_logger.LogError() << "RPortMonitoringManagement::GetsoaDmsDeviceNormal::" << response.Error().Message();
        }
    }
}
 
void RPortMonitoringManagement::SubscribesoaDmsSwVersion()
{
    if (m_found)
    {
        // regist receiver handler
        // if you want to enable it, please uncomment below code
        // RegistReceiversoaDmsSwVersion();
        
        // request subscribe
        auto subscribe = m_interface->soaDmsSwVersion.Subscribe(1);
        if (subscribe.HasValue())
        {
            m_logger.LogVerbose() << "RPortMonitoringManagement::SubscribesoaDmsSwVersion::Subscribed";
        }
        else
        {
            m_logger.LogError() << "RPortMonitoringManagement::SubscribesoaDmsSwVersion::" << subscribe.Error().Message();
        }
    }
}
 
void RPortMonitoringManagement::StopSubscribesoaDmsSwVersion()
{
    if (m_found)
    {
        // request stop subscribe
        m_interface->soaDmsSwVersion.Unsubscribe();
        m_logger.LogVerbose() << "RPortMonitoringManagement::StopSubscribesoaDmsSwVersion::Unsubscribed";
    }
}
 
void RPortMonitoringManagement::RegistReceiversoaDmsSwVersion()
{
    if (m_found)
    {
        // set callback
        auto receiver = [this]() -> void {
            return ReceiveFieldsoaDmsSwVersionTriggered();
        };
        
        // regist callback
        auto callback = m_interface->soaDmsSwVersion.SetReceiveHandler(receiver);
        if (callback.HasValue())
        {
            m_logger.LogVerbose() << "RPortMonitoringManagement::RegistReceiversoaDmsSwVersion::SetReceiveHandler";
        }
        else
        {
            m_logger.LogError() << "RPortMonitoringManagement::RegistReceiversoaDmsSwVersion::SetReceiveHandler::" << callback.Error().Message();
        }
    }
}
 
void RPortMonitoringManagement::ReceiveFieldsoaDmsSwVersionTriggered()
{
    if (m_found)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_interface->soaDmsSwVersion.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
        {
            auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaDmsSwVersion.GetNewSamples([&](auto samplePtr) {
                RPortMonitoringManagement::ReadValuesoaDmsSwVersion(std::move(samplePtr));
            }));
            if (recv->HasValue())
            {
                m_logger.LogVerbose() << "RPortMonitoringManagement::ReceiveFieldsoaDmsSwVersion::GetNewSamples::" << recv->Value();
            }
            else
            {
                m_logger.LogError() << "RPortMonitoringManagement::ReceiveFieldsoaDmsSwVersion::GetNewSamples::" << recv->Error().Message();
            }
        }
    }
}
 
void RPortMonitoringManagement::ReceiveFieldsoaDmsSwVersionCyclic()
{
    while (m_running)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_found)
        {
            if (m_interface->soaDmsSwVersion.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
            {
                auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaDmsSwVersion.GetNewSamples([&](auto samplePtr) {
                    RPortMonitoringManagement::ReadValuesoaDmsSwVersion(std::move(samplePtr));
                }));
                if (recv->HasValue())
                {
                    m_logger.LogVerbose() << "RPortMonitoringManagement::ReceiveFieldsoaDmsSwVersion::GetNewSamples::" << recv->Value();
                }
                else
                {
                    m_logger.LogError() << "RPortMonitoringManagement::ReceiveFieldsoaDmsSwVersion::GetNewSamples::" << recv->Error().Message();
                }
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void RPortMonitoringManagement::ReadValuesoaDmsSwVersion(ara::com::SamplePtr<eevp::monitoring::service::proxy::fields::soaDmsSwVersion::FieldType const> samplePtr)
{
    auto value = *samplePtr.Get();
    if (m_receiversoaDmsSwVersion)
    {
        m_receiversoaDmsSwVersion(value);
    }
}
 
void RPortMonitoringManagement::RegistFieldHandlersoaDmsSwVersion(std::function<void(const eevp::monitoring::service::proxy::fields::soaDmsSwVersion::FieldType&)> handler)
{
    m_receiversoaDmsSwVersion = handler;
}
 
void RPortMonitoringManagement::GetsoaDmsSwVersion()
{
    if (m_found)
    {
        auto request = m_interface->soaDmsSwVersion.Get();
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "RPortMonitoringManagement::GetsoaDmsSwVersion::Responded";
            
            auto result = response.Value();
            if (m_receiversoaDmsSwVersion)
            {
                m_receiversoaDmsSwVersion(result);
            }
        }
        else
        {
            m_logger.LogError() << "RPortMonitoringManagement::GetsoaDmsSwVersion::" << response.Error().Message();
        }
    }
}
 
void RPortMonitoringManagement::SubscribesoaDrvSeatDeviceNormal()
{
    if (m_found)
    {
        // regist receiver handler
        // if you want to enable it, please uncomment below code
        // RegistReceiversoaDrvSeatDeviceNormal();
        
        // request subscribe
        auto subscribe = m_interface->soaDrvSeatDeviceNormal.Subscribe(1);
        if (subscribe.HasValue())
        {
            m_logger.LogVerbose() << "RPortMonitoringManagement::SubscribesoaDrvSeatDeviceNormal::Subscribed";
        }
        else
        {
            m_logger.LogError() << "RPortMonitoringManagement::SubscribesoaDrvSeatDeviceNormal::" << subscribe.Error().Message();
        }
    }
}
 
void RPortMonitoringManagement::StopSubscribesoaDrvSeatDeviceNormal()
{
    if (m_found)
    {
        // request stop subscribe
        m_interface->soaDrvSeatDeviceNormal.Unsubscribe();
        m_logger.LogVerbose() << "RPortMonitoringManagement::StopSubscribesoaDrvSeatDeviceNormal::Unsubscribed";
    }
}
 
void RPortMonitoringManagement::RegistReceiversoaDrvSeatDeviceNormal()
{
    if (m_found)
    {
        // set callback
        auto receiver = [this]() -> void {
            return ReceiveFieldsoaDrvSeatDeviceNormalTriggered();
        };
        
        // regist callback
        auto callback = m_interface->soaDrvSeatDeviceNormal.SetReceiveHandler(receiver);
        if (callback.HasValue())
        {
            m_logger.LogVerbose() << "RPortMonitoringManagement::RegistReceiversoaDrvSeatDeviceNormal::SetReceiveHandler";
        }
        else
        {
            m_logger.LogError() << "RPortMonitoringManagement::RegistReceiversoaDrvSeatDeviceNormal::SetReceiveHandler::" << callback.Error().Message();
        }
    }
}
 
void RPortMonitoringManagement::ReceiveFieldsoaDrvSeatDeviceNormalTriggered()
{
    if (m_found)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_interface->soaDrvSeatDeviceNormal.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
        {
            auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaDrvSeatDeviceNormal.GetNewSamples([&](auto samplePtr) {
                RPortMonitoringManagement::ReadValuesoaDrvSeatDeviceNormal(std::move(samplePtr));
            }));
            if (recv->HasValue())
            {
                m_logger.LogVerbose() << "RPortMonitoringManagement::ReceiveFieldsoaDrvSeatDeviceNormal::GetNewSamples::" << recv->Value();
            }
            else
            {
                m_logger.LogError() << "RPortMonitoringManagement::ReceiveFieldsoaDrvSeatDeviceNormal::GetNewSamples::" << recv->Error().Message();
            }
        }
    }
}
 
void RPortMonitoringManagement::ReceiveFieldsoaDrvSeatDeviceNormalCyclic()
{
    while (m_running)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_found)
        {
            if (m_interface->soaDrvSeatDeviceNormal.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
            {
                auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaDrvSeatDeviceNormal.GetNewSamples([&](auto samplePtr) {
                    RPortMonitoringManagement::ReadValuesoaDrvSeatDeviceNormal(std::move(samplePtr));
                }));
                if (recv->HasValue())
                {
                    m_logger.LogVerbose() << "RPortMonitoringManagement::ReceiveFieldsoaDrvSeatDeviceNormal::GetNewSamples::" << recv->Value();
                }
                else
                {
                    m_logger.LogError() << "RPortMonitoringManagement::ReceiveFieldsoaDrvSeatDeviceNormal::GetNewSamples::" << recv->Error().Message();
                }
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void RPortMonitoringManagement::ReadValuesoaDrvSeatDeviceNormal(ara::com::SamplePtr<eevp::monitoring::service::proxy::fields::soaDrvSeatDeviceNormal::FieldType const> samplePtr)
{
    auto value = *samplePtr.Get();
    if (m_receiversoaDrvSeatDeviceNormal)
    {
        m_receiversoaDrvSeatDeviceNormal(value);
    }
}
 
void RPortMonitoringManagement::RegistFieldHandlersoaDrvSeatDeviceNormal(std::function<void(const eevp::monitoring::service::proxy::fields::soaDrvSeatDeviceNormal::FieldType&)> handler)
{
    m_receiversoaDrvSeatDeviceNormal = handler;
}
 
void RPortMonitoringManagement::GetsoaDrvSeatDeviceNormal()
{
    if (m_found)
    {
        auto request = m_interface->soaDrvSeatDeviceNormal.Get();
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "RPortMonitoringManagement::GetsoaDrvSeatDeviceNormal::Responded";
            
            auto result = response.Value();
            if (m_receiversoaDrvSeatDeviceNormal)
            {
                m_receiversoaDrvSeatDeviceNormal(result);
            }
        }
        else
        {
            m_logger.LogError() << "RPortMonitoringManagement::GetsoaDrvSeatDeviceNormal::" << response.Error().Message();
        }
    }
}
 
void RPortMonitoringManagement::SubscribesoaDrvSeatMotorDirection()
{
    if (m_found)
    {
        // regist receiver handler
        // if you want to enable it, please uncomment below code
        // RegistReceiversoaDrvSeatMotorDirection();
        
        // request subscribe
        auto subscribe = m_interface->soaDrvSeatMotorDirection.Subscribe(1);
        if (subscribe.HasValue())
        {
            m_logger.LogVerbose() << "RPortMonitoringManagement::SubscribesoaDrvSeatMotorDirection::Subscribed";
        }
        else
        {
            m_logger.LogError() << "RPortMonitoringManagement::SubscribesoaDrvSeatMotorDirection::" << subscribe.Error().Message();
        }
    }
}
 
void RPortMonitoringManagement::StopSubscribesoaDrvSeatMotorDirection()
{
    if (m_found)
    {
        // request stop subscribe
        m_interface->soaDrvSeatMotorDirection.Unsubscribe();
        m_logger.LogVerbose() << "RPortMonitoringManagement::StopSubscribesoaDrvSeatMotorDirection::Unsubscribed";
    }
}
 
void RPortMonitoringManagement::RegistReceiversoaDrvSeatMotorDirection()
{
    if (m_found)
    {
        // set callback
        auto receiver = [this]() -> void {
            return ReceiveFieldsoaDrvSeatMotorDirectionTriggered();
        };
        
        // regist callback
        auto callback = m_interface->soaDrvSeatMotorDirection.SetReceiveHandler(receiver);
        if (callback.HasValue())
        {
            m_logger.LogVerbose() << "RPortMonitoringManagement::RegistReceiversoaDrvSeatMotorDirection::SetReceiveHandler";
        }
        else
        {
            m_logger.LogError() << "RPortMonitoringManagement::RegistReceiversoaDrvSeatMotorDirection::SetReceiveHandler::" << callback.Error().Message();
        }
    }
}
 
void RPortMonitoringManagement::ReceiveFieldsoaDrvSeatMotorDirectionTriggered()
{
    if (m_found)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_interface->soaDrvSeatMotorDirection.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
        {
            auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaDrvSeatMotorDirection.GetNewSamples([&](auto samplePtr) {
                RPortMonitoringManagement::ReadValuesoaDrvSeatMotorDirection(std::move(samplePtr));
            }));
            if (recv->HasValue())
            {
                m_logger.LogVerbose() << "RPortMonitoringManagement::ReceiveFieldsoaDrvSeatMotorDirection::GetNewSamples::" << recv->Value();
            }
            else
            {
                m_logger.LogError() << "RPortMonitoringManagement::ReceiveFieldsoaDrvSeatMotorDirection::GetNewSamples::" << recv->Error().Message();
            }
        }
    }
}
 
void RPortMonitoringManagement::ReceiveFieldsoaDrvSeatMotorDirectionCyclic()
{
    while (m_running)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_found)
        {
            if (m_interface->soaDrvSeatMotorDirection.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
            {
                auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaDrvSeatMotorDirection.GetNewSamples([&](auto samplePtr) {
                    RPortMonitoringManagement::ReadValuesoaDrvSeatMotorDirection(std::move(samplePtr));
                }));
                if (recv->HasValue())
                {
                    m_logger.LogVerbose() << "RPortMonitoringManagement::ReceiveFieldsoaDrvSeatMotorDirection::GetNewSamples::" << recv->Value();
                }
                else
                {
                    m_logger.LogError() << "RPortMonitoringManagement::ReceiveFieldsoaDrvSeatMotorDirection::GetNewSamples::" << recv->Error().Message();
                }
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void RPortMonitoringManagement::ReadValuesoaDrvSeatMotorDirection(ara::com::SamplePtr<eevp::monitoring::service::proxy::fields::soaDrvSeatMotorDirection::FieldType const> samplePtr)
{
    auto value = *samplePtr.Get();
    if (m_receiversoaDrvSeatMotorDirection)
    {
        m_receiversoaDrvSeatMotorDirection(value);
    }
}
 
void RPortMonitoringManagement::RegistFieldHandlersoaDrvSeatMotorDirection(std::function<void(const eevp::monitoring::service::proxy::fields::soaDrvSeatMotorDirection::FieldType&)> handler)
{
    m_receiversoaDrvSeatMotorDirection = handler;
}
 
void RPortMonitoringManagement::GetsoaDrvSeatMotorDirection()
{
    if (m_found)
    {
        auto request = m_interface->soaDrvSeatMotorDirection.Get();
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "RPortMonitoringManagement::GetsoaDrvSeatMotorDirection::Responded";
            
            auto result = response.Value();
            if (m_receiversoaDrvSeatMotorDirection)
            {
                m_receiversoaDrvSeatMotorDirection(result);
            }
        }
        else
        {
            m_logger.LogError() << "RPortMonitoringManagement::GetsoaDrvSeatMotorDirection::" << response.Error().Message();
        }
    }
}
 
void RPortMonitoringManagement::SubscribesoaDrvSeatMotorPosition()
{
    if (m_found)
    {
        // regist receiver handler
        // if you want to enable it, please uncomment below code
        // RegistReceiversoaDrvSeatMotorPosition();
        
        // request subscribe
        auto subscribe = m_interface->soaDrvSeatMotorPosition.Subscribe(1);
        if (subscribe.HasValue())
        {
            m_logger.LogVerbose() << "RPortMonitoringManagement::SubscribesoaDrvSeatMotorPosition::Subscribed";
        }
        else
        {
            m_logger.LogError() << "RPortMonitoringManagement::SubscribesoaDrvSeatMotorPosition::" << subscribe.Error().Message();
        }
    }
}
 
void RPortMonitoringManagement::StopSubscribesoaDrvSeatMotorPosition()
{
    if (m_found)
    {
        // request stop subscribe
        m_interface->soaDrvSeatMotorPosition.Unsubscribe();
        m_logger.LogVerbose() << "RPortMonitoringManagement::StopSubscribesoaDrvSeatMotorPosition::Unsubscribed";
    }
}
 
void RPortMonitoringManagement::RegistReceiversoaDrvSeatMotorPosition()
{
    if (m_found)
    {
        // set callback
        auto receiver = [this]() -> void {
            return ReceiveFieldsoaDrvSeatMotorPositionTriggered();
        };
        
        // regist callback
        auto callback = m_interface->soaDrvSeatMotorPosition.SetReceiveHandler(receiver);
        if (callback.HasValue())
        {
            m_logger.LogVerbose() << "RPortMonitoringManagement::RegistReceiversoaDrvSeatMotorPosition::SetReceiveHandler";
        }
        else
        {
            m_logger.LogError() << "RPortMonitoringManagement::RegistReceiversoaDrvSeatMotorPosition::SetReceiveHandler::" << callback.Error().Message();
        }
    }
}
 
void RPortMonitoringManagement::ReceiveFieldsoaDrvSeatMotorPositionTriggered()
{
    if (m_found)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_interface->soaDrvSeatMotorPosition.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
        {
            auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaDrvSeatMotorPosition.GetNewSamples([&](auto samplePtr) {
                RPortMonitoringManagement::ReadValuesoaDrvSeatMotorPosition(std::move(samplePtr));
            }));
            if (recv->HasValue())
            {
                m_logger.LogVerbose() << "RPortMonitoringManagement::ReceiveFieldsoaDrvSeatMotorPosition::GetNewSamples::" << recv->Value();
            }
            else
            {
                m_logger.LogError() << "RPortMonitoringManagement::ReceiveFieldsoaDrvSeatMotorPosition::GetNewSamples::" << recv->Error().Message();
            }
        }
    }
}
 
void RPortMonitoringManagement::ReceiveFieldsoaDrvSeatMotorPositionCyclic()
{
    while (m_running)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_found)
        {
            if (m_interface->soaDrvSeatMotorPosition.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
            {
                auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaDrvSeatMotorPosition.GetNewSamples([&](auto samplePtr) {
                    RPortMonitoringManagement::ReadValuesoaDrvSeatMotorPosition(std::move(samplePtr));
                }));
                if (recv->HasValue())
                {
                    m_logger.LogVerbose() << "RPortMonitoringManagement::ReceiveFieldsoaDrvSeatMotorPosition::GetNewSamples::" << recv->Value();
                }
                else
                {
                    m_logger.LogError() << "RPortMonitoringManagement::ReceiveFieldsoaDrvSeatMotorPosition::GetNewSamples::" << recv->Error().Message();
                }
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void RPortMonitoringManagement::ReadValuesoaDrvSeatMotorPosition(ara::com::SamplePtr<eevp::monitoring::service::proxy::fields::soaDrvSeatMotorPosition::FieldType const> samplePtr)
{
    auto value = *samplePtr.Get();
    if (m_receiversoaDrvSeatMotorPosition)
    {
        m_receiversoaDrvSeatMotorPosition(value);
    }
}
 
void RPortMonitoringManagement::RegistFieldHandlersoaDrvSeatMotorPosition(std::function<void(const eevp::monitoring::service::proxy::fields::soaDrvSeatMotorPosition::FieldType&)> handler)
{
    m_receiversoaDrvSeatMotorPosition = handler;
}
 
void RPortMonitoringManagement::GetsoaDrvSeatMotorPosition()
{
    if (m_found)
    {
        auto request = m_interface->soaDrvSeatMotorPosition.Get();
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "RPortMonitoringManagement::GetsoaDrvSeatMotorPosition::Responded";
            
            auto result = response.Value();
            if (m_receiversoaDrvSeatMotorPosition)
            {
                m_receiversoaDrvSeatMotorPosition(result);
            }
        }
        else
        {
            m_logger.LogError() << "RPortMonitoringManagement::GetsoaDrvSeatMotorPosition::" << response.Error().Message();
        }
    }
}
 
void RPortMonitoringManagement::SubscribesoaDrvSeatSwVersion()
{
    if (m_found)
    {
        // regist receiver handler
        // if you want to enable it, please uncomment below code
        // RegistReceiversoaDrvSeatSwVersion();
        
        // request subscribe
        auto subscribe = m_interface->soaDrvSeatSwVersion.Subscribe(1);
        if (subscribe.HasValue())
        {
            m_logger.LogVerbose() << "RPortMonitoringManagement::SubscribesoaDrvSeatSwVersion::Subscribed";
        }
        else
        {
            m_logger.LogError() << "RPortMonitoringManagement::SubscribesoaDrvSeatSwVersion::" << subscribe.Error().Message();
        }
    }
}
 
void RPortMonitoringManagement::StopSubscribesoaDrvSeatSwVersion()
{
    if (m_found)
    {
        // request stop subscribe
        m_interface->soaDrvSeatSwVersion.Unsubscribe();
        m_logger.LogVerbose() << "RPortMonitoringManagement::StopSubscribesoaDrvSeatSwVersion::Unsubscribed";
    }
}
 
void RPortMonitoringManagement::RegistReceiversoaDrvSeatSwVersion()
{
    if (m_found)
    {
        // set callback
        auto receiver = [this]() -> void {
            return ReceiveFieldsoaDrvSeatSwVersionTriggered();
        };
        
        // regist callback
        auto callback = m_interface->soaDrvSeatSwVersion.SetReceiveHandler(receiver);
        if (callback.HasValue())
        {
            m_logger.LogVerbose() << "RPortMonitoringManagement::RegistReceiversoaDrvSeatSwVersion::SetReceiveHandler";
        }
        else
        {
            m_logger.LogError() << "RPortMonitoringManagement::RegistReceiversoaDrvSeatSwVersion::SetReceiveHandler::" << callback.Error().Message();
        }
    }
}
 
void RPortMonitoringManagement::ReceiveFieldsoaDrvSeatSwVersionTriggered()
{
    if (m_found)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_interface->soaDrvSeatSwVersion.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
        {
            auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaDrvSeatSwVersion.GetNewSamples([&](auto samplePtr) {
                RPortMonitoringManagement::ReadValuesoaDrvSeatSwVersion(std::move(samplePtr));
            }));
            if (recv->HasValue())
            {
                m_logger.LogVerbose() << "RPortMonitoringManagement::ReceiveFieldsoaDrvSeatSwVersion::GetNewSamples::" << recv->Value();
            }
            else
            {
                m_logger.LogError() << "RPortMonitoringManagement::ReceiveFieldsoaDrvSeatSwVersion::GetNewSamples::" << recv->Error().Message();
            }
        }
    }
}
 
void RPortMonitoringManagement::ReceiveFieldsoaDrvSeatSwVersionCyclic()
{
    while (m_running)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_found)
        {
            if (m_interface->soaDrvSeatSwVersion.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
            {
                auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaDrvSeatSwVersion.GetNewSamples([&](auto samplePtr) {
                    RPortMonitoringManagement::ReadValuesoaDrvSeatSwVersion(std::move(samplePtr));
                }));
                if (recv->HasValue())
                {
                    m_logger.LogVerbose() << "RPortMonitoringManagement::ReceiveFieldsoaDrvSeatSwVersion::GetNewSamples::" << recv->Value();
                }
                else
                {
                    m_logger.LogError() << "RPortMonitoringManagement::ReceiveFieldsoaDrvSeatSwVersion::GetNewSamples::" << recv->Error().Message();
                }
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void RPortMonitoringManagement::ReadValuesoaDrvSeatSwVersion(ara::com::SamplePtr<eevp::monitoring::service::proxy::fields::soaDrvSeatSwVersion::FieldType const> samplePtr)
{
    auto value = *samplePtr.Get();
    if (m_receiversoaDrvSeatSwVersion)
    {
        m_receiversoaDrvSeatSwVersion(value);
    }
}
 
void RPortMonitoringManagement::RegistFieldHandlersoaDrvSeatSwVersion(std::function<void(const eevp::monitoring::service::proxy::fields::soaDrvSeatSwVersion::FieldType&)> handler)
{
    m_receiversoaDrvSeatSwVersion = handler;
}
 
void RPortMonitoringManagement::GetsoaDrvSeatSwVersion()
{
    if (m_found)
    {
        auto request = m_interface->soaDrvSeatSwVersion.Get();
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "RPortMonitoringManagement::GetsoaDrvSeatSwVersion::Responded";
            
            auto result = response.Value();
            if (m_receiversoaDrvSeatSwVersion)
            {
                m_receiversoaDrvSeatSwVersion(result);
            }
        }
        else
        {
            m_logger.LogError() << "RPortMonitoringManagement::GetsoaDrvSeatSwVersion::" << response.Error().Message();
        }
    }
}
 
void RPortMonitoringManagement::SubscribesoaFilmDeviceNormal()
{
    if (m_found)
    {
        // regist receiver handler
        // if you want to enable it, please uncomment below code
        // RegistReceiversoaFilmDeviceNormal();
        
        // request subscribe
        auto subscribe = m_interface->soaFilmDeviceNormal.Subscribe(1);
        if (subscribe.HasValue())
        {
            m_logger.LogVerbose() << "RPortMonitoringManagement::SubscribesoaFilmDeviceNormal::Subscribed";
        }
        else
        {
            m_logger.LogError() << "RPortMonitoringManagement::SubscribesoaFilmDeviceNormal::" << subscribe.Error().Message();
        }
    }
}
 
void RPortMonitoringManagement::StopSubscribesoaFilmDeviceNormal()
{
    if (m_found)
    {
        // request stop subscribe
        m_interface->soaFilmDeviceNormal.Unsubscribe();
        m_logger.LogVerbose() << "RPortMonitoringManagement::StopSubscribesoaFilmDeviceNormal::Unsubscribed";
    }
}
 
void RPortMonitoringManagement::RegistReceiversoaFilmDeviceNormal()
{
    if (m_found)
    {
        // set callback
        auto receiver = [this]() -> void {
            return ReceiveFieldsoaFilmDeviceNormalTriggered();
        };
        
        // regist callback
        auto callback = m_interface->soaFilmDeviceNormal.SetReceiveHandler(receiver);
        if (callback.HasValue())
        {
            m_logger.LogVerbose() << "RPortMonitoringManagement::RegistReceiversoaFilmDeviceNormal::SetReceiveHandler";
        }
        else
        {
            m_logger.LogError() << "RPortMonitoringManagement::RegistReceiversoaFilmDeviceNormal::SetReceiveHandler::" << callback.Error().Message();
        }
    }
}
 
void RPortMonitoringManagement::ReceiveFieldsoaFilmDeviceNormalTriggered()
{
    if (m_found)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_interface->soaFilmDeviceNormal.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
        {
            auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaFilmDeviceNormal.GetNewSamples([&](auto samplePtr) {
                RPortMonitoringManagement::ReadValuesoaFilmDeviceNormal(std::move(samplePtr));
            }));
            if (recv->HasValue())
            {
                m_logger.LogVerbose() << "RPortMonitoringManagement::ReceiveFieldsoaFilmDeviceNormal::GetNewSamples::" << recv->Value();
            }
            else
            {
                m_logger.LogError() << "RPortMonitoringManagement::ReceiveFieldsoaFilmDeviceNormal::GetNewSamples::" << recv->Error().Message();
            }
        }
    }
}
 
void RPortMonitoringManagement::ReceiveFieldsoaFilmDeviceNormalCyclic()
{
    while (m_running)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_found)
        {
            if (m_interface->soaFilmDeviceNormal.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
            {
                auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaFilmDeviceNormal.GetNewSamples([&](auto samplePtr) {
                    RPortMonitoringManagement::ReadValuesoaFilmDeviceNormal(std::move(samplePtr));
                }));
                if (recv->HasValue())
                {
                    m_logger.LogVerbose() << "RPortMonitoringManagement::ReceiveFieldsoaFilmDeviceNormal::GetNewSamples::" << recv->Value();
                }
                else
                {
                    m_logger.LogError() << "RPortMonitoringManagement::ReceiveFieldsoaFilmDeviceNormal::GetNewSamples::" << recv->Error().Message();
                }
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void RPortMonitoringManagement::ReadValuesoaFilmDeviceNormal(ara::com::SamplePtr<eevp::monitoring::service::proxy::fields::soaFilmDeviceNormal::FieldType const> samplePtr)
{
    auto value = *samplePtr.Get();
    if (m_receiversoaFilmDeviceNormal)
    {
        m_receiversoaFilmDeviceNormal(value);
    }
}
 
void RPortMonitoringManagement::RegistFieldHandlersoaFilmDeviceNormal(std::function<void(const eevp::monitoring::service::proxy::fields::soaFilmDeviceNormal::FieldType&)> handler)
{
    m_receiversoaFilmDeviceNormal = handler;
}
 
void RPortMonitoringManagement::GetsoaFilmDeviceNormal()
{
    if (m_found)
    {
        auto request = m_interface->soaFilmDeviceNormal.Get();
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "RPortMonitoringManagement::GetsoaFilmDeviceNormal::Responded";
            
            auto result = response.Value();
            if (m_receiversoaFilmDeviceNormal)
            {
                m_receiversoaFilmDeviceNormal(result);
            }
        }
        else
        {
            m_logger.LogError() << "RPortMonitoringManagement::GetsoaFilmDeviceNormal::" << response.Error().Message();
        }
    }
}
 
void RPortMonitoringManagement::SubscribesoaFilmSwVersion()
{
    if (m_found)
    {
        // regist receiver handler
        // if you want to enable it, please uncomment below code
        // RegistReceiversoaFilmSwVersion();
        
        // request subscribe
        auto subscribe = m_interface->soaFilmSwVersion.Subscribe(1);
        if (subscribe.HasValue())
        {
            m_logger.LogVerbose() << "RPortMonitoringManagement::SubscribesoaFilmSwVersion::Subscribed";
        }
        else
        {
            m_logger.LogError() << "RPortMonitoringManagement::SubscribesoaFilmSwVersion::" << subscribe.Error().Message();
        }
    }
}
 
void RPortMonitoringManagement::StopSubscribesoaFilmSwVersion()
{
    if (m_found)
    {
        // request stop subscribe
        m_interface->soaFilmSwVersion.Unsubscribe();
        m_logger.LogVerbose() << "RPortMonitoringManagement::StopSubscribesoaFilmSwVersion::Unsubscribed";
    }
}
 
void RPortMonitoringManagement::RegistReceiversoaFilmSwVersion()
{
    if (m_found)
    {
        // set callback
        auto receiver = [this]() -> void {
            return ReceiveFieldsoaFilmSwVersionTriggered();
        };
        
        // regist callback
        auto callback = m_interface->soaFilmSwVersion.SetReceiveHandler(receiver);
        if (callback.HasValue())
        {
            m_logger.LogVerbose() << "RPortMonitoringManagement::RegistReceiversoaFilmSwVersion::SetReceiveHandler";
        }
        else
        {
            m_logger.LogError() << "RPortMonitoringManagement::RegistReceiversoaFilmSwVersion::SetReceiveHandler::" << callback.Error().Message();
        }
    }
}
 
void RPortMonitoringManagement::ReceiveFieldsoaFilmSwVersionTriggered()
{
    if (m_found)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_interface->soaFilmSwVersion.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
        {
            auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaFilmSwVersion.GetNewSamples([&](auto samplePtr) {
                RPortMonitoringManagement::ReadValuesoaFilmSwVersion(std::move(samplePtr));
            }));
            if (recv->HasValue())
            {
                m_logger.LogVerbose() << "RPortMonitoringManagement::ReceiveFieldsoaFilmSwVersion::GetNewSamples::" << recv->Value();
            }
            else
            {
                m_logger.LogError() << "RPortMonitoringManagement::ReceiveFieldsoaFilmSwVersion::GetNewSamples::" << recv->Error().Message();
            }
        }
    }
}
 
void RPortMonitoringManagement::ReceiveFieldsoaFilmSwVersionCyclic()
{
    while (m_running)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_found)
        {
            if (m_interface->soaFilmSwVersion.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
            {
                auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaFilmSwVersion.GetNewSamples([&](auto samplePtr) {
                    RPortMonitoringManagement::ReadValuesoaFilmSwVersion(std::move(samplePtr));
                }));
                if (recv->HasValue())
                {
                    m_logger.LogVerbose() << "RPortMonitoringManagement::ReceiveFieldsoaFilmSwVersion::GetNewSamples::" << recv->Value();
                }
                else
                {
                    m_logger.LogError() << "RPortMonitoringManagement::ReceiveFieldsoaFilmSwVersion::GetNewSamples::" << recv->Error().Message();
                }
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void RPortMonitoringManagement::ReadValuesoaFilmSwVersion(ara::com::SamplePtr<eevp::monitoring::service::proxy::fields::soaFilmSwVersion::FieldType const> samplePtr)
{
    auto value = *samplePtr.Get();
    if (m_receiversoaFilmSwVersion)
    {
        m_receiversoaFilmSwVersion(value);
    }
}
 
void RPortMonitoringManagement::RegistFieldHandlersoaFilmSwVersion(std::function<void(const eevp::monitoring::service::proxy::fields::soaFilmSwVersion::FieldType&)> handler)
{
    m_receiversoaFilmSwVersion = handler;
}
 
void RPortMonitoringManagement::GetsoaFilmSwVersion()
{
    if (m_found)
    {
        auto request = m_interface->soaFilmSwVersion.Get();
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "RPortMonitoringManagement::GetsoaFilmSwVersion::Responded";
            
            auto result = response.Value();
            if (m_receiversoaFilmSwVersion)
            {
                m_receiversoaFilmSwVersion(result);
            }
        }
        else
        {
            m_logger.LogError() << "RPortMonitoringManagement::GetsoaFilmSwVersion::" << response.Error().Message();
        }
    }
}
 
void RPortMonitoringManagement::SubscribesoaHvacDeviceNormal()
{
    if (m_found)
    {
        // regist receiver handler
        // if you want to enable it, please uncomment below code
        // RegistReceiversoaHvacDeviceNormal();
        
        // request subscribe
        auto subscribe = m_interface->soaHvacDeviceNormal.Subscribe(1);
        if (subscribe.HasValue())
        {
            m_logger.LogVerbose() << "RPortMonitoringManagement::SubscribesoaHvacDeviceNormal::Subscribed";
        }
        else
        {
            m_logger.LogError() << "RPortMonitoringManagement::SubscribesoaHvacDeviceNormal::" << subscribe.Error().Message();
        }
    }
}
 
void RPortMonitoringManagement::StopSubscribesoaHvacDeviceNormal()
{
    if (m_found)
    {
        // request stop subscribe
        m_interface->soaHvacDeviceNormal.Unsubscribe();
        m_logger.LogVerbose() << "RPortMonitoringManagement::StopSubscribesoaHvacDeviceNormal::Unsubscribed";
    }
}
 
void RPortMonitoringManagement::RegistReceiversoaHvacDeviceNormal()
{
    if (m_found)
    {
        // set callback
        auto receiver = [this]() -> void {
            return ReceiveFieldsoaHvacDeviceNormalTriggered();
        };
        
        // regist callback
        auto callback = m_interface->soaHvacDeviceNormal.SetReceiveHandler(receiver);
        if (callback.HasValue())
        {
            m_logger.LogVerbose() << "RPortMonitoringManagement::RegistReceiversoaHvacDeviceNormal::SetReceiveHandler";
        }
        else
        {
            m_logger.LogError() << "RPortMonitoringManagement::RegistReceiversoaHvacDeviceNormal::SetReceiveHandler::" << callback.Error().Message();
        }
    }
}
 
void RPortMonitoringManagement::ReceiveFieldsoaHvacDeviceNormalTriggered()
{
    if (m_found)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_interface->soaHvacDeviceNormal.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
        {
            auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaHvacDeviceNormal.GetNewSamples([&](auto samplePtr) {
                RPortMonitoringManagement::ReadValuesoaHvacDeviceNormal(std::move(samplePtr));
            }));
            if (recv->HasValue())
            {
                m_logger.LogVerbose() << "RPortMonitoringManagement::ReceiveFieldsoaHvacDeviceNormal::GetNewSamples::" << recv->Value();
            }
            else
            {
                m_logger.LogError() << "RPortMonitoringManagement::ReceiveFieldsoaHvacDeviceNormal::GetNewSamples::" << recv->Error().Message();
            }
        }
    }
}
 
void RPortMonitoringManagement::ReceiveFieldsoaHvacDeviceNormalCyclic()
{
    while (m_running)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_found)
        {
            if (m_interface->soaHvacDeviceNormal.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
            {
                auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaHvacDeviceNormal.GetNewSamples([&](auto samplePtr) {
                    RPortMonitoringManagement::ReadValuesoaHvacDeviceNormal(std::move(samplePtr));
                }));
                if (recv->HasValue())
                {
                    m_logger.LogVerbose() << "RPortMonitoringManagement::ReceiveFieldsoaHvacDeviceNormal::GetNewSamples::" << recv->Value();
                }
                else
                {
                    m_logger.LogError() << "RPortMonitoringManagement::ReceiveFieldsoaHvacDeviceNormal::GetNewSamples::" << recv->Error().Message();
                }
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void RPortMonitoringManagement::ReadValuesoaHvacDeviceNormal(ara::com::SamplePtr<eevp::monitoring::service::proxy::fields::soaHvacDeviceNormal::FieldType const> samplePtr)
{
    auto value = *samplePtr.Get();
    if (m_receiversoaHvacDeviceNormal)
    {
        m_receiversoaHvacDeviceNormal(value);
    }
}
 
void RPortMonitoringManagement::RegistFieldHandlersoaHvacDeviceNormal(std::function<void(const eevp::monitoring::service::proxy::fields::soaHvacDeviceNormal::FieldType&)> handler)
{
    m_receiversoaHvacDeviceNormal = handler;
}
 
void RPortMonitoringManagement::GetsoaHvacDeviceNormal()
{
    if (m_found)
    {
        auto request = m_interface->soaHvacDeviceNormal.Get();
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "RPortMonitoringManagement::GetsoaHvacDeviceNormal::Responded";
            
            auto result = response.Value();
            if (m_receiversoaHvacDeviceNormal)
            {
                m_receiversoaHvacDeviceNormal(result);
            }
        }
        else
        {
            m_logger.LogError() << "RPortMonitoringManagement::GetsoaHvacDeviceNormal::" << response.Error().Message();
        }
    }
}
 
void RPortMonitoringManagement::SubscribesoaHvacSwVersion()
{
    if (m_found)
    {
        // regist receiver handler
        // if you want to enable it, please uncomment below code
        // RegistReceiversoaHvacSwVersion();
        
        // request subscribe
        auto subscribe = m_interface->soaHvacSwVersion.Subscribe(1);
        if (subscribe.HasValue())
        {
            m_logger.LogVerbose() << "RPortMonitoringManagement::SubscribesoaHvacSwVersion::Subscribed";
        }
        else
        {
            m_logger.LogError() << "RPortMonitoringManagement::SubscribesoaHvacSwVersion::" << subscribe.Error().Message();
        }
    }
}
 
void RPortMonitoringManagement::StopSubscribesoaHvacSwVersion()
{
    if (m_found)
    {
        // request stop subscribe
        m_interface->soaHvacSwVersion.Unsubscribe();
        m_logger.LogVerbose() << "RPortMonitoringManagement::StopSubscribesoaHvacSwVersion::Unsubscribed";
    }
}
 
void RPortMonitoringManagement::RegistReceiversoaHvacSwVersion()
{
    if (m_found)
    {
        // set callback
        auto receiver = [this]() -> void {
            return ReceiveFieldsoaHvacSwVersionTriggered();
        };
        
        // regist callback
        auto callback = m_interface->soaHvacSwVersion.SetReceiveHandler(receiver);
        if (callback.HasValue())
        {
            m_logger.LogVerbose() << "RPortMonitoringManagement::RegistReceiversoaHvacSwVersion::SetReceiveHandler";
        }
        else
        {
            m_logger.LogError() << "RPortMonitoringManagement::RegistReceiversoaHvacSwVersion::SetReceiveHandler::" << callback.Error().Message();
        }
    }
}
 
void RPortMonitoringManagement::ReceiveFieldsoaHvacSwVersionTriggered()
{
    if (m_found)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_interface->soaHvacSwVersion.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
        {
            auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaHvacSwVersion.GetNewSamples([&](auto samplePtr) {
                RPortMonitoringManagement::ReadValuesoaHvacSwVersion(std::move(samplePtr));
            }));
            if (recv->HasValue())
            {
                m_logger.LogVerbose() << "RPortMonitoringManagement::ReceiveFieldsoaHvacSwVersion::GetNewSamples::" << recv->Value();
            }
            else
            {
                m_logger.LogError() << "RPortMonitoringManagement::ReceiveFieldsoaHvacSwVersion::GetNewSamples::" << recv->Error().Message();
            }
        }
    }
}
 
void RPortMonitoringManagement::ReceiveFieldsoaHvacSwVersionCyclic()
{
    while (m_running)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_found)
        {
            if (m_interface->soaHvacSwVersion.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
            {
                auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaHvacSwVersion.GetNewSamples([&](auto samplePtr) {
                    RPortMonitoringManagement::ReadValuesoaHvacSwVersion(std::move(samplePtr));
                }));
                if (recv->HasValue())
                {
                    m_logger.LogVerbose() << "RPortMonitoringManagement::ReceiveFieldsoaHvacSwVersion::GetNewSamples::" << recv->Value();
                }
                else
                {
                    m_logger.LogError() << "RPortMonitoringManagement::ReceiveFieldsoaHvacSwVersion::GetNewSamples::" << recv->Error().Message();
                }
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void RPortMonitoringManagement::ReadValuesoaHvacSwVersion(ara::com::SamplePtr<eevp::monitoring::service::proxy::fields::soaHvacSwVersion::FieldType const> samplePtr)
{
    auto value = *samplePtr.Get();
    if (m_receiversoaHvacSwVersion)
    {
        m_receiversoaHvacSwVersion(value);
    }
}
 
void RPortMonitoringManagement::RegistFieldHandlersoaHvacSwVersion(std::function<void(const eevp::monitoring::service::proxy::fields::soaHvacSwVersion::FieldType&)> handler)
{
    m_receiversoaHvacSwVersion = handler;
}
 
void RPortMonitoringManagement::GetsoaHvacSwVersion()
{
    if (m_found)
    {
        auto request = m_interface->soaHvacSwVersion.Get();
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "RPortMonitoringManagement::GetsoaHvacSwVersion::Responded";
            
            auto result = response.Value();
            if (m_receiversoaHvacSwVersion)
            {
                m_receiversoaHvacSwVersion(result);
            }
        }
        else
        {
            m_logger.LogError() << "RPortMonitoringManagement::GetsoaHvacSwVersion::" << response.Error().Message();
        }
    }
}
 
void RPortMonitoringManagement::SubscribesoaMlmStatus()
{
    if (m_found)
    {
        // regist receiver handler
        // if you want to enable it, please uncomment below code
        // RegistReceiversoaMlmStatus();
        
        // request subscribe
        auto subscribe = m_interface->soaMlmStatus.Subscribe(1);
        if (subscribe.HasValue())
        {
            m_logger.LogVerbose() << "RPortMonitoringManagement::SubscribesoaMlmStatus::Subscribed";
        }
        else
        {
            m_logger.LogError() << "RPortMonitoringManagement::SubscribesoaMlmStatus::" << subscribe.Error().Message();
        }
    }
}
 
void RPortMonitoringManagement::StopSubscribesoaMlmStatus()
{
    if (m_found)
    {
        // request stop subscribe
        m_interface->soaMlmStatus.Unsubscribe();
        m_logger.LogVerbose() << "RPortMonitoringManagement::StopSubscribesoaMlmStatus::Unsubscribed";
    }
}
 
void RPortMonitoringManagement::RegistReceiversoaMlmStatus()
{
    if (m_found)
    {
        // set callback
        auto receiver = [this]() -> void {
            return ReceiveFieldsoaMlmStatusTriggered();
        };
        
        // regist callback
        auto callback = m_interface->soaMlmStatus.SetReceiveHandler(receiver);
        if (callback.HasValue())
        {
            m_logger.LogVerbose() << "RPortMonitoringManagement::RegistReceiversoaMlmStatus::SetReceiveHandler";
        }
        else
        {
            m_logger.LogError() << "RPortMonitoringManagement::RegistReceiversoaMlmStatus::SetReceiveHandler::" << callback.Error().Message();
        }
    }
}
 
void RPortMonitoringManagement::ReceiveFieldsoaMlmStatusTriggered()
{
    if (m_found)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_interface->soaMlmStatus.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
        {
            auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaMlmStatus.GetNewSamples([&](auto samplePtr) {
                RPortMonitoringManagement::ReadValuesoaMlmStatus(std::move(samplePtr));
            }));
            if (recv->HasValue())
            {
                m_logger.LogVerbose() << "RPortMonitoringManagement::ReceiveFieldsoaMlmStatus::GetNewSamples::" << recv->Value();
            }
            else
            {
                m_logger.LogError() << "RPortMonitoringManagement::ReceiveFieldsoaMlmStatus::GetNewSamples::" << recv->Error().Message();
            }
        }
    }
}
 
void RPortMonitoringManagement::ReceiveFieldsoaMlmStatusCyclic()
{
    while (m_running)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_found)
        {
            if (m_interface->soaMlmStatus.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
            {
                auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaMlmStatus.GetNewSamples([&](auto samplePtr) {
                    RPortMonitoringManagement::ReadValuesoaMlmStatus(std::move(samplePtr));
                }));
                if (recv->HasValue())
                {
                    m_logger.LogVerbose() << "RPortMonitoringManagement::ReceiveFieldsoaMlmStatus::GetNewSamples::" << recv->Value();
                }
                else
                {
                    m_logger.LogError() << "RPortMonitoringManagement::ReceiveFieldsoaMlmStatus::GetNewSamples::" << recv->Error().Message();
                }
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void RPortMonitoringManagement::ReadValuesoaMlmStatus(ara::com::SamplePtr<eevp::monitoring::service::proxy::fields::soaMlmStatus::FieldType const> samplePtr)
{
    auto value = *samplePtr.Get();
    if (m_receiversoaMlmStatus)
    {
        m_receiversoaMlmStatus(value);
    }
}
 
void RPortMonitoringManagement::RegistFieldHandlersoaMlmStatus(std::function<void(const eevp::monitoring::service::proxy::fields::soaMlmStatus::FieldType&)> handler)
{
    m_receiversoaMlmStatus = handler;
}
 
void RPortMonitoringManagement::GetsoaMlmStatus()
{
    if (m_found)
    {
        auto request = m_interface->soaMlmStatus.Get();
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "RPortMonitoringManagement::GetsoaMlmStatus::Responded";
            
            auto result = response.Value();
            if (m_receiversoaMlmStatus)
            {
                m_receiversoaMlmStatus(result);
            }
        }
        else
        {
            m_logger.LogError() << "RPortMonitoringManagement::GetsoaMlmStatus::" << response.Error().Message();
        }
    }
}
 
void RPortMonitoringManagement::SubscribesoaMlmSwVersion()
{
    if (m_found)
    {
        // regist receiver handler
        // if you want to enable it, please uncomment below code
        // RegistReceiversoaMlmSwVersion();
        
        // request subscribe
        auto subscribe = m_interface->soaMlmSwVersion.Subscribe(1);
        if (subscribe.HasValue())
        {
            m_logger.LogVerbose() << "RPortMonitoringManagement::SubscribesoaMlmSwVersion::Subscribed";
        }
        else
        {
            m_logger.LogError() << "RPortMonitoringManagement::SubscribesoaMlmSwVersion::" << subscribe.Error().Message();
        }
    }
}
 
void RPortMonitoringManagement::StopSubscribesoaMlmSwVersion()
{
    if (m_found)
    {
        // request stop subscribe
        m_interface->soaMlmSwVersion.Unsubscribe();
        m_logger.LogVerbose() << "RPortMonitoringManagement::StopSubscribesoaMlmSwVersion::Unsubscribed";
    }
}
 
void RPortMonitoringManagement::RegistReceiversoaMlmSwVersion()
{
    if (m_found)
    {
        // set callback
        auto receiver = [this]() -> void {
            return ReceiveFieldsoaMlmSwVersionTriggered();
        };
        
        // regist callback
        auto callback = m_interface->soaMlmSwVersion.SetReceiveHandler(receiver);
        if (callback.HasValue())
        {
            m_logger.LogVerbose() << "RPortMonitoringManagement::RegistReceiversoaMlmSwVersion::SetReceiveHandler";
        }
        else
        {
            m_logger.LogError() << "RPortMonitoringManagement::RegistReceiversoaMlmSwVersion::SetReceiveHandler::" << callback.Error().Message();
        }
    }
}
 
void RPortMonitoringManagement::ReceiveFieldsoaMlmSwVersionTriggered()
{
    if (m_found)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_interface->soaMlmSwVersion.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
        {
            auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaMlmSwVersion.GetNewSamples([&](auto samplePtr) {
                RPortMonitoringManagement::ReadValuesoaMlmSwVersion(std::move(samplePtr));
            }));
            if (recv->HasValue())
            {
                m_logger.LogVerbose() << "RPortMonitoringManagement::ReceiveFieldsoaMlmSwVersion::GetNewSamples::" << recv->Value();
            }
            else
            {
                m_logger.LogError() << "RPortMonitoringManagement::ReceiveFieldsoaMlmSwVersion::GetNewSamples::" << recv->Error().Message();
            }
        }
    }
}
 
void RPortMonitoringManagement::ReceiveFieldsoaMlmSwVersionCyclic()
{
    while (m_running)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_found)
        {
            if (m_interface->soaMlmSwVersion.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
            {
                auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaMlmSwVersion.GetNewSamples([&](auto samplePtr) {
                    RPortMonitoringManagement::ReadValuesoaMlmSwVersion(std::move(samplePtr));
                }));
                if (recv->HasValue())
                {
                    m_logger.LogVerbose() << "RPortMonitoringManagement::ReceiveFieldsoaMlmSwVersion::GetNewSamples::" << recv->Value();
                }
                else
                {
                    m_logger.LogError() << "RPortMonitoringManagement::ReceiveFieldsoaMlmSwVersion::GetNewSamples::" << recv->Error().Message();
                }
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void RPortMonitoringManagement::ReadValuesoaMlmSwVersion(ara::com::SamplePtr<eevp::monitoring::service::proxy::fields::soaMlmSwVersion::FieldType const> samplePtr)
{
    auto value = *samplePtr.Get();
    if (m_receiversoaMlmSwVersion)
    {
        m_receiversoaMlmSwVersion(value);
    }
}
 
void RPortMonitoringManagement::RegistFieldHandlersoaMlmSwVersion(std::function<void(const eevp::monitoring::service::proxy::fields::soaMlmSwVersion::FieldType&)> handler)
{
    m_receiversoaMlmSwVersion = handler;
}
 
void RPortMonitoringManagement::GetsoaMlmSwVersion()
{
    if (m_found)
    {
        auto request = m_interface->soaMlmSwVersion.Get();
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "RPortMonitoringManagement::GetsoaMlmSwVersion::Responded";
            
            auto result = response.Value();
            if (m_receiversoaMlmSwVersion)
            {
                m_receiversoaMlmSwVersion(result);
            }
        }
        else
        {
            m_logger.LogError() << "RPortMonitoringManagement::GetsoaMlmSwVersion::" << response.Error().Message();
        }
    }
}
 
void RPortMonitoringManagement::SubscribesoaPowerDeviceNormal()
{
    if (m_found)
    {
        // regist receiver handler
        // if you want to enable it, please uncomment below code
        // RegistReceiversoaPowerDeviceNormal();
        
        // request subscribe
        auto subscribe = m_interface->soaPowerDeviceNormal.Subscribe(1);
        if (subscribe.HasValue())
        {
            m_logger.LogVerbose() << "RPortMonitoringManagement::SubscribesoaPowerDeviceNormal::Subscribed";
        }
        else
        {
            m_logger.LogError() << "RPortMonitoringManagement::SubscribesoaPowerDeviceNormal::" << subscribe.Error().Message();
        }
    }
}
 
void RPortMonitoringManagement::StopSubscribesoaPowerDeviceNormal()
{
    if (m_found)
    {
        // request stop subscribe
        m_interface->soaPowerDeviceNormal.Unsubscribe();
        m_logger.LogVerbose() << "RPortMonitoringManagement::StopSubscribesoaPowerDeviceNormal::Unsubscribed";
    }
}
 
void RPortMonitoringManagement::RegistReceiversoaPowerDeviceNormal()
{
    if (m_found)
    {
        // set callback
        auto receiver = [this]() -> void {
            return ReceiveFieldsoaPowerDeviceNormalTriggered();
        };
        
        // regist callback
        auto callback = m_interface->soaPowerDeviceNormal.SetReceiveHandler(receiver);
        if (callback.HasValue())
        {
            m_logger.LogVerbose() << "RPortMonitoringManagement::RegistReceiversoaPowerDeviceNormal::SetReceiveHandler";
        }
        else
        {
            m_logger.LogError() << "RPortMonitoringManagement::RegistReceiversoaPowerDeviceNormal::SetReceiveHandler::" << callback.Error().Message();
        }
    }
}
 
void RPortMonitoringManagement::ReceiveFieldsoaPowerDeviceNormalTriggered()
{
    if (m_found)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_interface->soaPowerDeviceNormal.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
        {
            auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaPowerDeviceNormal.GetNewSamples([&](auto samplePtr) {
                RPortMonitoringManagement::ReadValuesoaPowerDeviceNormal(std::move(samplePtr));
            }));
            if (recv->HasValue())
            {
                m_logger.LogVerbose() << "RPortMonitoringManagement::ReceiveFieldsoaPowerDeviceNormal::GetNewSamples::" << recv->Value();
            }
            else
            {
                m_logger.LogError() << "RPortMonitoringManagement::ReceiveFieldsoaPowerDeviceNormal::GetNewSamples::" << recv->Error().Message();
            }
        }
    }
}
 
void RPortMonitoringManagement::ReceiveFieldsoaPowerDeviceNormalCyclic()
{
    while (m_running)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_found)
        {
            if (m_interface->soaPowerDeviceNormal.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
            {
                auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaPowerDeviceNormal.GetNewSamples([&](auto samplePtr) {
                    RPortMonitoringManagement::ReadValuesoaPowerDeviceNormal(std::move(samplePtr));
                }));
                if (recv->HasValue())
                {
                    m_logger.LogVerbose() << "RPortMonitoringManagement::ReceiveFieldsoaPowerDeviceNormal::GetNewSamples::" << recv->Value();
                }
                else
                {
                    m_logger.LogError() << "RPortMonitoringManagement::ReceiveFieldsoaPowerDeviceNormal::GetNewSamples::" << recv->Error().Message();
                }
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void RPortMonitoringManagement::ReadValuesoaPowerDeviceNormal(ara::com::SamplePtr<eevp::monitoring::service::proxy::fields::soaPowerDeviceNormal::FieldType const> samplePtr)
{
    auto value = *samplePtr.Get();
    if (m_receiversoaPowerDeviceNormal)
    {
        m_receiversoaPowerDeviceNormal(value);
    }
}
 
void RPortMonitoringManagement::RegistFieldHandlersoaPowerDeviceNormal(std::function<void(const eevp::monitoring::service::proxy::fields::soaPowerDeviceNormal::FieldType&)> handler)
{
    m_receiversoaPowerDeviceNormal = handler;
}
 
void RPortMonitoringManagement::GetsoaPowerDeviceNormal()
{
    if (m_found)
    {
        auto request = m_interface->soaPowerDeviceNormal.Get();
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "RPortMonitoringManagement::GetsoaPowerDeviceNormal::Responded";
            
            auto result = response.Value();
            if (m_receiversoaPowerDeviceNormal)
            {
                m_receiversoaPowerDeviceNormal(result);
            }
        }
        else
        {
            m_logger.LogError() << "RPortMonitoringManagement::GetsoaPowerDeviceNormal::" << response.Error().Message();
        }
    }
}
 
void RPortMonitoringManagement::SubscribesoaPowerSwVersion()
{
    if (m_found)
    {
        // regist receiver handler
        // if you want to enable it, please uncomment below code
        // RegistReceiversoaPowerSwVersion();
        
        // request subscribe
        auto subscribe = m_interface->soaPowerSwVersion.Subscribe(1);
        if (subscribe.HasValue())
        {
            m_logger.LogVerbose() << "RPortMonitoringManagement::SubscribesoaPowerSwVersion::Subscribed";
        }
        else
        {
            m_logger.LogError() << "RPortMonitoringManagement::SubscribesoaPowerSwVersion::" << subscribe.Error().Message();
        }
    }
}
 
void RPortMonitoringManagement::StopSubscribesoaPowerSwVersion()
{
    if (m_found)
    {
        // request stop subscribe
        m_interface->soaPowerSwVersion.Unsubscribe();
        m_logger.LogVerbose() << "RPortMonitoringManagement::StopSubscribesoaPowerSwVersion::Unsubscribed";
    }
}
 
void RPortMonitoringManagement::RegistReceiversoaPowerSwVersion()
{
    if (m_found)
    {
        // set callback
        auto receiver = [this]() -> void {
            return ReceiveFieldsoaPowerSwVersionTriggered();
        };
        
        // regist callback
        auto callback = m_interface->soaPowerSwVersion.SetReceiveHandler(receiver);
        if (callback.HasValue())
        {
            m_logger.LogVerbose() << "RPortMonitoringManagement::RegistReceiversoaPowerSwVersion::SetReceiveHandler";
        }
        else
        {
            m_logger.LogError() << "RPortMonitoringManagement::RegistReceiversoaPowerSwVersion::SetReceiveHandler::" << callback.Error().Message();
        }
    }
}
 
void RPortMonitoringManagement::ReceiveFieldsoaPowerSwVersionTriggered()
{
    if (m_found)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_interface->soaPowerSwVersion.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
        {
            auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaPowerSwVersion.GetNewSamples([&](auto samplePtr) {
                RPortMonitoringManagement::ReadValuesoaPowerSwVersion(std::move(samplePtr));
            }));
            if (recv->HasValue())
            {
                m_logger.LogVerbose() << "RPortMonitoringManagement::ReceiveFieldsoaPowerSwVersion::GetNewSamples::" << recv->Value();
            }
            else
            {
                m_logger.LogError() << "RPortMonitoringManagement::ReceiveFieldsoaPowerSwVersion::GetNewSamples::" << recv->Error().Message();
            }
        }
    }
}
 
void RPortMonitoringManagement::ReceiveFieldsoaPowerSwVersionCyclic()
{
    while (m_running)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_found)
        {
            if (m_interface->soaPowerSwVersion.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
            {
                auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaPowerSwVersion.GetNewSamples([&](auto samplePtr) {
                    RPortMonitoringManagement::ReadValuesoaPowerSwVersion(std::move(samplePtr));
                }));
                if (recv->HasValue())
                {
                    m_logger.LogVerbose() << "RPortMonitoringManagement::ReceiveFieldsoaPowerSwVersion::GetNewSamples::" << recv->Value();
                }
                else
                {
                    m_logger.LogError() << "RPortMonitoringManagement::ReceiveFieldsoaPowerSwVersion::GetNewSamples::" << recv->Error().Message();
                }
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void RPortMonitoringManagement::ReadValuesoaPowerSwVersion(ara::com::SamplePtr<eevp::monitoring::service::proxy::fields::soaPowerSwVersion::FieldType const> samplePtr)
{
    auto value = *samplePtr.Get();
    if (m_receiversoaPowerSwVersion)
    {
        m_receiversoaPowerSwVersion(value);
    }
}
 
void RPortMonitoringManagement::RegistFieldHandlersoaPowerSwVersion(std::function<void(const eevp::monitoring::service::proxy::fields::soaPowerSwVersion::FieldType&)> handler)
{
    m_receiversoaPowerSwVersion = handler;
}
 
void RPortMonitoringManagement::GetsoaPowerSwVersion()
{
    if (m_found)
    {
        auto request = m_interface->soaPowerSwVersion.Get();
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "RPortMonitoringManagement::GetsoaPowerSwVersion::Responded";
            
            auto result = response.Value();
            if (m_receiversoaPowerSwVersion)
            {
                m_receiversoaPowerSwVersion(result);
            }
        }
        else
        {
            m_logger.LogError() << "RPortMonitoringManagement::GetsoaPowerSwVersion::" << response.Error().Message();
        }
    }
}
 
void RPortMonitoringManagement::SubscribesoaRctnStatus()
{
    if (m_found)
    {
        // regist receiver handler
        // if you want to enable it, please uncomment below code
        // RegistReceiversoaRctnStatus();
        
        // request subscribe
        auto subscribe = m_interface->soaRctnStatus.Subscribe(1);
        if (subscribe.HasValue())
        {
            m_logger.LogVerbose() << "RPortMonitoringManagement::SubscribesoaRctnStatus::Subscribed";
        }
        else
        {
            m_logger.LogError() << "RPortMonitoringManagement::SubscribesoaRctnStatus::" << subscribe.Error().Message();
        }
    }
}
 
void RPortMonitoringManagement::StopSubscribesoaRctnStatus()
{
    if (m_found)
    {
        // request stop subscribe
        m_interface->soaRctnStatus.Unsubscribe();
        m_logger.LogVerbose() << "RPortMonitoringManagement::StopSubscribesoaRctnStatus::Unsubscribed";
    }
}
 
void RPortMonitoringManagement::RegistReceiversoaRctnStatus()
{
    if (m_found)
    {
        // set callback
        auto receiver = [this]() -> void {
            return ReceiveFieldsoaRctnStatusTriggered();
        };
        
        // regist callback
        auto callback = m_interface->soaRctnStatus.SetReceiveHandler(receiver);
        if (callback.HasValue())
        {
            m_logger.LogVerbose() << "RPortMonitoringManagement::RegistReceiversoaRctnStatus::SetReceiveHandler";
        }
        else
        {
            m_logger.LogError() << "RPortMonitoringManagement::RegistReceiversoaRctnStatus::SetReceiveHandler::" << callback.Error().Message();
        }
    }
}
 
void RPortMonitoringManagement::ReceiveFieldsoaRctnStatusTriggered()
{
    if (m_found)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_interface->soaRctnStatus.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
        {
            auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaRctnStatus.GetNewSamples([&](auto samplePtr) {
                RPortMonitoringManagement::ReadValuesoaRctnStatus(std::move(samplePtr));
            }));
            if (recv->HasValue())
            {
                m_logger.LogVerbose() << "RPortMonitoringManagement::ReceiveFieldsoaRctnStatus::GetNewSamples::" << recv->Value();
            }
            else
            {
                m_logger.LogError() << "RPortMonitoringManagement::ReceiveFieldsoaRctnStatus::GetNewSamples::" << recv->Error().Message();
            }
        }
    }
}
 
void RPortMonitoringManagement::ReceiveFieldsoaRctnStatusCyclic()
{
    while (m_running)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_found)
        {
            if (m_interface->soaRctnStatus.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
            {
                auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaRctnStatus.GetNewSamples([&](auto samplePtr) {
                    RPortMonitoringManagement::ReadValuesoaRctnStatus(std::move(samplePtr));
                }));
                if (recv->HasValue())
                {
                    m_logger.LogVerbose() << "RPortMonitoringManagement::ReceiveFieldsoaRctnStatus::GetNewSamples::" << recv->Value();
                }
                else
                {
                    m_logger.LogError() << "RPortMonitoringManagement::ReceiveFieldsoaRctnStatus::GetNewSamples::" << recv->Error().Message();
                }
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void RPortMonitoringManagement::ReadValuesoaRctnStatus(ara::com::SamplePtr<eevp::monitoring::service::proxy::fields::soaRctnStatus::FieldType const> samplePtr)
{
    auto value = *samplePtr.Get();
    if (m_receiversoaRctnStatus)
    {
        m_receiversoaRctnStatus(value);
    }
}
 
void RPortMonitoringManagement::RegistFieldHandlersoaRctnStatus(std::function<void(const eevp::monitoring::service::proxy::fields::soaRctnStatus::FieldType&)> handler)
{
    m_receiversoaRctnStatus = handler;
}
 
void RPortMonitoringManagement::GetsoaRctnStatus()
{
    if (m_found)
    {
        auto request = m_interface->soaRctnStatus.Get();
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "RPortMonitoringManagement::GetsoaRctnStatus::Responded";
            
            auto result = response.Value();
            if (m_receiversoaRctnStatus)
            {
                m_receiversoaRctnStatus(result);
            }
        }
        else
        {
            m_logger.LogError() << "RPortMonitoringManagement::GetsoaRctnStatus::" << response.Error().Message();
        }
    }
}
 
void RPortMonitoringManagement::SubscribesoaRctnSwVersion()
{
    if (m_found)
    {
        // regist receiver handler
        // if you want to enable it, please uncomment below code
        // RegistReceiversoaRctnSwVersion();
        
        // request subscribe
        auto subscribe = m_interface->soaRctnSwVersion.Subscribe(1);
        if (subscribe.HasValue())
        {
            m_logger.LogVerbose() << "RPortMonitoringManagement::SubscribesoaRctnSwVersion::Subscribed";
        }
        else
        {
            m_logger.LogError() << "RPortMonitoringManagement::SubscribesoaRctnSwVersion::" << subscribe.Error().Message();
        }
    }
}
 
void RPortMonitoringManagement::StopSubscribesoaRctnSwVersion()
{
    if (m_found)
    {
        // request stop subscribe
        m_interface->soaRctnSwVersion.Unsubscribe();
        m_logger.LogVerbose() << "RPortMonitoringManagement::StopSubscribesoaRctnSwVersion::Unsubscribed";
    }
}
 
void RPortMonitoringManagement::RegistReceiversoaRctnSwVersion()
{
    if (m_found)
    {
        // set callback
        auto receiver = [this]() -> void {
            return ReceiveFieldsoaRctnSwVersionTriggered();
        };
        
        // regist callback
        auto callback = m_interface->soaRctnSwVersion.SetReceiveHandler(receiver);
        if (callback.HasValue())
        {
            m_logger.LogVerbose() << "RPortMonitoringManagement::RegistReceiversoaRctnSwVersion::SetReceiveHandler";
        }
        else
        {
            m_logger.LogError() << "RPortMonitoringManagement::RegistReceiversoaRctnSwVersion::SetReceiveHandler::" << callback.Error().Message();
        }
    }
}
 
void RPortMonitoringManagement::ReceiveFieldsoaRctnSwVersionTriggered()
{
    if (m_found)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_interface->soaRctnSwVersion.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
        {
            auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaRctnSwVersion.GetNewSamples([&](auto samplePtr) {
                RPortMonitoringManagement::ReadValuesoaRctnSwVersion(std::move(samplePtr));
            }));
            if (recv->HasValue())
            {
                m_logger.LogVerbose() << "RPortMonitoringManagement::ReceiveFieldsoaRctnSwVersion::GetNewSamples::" << recv->Value();
            }
            else
            {
                m_logger.LogError() << "RPortMonitoringManagement::ReceiveFieldsoaRctnSwVersion::GetNewSamples::" << recv->Error().Message();
            }
        }
    }
}
 
void RPortMonitoringManagement::ReceiveFieldsoaRctnSwVersionCyclic()
{
    while (m_running)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_found)
        {
            if (m_interface->soaRctnSwVersion.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
            {
                auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaRctnSwVersion.GetNewSamples([&](auto samplePtr) {
                    RPortMonitoringManagement::ReadValuesoaRctnSwVersion(std::move(samplePtr));
                }));
                if (recv->HasValue())
                {
                    m_logger.LogVerbose() << "RPortMonitoringManagement::ReceiveFieldsoaRctnSwVersion::GetNewSamples::" << recv->Value();
                }
                else
                {
                    m_logger.LogError() << "RPortMonitoringManagement::ReceiveFieldsoaRctnSwVersion::GetNewSamples::" << recv->Error().Message();
                }
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void RPortMonitoringManagement::ReadValuesoaRctnSwVersion(ara::com::SamplePtr<eevp::monitoring::service::proxy::fields::soaRctnSwVersion::FieldType const> samplePtr)
{
    auto value = *samplePtr.Get();
    if (m_receiversoaRctnSwVersion)
    {
        m_receiversoaRctnSwVersion(value);
    }
}
 
void RPortMonitoringManagement::RegistFieldHandlersoaRctnSwVersion(std::function<void(const eevp::monitoring::service::proxy::fields::soaRctnSwVersion::FieldType&)> handler)
{
    m_receiversoaRctnSwVersion = handler;
}
 
void RPortMonitoringManagement::GetsoaRctnSwVersion()
{
    if (m_found)
    {
        auto request = m_interface->soaRctnSwVersion.Get();
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "RPortMonitoringManagement::GetsoaRctnSwVersion::Responded";
            
            auto result = response.Value();
            if (m_receiversoaRctnSwVersion)
            {
                m_receiversoaRctnSwVersion(result);
            }
        }
        else
        {
            m_logger.LogError() << "RPortMonitoringManagement::GetsoaRctnSwVersion::" << response.Error().Message();
        }
    }
}
 
void RPortMonitoringManagement::SubscribesoaRoaDetectState()
{
    if (m_found)
    {
        // regist receiver handler
        // if you want to enable it, please uncomment below code
        // RegistReceiversoaRoaDetectState();
        
        // request subscribe
        auto subscribe = m_interface->soaRoaDetectState.Subscribe(1);
        if (subscribe.HasValue())
        {
            m_logger.LogVerbose() << "RPortMonitoringManagement::SubscribesoaRoaDetectState::Subscribed";
        }
        else
        {
            m_logger.LogError() << "RPortMonitoringManagement::SubscribesoaRoaDetectState::" << subscribe.Error().Message();
        }
    }
}
 
void RPortMonitoringManagement::StopSubscribesoaRoaDetectState()
{
    if (m_found)
    {
        // request stop subscribe
        m_interface->soaRoaDetectState.Unsubscribe();
        m_logger.LogVerbose() << "RPortMonitoringManagement::StopSubscribesoaRoaDetectState::Unsubscribed";
    }
}
 
void RPortMonitoringManagement::RegistReceiversoaRoaDetectState()
{
    if (m_found)
    {
        // set callback
        auto receiver = [this]() -> void {
            return ReceiveFieldsoaRoaDetectStateTriggered();
        };
        
        // regist callback
        auto callback = m_interface->soaRoaDetectState.SetReceiveHandler(receiver);
        if (callback.HasValue())
        {
            m_logger.LogVerbose() << "RPortMonitoringManagement::RegistReceiversoaRoaDetectState::SetReceiveHandler";
        }
        else
        {
            m_logger.LogError() << "RPortMonitoringManagement::RegistReceiversoaRoaDetectState::SetReceiveHandler::" << callback.Error().Message();
        }
    }
}
 
void RPortMonitoringManagement::ReceiveFieldsoaRoaDetectStateTriggered()
{
    if (m_found)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_interface->soaRoaDetectState.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
        {
            auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaRoaDetectState.GetNewSamples([&](auto samplePtr) {
                RPortMonitoringManagement::ReadValuesoaRoaDetectState(std::move(samplePtr));
            }));
            if (recv->HasValue())
            {
                m_logger.LogVerbose() << "RPortMonitoringManagement::ReceiveFieldsoaRoaDetectState::GetNewSamples::" << recv->Value();
            }
            else
            {
                m_logger.LogError() << "RPortMonitoringManagement::ReceiveFieldsoaRoaDetectState::GetNewSamples::" << recv->Error().Message();
            }
        }
    }
}
 
void RPortMonitoringManagement::ReceiveFieldsoaRoaDetectStateCyclic()
{
    while (m_running)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_found)
        {
            if (m_interface->soaRoaDetectState.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
            {
                auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaRoaDetectState.GetNewSamples([&](auto samplePtr) {
                    RPortMonitoringManagement::ReadValuesoaRoaDetectState(std::move(samplePtr));
                }));
                if (recv->HasValue())
                {
                    m_logger.LogVerbose() << "RPortMonitoringManagement::ReceiveFieldsoaRoaDetectState::GetNewSamples::" << recv->Value();
                }
                else
                {
                    m_logger.LogError() << "RPortMonitoringManagement::ReceiveFieldsoaRoaDetectState::GetNewSamples::" << recv->Error().Message();
                }
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void RPortMonitoringManagement::ReadValuesoaRoaDetectState(ara::com::SamplePtr<eevp::monitoring::service::proxy::fields::soaRoaDetectState::FieldType const> samplePtr)
{
    auto value = *samplePtr.Get();
    if (m_receiversoaRoaDetectState)
    {
        m_receiversoaRoaDetectState(value);
    }
}
 
void RPortMonitoringManagement::RegistFieldHandlersoaRoaDetectState(std::function<void(const eevp::monitoring::service::proxy::fields::soaRoaDetectState::FieldType&)> handler)
{
    m_receiversoaRoaDetectState = handler;
}
 
void RPortMonitoringManagement::GetsoaRoaDetectState()
{
    if (m_found)
    {
        auto request = m_interface->soaRoaDetectState.Get();
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "RPortMonitoringManagement::GetsoaRoaDetectState::Responded";
            
            auto result = response.Value();
            if (m_receiversoaRoaDetectState)
            {
                m_receiversoaRoaDetectState(result);
            }
        }
        else
        {
            m_logger.LogError() << "RPortMonitoringManagement::GetsoaRoaDetectState::" << response.Error().Message();
        }
    }
}
 
void RPortMonitoringManagement::SubscribesoaRoaDeviceNormal()
{
    if (m_found)
    {
        // regist receiver handler
        // if you want to enable it, please uncomment below code
        // RegistReceiversoaRoaDeviceNormal();
        
        // request subscribe
        auto subscribe = m_interface->soaRoaDeviceNormal.Subscribe(1);
        if (subscribe.HasValue())
        {
            m_logger.LogVerbose() << "RPortMonitoringManagement::SubscribesoaRoaDeviceNormal::Subscribed";
        }
        else
        {
            m_logger.LogError() << "RPortMonitoringManagement::SubscribesoaRoaDeviceNormal::" << subscribe.Error().Message();
        }
    }
}
 
void RPortMonitoringManagement::StopSubscribesoaRoaDeviceNormal()
{
    if (m_found)
    {
        // request stop subscribe
        m_interface->soaRoaDeviceNormal.Unsubscribe();
        m_logger.LogVerbose() << "RPortMonitoringManagement::StopSubscribesoaRoaDeviceNormal::Unsubscribed";
    }
}
 
void RPortMonitoringManagement::RegistReceiversoaRoaDeviceNormal()
{
    if (m_found)
    {
        // set callback
        auto receiver = [this]() -> void {
            return ReceiveFieldsoaRoaDeviceNormalTriggered();
        };
        
        // regist callback
        auto callback = m_interface->soaRoaDeviceNormal.SetReceiveHandler(receiver);
        if (callback.HasValue())
        {
            m_logger.LogVerbose() << "RPortMonitoringManagement::RegistReceiversoaRoaDeviceNormal::SetReceiveHandler";
        }
        else
        {
            m_logger.LogError() << "RPortMonitoringManagement::RegistReceiversoaRoaDeviceNormal::SetReceiveHandler::" << callback.Error().Message();
        }
    }
}
 
void RPortMonitoringManagement::ReceiveFieldsoaRoaDeviceNormalTriggered()
{
    if (m_found)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_interface->soaRoaDeviceNormal.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
        {
            auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaRoaDeviceNormal.GetNewSamples([&](auto samplePtr) {
                RPortMonitoringManagement::ReadValuesoaRoaDeviceNormal(std::move(samplePtr));
            }));
            if (recv->HasValue())
            {
                m_logger.LogVerbose() << "RPortMonitoringManagement::ReceiveFieldsoaRoaDeviceNormal::GetNewSamples::" << recv->Value();
            }
            else
            {
                m_logger.LogError() << "RPortMonitoringManagement::ReceiveFieldsoaRoaDeviceNormal::GetNewSamples::" << recv->Error().Message();
            }
        }
    }
}
 
void RPortMonitoringManagement::ReceiveFieldsoaRoaDeviceNormalCyclic()
{
    while (m_running)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_found)
        {
            if (m_interface->soaRoaDeviceNormal.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
            {
                auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaRoaDeviceNormal.GetNewSamples([&](auto samplePtr) {
                    RPortMonitoringManagement::ReadValuesoaRoaDeviceNormal(std::move(samplePtr));
                }));
                if (recv->HasValue())
                {
                    m_logger.LogVerbose() << "RPortMonitoringManagement::ReceiveFieldsoaRoaDeviceNormal::GetNewSamples::" << recv->Value();
                }
                else
                {
                    m_logger.LogError() << "RPortMonitoringManagement::ReceiveFieldsoaRoaDeviceNormal::GetNewSamples::" << recv->Error().Message();
                }
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void RPortMonitoringManagement::ReadValuesoaRoaDeviceNormal(ara::com::SamplePtr<eevp::monitoring::service::proxy::fields::soaRoaDeviceNormal::FieldType const> samplePtr)
{
    auto value = *samplePtr.Get();
    if (m_receiversoaRoaDeviceNormal)
    {
        m_receiversoaRoaDeviceNormal(value);
    }
}
 
void RPortMonitoringManagement::RegistFieldHandlersoaRoaDeviceNormal(std::function<void(const eevp::monitoring::service::proxy::fields::soaRoaDeviceNormal::FieldType&)> handler)
{
    m_receiversoaRoaDeviceNormal = handler;
}
 
void RPortMonitoringManagement::GetsoaRoaDeviceNormal()
{
    if (m_found)
    {
        auto request = m_interface->soaRoaDeviceNormal.Get();
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "RPortMonitoringManagement::GetsoaRoaDeviceNormal::Responded";
            
            auto result = response.Value();
            if (m_receiversoaRoaDeviceNormal)
            {
                m_receiversoaRoaDeviceNormal(result);
            }
        }
        else
        {
            m_logger.LogError() << "RPortMonitoringManagement::GetsoaRoaDeviceNormal::" << response.Error().Message();
        }
    }
}
 
void RPortMonitoringManagement::SubscribesoaRoaSwVersion()
{
    if (m_found)
    {
        // regist receiver handler
        // if you want to enable it, please uncomment below code
        // RegistReceiversoaRoaSwVersion();
        
        // request subscribe
        auto subscribe = m_interface->soaRoaSwVersion.Subscribe(1);
        if (subscribe.HasValue())
        {
            m_logger.LogVerbose() << "RPortMonitoringManagement::SubscribesoaRoaSwVersion::Subscribed";
        }
        else
        {
            m_logger.LogError() << "RPortMonitoringManagement::SubscribesoaRoaSwVersion::" << subscribe.Error().Message();
        }
    }
}
 
void RPortMonitoringManagement::StopSubscribesoaRoaSwVersion()
{
    if (m_found)
    {
        // request stop subscribe
        m_interface->soaRoaSwVersion.Unsubscribe();
        m_logger.LogVerbose() << "RPortMonitoringManagement::StopSubscribesoaRoaSwVersion::Unsubscribed";
    }
}
 
void RPortMonitoringManagement::RegistReceiversoaRoaSwVersion()
{
    if (m_found)
    {
        // set callback
        auto receiver = [this]() -> void {
            return ReceiveFieldsoaRoaSwVersionTriggered();
        };
        
        // regist callback
        auto callback = m_interface->soaRoaSwVersion.SetReceiveHandler(receiver);
        if (callback.HasValue())
        {
            m_logger.LogVerbose() << "RPortMonitoringManagement::RegistReceiversoaRoaSwVersion::SetReceiveHandler";
        }
        else
        {
            m_logger.LogError() << "RPortMonitoringManagement::RegistReceiversoaRoaSwVersion::SetReceiveHandler::" << callback.Error().Message();
        }
    }
}
 
void RPortMonitoringManagement::ReceiveFieldsoaRoaSwVersionTriggered()
{
    if (m_found)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_interface->soaRoaSwVersion.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
        {
            auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaRoaSwVersion.GetNewSamples([&](auto samplePtr) {
                RPortMonitoringManagement::ReadValuesoaRoaSwVersion(std::move(samplePtr));
            }));
            if (recv->HasValue())
            {
                m_logger.LogVerbose() << "RPortMonitoringManagement::ReceiveFieldsoaRoaSwVersion::GetNewSamples::" << recv->Value();
            }
            else
            {
                m_logger.LogError() << "RPortMonitoringManagement::ReceiveFieldsoaRoaSwVersion::GetNewSamples::" << recv->Error().Message();
            }
        }
    }
}
 
void RPortMonitoringManagement::ReceiveFieldsoaRoaSwVersionCyclic()
{
    while (m_running)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_found)
        {
            if (m_interface->soaRoaSwVersion.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
            {
                auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaRoaSwVersion.GetNewSamples([&](auto samplePtr) {
                    RPortMonitoringManagement::ReadValuesoaRoaSwVersion(std::move(samplePtr));
                }));
                if (recv->HasValue())
                {
                    m_logger.LogVerbose() << "RPortMonitoringManagement::ReceiveFieldsoaRoaSwVersion::GetNewSamples::" << recv->Value();
                }
                else
                {
                    m_logger.LogError() << "RPortMonitoringManagement::ReceiveFieldsoaRoaSwVersion::GetNewSamples::" << recv->Error().Message();
                }
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void RPortMonitoringManagement::ReadValuesoaRoaSwVersion(ara::com::SamplePtr<eevp::monitoring::service::proxy::fields::soaRoaSwVersion::FieldType const> samplePtr)
{
    auto value = *samplePtr.Get();
    if (m_receiversoaRoaSwVersion)
    {
        m_receiversoaRoaSwVersion(value);
    }
}
 
void RPortMonitoringManagement::RegistFieldHandlersoaRoaSwVersion(std::function<void(const eevp::monitoring::service::proxy::fields::soaRoaSwVersion::FieldType&)> handler)
{
    m_receiversoaRoaSwVersion = handler;
}
 
void RPortMonitoringManagement::GetsoaRoaSwVersion()
{
    if (m_found)
    {
        auto request = m_interface->soaRoaSwVersion.Get();
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "RPortMonitoringManagement::GetsoaRoaSwVersion::Responded";
            
            auto result = response.Value();
            if (m_receiversoaRoaSwVersion)
            {
                m_receiversoaRoaSwVersion(result);
            }
        }
        else
        {
            m_logger.LogError() << "RPortMonitoringManagement::GetsoaRoaSwVersion::" << response.Error().Message();
        }
    }
}
 
void RPortMonitoringManagement::SubscribesoaWiperDeviceNormal()
{
    if (m_found)
    {
        // regist receiver handler
        // if you want to enable it, please uncomment below code
        // RegistReceiversoaWiperDeviceNormal();
        
        // request subscribe
        auto subscribe = m_interface->soaWiperDeviceNormal.Subscribe(1);
        if (subscribe.HasValue())
        {
            m_logger.LogVerbose() << "RPortMonitoringManagement::SubscribesoaWiperDeviceNormal::Subscribed";
        }
        else
        {
            m_logger.LogError() << "RPortMonitoringManagement::SubscribesoaWiperDeviceNormal::" << subscribe.Error().Message();
        }
    }
}
 
void RPortMonitoringManagement::StopSubscribesoaWiperDeviceNormal()
{
    if (m_found)
    {
        // request stop subscribe
        m_interface->soaWiperDeviceNormal.Unsubscribe();
        m_logger.LogVerbose() << "RPortMonitoringManagement::StopSubscribesoaWiperDeviceNormal::Unsubscribed";
    }
}
 
void RPortMonitoringManagement::RegistReceiversoaWiperDeviceNormal()
{
    if (m_found)
    {
        // set callback
        auto receiver = [this]() -> void {
            return ReceiveFieldsoaWiperDeviceNormalTriggered();
        };
        
        // regist callback
        auto callback = m_interface->soaWiperDeviceNormal.SetReceiveHandler(receiver);
        if (callback.HasValue())
        {
            m_logger.LogVerbose() << "RPortMonitoringManagement::RegistReceiversoaWiperDeviceNormal::SetReceiveHandler";
        }
        else
        {
            m_logger.LogError() << "RPortMonitoringManagement::RegistReceiversoaWiperDeviceNormal::SetReceiveHandler::" << callback.Error().Message();
        }
    }
}
 
void RPortMonitoringManagement::ReceiveFieldsoaWiperDeviceNormalTriggered()
{
    if (m_found)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_interface->soaWiperDeviceNormal.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
        {
            auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaWiperDeviceNormal.GetNewSamples([&](auto samplePtr) {
                RPortMonitoringManagement::ReadValuesoaWiperDeviceNormal(std::move(samplePtr));
            }));
            if (recv->HasValue())
            {
                m_logger.LogVerbose() << "RPortMonitoringManagement::ReceiveFieldsoaWiperDeviceNormal::GetNewSamples::" << recv->Value();
            }
            else
            {
                m_logger.LogError() << "RPortMonitoringManagement::ReceiveFieldsoaWiperDeviceNormal::GetNewSamples::" << recv->Error().Message();
            }
        }
    }
}
 
void RPortMonitoringManagement::ReceiveFieldsoaWiperDeviceNormalCyclic()
{
    while (m_running)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_found)
        {
            if (m_interface->soaWiperDeviceNormal.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
            {
                auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaWiperDeviceNormal.GetNewSamples([&](auto samplePtr) {
                    RPortMonitoringManagement::ReadValuesoaWiperDeviceNormal(std::move(samplePtr));
                }));
                if (recv->HasValue())
                {
                    m_logger.LogVerbose() << "RPortMonitoringManagement::ReceiveFieldsoaWiperDeviceNormal::GetNewSamples::" << recv->Value();
                }
                else
                {
                    m_logger.LogError() << "RPortMonitoringManagement::ReceiveFieldsoaWiperDeviceNormal::GetNewSamples::" << recv->Error().Message();
                }
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void RPortMonitoringManagement::ReadValuesoaWiperDeviceNormal(ara::com::SamplePtr<eevp::monitoring::service::proxy::fields::soaWiperDeviceNormal::FieldType const> samplePtr)
{
    auto value = *samplePtr.Get();
    if (m_receiversoaWiperDeviceNormal)
    {
        m_receiversoaWiperDeviceNormal(value);
    }
}
 
void RPortMonitoringManagement::RegistFieldHandlersoaWiperDeviceNormal(std::function<void(const eevp::monitoring::service::proxy::fields::soaWiperDeviceNormal::FieldType&)> handler)
{
    m_receiversoaWiperDeviceNormal = handler;
}
 
void RPortMonitoringManagement::GetsoaWiperDeviceNormal()
{
    if (m_found)
    {
        auto request = m_interface->soaWiperDeviceNormal.Get();
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "RPortMonitoringManagement::GetsoaWiperDeviceNormal::Responded";
            
            auto result = response.Value();
            if (m_receiversoaWiperDeviceNormal)
            {
                m_receiversoaWiperDeviceNormal(result);
            }
        }
        else
        {
            m_logger.LogError() << "RPortMonitoringManagement::GetsoaWiperDeviceNormal::" << response.Error().Message();
        }
    }
}
 
void RPortMonitoringManagement::SubscribesoaWiperStatus()
{
    if (m_found)
    {
        // regist receiver handler
        // if you want to enable it, please uncomment below code
        // RegistReceiversoaWiperStatus();
        
        // request subscribe
        auto subscribe = m_interface->soaWiperStatus.Subscribe(1);
        if (subscribe.HasValue())
        {
            m_logger.LogVerbose() << "RPortMonitoringManagement::SubscribesoaWiperStatus::Subscribed";
        }
        else
        {
            m_logger.LogError() << "RPortMonitoringManagement::SubscribesoaWiperStatus::" << subscribe.Error().Message();
        }
    }
}
 
void RPortMonitoringManagement::StopSubscribesoaWiperStatus()
{
    if (m_found)
    {
        // request stop subscribe
        m_interface->soaWiperStatus.Unsubscribe();
        m_logger.LogVerbose() << "RPortMonitoringManagement::StopSubscribesoaWiperStatus::Unsubscribed";
    }
}
 
void RPortMonitoringManagement::RegistReceiversoaWiperStatus()
{
    if (m_found)
    {
        // set callback
        auto receiver = [this]() -> void {
            return ReceiveFieldsoaWiperStatusTriggered();
        };
        
        // regist callback
        auto callback = m_interface->soaWiperStatus.SetReceiveHandler(receiver);
        if (callback.HasValue())
        {
            m_logger.LogVerbose() << "RPortMonitoringManagement::RegistReceiversoaWiperStatus::SetReceiveHandler";
        }
        else
        {
            m_logger.LogError() << "RPortMonitoringManagement::RegistReceiversoaWiperStatus::SetReceiveHandler::" << callback.Error().Message();
        }
    }
}
 
void RPortMonitoringManagement::ReceiveFieldsoaWiperStatusTriggered()
{
    if (m_found)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_interface->soaWiperStatus.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
        {
            auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaWiperStatus.GetNewSamples([&](auto samplePtr) {
                RPortMonitoringManagement::ReadValuesoaWiperStatus(std::move(samplePtr));
            }));
            if (recv->HasValue())
            {
                m_logger.LogVerbose() << "RPortMonitoringManagement::ReceiveFieldsoaWiperStatus::GetNewSamples::" << recv->Value();
            }
            else
            {
                m_logger.LogError() << "RPortMonitoringManagement::ReceiveFieldsoaWiperStatus::GetNewSamples::" << recv->Error().Message();
            }
        }
    }
}
 
void RPortMonitoringManagement::ReceiveFieldsoaWiperStatusCyclic()
{
    while (m_running)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_found)
        {
            if (m_interface->soaWiperStatus.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
            {
                auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaWiperStatus.GetNewSamples([&](auto samplePtr) {
                    RPortMonitoringManagement::ReadValuesoaWiperStatus(std::move(samplePtr));
                }));
                if (recv->HasValue())
                {
                    m_logger.LogVerbose() << "RPortMonitoringManagement::ReceiveFieldsoaWiperStatus::GetNewSamples::" << recv->Value();
                }
                else
                {
                    m_logger.LogError() << "RPortMonitoringManagement::ReceiveFieldsoaWiperStatus::GetNewSamples::" << recv->Error().Message();
                }
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void RPortMonitoringManagement::ReadValuesoaWiperStatus(ara::com::SamplePtr<eevp::monitoring::service::proxy::fields::soaWiperStatus::FieldType const> samplePtr)
{
    auto value = *samplePtr.Get();
    if (m_receiversoaWiperStatus)
    {
        m_receiversoaWiperStatus(value);
    }
}
 
void RPortMonitoringManagement::RegistFieldHandlersoaWiperStatus(std::function<void(const eevp::monitoring::service::proxy::fields::soaWiperStatus::FieldType&)> handler)
{
    m_receiversoaWiperStatus = handler;
}
 
void RPortMonitoringManagement::GetsoaWiperStatus()
{
    if (m_found)
    {
        auto request = m_interface->soaWiperStatus.Get();
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "RPortMonitoringManagement::GetsoaWiperStatus::Responded";
            
            auto result = response.Value();
            if (m_receiversoaWiperStatus)
            {
                m_receiversoaWiperStatus(result);
            }
        }
        else
        {
            m_logger.LogError() << "RPortMonitoringManagement::GetsoaWiperStatus::" << response.Error().Message();
        }
    }
}
 
void RPortMonitoringManagement::SubscribesoaWiperSwVersion()
{
    if (m_found)
    {
        // regist receiver handler
        // if you want to enable it, please uncomment below code
        // RegistReceiversoaWiperSwVersion();
        
        // request subscribe
        auto subscribe = m_interface->soaWiperSwVersion.Subscribe(1);
        if (subscribe.HasValue())
        {
            m_logger.LogVerbose() << "RPortMonitoringManagement::SubscribesoaWiperSwVersion::Subscribed";
        }
        else
        {
            m_logger.LogError() << "RPortMonitoringManagement::SubscribesoaWiperSwVersion::" << subscribe.Error().Message();
        }
    }
}
 
void RPortMonitoringManagement::StopSubscribesoaWiperSwVersion()
{
    if (m_found)
    {
        // request stop subscribe
        m_interface->soaWiperSwVersion.Unsubscribe();
        m_logger.LogVerbose() << "RPortMonitoringManagement::StopSubscribesoaWiperSwVersion::Unsubscribed";
    }
}
 
void RPortMonitoringManagement::RegistReceiversoaWiperSwVersion()
{
    if (m_found)
    {
        // set callback
        auto receiver = [this]() -> void {
            return ReceiveFieldsoaWiperSwVersionTriggered();
        };
        
        // regist callback
        auto callback = m_interface->soaWiperSwVersion.SetReceiveHandler(receiver);
        if (callback.HasValue())
        {
            m_logger.LogVerbose() << "RPortMonitoringManagement::RegistReceiversoaWiperSwVersion::SetReceiveHandler";
        }
        else
        {
            m_logger.LogError() << "RPortMonitoringManagement::RegistReceiversoaWiperSwVersion::SetReceiveHandler::" << callback.Error().Message();
        }
    }
}
 
void RPortMonitoringManagement::ReceiveFieldsoaWiperSwVersionTriggered()
{
    if (m_found)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_interface->soaWiperSwVersion.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
        {
            auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaWiperSwVersion.GetNewSamples([&](auto samplePtr) {
                RPortMonitoringManagement::ReadValuesoaWiperSwVersion(std::move(samplePtr));
            }));
            if (recv->HasValue())
            {
                m_logger.LogVerbose() << "RPortMonitoringManagement::ReceiveFieldsoaWiperSwVersion::GetNewSamples::" << recv->Value();
            }
            else
            {
                m_logger.LogError() << "RPortMonitoringManagement::ReceiveFieldsoaWiperSwVersion::GetNewSamples::" << recv->Error().Message();
            }
        }
    }
}
 
void RPortMonitoringManagement::ReceiveFieldsoaWiperSwVersionCyclic()
{
    while (m_running)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_found)
        {
            if (m_interface->soaWiperSwVersion.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
            {
                auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaWiperSwVersion.GetNewSamples([&](auto samplePtr) {
                    RPortMonitoringManagement::ReadValuesoaWiperSwVersion(std::move(samplePtr));
                }));
                if (recv->HasValue())
                {
                    m_logger.LogVerbose() << "RPortMonitoringManagement::ReceiveFieldsoaWiperSwVersion::GetNewSamples::" << recv->Value();
                }
                else
                {
                    m_logger.LogError() << "RPortMonitoringManagement::ReceiveFieldsoaWiperSwVersion::GetNewSamples::" << recv->Error().Message();
                }
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void RPortMonitoringManagement::ReadValuesoaWiperSwVersion(ara::com::SamplePtr<eevp::monitoring::service::proxy::fields::soaWiperSwVersion::FieldType const> samplePtr)
{
    auto value = *samplePtr.Get();
    if (m_receiversoaWiperSwVersion)
    {
        m_receiversoaWiperSwVersion(value);
    }
}
 
void RPortMonitoringManagement::RegistFieldHandlersoaWiperSwVersion(std::function<void(const eevp::monitoring::service::proxy::fields::soaWiperSwVersion::FieldType&)> handler)
{
    m_receiversoaWiperSwVersion = handler;
}
 
void RPortMonitoringManagement::GetsoaWiperSwVersion()
{
    if (m_found)
    {
        auto request = m_interface->soaWiperSwVersion.Get();
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "RPortMonitoringManagement::GetsoaWiperSwVersion::Responded";
            
            auto result = response.Value();
            if (m_receiversoaWiperSwVersion)
            {
                m_receiversoaWiperSwVersion(result);
            }
        }
        else
        {
            m_logger.LogError() << "RPortMonitoringManagement::GetsoaWiperSwVersion::" << response.Error().Message();
        }
    }
}
 
void RPortMonitoringManagement::RequestRequestMlmSetRgbColor(const std::uint8_t& colorTableIndex)
{
    if (m_found)
    {
        auto request = m_interface->RequestMlmSetRgbColor(colorTableIndex);
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "RPortMonitoringManagement::RequestRequestMlmSetRgbColor::Responded";
            
            auto result = response.Value();
            if (m_responderRequestMlmSetRgbColor)
            {
                m_responderRequestMlmSetRgbColor(result);
            }
        }
        else
        {
            m_logger.LogError() << "RPortMonitoringManagement::RequestRequestMlmSetRgbColor::" << response.Error().Message();
        }
    }
}
 
void RPortMonitoringManagement::RegistResponseHandlerRequestMlmSetRgbColor(std::function<void(const eevp::monitoring::service::proxy::methods::RequestMlmSetRgbColor::Output&)> handler)
{
    m_responderRequestMlmSetRgbColor = handler;
}
 
void RPortMonitoringManagement::RequestRequestMoveDrvSeatHeight(const eevp::control::SoaSeatHeightDirection& dir)
{
    if (m_found)
    {
        auto request = m_interface->RequestMoveDrvSeatHeight(dir);
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "RPortMonitoringManagement::RequestRequestMoveDrvSeatHeight::Responded";
            
            auto result = response.Value();
            if (m_responderRequestMoveDrvSeatHeight)
            {
                m_responderRequestMoveDrvSeatHeight(result);
            }
        }
        else
        {
            m_logger.LogError() << "RPortMonitoringManagement::RequestRequestMoveDrvSeatHeight::" << response.Error().Message();
        }
    }
}
 
void RPortMonitoringManagement::RegistResponseHandlerRequestMoveDrvSeatHeight(std::function<void(const eevp::monitoring::service::proxy::methods::RequestMoveDrvSeatHeight::Output&)> handler)
{
    m_responderRequestMoveDrvSeatHeight = handler;
}
 
void RPortMonitoringManagement::RequestRequestMoveDrvSeatRecline(const eevp::control::SoaSeatReclineDirection& dir)
{
    if (m_found)
    {
        auto request = m_interface->RequestMoveDrvSeatRecline(dir);
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "RPortMonitoringManagement::RequestRequestMoveDrvSeatRecline::Responded";
            
            auto result = response.Value();
            if (m_responderRequestMoveDrvSeatRecline)
            {
                m_responderRequestMoveDrvSeatRecline(result);
            }
        }
        else
        {
            m_logger.LogError() << "RPortMonitoringManagement::RequestRequestMoveDrvSeatRecline::" << response.Error().Message();
        }
    }
}
 
void RPortMonitoringManagement::RegistResponseHandlerRequestMoveDrvSeatRecline(std::function<void(const eevp::monitoring::service::proxy::methods::RequestMoveDrvSeatRecline::Output&)> handler)
{
    m_responderRequestMoveDrvSeatRecline = handler;
}
 
void RPortMonitoringManagement::RequestRequestMoveDrvSeatSlide(const eevp::control::SoaSeatSlideDirection& dir)
{
    if (m_found)
    {
        auto request = m_interface->RequestMoveDrvSeatSlide(dir);
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "RPortMonitoringManagement::RequestRequestMoveDrvSeatSlide::Responded";
            
            auto result = response.Value();
            if (m_responderRequestMoveDrvSeatSlide)
            {
                m_responderRequestMoveDrvSeatSlide(result);
            }
        }
        else
        {
            m_logger.LogError() << "RPortMonitoringManagement::RequestRequestMoveDrvSeatSlide::" << response.Error().Message();
        }
    }
}
 
void RPortMonitoringManagement::RegistResponseHandlerRequestMoveDrvSeatSlide(std::function<void(const eevp::monitoring::service::proxy::methods::RequestMoveDrvSeatSlide::Output&)> handler)
{
    m_responderRequestMoveDrvSeatSlide = handler;
}
 
void RPortMonitoringManagement::RequestRequestMoveDrvSeatTilt(const eevp::control::SoaSeatTiltDirection& dir)
{
    if (m_found)
    {
        auto request = m_interface->RequestMoveDrvSeatTilt(dir);
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "RPortMonitoringManagement::RequestRequestMoveDrvSeatTilt::Responded";
            
            auto result = response.Value();
            if (m_responderRequestMoveDrvSeatTilt)
            {
                m_responderRequestMoveDrvSeatTilt(result);
            }
        }
        else
        {
            m_logger.LogError() << "RPortMonitoringManagement::RequestRequestMoveDrvSeatTilt::" << response.Error().Message();
        }
    }
}
 
void RPortMonitoringManagement::RegistResponseHandlerRequestMoveDrvSeatTilt(std::function<void(const eevp::monitoring::service::proxy::methods::RequestMoveDrvSeatTilt::Output&)> handler)
{
    m_responderRequestMoveDrvSeatTilt = handler;
}
 
void RPortMonitoringManagement::RequestRequestRearCurtainOperation(const eevp::control::SoaRctnMotorDir& motorDir)
{
    if (m_found)
    {
        auto request = m_interface->RequestRearCurtainOperation(motorDir);
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "RPortMonitoringManagement::RequestRequestRearCurtainOperation::Responded";
            
            auto result = response.Value();
            if (m_responderRequestRearCurtainOperation)
            {
                m_responderRequestRearCurtainOperation(result);
            }
        }
        else
        {
            m_logger.LogError() << "RPortMonitoringManagement::RequestRequestRearCurtainOperation::" << response.Error().Message();
        }
    }
}
 
void RPortMonitoringManagement::RegistResponseHandlerRequestRearCurtainOperation(std::function<void(const eevp::monitoring::service::proxy::methods::RequestRearCurtainOperation::Output&)> handler)
{
    m_responderRequestRearCurtainOperation = handler;
}
 
void RPortMonitoringManagement::RequestRequestRearCurtainPosition(const std::uint8_t& posPercentage)
{
    if (m_found)
    {
        auto request = m_interface->RequestRearCurtainPosition(posPercentage);
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "RPortMonitoringManagement::RequestRequestRearCurtainPosition::Responded";
            
            auto result = response.Value();
            if (m_responderRequestRearCurtainPosition)
            {
                m_responderRequestRearCurtainPosition(result);
            }
        }
        else
        {
            m_logger.LogError() << "RPortMonitoringManagement::RequestRequestRearCurtainPosition::" << response.Error().Message();
        }
    }
}
 
void RPortMonitoringManagement::RegistResponseHandlerRequestRearCurtainPosition(std::function<void(const eevp::monitoring::service::proxy::methods::RequestRearCurtainPosition::Output&)> handler)
{
    m_responderRequestRearCurtainPosition = handler;
}
 
void RPortMonitoringManagement::RequestRequestWiperOperation(const eevp::control::SoaWiperMode& mode)
{
    if (m_found)
    {
        auto request = m_interface->RequestWiperOperation(mode);
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "RPortMonitoringManagement::RequestRequestWiperOperation::Responded";
            
            auto result = response.Value();
            if (m_responderRequestWiperOperation)
            {
                m_responderRequestWiperOperation(result);
            }
        }
        else
        {
            m_logger.LogError() << "RPortMonitoringManagement::RequestRequestWiperOperation::" << response.Error().Message();
        }
    }
}
 
void RPortMonitoringManagement::RegistResponseHandlerRequestWiperOperation(std::function<void(const eevp::monitoring::service::proxy::methods::RequestWiperOperation::Output&)> handler)
{
    m_responderRequestWiperOperation = handler;
}
 
void RPortMonitoringManagement::RequestSetWiperAutoSpeed(const bool& isAutoSpeed)
{
    if (m_found)
    {
        auto request = m_interface->SetWiperAutoSpeed(isAutoSpeed);
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "RPortMonitoringManagement::RequestSetWiperAutoSpeed::Responded";
            
            auto result = response.Value();
            if (m_responderSetWiperAutoSpeed)
            {
                m_responderSetWiperAutoSpeed(result);
            }
        }
        else
        {
            m_logger.LogError() << "RPortMonitoringManagement::RequestSetWiperAutoSpeed::" << response.Error().Message();
        }
    }
}
 
void RPortMonitoringManagement::RegistResponseHandlerSetWiperAutoSpeed(std::function<void(const eevp::monitoring::service::proxy::methods::SetWiperAutoSpeed::Output&)> handler)
{
    m_responderSetWiperAutoSpeed = handler;
}
 
void RPortMonitoringManagement::RequestrequestAppInstall(const eevp::type::String& controllerServiceName)
{
    if (m_found)
    {
        auto request = m_interface->requestAppInstall(controllerServiceName);
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "RPortMonitoringManagement::RequestrequestAppInstall::Responded";
            
            auto result = response.Value();
            if (m_responderrequestAppInstall)
            {
                m_responderrequestAppInstall(result);
            }
        }
        else
        {
            m_logger.LogError() << "RPortMonitoringManagement::RequestrequestAppInstall::" << response.Error().Message();
        }
    }
}
 
void RPortMonitoringManagement::RegistResponseHandlerrequestAppInstall(std::function<void(const eevp::monitoring::service::proxy::methods::requestAppInstall::Output&)> handler)
{
    m_responderrequestAppInstall = handler;
}
 
void RPortMonitoringManagement::RequestrequestAppUpdate(const eevp::type::String& controllerServiceName)
{
    if (m_found)
    {
        auto request = m_interface->requestAppUpdate(controllerServiceName);
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "RPortMonitoringManagement::RequestrequestAppUpdate::Responded";
            
            auto result = response.Value();
            if (m_responderrequestAppUpdate)
            {
                m_responderrequestAppUpdate(result);
            }
        }
        else
        {
            m_logger.LogError() << "RPortMonitoringManagement::RequestrequestAppUpdate::" << response.Error().Message();
        }
    }
}
 
void RPortMonitoringManagement::RegistResponseHandlerrequestAppUpdate(std::function<void(const eevp::monitoring::service::proxy::methods::requestAppUpdate::Output&)> handler)
{
    m_responderrequestAppUpdate = handler;
}
 
void RPortMonitoringManagement::RequestrequestControllerServiceInfo(const eevp::type::String& controllerServiceName)
{
    if (m_found)
    {
        auto request = m_interface->requestControllerServiceInfo(controllerServiceName);
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "RPortMonitoringManagement::RequestrequestControllerServiceInfo::Responded";
            
            auto result = response.Value();
            if (m_responderrequestControllerServiceInfo)
            {
                m_responderrequestControllerServiceInfo(result);
            }
        }
        else
        {
            m_logger.LogError() << "RPortMonitoringManagement::RequestrequestControllerServiceInfo::" << response.Error().Message();
        }
    }
}
 
void RPortMonitoringManagement::RegistResponseHandlerrequestControllerServiceInfo(std::function<void(const eevp::monitoring::service::proxy::methods::requestControllerServiceInfo::Output&)> handler)
{
    m_responderrequestControllerServiceInfo = handler;
}
 
void RPortMonitoringManagement::RequestresetUcmTest()
{
    if (m_found)
    {
        auto request = m_interface->resetUcmTest();
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "RPortMonitoringManagement::RequestresetUcmTest::Responded";
            
            auto result = response.Value();
            if (m_responderresetUcmTest)
            {
                m_responderresetUcmTest(result);
            }
        }
        else
        {
            m_logger.LogError() << "RPortMonitoringManagement::RequestresetUcmTest::" << response.Error().Message();
        }
    }
}
 
void RPortMonitoringManagement::RegistResponseHandlerresetUcmTest(std::function<void(const eevp::monitoring::service::proxy::methods::resetUcmTest::Output&)> handler)
{
    m_responderresetUcmTest = handler;
}
 
} /// namespace port
} /// namespace ivi
} /// namespace ivi_monitoringapp
 
/// EOF