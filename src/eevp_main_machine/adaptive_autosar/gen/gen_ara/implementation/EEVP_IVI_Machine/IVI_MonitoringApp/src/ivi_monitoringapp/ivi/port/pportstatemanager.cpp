///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : pportstatemanager.cpp
/// SOFTWARE COMPONENT NAME           : PPortStateManager
/// GENERATED DATE                    : 2025-08-30 10:53:52
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "ivi_monitoringapp/ivi/port/pportstatemanager.h"
 
namespace ivi
{
namespace info
{
namespace statemanager
{
namespace service
{
namespace skeleton
{
 
StateManagerSkeletonImpl::StateManagerSkeletonImpl(ara::core::InstanceSpecifier instanceSpec, ara::com::MethodCallProcessingMode mode)
    : StateManagerSkeleton(instanceSpec, mode)
    , m_logger(ara::log::CreateLogger("DFLT", "PORT", ara::log::LogLevel::kVerbose))
    , m_NotifyTime{0U}
    , m_SystemState{ivi::info::statemanager::type::IviState::NORMAL}
{
    // regist get handler, NotifyTime
    auto notifytime_get_handler = [this]() {
        return GetNotifyTime();
    };
    NotifyTime.RegisterGetHandler(notifytime_get_handler);
    
    // regist set handler, NotifyTime
    auto notifytime_set_handler = [this](const fields::NotifyTime::FieldType& value) {
        return SetNotifyTime(value);
    };
    NotifyTime.RegisterSetHandler(notifytime_set_handler);
    
    // regist get handler, SystemState
    auto systemstate_get_handler = [this]() {
        return GetSystemState();
    };
    SystemState.RegisterGetHandler(systemstate_get_handler);
}
 
ara::core::Future<fields::NotifyTime::FieldType> StateManagerSkeletonImpl::GetNotifyTime()
{
    m_logger.LogVerbose() << "PPortStateManager::GetNotifyTime::Requested";
    
    ara::core::Promise<fields::NotifyTime::FieldType> promise;
    
    promise.set_value(m_NotifyTime);
    return promise.get_future();
}
 
ara::core::Future<fields::NotifyTime::FieldType> StateManagerSkeletonImpl::SetNotifyTime(const fields::NotifyTime::FieldType& value)
{
    m_logger.LogVerbose() << "PPortStateManager::SetNotifyTime::Requested";
    
    ara::core::Promise<fields::NotifyTime::FieldType> promise;
    
    // set field value
    m_NotifyTime = value;
    
    promise.set_value(m_NotifyTime);
    return promise.get_future();
}
 
void StateManagerSkeletonImpl::NotifyNotifyTime()
{
    auto notify = NotifyTime.Update(m_NotifyTime);
    if (notify.HasValue())
    {
        m_logger.LogVerbose() << "PPortStateManager::NotifyNotifyTime::Update";
    }
    else
    {
        m_logger.LogError() << "PPortStateManager::NotifyNotifyTime::Update::" << notify.Error().Message();
    }
}
 
void StateManagerSkeletonImpl::UpdateNotifyTime(const fields::NotifyTime::FieldType& value)
{
    m_NotifyTime = value;
}
 
ara::core::Future<fields::SystemState::FieldType> StateManagerSkeletonImpl::GetSystemState()
{
    m_logger.LogVerbose() << "PPortStateManager::GetSystemState::Requested";
    
    ara::core::Promise<fields::SystemState::FieldType> promise;
    
    promise.set_value(m_SystemState);
    return promise.get_future();
}
 
void StateManagerSkeletonImpl::NotifySystemState()
{
    auto notify = SystemState.Update(m_SystemState);
    if (notify.HasValue())
    {
        m_logger.LogVerbose() << "PPortStateManager::NotifySystemState::Update";
    }
    else
    {
        m_logger.LogError() << "PPortStateManager::NotifySystemState::Update::" << notify.Error().Message();
    }
}
 
void StateManagerSkeletonImpl::UpdateSystemState(const fields::SystemState::FieldType& value)
{
    m_SystemState = value;
}
 
} /// namespace skeleton
} /// namespace service
} /// namespace statemanager
} /// namespace info
} /// namespace ivi

namespace ivi_monitoringapp
{
namespace ivi
{
namespace port
{
 
PPortStateManager::PPortStateManager()
    : m_logger(ara::log::CreateLogger("DFLT", "PORT", ara::log::LogLevel::kVerbose))
    , m_running{false}
    , m_NotifySystemStateData{ivi::info::statemanager::type::IviState::NORMAL}
{
}
 
PPortStateManager::~PPortStateManager()
{
}
 
void PPortStateManager::Start()
{
    m_logger.LogVerbose() << "PPortStateManager::Start";
    
    // construct skeleton
    ara::core::InstanceSpecifier specifier{"IVI_MonitoringApp/IVI/PPortStateManager"};
    m_interface = std::make_unique<ivi::info::statemanager::service::skeleton::StateManagerSkeletonImpl>(specifier);
    
    // offer service
    auto offer = m_interface->OfferService();
    if (offer.HasValue())
    {
        m_running = true;
        m_logger.LogVerbose() << "PPortStateManager::Start::OfferService";
    }
    else
    {
        m_running = false;
        m_logger.LogError() << "PPortStateManager::Start::OfferService::" << offer.Error().Message();
    }
}
 
void PPortStateManager::Terminate()
{
    m_logger.LogVerbose() << "PPortStateManager::Terminate";
    
    // stop port
    m_running = false;
    
    // stop offer service
    m_interface->StopOfferService();
    m_logger.LogVerbose() << "PPortStateManager::Terminate::StopOfferService";
}
 
void PPortStateManager::WriteDataNotifySystemState(const ivi::info::statemanager::service::skeleton::events::NotifySystemState::SampleType& data)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_NotifySystemStateData = data;
}
 
void PPortStateManager::SendEventNotifySystemStateCyclic()
{
    while (m_running)
    {
        {
            std::lock_guard<std::mutex> lock(m_mutex);
            
            auto send = m_interface->NotifySystemState.Send(m_NotifySystemStateData);
            if (send.HasValue())
            {
                m_logger.LogVerbose() << "PPortStateManager::SendEventNotifySystemStateCyclic::Send";
            }
            else
            {
                m_logger.LogError() << "PPortStateManager::SendEventNotifySystemStateCyclic::Send::" << send.Error().Message();
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void PPortStateManager::SendEventNotifySystemStateTriggered()
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    auto send = m_interface->NotifySystemState.Send(m_NotifySystemStateData);
    if (send.HasValue())
    {
        m_logger.LogVerbose() << "PPortStateManager::SendEventNotifySystemStateTriggered::Send";
    }
    else
    {
        m_logger.LogError() << "PPortStateManager::SendEventNotifySystemStateTriggered::Send::" << send.Error().Message();
    }
}
 
void PPortStateManager::SendEventNotifySystemStateTriggered(const ivi::info::statemanager::service::skeleton::events::NotifySystemState::SampleType& data)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_NotifySystemStateData = data;
    auto send = m_interface->NotifySystemState.Send(m_NotifySystemStateData);
    if (send.HasValue())
    {
        m_logger.LogVerbose() << "PPortStateManager::SendEventNotifySystemStateTriggered::Send";
    }
    else
    {
        m_logger.LogError() << "PPortStateManager::SendEventNotifySystemStateTriggered::Send::" << send.Error().Message();
    }
}
 
void PPortStateManager::WriteValueNotifyTime(const ivi::info::statemanager::service::skeleton::fields::NotifyTime::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdateNotifyTime(value);
}
 
void PPortStateManager::NotifyFieldNotifyTimeCyclic()
{
    while (m_running)
    {
        {
            std::lock_guard<std::mutex> lock(m_mutex);
            
            m_interface->NotifyNotifyTime();
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void PPortStateManager::NotifyFieldNotifyTimeTriggered()
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->NotifyNotifyTime();
}
 
void PPortStateManager::NotifyFieldNotifyTimeTriggered(const ivi::info::statemanager::service::skeleton::fields::NotifyTime::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdateNotifyTime(value);
    m_interface->NotifyNotifyTime();
}
 
void PPortStateManager::WriteValueSystemState(const ivi::info::statemanager::service::skeleton::fields::SystemState::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdateSystemState(value);
}
 
void PPortStateManager::NotifyFieldSystemStateCyclic()
{
    while (m_running)
    {
        {
            std::lock_guard<std::mutex> lock(m_mutex);
            
            m_interface->NotifySystemState();
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void PPortStateManager::NotifyFieldSystemStateTriggered()
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->NotifySystemState();
}
 
void PPortStateManager::NotifyFieldSystemStateTriggered(const ivi::info::statemanager::service::skeleton::fields::SystemState::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdateSystemState(value);
    m_interface->NotifySystemState();
}
 
} /// namespace port
} /// namespace ivi
} /// namespace ivi_monitoringapp
 
/// EOF