///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : pportstatemanager.h
/// SOFTWARE COMPONENT NAME           : PPortStateManager
/// GENERATED DATE                    : 2025-08-30 10:53:52
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef PARA_AA_GEN_SOFTWARE_COMPONENT_PPORT_IVI_MONITORINGAPP_IVI_PPORTSTATEMANAGER_H
#define PARA_AA_GEN_SOFTWARE_COMPONENT_PPORT_IVI_MONITORINGAPP_IVI_PPORTSTATEMANAGER_H
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// INCLUSION HEADER FILES
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "ivi/info/statemanager/service/statemanager_skeleton.h"
 
#include "ara/log/logger.h"
 
#include <mutex>
#include <thread>
 
namespace ivi
{
namespace info
{
namespace statemanager
{
namespace service
{
namespace skeleton
{
 
class StateManagerSkeletonImpl : public StateManagerSkeleton
{
public:
    /// @brief Constructor
    StateManagerSkeletonImpl(ara::core::InstanceSpecifier instanceSpec, ara::com::MethodCallProcessingMode mode = ara::com::MethodCallProcessingMode::kEvent);

    /// @brief Getter for field, NotifyTime
    ara::core::Future<fields::NotifyTime::FieldType> GetNotifyTime();
    
    /// @brief Setter for field, NotifyTime
    ara::core::Future<fields::NotifyTime::FieldType> SetNotifyTime(const fields::NotifyTime::FieldType& value);
    
    /// @brief Notifier for field, NotifyTime
    void NotifyNotifyTime();
    
    /// @brief Update field value by software component, NotifyTime
    void UpdateNotifyTime(const fields::NotifyTime::FieldType& value);
    
    /// @brief Getter for field, SystemState
    ara::core::Future<fields::SystemState::FieldType> GetSystemState();
    
    /// @brief Notifier for field, SystemState
    void NotifySystemState();
    
    /// @brief Update field value by software component, SystemState
    void UpdateSystemState(const fields::SystemState::FieldType& value);
    
private:
    /// @brief Logger for this port
    ara::log::Logger& m_logger;
    
    /// @brief Field, NotifyTime
    fields::NotifyTime::FieldType m_NotifyTime;
    
    /// @brief Field, SystemState
    fields::SystemState::FieldType m_SystemState;
    
};
 
} /// namespace skeleton
} /// namespace service
} /// namespace statemanager
} /// namespace info
} /// namespace ivi

namespace ivi_monitoringapp
{
namespace ivi
{
namespace port
{
 
class PPortStateManager
{
public:
    /// @brief Constructor
    PPortStateManager();
    
    /// @brief Destructor
    ~PPortStateManager();
    
    /// @brief Start port
    void Start();
    
    /// @brief Terminate port
    void Terminate();
    
    /// @brief Write event data to buffer, NotifySystemState
    void WriteDataNotifySystemState(const ivi::info::statemanager::service::skeleton::events::NotifySystemState::SampleType& data);
     
    /// @brief Send event cyclic from buffer data, NotifySystemState
    void SendEventNotifySystemStateCyclic();
     
    /// @brief Send event directly from buffer data, NotifySystemState
    void SendEventNotifySystemStateTriggered();
     
    /// @brief Send event directly with argument, NotifySystemState
    void SendEventNotifySystemStateTriggered(const ivi::info::statemanager::service::skeleton::events::NotifySystemState::SampleType& data);
     
    /// @brief Write field value to buffer, NotifyTime
    void WriteValueNotifyTime(const ivi::info::statemanager::service::skeleton::fields::NotifyTime::FieldType& value);
     
    /// @brief Notify field cyclic from buffer, NotifyTime
    void NotifyFieldNotifyTimeCyclic();
     
    /// @brief Notify field directly from buffer data, NotifyTime
    void NotifyFieldNotifyTimeTriggered();
     
    /// @brief Notify field directly with argument, NotifyTime
    void NotifyFieldNotifyTimeTriggered(const ivi::info::statemanager::service::skeleton::fields::NotifyTime::FieldType& value);

    /// @brief Write field value to buffer, SystemState
    void WriteValueSystemState(const ivi::info::statemanager::service::skeleton::fields::SystemState::FieldType& value);
     
    /// @brief Notify field cyclic from buffer, SystemState
    void NotifyFieldSystemStateCyclic();
     
    /// @brief Notify field directly from buffer data, SystemState
    void NotifyFieldSystemStateTriggered();
     
    /// @brief Notify field directly with argument, SystemState
    void NotifyFieldSystemStateTriggered(const ivi::info::statemanager::service::skeleton::fields::SystemState::FieldType& value);
     
private:
    /// @brief Logger for this port
    ara::log::Logger& m_logger;
    
    /// @brief Flag of port status
    bool m_running;
    
    /// @brief Mutex for this port
    std::mutex m_mutex;
    
    /// @brief AUTOSAR Port Interface
    std::unique_ptr<ivi::info::statemanager::service::skeleton::StateManagerSkeletonImpl> m_interface;
    
    /// @brief Data for event, NotifySystemState
    ivi::info::statemanager::service::skeleton::events::NotifySystemState::SampleType m_NotifySystemStateData;
};
 
} /// namespace port
} /// namespace ivi
} /// namespace ivi_monitoringapp
 
#endif /// PARA_AA_GEN_SOFTWARE_COMPONENT_PPORT_IVI_MONITORINGAPP_IVI_PPORTSTATEMANAGER_H