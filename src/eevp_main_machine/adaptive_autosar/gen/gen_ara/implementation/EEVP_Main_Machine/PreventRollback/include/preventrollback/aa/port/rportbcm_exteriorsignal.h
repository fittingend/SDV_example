///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : rportbcm_exteriorsignal.h
/// SOFTWARE COMPONENT NAME           : RPortBCM_ExteriorSignal
/// GENERATED DATE                    : 2025-08-30 10:53:28
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef PARA_AA_GEN_SOFTWARE_COMPONENT_RPORT_PREVENTROLLBACK_AA_RPORTBCM_EXTERIORSIGNAL_H
#define PARA_AA_GEN_SOFTWARE_COMPONENT_RPORT_PREVENTROLLBACK_AA_RPORTBCM_EXTERIORSIGNAL_H
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// INCLUSION HEADER FILES
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "eevp/simulation/bcm_exteriorsignal_proxy.h"
 
#include "ara/log/logger.h"
 
#include <mutex>
#include <thread>
 
namespace preventrollback
{
namespace aa
{
namespace port
{
 
class RPortBCM_ExteriorSignal
{
public:
    /// @brief Constructor
    RPortBCM_ExteriorSignal();
    
    /// @brief Destructor
    ~RPortBCM_ExteriorSignal();
    
    /// @brief Start port
    void Start();
    
    /// @brief Terminate port
    void Terminate();

    /// @brief Subscribe field notification, hornState
    void SubscribehornState();
     
    /// @brief Stop field subscription, hornState
    void StopSubscribehornState();
     
    /// @brief Field notification receive handler, hornState
    void ReceiveFieldhornStateTriggered();
     
    /// @brief Field notification receive handler, hornState
    void ReceiveFieldhornStateCyclic();
     
    /// @brief Read field notification value, hornState
    void ReadValuehornState(ara::com::SamplePtr<eevp::simulation::proxy::fields::hornState::FieldType const> samplePtr);
     
    /// @brief Regist callback from software component
    void RegistFieldHandlerhornState(std::function<void(const eevp::simulation::proxy::fields::hornState::FieldType&)> handler);
    
    /// @brief Getter method using by software component, hornState
    void GethornState();
    
    /// @brief Subscribe field notification, lightState
    void SubscribelightState();
     
    /// @brief Stop field subscription, lightState
    void StopSubscribelightState();
     
    /// @brief Field notification receive handler, lightState
    void ReceiveFieldlightStateTriggered();
     
    /// @brief Field notification receive handler, lightState
    void ReceiveFieldlightStateCyclic();
     
    /// @brief Read field notification value, lightState
    void ReadValuelightState(ara::com::SamplePtr<eevp::simulation::proxy::fields::lightState::FieldType const> samplePtr);
     
    /// @brief Regist callback from software component
    void RegistFieldHandlerlightState(std::function<void(const eevp::simulation::proxy::fields::lightState::FieldType&)> handler);
    
    /// @brief Getter method using by software component, lightState
    void GetlightState();

private:
    /// @brief Callback for find service
    void Find(ara::com::ServiceHandleContainer<eevp::simulation::proxy::BCM_ExteriorSignalProxy::HandleType> handles,
              ara::com::FindServiceHandle findHandle);

    /// @brief Callback for field notification receiver, hornState
    void RegistReceiverhornState();
    
    /// @brief Callback for field notification receiver, lightState
    void RegistReceiverlightState();
    
private:
    /// @brief Logger for this port
    ara::log::Logger& m_logger;
    
    /// @brief Flag of port status
    bool m_running;
    
    /// @brief Flag of find service status
    bool m_found;
    
    /// @brief Mutex for this port
    std::mutex m_mutex; 
    
    /// @brief AUTOSAR Port Interface
    std::unique_ptr<eevp::simulation::proxy::BCM_ExteriorSignalProxy> m_interface;
    
    /// @brief Find service handle
    std::unique_ptr<ara::com::FindServiceHandle> m_findHandle;

    /// @brief Callback from software component, hornState
    std::function<void(const eevp::simulation::proxy::fields::hornState::FieldType&)> m_receiverhornState;
    
    /// @brief Callback from software component, lightState
    std::function<void(const eevp::simulation::proxy::fields::lightState::FieldType&)> m_receiverlightState;
    
};
 
} /// namespace port
} /// namespace aa
} /// namespace preventrollback
 
#endif /// PARA_AA_GEN_SOFTWARE_COMPONENT_RPORT_PREVENTROLLBACK_AA_RPORTBCM_EXTERIORSIGNAL_H