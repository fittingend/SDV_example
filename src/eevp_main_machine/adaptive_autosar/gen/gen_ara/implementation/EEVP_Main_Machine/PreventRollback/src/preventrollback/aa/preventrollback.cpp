///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : preventrollback.cpp
/// SOFTWARE COMPONENT NAME           : PreventRollback
/// GENERATED DATE                    : 2025-08-30 10:53:29
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// INCLUSION HEADER FILES
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "preventrollback/aa/preventrollback.h"
 
namespace preventrollback
{
namespace aa
{
 
PreventRollback::PreventRollback()
    : m_logger(ara::log::CreateLogger("PRRB", "SWC", ara::log::LogLevel::kVerbose))
    , m_running{false}
    , m_workers(6)
{
}
 
PreventRollback::~PreventRollback()
{
}
 
bool PreventRollback::Initialize()
{
    m_logger.LogVerbose() << "PreventRollback::Initialize";
    
    bool init = true;
    
    m_RPortBCM_ExteriorSignal = std::make_unique<preventrollback::aa::port::RPortBCM_ExteriorSignal>();
    m_RPortMain_PDW_Service = std::make_unique<preventrollback::aa::port::RPortMain_PDW_Service>();
    m_RPortSoaVehicleInfo = std::make_unique<preventrollback::aa::port::RPortSoaVehicleInfo>();
    m_RPortSubscriptionManagement = std::make_unique<preventrollback::aa::port::RPortSubscriptionManagement>();
    m_RPortVCS_AccrPedal = std::make_unique<preventrollback::aa::port::RPortVCS_AccrPedal>();
    m_RPortVCS_BrakePedal = std::make_unique<preventrollback::aa::port::RPortVCS_BrakePedal>();
    m_RPortVCS_Gear = std::make_unique<preventrollback::aa::port::RPortVCS_Gear>();
    
    // put your code for initialization
    
    return init;
}
 
void PreventRollback::Start()
{
    m_logger.LogVerbose() << "PreventRollback::Start";
    
    m_RPortBCM_ExteriorSignal->Start();
    m_RPortMain_PDW_Service->Start();
    m_RPortSoaVehicleInfo->Start();
    m_RPortSubscriptionManagement->Start();
    m_RPortVCS_AccrPedal->Start();
    m_RPortVCS_BrakePedal->Start();
    m_RPortVCS_Gear->Start();
}
 
void PreventRollback::Terminate()
{
    m_logger.LogVerbose() << "PreventRollback::Terminate";
    
    // stop running
    m_running = false;
    
    m_RPortBCM_ExteriorSignal->Terminate();
    m_RPortMain_PDW_Service->Terminate();
    m_RPortSoaVehicleInfo->Terminate();
    m_RPortSubscriptionManagement->Terminate();
    m_RPortVCS_AccrPedal->Terminate();
    m_RPortVCS_BrakePedal->Terminate();
    m_RPortVCS_Gear->Terminate();
}
 
void PreventRollback::Run()
{
    m_logger.LogVerbose() << "PreventRollback::Run";
    
    // start running
    m_running = true;
    
    m_workers.Async([this] { m_RPortBCM_ExteriorSignal->ReceiveFieldhornStateCyclic(); });
    m_workers.Async([this] { m_RPortBCM_ExteriorSignal->ReceiveFieldlightStateCyclic(); });
    m_workers.Async([this] { m_RPortMain_PDW_Service->ReceiveEventDistanceLevelCyclic(); });
    m_workers.Async([this] { m_RPortMain_PDW_Service->ReceiveFieldUssStatusCyclic(); });
    m_workers.Async([this] { m_RPortSoaVehicleInfo->ReceiveFieldsoaVehicleInfoCyclic(); });
    m_workers.Async([this] { m_RPortSubscriptionManagement->ReceiveEventnotifySubscriptionInfoCyclic(); });
    
    m_workers.Wait();
}
 
} /// namespace aa
} /// namespace preventrollback
