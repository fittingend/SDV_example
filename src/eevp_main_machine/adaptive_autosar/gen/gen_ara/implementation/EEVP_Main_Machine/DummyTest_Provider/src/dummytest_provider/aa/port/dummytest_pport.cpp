///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : dummytest_pport.cpp
/// SOFTWARE COMPONENT NAME           : DummyTest_PPort
/// GENERATED DATE                    : 2025-08-30 10:53:19
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "dummytest_provider/aa/port/dummytest_pport.h"
 
namespace test
{
namespace dummy
{
namespace skeleton
{
 
DummyTestSkeletonImpl::DummyTestSkeletonImpl(ara::core::InstanceSpecifier instanceSpec, ara::com::MethodCallProcessingMode mode)
    : DummyTestSkeleton(instanceSpec, mode)
    , m_logger(ara::log::CreateLogger("TPRV", "PORT", ara::log::LogLevel::kVerbose))
    , m_DeviceField{0, false}
{
    // regist get handler, DeviceField
    auto devicefield_get_handler = [this]() {
        return GetDeviceField();
    };
    DeviceField.RegisterGetHandler(devicefield_get_handler);
    
    // regist set handler, DeviceField
    auto devicefield_set_handler = [this](const fields::DeviceField::FieldType& value) {
        return SetDeviceField(value);
    };
    DeviceField.RegisterSetHandler(devicefield_set_handler);
}
 
ara::core::Future<DummyTestSkeleton::DeviceMethodOutput> DummyTestSkeletonImpl::DeviceMethod(const std::int16_t& DeviceNumber)
{
    m_logger.LogVerbose() << "DummyTest_PPort::DeviceMethod::Requested";
    
    DeviceMethodOutput response;
    ara::core::Promise<DeviceMethodOutput> promise;
    
    // put your logic
    
    promise.set_value(response);
    return promise.get_future();
}
 
ara::core::Future<fields::DeviceField::FieldType> DummyTestSkeletonImpl::GetDeviceField()
{
    m_logger.LogVerbose() << "DummyTest_PPort::GetDeviceField::Requested";
    
    ara::core::Promise<fields::DeviceField::FieldType> promise;
    
    promise.set_value(m_DeviceField);
    return promise.get_future();
}
 
ara::core::Future<fields::DeviceField::FieldType> DummyTestSkeletonImpl::SetDeviceField(const fields::DeviceField::FieldType& value)
{
    m_logger.LogVerbose() << "DummyTest_PPort::SetDeviceField::Requested";
    
    ara::core::Promise<fields::DeviceField::FieldType> promise;
    
    // set field value
    m_DeviceField = value;
    
    promise.set_value(m_DeviceField);
    return promise.get_future();
}
 
void DummyTestSkeletonImpl::NotifyDeviceField()
{
    auto notify = DeviceField.Update(m_DeviceField);
    if (notify.HasValue())
    {
        m_logger.LogVerbose() << "DummyTest_PPort::NotifyDeviceField::Update";
    }
    else
    {
        m_logger.LogError() << "DummyTest_PPort::NotifyDeviceField::Update::" << notify.Error().Message();
    }
}
 
void DummyTestSkeletonImpl::UpdateDeviceField(const fields::DeviceField::FieldType& value)
{
    m_DeviceField = value;
}
 
} /// namespace skeleton
} /// namespace dummy
} /// namespace test

namespace dummytest_provider
{
namespace aa
{
namespace port
{
 
DummyTest_PPort::DummyTest_PPort()
    : m_logger(ara::log::CreateLogger("TPRV", "PORT", ara::log::LogLevel::kVerbose))
    , m_running{false}
    , m_DeviceEventData{0, false}
{
}
 
DummyTest_PPort::~DummyTest_PPort()
{
}
 
void DummyTest_PPort::Start()
{
    m_logger.LogVerbose() << "DummyTest_PPort::Start";
    
    // construct skeleton
    ara::core::InstanceSpecifier specifier{"DummyTest_Provider/AA/DummyTest_PPort"};
    m_interface = std::make_unique<test::dummy::skeleton::DummyTestSkeletonImpl>(specifier);
    
    // offer service
    auto offer = m_interface->OfferService();
    if (offer.HasValue())
    {
        m_running = true;
        m_logger.LogVerbose() << "DummyTest_PPort::Start::OfferService";
    }
    else
    {
        m_running = false;
        m_logger.LogError() << "DummyTest_PPort::Start::OfferService::" << offer.Error().Message();
    }
}
 
void DummyTest_PPort::Terminate()
{
    m_logger.LogVerbose() << "DummyTest_PPort::Terminate";
    
    // stop port
    m_running = false;
    
    // stop offer service
    m_interface->StopOfferService();
    m_logger.LogVerbose() << "DummyTest_PPort::Terminate::StopOfferService";
}
 
void DummyTest_PPort::WriteDataDeviceEvent(const test::dummy::skeleton::events::DeviceEvent::SampleType& data)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_DeviceEventData = data;
}
 
void DummyTest_PPort::SendEventDeviceEventCyclic()
{
    while (m_running)
    {
        {
            std::lock_guard<std::mutex> lock(m_mutex);
            
            auto send = m_interface->DeviceEvent.Send(m_DeviceEventData);
            if (send.HasValue())
            {
                m_logger.LogVerbose() << "DummyTest_PPort::SendEventDeviceEventCyclic::Send";
            }
            else
            {
                m_logger.LogError() << "DummyTest_PPort::SendEventDeviceEventCyclic::Send::" << send.Error().Message();
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void DummyTest_PPort::SendEventDeviceEventTriggered()
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    auto send = m_interface->DeviceEvent.Send(m_DeviceEventData);
    if (send.HasValue())
    {
        m_logger.LogVerbose() << "DummyTest_PPort::SendEventDeviceEventTriggered::Send";
    }
    else
    {
        m_logger.LogError() << "DummyTest_PPort::SendEventDeviceEventTriggered::Send::" << send.Error().Message();
    }
}
 
void DummyTest_PPort::SendEventDeviceEventTriggered(const test::dummy::skeleton::events::DeviceEvent::SampleType& data)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_DeviceEventData = data;
    auto send = m_interface->DeviceEvent.Send(m_DeviceEventData);
    if (send.HasValue())
    {
        m_logger.LogVerbose() << "DummyTest_PPort::SendEventDeviceEventTriggered::Send";
    }
    else
    {
        m_logger.LogError() << "DummyTest_PPort::SendEventDeviceEventTriggered::Send::" << send.Error().Message();
    }
}
 
void DummyTest_PPort::WriteValueDeviceField(const test::dummy::skeleton::fields::DeviceField::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdateDeviceField(value);
}
 
void DummyTest_PPort::NotifyFieldDeviceFieldCyclic()
{
    while (m_running)
    {
        {
            std::lock_guard<std::mutex> lock(m_mutex);
            
            m_interface->NotifyDeviceField();
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void DummyTest_PPort::NotifyFieldDeviceFieldTriggered()
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->NotifyDeviceField();
}
 
void DummyTest_PPort::NotifyFieldDeviceFieldTriggered(const test::dummy::skeleton::fields::DeviceField::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdateDeviceField(value);
    m_interface->NotifyDeviceField();
}
 
} /// namespace port
} /// namespace aa
} /// namespace dummytest_provider
 
/// EOF