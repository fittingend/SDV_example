///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : dummytest_pport.h
/// SOFTWARE COMPONENT NAME           : DummyTest_PPort
/// GENERATED DATE                    : 2025-08-30 10:53:19
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef PARA_AA_GEN_SOFTWARE_COMPONENT_PPORT_DUMMYTEST_PROVIDER_AA_DUMMYTEST_PPORT_H
#define PARA_AA_GEN_SOFTWARE_COMPONENT_PPORT_DUMMYTEST_PROVIDER_AA_DUMMYTEST_PPORT_H
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// INCLUSION HEADER FILES
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "test/dummy/dummytest_skeleton.h"
 
#include "ara/log/logger.h"
 
#include <mutex>
#include <thread>
 
namespace test
{
namespace dummy
{
namespace skeleton
{
 
class DummyTestSkeletonImpl : public DummyTestSkeleton
{
public:
    /// @brief Constructor
    DummyTestSkeletonImpl(ara::core::InstanceSpecifier instanceSpec, ara::com::MethodCallProcessingMode mode = ara::com::MethodCallProcessingMode::kEvent);
    
    /// @brief Request with Response method, DeviceMethod
    ara::core::Future<DummyTestSkeleton::DeviceMethodOutput> DeviceMethod(const std::int16_t& DeviceNumber) override;
    
    /// @brief Getter for field, DeviceField
    ara::core::Future<fields::DeviceField::FieldType> GetDeviceField();
    
    /// @brief Setter for field, DeviceField
    ara::core::Future<fields::DeviceField::FieldType> SetDeviceField(const fields::DeviceField::FieldType& value);
    
    /// @brief Notifier for field, DeviceField
    void NotifyDeviceField();
    
    /// @brief Update field value by software component, DeviceField
    void UpdateDeviceField(const fields::DeviceField::FieldType& value);
    
private:
    /// @brief Logger for this port
    ara::log::Logger& m_logger;
    
    /// @brief Field, DeviceField
    fields::DeviceField::FieldType m_DeviceField;
    
};
 
} /// namespace skeleton
} /// namespace dummy
} /// namespace test

namespace dummytest_provider
{
namespace aa
{
namespace port
{
 
class DummyTest_PPort
{
public:
    /// @brief Constructor
    DummyTest_PPort();
    
    /// @brief Destructor
    ~DummyTest_PPort();
    
    /// @brief Start port
    void Start();
    
    /// @brief Terminate port
    void Terminate();
    
    /// @brief Write event data to buffer, DeviceEvent
    void WriteDataDeviceEvent(const test::dummy::skeleton::events::DeviceEvent::SampleType& data);
     
    /// @brief Send event cyclic from buffer data, DeviceEvent
    void SendEventDeviceEventCyclic();
     
    /// @brief Send event directly from buffer data, DeviceEvent
    void SendEventDeviceEventTriggered();
     
    /// @brief Send event directly with argument, DeviceEvent
    void SendEventDeviceEventTriggered(const test::dummy::skeleton::events::DeviceEvent::SampleType& data);
     
    /// @brief Write field value to buffer, DeviceField
    void WriteValueDeviceField(const test::dummy::skeleton::fields::DeviceField::FieldType& value);
     
    /// @brief Notify field cyclic from buffer, DeviceField
    void NotifyFieldDeviceFieldCyclic();
     
    /// @brief Notify field directly from buffer data, DeviceField
    void NotifyFieldDeviceFieldTriggered();
     
    /// @brief Notify field directly with argument, DeviceField
    void NotifyFieldDeviceFieldTriggered(const test::dummy::skeleton::fields::DeviceField::FieldType& value);
     
private:
    /// @brief Logger for this port
    ara::log::Logger& m_logger;
    
    /// @brief Flag of port status
    bool m_running;
    
    /// @brief Mutex for this port
    std::mutex m_mutex;
    
    /// @brief AUTOSAR Port Interface
    std::unique_ptr<test::dummy::skeleton::DummyTestSkeletonImpl> m_interface;
    
    /// @brief Data for event, DeviceEvent
    test::dummy::skeleton::events::DeviceEvent::SampleType m_DeviceEventData;
};
 
} /// namespace port
} /// namespace aa
} /// namespace dummytest_provider
 
#endif /// PARA_AA_GEN_SOFTWARE_COMPONENT_PPORT_DUMMYTEST_PROVIDER_AA_DUMMYTEST_PPORT_H