///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : pport_bcm_wiperwash.h
/// SOFTWARE COMPONENT NAME           : PPort_BCM_WiperWash
/// GENERATED DATE                    : 2025-08-30 10:53:45
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef PARA_AA_GEN_SOFTWARE_COMPONENT_PPORT_SERVICECREATOR_AA_PPORT_BCM_WIPERWASH_H
#define PARA_AA_GEN_SOFTWARE_COMPONENT_PPORT_SERVICECREATOR_AA_PPORT_BCM_WIPERWASH_H
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// INCLUSION HEADER FILES
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "eevp/simulation/bcm_wiperwash_skeleton.h"
 
#include "ara/log/logger.h"
 
#include <mutex>
#include <thread>
 
namespace eevp
{
namespace simulation
{
namespace skeleton
{
 
class BCM_WiperWashSkeletonImpl : public BCM_WiperWashSkeleton
{
public:
    /// @brief Constructor
    BCM_WiperWashSkeletonImpl(ara::core::InstanceSpecifier instanceSpec, ara::com::MethodCallProcessingMode mode = ara::com::MethodCallProcessingMode::kEvent);
    
    /// @brief Request with Response method, setWipingInterval
    ara::core::Future<BCM_WiperWashSkeleton::setWipingIntervalOutput> setWipingInterval(const std::uint16_t& wipingInterval) override;
    
    /// @brief Request with Response method, setWipingLevel
    ara::core::Future<BCM_WiperWashSkeleton::setWipingLevelOutput> setWipingLevel(const eevp::simulation::BCM_WipingLevel& wipingLevel) override;
    
    /// @brief Request with Response method, startWiping
    ara::core::Future<BCM_WiperWashSkeleton::startWipingOutput> startWiping() override;
    
    /// @brief Request with Response method, stopWiping
    ara::core::Future<BCM_WiperWashSkeleton::stopWipingOutput> stopWiping() override;
    
    /// @brief Getter for field, wiperInterval
    ara::core::Future<fields::wiperInterval::FieldType> GetwiperInterval();
    
    /// @brief Notifier for field, wiperInterval
    void NotifywiperInterval();
    
    /// @brief Update field value by software component, wiperInterval
    void UpdatewiperInterval(const fields::wiperInterval::FieldType& value);
    
    /// @brief Getter for field, wiperLevel
    ara::core::Future<fields::wiperLevel::FieldType> GetwiperLevel();
    
    /// @brief Notifier for field, wiperLevel
    void NotifywiperLevel();
    
    /// @brief Update field value by software component, wiperLevel
    void UpdatewiperLevel(const fields::wiperLevel::FieldType& value);
    
private:
    /// @brief Logger for this port
    ara::log::Logger& m_logger;
    
    /// @brief Field, wiperInterval
    fields::wiperInterval::FieldType m_wiperInterval;
    
    /// @brief Field, wiperLevel
    fields::wiperLevel::FieldType m_wiperLevel;
    
};
 
} /// namespace skeleton
} /// namespace simulation
} /// namespace eevp

namespace servicecreator
{
namespace aa
{
namespace port
{
 
class PPort_BCM_WiperWash
{
public:
    /// @brief Constructor
    PPort_BCM_WiperWash();
    
    /// @brief Destructor
    ~PPort_BCM_WiperWash();
    
    /// @brief Start port
    void Start();
    
    /// @brief Terminate port
    void Terminate();
    
    /// @brief Write field value to buffer, wiperInterval
    void WriteValuewiperInterval(const eevp::simulation::skeleton::fields::wiperInterval::FieldType& value);
     
    /// @brief Notify field cyclic from buffer, wiperInterval
    void NotifyFieldwiperIntervalCyclic();
     
    /// @brief Notify field directly from buffer data, wiperInterval
    void NotifyFieldwiperIntervalTriggered();
     
    /// @brief Notify field directly with argument, wiperInterval
    void NotifyFieldwiperIntervalTriggered(const eevp::simulation::skeleton::fields::wiperInterval::FieldType& value);

    /// @brief Write field value to buffer, wiperLevel
    void WriteValuewiperLevel(const eevp::simulation::skeleton::fields::wiperLevel::FieldType& value);
     
    /// @brief Notify field cyclic from buffer, wiperLevel
    void NotifyFieldwiperLevelCyclic();
     
    /// @brief Notify field directly from buffer data, wiperLevel
    void NotifyFieldwiperLevelTriggered();
     
    /// @brief Notify field directly with argument, wiperLevel
    void NotifyFieldwiperLevelTriggered(const eevp::simulation::skeleton::fields::wiperLevel::FieldType& value);
     
private:
    /// @brief Logger for this port
    ara::log::Logger& m_logger;
    
    /// @brief Flag of port status
    bool m_running;
    
    /// @brief Mutex for this port
    std::mutex m_mutex;
    
    /// @brief AUTOSAR Port Interface
    std::unique_ptr<eevp::simulation::skeleton::BCM_WiperWashSkeletonImpl> m_interface;
    
};
 
} /// namespace port
} /// namespace aa
} /// namespace servicecreator
 
#endif /// PARA_AA_GEN_SOFTWARE_COMPONENT_PPORT_SERVICECREATOR_AA_PPORT_BCM_WIPERWASH_H