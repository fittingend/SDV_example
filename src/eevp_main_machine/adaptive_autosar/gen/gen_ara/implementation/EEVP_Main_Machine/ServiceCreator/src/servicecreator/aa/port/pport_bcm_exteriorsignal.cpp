///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : pport_bcm_exteriorsignal.cpp
/// SOFTWARE COMPONENT NAME           : PPort_BCM_ExteriorSignal
/// GENERATED DATE                    : 2025-08-30 10:53:46
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "servicecreator/aa/port/pport_bcm_exteriorsignal.h"
 
namespace eevp
{
namespace simulation
{
namespace skeleton
{
 
BCM_ExteriorSignalSkeletonImpl::BCM_ExteriorSignalSkeletonImpl(ara::core::InstanceSpecifier instanceSpec, ara::com::MethodCallProcessingMode mode)
    : BCM_ExteriorSignalSkeleton(instanceSpec, mode)
    , m_logger(ara::log::CreateLogger("SVCT", "PORT", ara::log::LogLevel::kVerbose))
    , m_hornState{eevp::simulation::type::BCM_HornState::OFF}
    , m_lightState{eevp::simulation::type::BCM_HeadlightState::OFF}
{
    // regist get handler, hornState
    auto hornstate_get_handler = [this]() {
        return GethornState();
    };
    hornState.RegisterGetHandler(hornstate_get_handler);
    
    // regist get handler, lightState
    auto lightstate_get_handler = [this]() {
        return GetlightState();
    };
    lightState.RegisterGetHandler(lightstate_get_handler);
}
 
ara::core::Future<fields::hornState::FieldType> BCM_ExteriorSignalSkeletonImpl::GethornState()
{
    m_logger.LogVerbose() << "PPort_BCM_ExteriorSignal::GethornState::Requested";
    
    ara::core::Promise<fields::hornState::FieldType> promise;
    
    promise.set_value(m_hornState);
    return promise.get_future();
}
 
void BCM_ExteriorSignalSkeletonImpl::NotifyhornState()
{
    auto notify = hornState.Update(m_hornState);
    if (notify.HasValue())
    {
        m_logger.LogVerbose() << "PPort_BCM_ExteriorSignal::NotifyhornState::Update";
    }
    else
    {
        m_logger.LogError() << "PPort_BCM_ExteriorSignal::NotifyhornState::Update::" << notify.Error().Message();
    }
}
 
void BCM_ExteriorSignalSkeletonImpl::UpdatehornState(const fields::hornState::FieldType& value)
{
    m_hornState = value;
}
 
ara::core::Future<fields::lightState::FieldType> BCM_ExteriorSignalSkeletonImpl::GetlightState()
{
    m_logger.LogVerbose() << "PPort_BCM_ExteriorSignal::GetlightState::Requested";
    
    ara::core::Promise<fields::lightState::FieldType> promise;
    
    promise.set_value(m_lightState);
    return promise.get_future();
}
 
void BCM_ExteriorSignalSkeletonImpl::NotifylightState()
{
    auto notify = lightState.Update(m_lightState);
    if (notify.HasValue())
    {
        m_logger.LogVerbose() << "PPort_BCM_ExteriorSignal::NotifylightState::Update";
    }
    else
    {
        m_logger.LogError() << "PPort_BCM_ExteriorSignal::NotifylightState::Update::" << notify.Error().Message();
    }
}
 
void BCM_ExteriorSignalSkeletonImpl::UpdatelightState(const fields::lightState::FieldType& value)
{
    m_lightState = value;
}
 
} /// namespace skeleton
} /// namespace simulation
} /// namespace eevp

namespace servicecreator
{
namespace aa
{
namespace port
{
 
PPort_BCM_ExteriorSignal::PPort_BCM_ExteriorSignal()
    : m_logger(ara::log::CreateLogger("SVCT", "PORT", ara::log::LogLevel::kVerbose))
    , m_running{false}
{
}
 
PPort_BCM_ExteriorSignal::~PPort_BCM_ExteriorSignal()
{
}
 
void PPort_BCM_ExteriorSignal::Start()
{
    m_logger.LogVerbose() << "PPort_BCM_ExteriorSignal::Start";
    
    // construct skeleton
    ara::core::InstanceSpecifier specifier{"ServiceCreator/AA/PPort_BCM_ExteriorSignal"};
    m_interface = std::make_unique<eevp::simulation::skeleton::BCM_ExteriorSignalSkeletonImpl>(specifier);
    
    // offer service
    auto offer = m_interface->OfferService();
    if (offer.HasValue())
    {
        m_running = true;
        m_logger.LogVerbose() << "PPort_BCM_ExteriorSignal::Start::OfferService";
    }
    else
    {
        m_running = false;
        m_logger.LogError() << "PPort_BCM_ExteriorSignal::Start::OfferService::" << offer.Error().Message();
    }
}
 
void PPort_BCM_ExteriorSignal::Terminate()
{
    m_logger.LogVerbose() << "PPort_BCM_ExteriorSignal::Terminate";
    
    // stop port
    m_running = false;
    
    // stop offer service
    m_interface->StopOfferService();
    m_logger.LogVerbose() << "PPort_BCM_ExteriorSignal::Terminate::StopOfferService";
}
 
void PPort_BCM_ExteriorSignal::WriteValuehornState(const eevp::simulation::skeleton::fields::hornState::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdatehornState(value);
}
 
void PPort_BCM_ExteriorSignal::NotifyFieldhornStateCyclic()
{
    while (m_running)
    {
        {
            std::lock_guard<std::mutex> lock(m_mutex);
            
            m_interface->NotifyhornState();
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void PPort_BCM_ExteriorSignal::NotifyFieldhornStateTriggered()
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->NotifyhornState();
}
 
void PPort_BCM_ExteriorSignal::NotifyFieldhornStateTriggered(const eevp::simulation::skeleton::fields::hornState::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdatehornState(value);
    m_interface->NotifyhornState();
}
 
void PPort_BCM_ExteriorSignal::WriteValuelightState(const eevp::simulation::skeleton::fields::lightState::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdatelightState(value);
}
 
void PPort_BCM_ExteriorSignal::NotifyFieldlightStateCyclic()
{
    while (m_running)
    {
        {
            std::lock_guard<std::mutex> lock(m_mutex);
            
            m_interface->NotifylightState();
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void PPort_BCM_ExteriorSignal::NotifyFieldlightStateTriggered()
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->NotifylightState();
}
 
void PPort_BCM_ExteriorSignal::NotifyFieldlightStateTriggered(const eevp::simulation::skeleton::fields::lightState::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdatelightState(value);
    m_interface->NotifylightState();
}
 
} /// namespace port
} /// namespace aa
} /// namespace servicecreator
 
/// EOF