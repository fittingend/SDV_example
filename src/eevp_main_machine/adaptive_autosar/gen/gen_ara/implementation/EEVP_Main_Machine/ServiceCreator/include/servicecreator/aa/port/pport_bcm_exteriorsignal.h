///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : pport_bcm_exteriorsignal.h
/// SOFTWARE COMPONENT NAME           : PPort_BCM_ExteriorSignal
/// GENERATED DATE                    : 2025-08-30 10:53:45
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef PARA_AA_GEN_SOFTWARE_COMPONENT_PPORT_SERVICECREATOR_AA_PPORT_BCM_EXTERIORSIGNAL_H
#define PARA_AA_GEN_SOFTWARE_COMPONENT_PPORT_SERVICECREATOR_AA_PPORT_BCM_EXTERIORSIGNAL_H
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// INCLUSION HEADER FILES
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "eevp/simulation/bcm_exteriorsignal_skeleton.h"
 
#include "ara/log/logger.h"
 
#include <mutex>
#include <thread>
 
namespace eevp
{
namespace simulation
{
namespace skeleton
{
 
class BCM_ExteriorSignalSkeletonImpl : public BCM_ExteriorSignalSkeleton
{
public:
    /// @brief Constructor
    BCM_ExteriorSignalSkeletonImpl(ara::core::InstanceSpecifier instanceSpec, ara::com::MethodCallProcessingMode mode = ara::com::MethodCallProcessingMode::kEvent);

    /// @brief Getter for field, hornState
    ara::core::Future<fields::hornState::FieldType> GethornState();
    
    /// @brief Notifier for field, hornState
    void NotifyhornState();
    
    /// @brief Update field value by software component, hornState
    void UpdatehornState(const fields::hornState::FieldType& value);
    
    /// @brief Getter for field, lightState
    ara::core::Future<fields::lightState::FieldType> GetlightState();
    
    /// @brief Notifier for field, lightState
    void NotifylightState();
    
    /// @brief Update field value by software component, lightState
    void UpdatelightState(const fields::lightState::FieldType& value);
    
private:
    /// @brief Logger for this port
    ara::log::Logger& m_logger;
    
    /// @brief Field, hornState
    fields::hornState::FieldType m_hornState;
    
    /// @brief Field, lightState
    fields::lightState::FieldType m_lightState;
    
};
 
} /// namespace skeleton
} /// namespace simulation
} /// namespace eevp

namespace servicecreator
{
namespace aa
{
namespace port
{
 
class PPort_BCM_ExteriorSignal
{
public:
    /// @brief Constructor
    PPort_BCM_ExteriorSignal();
    
    /// @brief Destructor
    ~PPort_BCM_ExteriorSignal();
    
    /// @brief Start port
    void Start();
    
    /// @brief Terminate port
    void Terminate();
    
    /// @brief Write field value to buffer, hornState
    void WriteValuehornState(const eevp::simulation::skeleton::fields::hornState::FieldType& value);
     
    /// @brief Notify field cyclic from buffer, hornState
    void NotifyFieldhornStateCyclic();
     
    /// @brief Notify field directly from buffer data, hornState
    void NotifyFieldhornStateTriggered();
     
    /// @brief Notify field directly with argument, hornState
    void NotifyFieldhornStateTriggered(const eevp::simulation::skeleton::fields::hornState::FieldType& value);

    /// @brief Write field value to buffer, lightState
    void WriteValuelightState(const eevp::simulation::skeleton::fields::lightState::FieldType& value);
     
    /// @brief Notify field cyclic from buffer, lightState
    void NotifyFieldlightStateCyclic();
     
    /// @brief Notify field directly from buffer data, lightState
    void NotifyFieldlightStateTriggered();
     
    /// @brief Notify field directly with argument, lightState
    void NotifyFieldlightStateTriggered(const eevp::simulation::skeleton::fields::lightState::FieldType& value);
     
private:
    /// @brief Logger for this port
    ara::log::Logger& m_logger;
    
    /// @brief Flag of port status
    bool m_running;
    
    /// @brief Mutex for this port
    std::mutex m_mutex;
    
    /// @brief AUTOSAR Port Interface
    std::unique_ptr<eevp::simulation::skeleton::BCM_ExteriorSignalSkeletonImpl> m_interface;
    
};
 
} /// namespace port
} /// namespace aa
} /// namespace servicecreator
 
#endif /// PARA_AA_GEN_SOFTWARE_COMPONENT_PPORT_SERVICECREATOR_AA_PPORT_BCM_EXTERIORSIGNAL_H