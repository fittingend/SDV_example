///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : rport_subscriptionmanagement.h
/// SOFTWARE COMPONENT NAME           : RPort_SubscriptionManagement
/// GENERATED DATE                    : 2025-09-11 13:55:47
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef PARA_AA_GEN_SOFTWARE_COMPONENT_RPORT_SMOKINGMONITOR_AA_RPORT_SUBSCRIPTIONMANAGEMENT_H
#define PARA_AA_GEN_SOFTWARE_COMPONENT_RPORT_SMOKINGMONITOR_AA_RPORT_SUBSCRIPTIONMANAGEMENT_H
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// INCLUSION HEADER FILES
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "eevp/subscription/service/subscriptionmanagement_proxy.h"
 
#include "ara/log/logger.h"
 
#include <mutex>
#include <thread>
 
namespace smokingmonitor
{
namespace aa
{
namespace port
{
 
class RPort_SubscriptionManagement
{
public:
    /// @brief Constructor
    RPort_SubscriptionManagement();
    
    /// @brief Destructor
    ~RPort_SubscriptionManagement();
    
    /// @brief Start port
    void Start();
    
    /// @brief Terminate port
    void Terminate();
    
    /// @brief Subscribe event, notifySubscriptionInfo
    void SubscribenotifySubscriptionInfo();
     
    /// @brief Stop event subscription, notifySubscriptionInfo
    void StopSubscribenotifySubscriptionInfo();
     
    /// @brief Event receive handler, notifySubscriptionInfo
    void ReceiveEventnotifySubscriptionInfoTriggered();
     
    /// @brief Event receive handler, notifySubscriptionInfo
    void ReceiveEventnotifySubscriptionInfoCyclic();
     
    /// @brief Read event data, notifySubscriptionInfo
    void ReadDatanotifySubscriptionInfo(ara::com::SamplePtr<eevp::subscription::service::proxy::events::notifySubscriptionInfo::SampleType const> samplePtr);
     
    /// @brief Regist callback from software component
    void RegistEventHandlernotifySubscriptionInfo(std::function<void(const eevp::subscription::service::proxy::events::notifySubscriptionInfo::SampleType&)> handler);

    /// @brief Request with Response method using by software component, getSubscriptionInfo
    void RequestgetSubscriptionInfo(const eevp::type::String& appName);
     
    /// @brief Regist callback from software component
    void RegistResponseHandlergetSubscriptionInfo(std::function<void(const eevp::subscription::service::proxy::methods::getSubscriptionInfo::Output&)> handler);
    
private:
    /// @brief Callback for find service
    void Find(ara::com::ServiceHandleContainer<eevp::subscription::service::proxy::SubscriptionManagementProxy::HandleType> handles,
              ara::com::FindServiceHandle findHandle);
    
    /// @brief Callback for event receiver, notifySubscriptionInfo
    void RegistReceivernotifySubscriptionInfo();

private:
    /// @brief Logger for this port
    ara::log::Logger& m_logger;
    
    /// @brief Flag of port status
    bool m_running;
    
    /// @brief Flag of find service status
    bool m_found;
    
    /// @brief Mutex for this port
    std::mutex m_mutex; 
    
    /// @brief AUTOSAR Port Interface
    std::unique_ptr<eevp::subscription::service::proxy::SubscriptionManagementProxy> m_interface;
    
    /// @brief Find service handle
    std::unique_ptr<ara::com::FindServiceHandle> m_findHandle;
    
    /// @brief Callback from software component, notifySubscriptionInfo
    std::function<void(const eevp::subscription::service::proxy::events::notifySubscriptionInfo::SampleType&)> m_receivernotifySubscriptionInfo;

    /// @brief Callback from software component, getSubscriptionInfo
    std::function<void(const eevp::subscription::service::proxy::methods::getSubscriptionInfo::Output&)> m_respondergetSubscriptionInfo;
};
 
} /// namespace port
} /// namespace aa
} /// namespace smokingmonitor
 
#endif /// PARA_AA_GEN_SOFTWARE_COMPONENT_RPORT_SMOKINGMONITOR_AA_RPORT_SUBSCRIPTIONMANAGEMENT_H