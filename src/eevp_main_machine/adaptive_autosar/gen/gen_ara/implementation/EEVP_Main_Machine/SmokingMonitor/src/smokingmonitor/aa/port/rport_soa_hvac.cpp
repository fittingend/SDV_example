///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : rport_soa_hvac.cpp
/// SOFTWARE COMPONENT NAME           : RPort_SOA_HVAC
/// GENERATED DATE                    : 2025-09-11 13:55:47
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "smokingmonitor/aa/port/rport_soa_hvac.h"
 
namespace smokingmonitor
{
namespace aa
{
namespace port
{
 
RPort_SOA_HVAC::RPort_SOA_HVAC()
    : m_logger(ara::log::CreateLogger("SKMN", "PORT", ara::log::LogLevel::kVerbose))
    , m_running{false}
    , m_found{false}
    , m_receiverSoaHvacSwVersion{nullptr}
    , m_receiversoaHvacDeviceNormal{nullptr}
    , m_receiversoaHvacSetting{nullptr}
    , m_receiversoaHvacStatus{nullptr}
    , m_receiversoaHvacTemps{nullptr}
{
}
 
RPort_SOA_HVAC::~RPort_SOA_HVAC()
{
}
 
void RPort_SOA_HVAC::Start()
{
    m_logger.LogVerbose() << "RPort_SOA_HVAC::Start";
    
    // regist callback
    ara::core::InstanceSpecifier specifier{"SmokingMonitor/AA/RPort_SOA_HVAC"};
    auto handler = [this](ara::com::ServiceHandleContainer<eevp::control::proxy::SoaHvacProxy::HandleType> handles,
                          ara::com::FindServiceHandle findHandle) {
        this->Find(handles, findHandle);
    };
    
    // find service
    auto find = eevp::control::proxy::SoaHvacProxy::StartFindService(handler, specifier);
    if (find.HasValue())
    {
        m_logger.LogVerbose() << "RPort_SOA_HVAC::Start::StartFindService";
    }
    else
    {
        m_logger.LogError() << "RPort_SOA_HVAC::Start::StartFindService::" << find.Error().Message();
    }
    
    // run port
    m_running = true;
}
 
void RPort_SOA_HVAC::Terminate()
{
    m_logger.LogVerbose() << "RPort_SOA_HVAC::Terminate";
    
    // stop port
    m_running = false;
    
    // clear service proxy
    if (m_interface)
    {
        StopSubscribeSoaHvacSwVersion();
        StopSubscribesoaHvacDeviceNormal();
        StopSubscribesoaHvacSetting();
        StopSubscribesoaHvacStatus();
        StopSubscribesoaHvacTemps();
        
        // stop find service
        m_interface->StopFindService(*m_findHandle);
        m_found = false;
        
        m_logger.LogVerbose() << "RPort_SOA_HVAC::Terminate::StopFindService";
    }
}
 
void RPort_SOA_HVAC::Find(ara::com::ServiceHandleContainer<eevp::control::proxy::SoaHvacProxy::HandleType> handles, ara::com::FindServiceHandle findHandle)
{
    // check finding handles
    if (handles.empty())
    {
        m_logger.LogVerbose() << "RPort_SOA_HVAC::Find::Service Instances not found";
        return;
    }
    else
    {
        for (auto& handle : handles)
        {
            m_logger.LogVerbose() << "RPort_SOA_HVAC::Find::Searched Instance::ServiceId =" << 
                                     handle.GetServiceHandle().serviceId << 
                                     ", InstanceId =" << 
                                     handle.GetServiceHandle().instanceId;
        }
    }
    
    // create proxy
    if (m_interface)
    {
        m_logger.LogVerbose() << "RPort_SOA_HVAC::Find::Proxy is already running";
    }
    else
    {
        m_logger.LogVerbose() << "RPort_SOA_HVAC::Find::Using Instance::ServiceId =" << 
                                 handles[0].GetServiceHandle().serviceId << 
                                 ", InstanceId =" << 
                                 handles[0].GetServiceHandle().instanceId;
        m_interface = std::make_unique<eevp::control::proxy::SoaHvacProxy>(handles[0]);
        m_findHandle = std::make_unique<ara::com::FindServiceHandle>(findHandle);
        m_found = true;
        
        // subscribe field notifications
        SubscribeSoaHvacSwVersion();
        SubscribesoaHvacDeviceNormal();
        SubscribesoaHvacSetting();
        SubscribesoaHvacStatus();
        SubscribesoaHvacTemps();
    }
}
 
void RPort_SOA_HVAC::SubscribeSoaHvacSwVersion()
{
    if (m_found)
    {
        // regist receiver handler
        // if you want to enable it, please uncomment below code
        // RegistReceiverSoaHvacSwVersion();
        
        // request subscribe
        auto subscribe = m_interface->SoaHvacSwVersion.Subscribe(1);
        if (subscribe.HasValue())
        {
            m_logger.LogVerbose() << "RPort_SOA_HVAC::SubscribeSoaHvacSwVersion::Subscribed";
        }
        else
        {
            m_logger.LogError() << "RPort_SOA_HVAC::SubscribeSoaHvacSwVersion::" << subscribe.Error().Message();
        }
    }
}
 
void RPort_SOA_HVAC::StopSubscribeSoaHvacSwVersion()
{
    if (m_found)
    {
        // request stop subscribe
        m_interface->SoaHvacSwVersion.Unsubscribe();
        m_logger.LogVerbose() << "RPort_SOA_HVAC::StopSubscribeSoaHvacSwVersion::Unsubscribed";
    }
}
 
void RPort_SOA_HVAC::RegistReceiverSoaHvacSwVersion()
{
    if (m_found)
    {
        // set callback
        auto receiver = [this]() -> void {
            return ReceiveFieldSoaHvacSwVersionTriggered();
        };
        
        // regist callback
        auto callback = m_interface->SoaHvacSwVersion.SetReceiveHandler(receiver);
        if (callback.HasValue())
        {
            m_logger.LogVerbose() << "RPort_SOA_HVAC::RegistReceiverSoaHvacSwVersion::SetReceiveHandler";
        }
        else
        {
            m_logger.LogError() << "RPort_SOA_HVAC::RegistReceiverSoaHvacSwVersion::SetReceiveHandler::" << callback.Error().Message();
        }
    }
}
 
void RPort_SOA_HVAC::ReceiveFieldSoaHvacSwVersionTriggered()
{
    if (m_found)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_interface->SoaHvacSwVersion.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
        {
            auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->SoaHvacSwVersion.GetNewSamples([&](auto samplePtr) {
                RPort_SOA_HVAC::ReadValueSoaHvacSwVersion(std::move(samplePtr));
            }));
            if (recv->HasValue())
            {
                m_logger.LogVerbose() << "RPort_SOA_HVAC::ReceiveFieldSoaHvacSwVersion::GetNewSamples::" << recv->Value();
            }
            else
            {
                m_logger.LogError() << "RPort_SOA_HVAC::ReceiveFieldSoaHvacSwVersion::GetNewSamples::" << recv->Error().Message();
            }
        }
    }
}
 
void RPort_SOA_HVAC::ReceiveFieldSoaHvacSwVersionCyclic()
{
    while (m_running)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_found)
        {
            if (m_interface->SoaHvacSwVersion.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
            {
                auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->SoaHvacSwVersion.GetNewSamples([&](auto samplePtr) {
                    RPort_SOA_HVAC::ReadValueSoaHvacSwVersion(std::move(samplePtr));
                }));
                if (recv->HasValue())
                {
                    m_logger.LogVerbose() << "RPort_SOA_HVAC::ReceiveFieldSoaHvacSwVersion::GetNewSamples::" << recv->Value();
                }
                else
                {
                    m_logger.LogError() << "RPort_SOA_HVAC::ReceiveFieldSoaHvacSwVersion::GetNewSamples::" << recv->Error().Message();
                }
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void RPort_SOA_HVAC::ReadValueSoaHvacSwVersion(ara::com::SamplePtr<eevp::control::proxy::fields::SoaHvacSwVersion::FieldType const> samplePtr)
{
    auto value = *samplePtr.Get();
    if (m_receiverSoaHvacSwVersion)
    {
        m_receiverSoaHvacSwVersion(value);
    }
}
 
void RPort_SOA_HVAC::RegistFieldHandlerSoaHvacSwVersion(std::function<void(const eevp::control::proxy::fields::SoaHvacSwVersion::FieldType&)> handler)
{
    m_receiverSoaHvacSwVersion = handler;
}
 
void RPort_SOA_HVAC::GetSoaHvacSwVersion()
{
    if (m_found)
    {
        auto request = m_interface->SoaHvacSwVersion.Get();
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "RPort_SOA_HVAC::GetSoaHvacSwVersion::Responded";
            
            auto result = response.Value();
            if (m_receiverSoaHvacSwVersion)
            {
                m_receiverSoaHvacSwVersion(result);
            }
        }
        else
        {
            m_logger.LogError() << "RPort_SOA_HVAC::GetSoaHvacSwVersion::" << response.Error().Message();
        }
    }
}
 
void RPort_SOA_HVAC::SubscribesoaHvacDeviceNormal()
{
    if (m_found)
    {
        // regist receiver handler
        // if you want to enable it, please uncomment below code
        // RegistReceiversoaHvacDeviceNormal();
        
        // request subscribe
        auto subscribe = m_interface->soaHvacDeviceNormal.Subscribe(1);
        if (subscribe.HasValue())
        {
            m_logger.LogVerbose() << "RPort_SOA_HVAC::SubscribesoaHvacDeviceNormal::Subscribed";
        }
        else
        {
            m_logger.LogError() << "RPort_SOA_HVAC::SubscribesoaHvacDeviceNormal::" << subscribe.Error().Message();
        }
    }
}
 
void RPort_SOA_HVAC::StopSubscribesoaHvacDeviceNormal()
{
    if (m_found)
    {
        // request stop subscribe
        m_interface->soaHvacDeviceNormal.Unsubscribe();
        m_logger.LogVerbose() << "RPort_SOA_HVAC::StopSubscribesoaHvacDeviceNormal::Unsubscribed";
    }
}
 
void RPort_SOA_HVAC::RegistReceiversoaHvacDeviceNormal()
{
    if (m_found)
    {
        // set callback
        auto receiver = [this]() -> void {
            return ReceiveFieldsoaHvacDeviceNormalTriggered();
        };
        
        // regist callback
        auto callback = m_interface->soaHvacDeviceNormal.SetReceiveHandler(receiver);
        if (callback.HasValue())
        {
            m_logger.LogVerbose() << "RPort_SOA_HVAC::RegistReceiversoaHvacDeviceNormal::SetReceiveHandler";
        }
        else
        {
            m_logger.LogError() << "RPort_SOA_HVAC::RegistReceiversoaHvacDeviceNormal::SetReceiveHandler::" << callback.Error().Message();
        }
    }
}
 
void RPort_SOA_HVAC::ReceiveFieldsoaHvacDeviceNormalTriggered()
{
    if (m_found)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_interface->soaHvacDeviceNormal.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
        {
            auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaHvacDeviceNormal.GetNewSamples([&](auto samplePtr) {
                RPort_SOA_HVAC::ReadValuesoaHvacDeviceNormal(std::move(samplePtr));
            }));
            if (recv->HasValue())
            {
                m_logger.LogVerbose() << "RPort_SOA_HVAC::ReceiveFieldsoaHvacDeviceNormal::GetNewSamples::" << recv->Value();
            }
            else
            {
                m_logger.LogError() << "RPort_SOA_HVAC::ReceiveFieldsoaHvacDeviceNormal::GetNewSamples::" << recv->Error().Message();
            }
        }
    }
}
 
void RPort_SOA_HVAC::ReceiveFieldsoaHvacDeviceNormalCyclic()
{
    while (m_running)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_found)
        {
            if (m_interface->soaHvacDeviceNormal.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
            {
                auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaHvacDeviceNormal.GetNewSamples([&](auto samplePtr) {
                    RPort_SOA_HVAC::ReadValuesoaHvacDeviceNormal(std::move(samplePtr));
                }));
                if (recv->HasValue())
                {
                    m_logger.LogVerbose() << "RPort_SOA_HVAC::ReceiveFieldsoaHvacDeviceNormal::GetNewSamples::" << recv->Value();
                }
                else
                {
                    m_logger.LogError() << "RPort_SOA_HVAC::ReceiveFieldsoaHvacDeviceNormal::GetNewSamples::" << recv->Error().Message();
                }
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void RPort_SOA_HVAC::ReadValuesoaHvacDeviceNormal(ara::com::SamplePtr<eevp::control::proxy::fields::soaHvacDeviceNormal::FieldType const> samplePtr)
{
    auto value = *samplePtr.Get();
    if (m_receiversoaHvacDeviceNormal)
    {
        m_receiversoaHvacDeviceNormal(value);
    }
}
 
void RPort_SOA_HVAC::RegistFieldHandlersoaHvacDeviceNormal(std::function<void(const eevp::control::proxy::fields::soaHvacDeviceNormal::FieldType&)> handler)
{
    m_receiversoaHvacDeviceNormal = handler;
}
 
void RPort_SOA_HVAC::GetsoaHvacDeviceNormal()
{
    if (m_found)
    {
        auto request = m_interface->soaHvacDeviceNormal.Get();
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "RPort_SOA_HVAC::GetsoaHvacDeviceNormal::Responded";
            
            auto result = response.Value();
            if (m_receiversoaHvacDeviceNormal)
            {
                m_receiversoaHvacDeviceNormal(result);
            }
        }
        else
        {
            m_logger.LogError() << "RPort_SOA_HVAC::GetsoaHvacDeviceNormal::" << response.Error().Message();
        }
    }
}
 
void RPort_SOA_HVAC::SubscribesoaHvacSetting()
{
    if (m_found)
    {
        // regist receiver handler
        // if you want to enable it, please uncomment below code
        // RegistReceiversoaHvacSetting();
        
        // request subscribe
        auto subscribe = m_interface->soaHvacSetting.Subscribe(1);
        if (subscribe.HasValue())
        {
            m_logger.LogVerbose() << "RPort_SOA_HVAC::SubscribesoaHvacSetting::Subscribed";
        }
        else
        {
            m_logger.LogError() << "RPort_SOA_HVAC::SubscribesoaHvacSetting::" << subscribe.Error().Message();
        }
    }
}
 
void RPort_SOA_HVAC::StopSubscribesoaHvacSetting()
{
    if (m_found)
    {
        // request stop subscribe
        m_interface->soaHvacSetting.Unsubscribe();
        m_logger.LogVerbose() << "RPort_SOA_HVAC::StopSubscribesoaHvacSetting::Unsubscribed";
    }
}
 
void RPort_SOA_HVAC::RegistReceiversoaHvacSetting()
{
    if (m_found)
    {
        // set callback
        auto receiver = [this]() -> void {
            return ReceiveFieldsoaHvacSettingTriggered();
        };
        
        // regist callback
        auto callback = m_interface->soaHvacSetting.SetReceiveHandler(receiver);
        if (callback.HasValue())
        {
            m_logger.LogVerbose() << "RPort_SOA_HVAC::RegistReceiversoaHvacSetting::SetReceiveHandler";
        }
        else
        {
            m_logger.LogError() << "RPort_SOA_HVAC::RegistReceiversoaHvacSetting::SetReceiveHandler::" << callback.Error().Message();
        }
    }
}
 
void RPort_SOA_HVAC::ReceiveFieldsoaHvacSettingTriggered()
{
    if (m_found)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_interface->soaHvacSetting.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
        {
            auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaHvacSetting.GetNewSamples([&](auto samplePtr) {
                RPort_SOA_HVAC::ReadValuesoaHvacSetting(std::move(samplePtr));
            }));
            if (recv->HasValue())
            {
                m_logger.LogVerbose() << "RPort_SOA_HVAC::ReceiveFieldsoaHvacSetting::GetNewSamples::" << recv->Value();
            }
            else
            {
                m_logger.LogError() << "RPort_SOA_HVAC::ReceiveFieldsoaHvacSetting::GetNewSamples::" << recv->Error().Message();
            }
        }
    }
}
 
void RPort_SOA_HVAC::ReceiveFieldsoaHvacSettingCyclic()
{
    while (m_running)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_found)
        {
            if (m_interface->soaHvacSetting.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
            {
                auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaHvacSetting.GetNewSamples([&](auto samplePtr) {
                    RPort_SOA_HVAC::ReadValuesoaHvacSetting(std::move(samplePtr));
                }));
                if (recv->HasValue())
                {
                    m_logger.LogVerbose() << "RPort_SOA_HVAC::ReceiveFieldsoaHvacSetting::GetNewSamples::" << recv->Value();
                }
                else
                {
                    m_logger.LogError() << "RPort_SOA_HVAC::ReceiveFieldsoaHvacSetting::GetNewSamples::" << recv->Error().Message();
                }
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void RPort_SOA_HVAC::ReadValuesoaHvacSetting(ara::com::SamplePtr<eevp::control::proxy::fields::soaHvacSetting::FieldType const> samplePtr)
{
    auto value = *samplePtr.Get();
    if (m_receiversoaHvacSetting)
    {
        m_receiversoaHvacSetting(value);
    }
}
 
void RPort_SOA_HVAC::RegistFieldHandlersoaHvacSetting(std::function<void(const eevp::control::proxy::fields::soaHvacSetting::FieldType&)> handler)
{
    m_receiversoaHvacSetting = handler;
}
 
void RPort_SOA_HVAC::GetsoaHvacSetting()
{
    if (m_found)
    {
        auto request = m_interface->soaHvacSetting.Get();
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "RPort_SOA_HVAC::GetsoaHvacSetting::Responded";
            
            auto result = response.Value();
            if (m_receiversoaHvacSetting)
            {
                m_receiversoaHvacSetting(result);
            }
        }
        else
        {
            m_logger.LogError() << "RPort_SOA_HVAC::GetsoaHvacSetting::" << response.Error().Message();
        }
    }
}
 
void RPort_SOA_HVAC::SubscribesoaHvacStatus()
{
    if (m_found)
    {
        // regist receiver handler
        // if you want to enable it, please uncomment below code
        // RegistReceiversoaHvacStatus();
        
        // request subscribe
        auto subscribe = m_interface->soaHvacStatus.Subscribe(1);
        if (subscribe.HasValue())
        {
            m_logger.LogVerbose() << "RPort_SOA_HVAC::SubscribesoaHvacStatus::Subscribed";
        }
        else
        {
            m_logger.LogError() << "RPort_SOA_HVAC::SubscribesoaHvacStatus::" << subscribe.Error().Message();
        }
    }
}
 
void RPort_SOA_HVAC::StopSubscribesoaHvacStatus()
{
    if (m_found)
    {
        // request stop subscribe
        m_interface->soaHvacStatus.Unsubscribe();
        m_logger.LogVerbose() << "RPort_SOA_HVAC::StopSubscribesoaHvacStatus::Unsubscribed";
    }
}
 
void RPort_SOA_HVAC::RegistReceiversoaHvacStatus()
{
    if (m_found)
    {
        // set callback
        auto receiver = [this]() -> void {
            return ReceiveFieldsoaHvacStatusTriggered();
        };
        
        // regist callback
        auto callback = m_interface->soaHvacStatus.SetReceiveHandler(receiver);
        if (callback.HasValue())
        {
            m_logger.LogVerbose() << "RPort_SOA_HVAC::RegistReceiversoaHvacStatus::SetReceiveHandler";
        }
        else
        {
            m_logger.LogError() << "RPort_SOA_HVAC::RegistReceiversoaHvacStatus::SetReceiveHandler::" << callback.Error().Message();
        }
    }
}
 
void RPort_SOA_HVAC::ReceiveFieldsoaHvacStatusTriggered()
{
    if (m_found)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_interface->soaHvacStatus.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
        {
            auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaHvacStatus.GetNewSamples([&](auto samplePtr) {
                RPort_SOA_HVAC::ReadValuesoaHvacStatus(std::move(samplePtr));
            }));
            if (recv->HasValue())
            {
                m_logger.LogVerbose() << "RPort_SOA_HVAC::ReceiveFieldsoaHvacStatus::GetNewSamples::" << recv->Value();
            }
            else
            {
                m_logger.LogError() << "RPort_SOA_HVAC::ReceiveFieldsoaHvacStatus::GetNewSamples::" << recv->Error().Message();
            }
        }
    }
}
 
void RPort_SOA_HVAC::ReceiveFieldsoaHvacStatusCyclic()
{
    while (m_running)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_found)
        {
            if (m_interface->soaHvacStatus.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
            {
                auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaHvacStatus.GetNewSamples([&](auto samplePtr) {
                    RPort_SOA_HVAC::ReadValuesoaHvacStatus(std::move(samplePtr));
                }));
                if (recv->HasValue())
                {
                    m_logger.LogVerbose() << "RPort_SOA_HVAC::ReceiveFieldsoaHvacStatus::GetNewSamples::" << recv->Value();
                }
                else
                {
                    m_logger.LogError() << "RPort_SOA_HVAC::ReceiveFieldsoaHvacStatus::GetNewSamples::" << recv->Error().Message();
                }
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void RPort_SOA_HVAC::ReadValuesoaHvacStatus(ara::com::SamplePtr<eevp::control::proxy::fields::soaHvacStatus::FieldType const> samplePtr)
{
    auto value = *samplePtr.Get();
    if (m_receiversoaHvacStatus)
    {
        m_receiversoaHvacStatus(value);
    }
}
 
void RPort_SOA_HVAC::RegistFieldHandlersoaHvacStatus(std::function<void(const eevp::control::proxy::fields::soaHvacStatus::FieldType&)> handler)
{
    m_receiversoaHvacStatus = handler;
}
 
void RPort_SOA_HVAC::GetsoaHvacStatus()
{
    if (m_found)
    {
        auto request = m_interface->soaHvacStatus.Get();
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "RPort_SOA_HVAC::GetsoaHvacStatus::Responded";
            
            auto result = response.Value();
            if (m_receiversoaHvacStatus)
            {
                m_receiversoaHvacStatus(result);
            }
        }
        else
        {
            m_logger.LogError() << "RPort_SOA_HVAC::GetsoaHvacStatus::" << response.Error().Message();
        }
    }
}
 
void RPort_SOA_HVAC::SubscribesoaHvacTemps()
{
    if (m_found)
    {
        // regist receiver handler
        // if you want to enable it, please uncomment below code
        // RegistReceiversoaHvacTemps();
        
        // request subscribe
        auto subscribe = m_interface->soaHvacTemps.Subscribe(1);
        if (subscribe.HasValue())
        {
            m_logger.LogVerbose() << "RPort_SOA_HVAC::SubscribesoaHvacTemps::Subscribed";
        }
        else
        {
            m_logger.LogError() << "RPort_SOA_HVAC::SubscribesoaHvacTemps::" << subscribe.Error().Message();
        }
    }
}
 
void RPort_SOA_HVAC::StopSubscribesoaHvacTemps()
{
    if (m_found)
    {
        // request stop subscribe
        m_interface->soaHvacTemps.Unsubscribe();
        m_logger.LogVerbose() << "RPort_SOA_HVAC::StopSubscribesoaHvacTemps::Unsubscribed";
    }
}
 
void RPort_SOA_HVAC::RegistReceiversoaHvacTemps()
{
    if (m_found)
    {
        // set callback
        auto receiver = [this]() -> void {
            return ReceiveFieldsoaHvacTempsTriggered();
        };
        
        // regist callback
        auto callback = m_interface->soaHvacTemps.SetReceiveHandler(receiver);
        if (callback.HasValue())
        {
            m_logger.LogVerbose() << "RPort_SOA_HVAC::RegistReceiversoaHvacTemps::SetReceiveHandler";
        }
        else
        {
            m_logger.LogError() << "RPort_SOA_HVAC::RegistReceiversoaHvacTemps::SetReceiveHandler::" << callback.Error().Message();
        }
    }
}
 
void RPort_SOA_HVAC::ReceiveFieldsoaHvacTempsTriggered()
{
    if (m_found)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_interface->soaHvacTemps.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
        {
            auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaHvacTemps.GetNewSamples([&](auto samplePtr) {
                RPort_SOA_HVAC::ReadValuesoaHvacTemps(std::move(samplePtr));
            }));
            if (recv->HasValue())
            {
                m_logger.LogVerbose() << "RPort_SOA_HVAC::ReceiveFieldsoaHvacTemps::GetNewSamples::" << recv->Value();
            }
            else
            {
                m_logger.LogError() << "RPort_SOA_HVAC::ReceiveFieldsoaHvacTemps::GetNewSamples::" << recv->Error().Message();
            }
        }
    }
}
 
void RPort_SOA_HVAC::ReceiveFieldsoaHvacTempsCyclic()
{
    while (m_running)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_found)
        {
            if (m_interface->soaHvacTemps.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
            {
                auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaHvacTemps.GetNewSamples([&](auto samplePtr) {
                    RPort_SOA_HVAC::ReadValuesoaHvacTemps(std::move(samplePtr));
                }));
                if (recv->HasValue())
                {
                    m_logger.LogVerbose() << "RPort_SOA_HVAC::ReceiveFieldsoaHvacTemps::GetNewSamples::" << recv->Value();
                }
                else
                {
                    m_logger.LogError() << "RPort_SOA_HVAC::ReceiveFieldsoaHvacTemps::GetNewSamples::" << recv->Error().Message();
                }
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void RPort_SOA_HVAC::ReadValuesoaHvacTemps(ara::com::SamplePtr<eevp::control::proxy::fields::soaHvacTemps::FieldType const> samplePtr)
{
    auto value = *samplePtr.Get();
    if (m_receiversoaHvacTemps)
    {
        m_receiversoaHvacTemps(value);
    }
}
 
void RPort_SOA_HVAC::RegistFieldHandlersoaHvacTemps(std::function<void(const eevp::control::proxy::fields::soaHvacTemps::FieldType&)> handler)
{
    m_receiversoaHvacTemps = handler;
}
 
void RPort_SOA_HVAC::GetsoaHvacTemps()
{
    if (m_found)
    {
        auto request = m_interface->soaHvacTemps.Get();
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "RPort_SOA_HVAC::GetsoaHvacTemps::Responded";
            
            auto result = response.Value();
            if (m_receiversoaHvacTemps)
            {
                m_receiversoaHvacTemps(result);
            }
        }
        else
        {
            m_logger.LogError() << "RPort_SOA_HVAC::GetsoaHvacTemps::" << response.Error().Message();
        }
    }
}
 
void RPort_SOA_HVAC::RequestSetAcOnOff(const bool& on)
{
    if (m_found)
    {
        m_interface->SetAcOnOff(on);
    }
}
 
void RPort_SOA_HVAC::RequestSetAirSource(const eevp::control::SoaHvacAirSource& src)
{
    if (m_found)
    {
        m_interface->SetAirSource(src);
    }
}
 
void RPort_SOA_HVAC::RequestSetAutoTemp(const bool& on)
{
    if (m_found)
    {
        m_interface->SetAutoTemp(on);
    }
}
 
void RPort_SOA_HVAC::RequestSetBackwardDefrostOn(const bool& on)
{
    if (m_found)
    {
        m_interface->SetBackwardDefrostOn(on);
    }
}
 
void RPort_SOA_HVAC::RequestSetBlowingDirection(const eevp::control::SoaHvacBlowDir& dir)
{
    if (m_found)
    {
        m_interface->SetBlowingDirection(dir);
    }
}
 
void RPort_SOA_HVAC::RequestSetBlowingForce(const std::uint8_t& force)
{
    if (m_found)
    {
        m_interface->SetBlowingForce(force);
    }
}
 
void RPort_SOA_HVAC::RequestSetDriverTemp(const std::int8_t& temperature)
{
    if (m_found)
    {
        m_interface->SetDriverTemp(temperature);
    }
}
 
void RPort_SOA_HVAC::RequestSetForwardDefrostOn(const bool& on)
{
    if (m_found)
    {
        m_interface->SetForwardDefrostOn(on);
    }
}
 
void RPort_SOA_HVAC::RequestSetHvacPower(const bool& on)
{
    if (m_found)
    {
        m_interface->SetHvacPower(on);
    }
}
 
void RPort_SOA_HVAC::RequestSetPassengerTemp(const std::int8_t& temperature)
{
    if (m_found)
    {
        m_interface->SetPassengerTemp(temperature);
    }
}
 
void RPort_SOA_HVAC::RequestSetSync(const bool& on)
{
    if (m_found)
    {
        m_interface->SetSync(on);
    }
}
 
} /// namespace port
} /// namespace aa
} /// namespace smokingmonitor
 
/// EOF