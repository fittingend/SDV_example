///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : smokingmonitor.cpp
/// SOFTWARE COMPONENT NAME           : SmokingMonitor
/// GENERATED DATE                    : 2025-09-11 13:55:47
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// INCLUSION HEADER FILES
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "smokingmonitor/aa/smokingmonitor.h"
 
namespace smokingmonitor
{
namespace aa
{
 
SmokingMonitor::SmokingMonitor()
    : m_logger(ara::log::CreateLogger("SKMN", "SWC", ara::log::LogLevel::kVerbose))
    , m_running{false}
    , m_workers(19)
{
}
 
SmokingMonitor::~SmokingMonitor()
{
}
 
bool SmokingMonitor::Initialize()
{
    m_logger.LogVerbose() << "SmokingMonitor::Initialize";
    
    bool init = true;
    
    m_RPort_SOA_DMS = std::make_unique<smokingmonitor::aa::port::RPort_SOA_DMS>();
    m_RPort_SOA_HVAC = std::make_unique<smokingmonitor::aa::port::RPort_SOA_HVAC>();
    m_RPort_SOA_Mlm = std::make_unique<smokingmonitor::aa::port::RPort_SOA_Mlm>();
    m_RPort_SOA_SmartFilm = std::make_unique<smokingmonitor::aa::port::RPort_SOA_SmartFilm>();
    m_RPort_SubscriptionManagement = std::make_unique<smokingmonitor::aa::port::RPort_SubscriptionManagement>();
    
    // put your code for initialization
    
    return init;
}
 
void SmokingMonitor::Start()
{
    m_logger.LogVerbose() << "SmokingMonitor::Start";
    
    m_RPort_SOA_DMS->Start();
    m_RPort_SOA_HVAC->Start();
    m_RPort_SOA_Mlm->Start();
    m_RPort_SOA_SmartFilm->Start();
    m_RPort_SubscriptionManagement->Start();
}
 
void SmokingMonitor::Terminate()
{
    m_logger.LogVerbose() << "SmokingMonitor::Terminate";
    
    // stop running
    m_running = false;
    
    m_RPort_SOA_DMS->Terminate();
    m_RPort_SOA_HVAC->Terminate();
    m_RPort_SOA_Mlm->Terminate();
    m_RPort_SOA_SmartFilm->Terminate();
    m_RPort_SubscriptionManagement->Terminate();
}
 
void SmokingMonitor::Run()
{
    m_logger.LogVerbose() << "SmokingMonitor::Run";
    
    // start running
    m_running = true;
    
    m_workers.Async([this] { m_RPort_SOA_DMS->ReceiveEventonDriverNotFocusingCyclic(); });
    m_workers.Async([this] { m_RPort_SOA_DMS->ReceiveEventonDriverNotWakenCyclic(); });
    m_workers.Async([this] { m_RPort_SOA_DMS->ReceiveEventonDriverNotWatchingFrontCyclic(); });
    m_workers.Async([this] { m_RPort_SOA_DMS->ReceiveFieldsoaDmsDeviceNormalCyclic(); });
    m_workers.Async([this] { m_RPort_SOA_DMS->ReceiveFieldsoaDmsDriverStatusCyclic(); });
    m_workers.Async([this] { m_RPort_SOA_DMS->ReceiveFieldsoaDmsStatusCyclic(); });
    m_workers.Async([this] { m_RPort_SOA_DMS->ReceiveFieldsoaDmsSwVersionCyclic(); });
    m_workers.Async([this] { m_RPort_SOA_HVAC->ReceiveFieldSoaHvacSwVersionCyclic(); });
    m_workers.Async([this] { m_RPort_SOA_HVAC->ReceiveFieldsoaHvacDeviceNormalCyclic(); });
    m_workers.Async([this] { m_RPort_SOA_HVAC->ReceiveFieldsoaHvacSettingCyclic(); });
    m_workers.Async([this] { m_RPort_SOA_HVAC->ReceiveFieldsoaHvacStatusCyclic(); });
    m_workers.Async([this] { m_RPort_SOA_HVAC->ReceiveFieldsoaHvacTempsCyclic(); });
    m_workers.Async([this] { m_RPort_SOA_Mlm->ReceiveFieldsoaMlmStatusCyclic(); });
    m_workers.Async([this] { m_RPort_SOA_Mlm->ReceiveFieldsoaMlmSwVersionCyclic(); });
    m_workers.Async([this] { m_RPort_SOA_SmartFilm->ReceiveFieldsoaFilmAutoCyclic(); });
    m_workers.Async([this] { m_RPort_SOA_SmartFilm->ReceiveFieldsoaFilmDeviceNormalCyclic(); });
    m_workers.Async([this] { m_RPort_SOA_SmartFilm->ReceiveFieldsoaFilmOpacitiesCyclic(); });
    m_workers.Async([this] { m_RPort_SOA_SmartFilm->ReceiveFieldsoaFilmSwVersionCyclic(); });
    m_workers.Async([this] { m_RPort_SubscriptionManagement->ReceiveEventnotifySubscriptionInfoCyclic(); });
    
    m_workers.Wait();
}
 
} /// namespace aa
} /// namespace smokingmonitor
