///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : rport_soa_hvac.h
/// SOFTWARE COMPONENT NAME           : RPort_SOA_HVAC
/// GENERATED DATE                    : 2025-09-11 13:55:47
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef PARA_AA_GEN_SOFTWARE_COMPONENT_RPORT_SMOKINGMONITOR_AA_RPORT_SOA_HVAC_H
#define PARA_AA_GEN_SOFTWARE_COMPONENT_RPORT_SMOKINGMONITOR_AA_RPORT_SOA_HVAC_H
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// INCLUSION HEADER FILES
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "eevp/control/soahvac_proxy.h"
 
#include "ara/log/logger.h"
 
#include <mutex>
#include <thread>
 
namespace smokingmonitor
{
namespace aa
{
namespace port
{
 
class RPort_SOA_HVAC
{
public:
    /// @brief Constructor
    RPort_SOA_HVAC();
    
    /// @brief Destructor
    ~RPort_SOA_HVAC();
    
    /// @brief Start port
    void Start();
    
    /// @brief Terminate port
    void Terminate();

    /// @brief Subscribe field notification, SoaHvacSwVersion
    void SubscribeSoaHvacSwVersion();
     
    /// @brief Stop field subscription, SoaHvacSwVersion
    void StopSubscribeSoaHvacSwVersion();
     
    /// @brief Field notification receive handler, SoaHvacSwVersion
    void ReceiveFieldSoaHvacSwVersionTriggered();
     
    /// @brief Field notification receive handler, SoaHvacSwVersion
    void ReceiveFieldSoaHvacSwVersionCyclic();
     
    /// @brief Read field notification value, SoaHvacSwVersion
    void ReadValueSoaHvacSwVersion(ara::com::SamplePtr<eevp::control::proxy::fields::SoaHvacSwVersion::FieldType const> samplePtr);
     
    /// @brief Regist callback from software component
    void RegistFieldHandlerSoaHvacSwVersion(std::function<void(const eevp::control::proxy::fields::SoaHvacSwVersion::FieldType&)> handler);
    
    /// @brief Getter method using by software component, SoaHvacSwVersion
    void GetSoaHvacSwVersion();
    
    /// @brief Subscribe field notification, soaHvacDeviceNormal
    void SubscribesoaHvacDeviceNormal();
     
    /// @brief Stop field subscription, soaHvacDeviceNormal
    void StopSubscribesoaHvacDeviceNormal();
     
    /// @brief Field notification receive handler, soaHvacDeviceNormal
    void ReceiveFieldsoaHvacDeviceNormalTriggered();
     
    /// @brief Field notification receive handler, soaHvacDeviceNormal
    void ReceiveFieldsoaHvacDeviceNormalCyclic();
     
    /// @brief Read field notification value, soaHvacDeviceNormal
    void ReadValuesoaHvacDeviceNormal(ara::com::SamplePtr<eevp::control::proxy::fields::soaHvacDeviceNormal::FieldType const> samplePtr);
     
    /// @brief Regist callback from software component
    void RegistFieldHandlersoaHvacDeviceNormal(std::function<void(const eevp::control::proxy::fields::soaHvacDeviceNormal::FieldType&)> handler);
    
    /// @brief Getter method using by software component, soaHvacDeviceNormal
    void GetsoaHvacDeviceNormal();
    
    /// @brief Subscribe field notification, soaHvacSetting
    void SubscribesoaHvacSetting();
     
    /// @brief Stop field subscription, soaHvacSetting
    void StopSubscribesoaHvacSetting();
     
    /// @brief Field notification receive handler, soaHvacSetting
    void ReceiveFieldsoaHvacSettingTriggered();
     
    /// @brief Field notification receive handler, soaHvacSetting
    void ReceiveFieldsoaHvacSettingCyclic();
     
    /// @brief Read field notification value, soaHvacSetting
    void ReadValuesoaHvacSetting(ara::com::SamplePtr<eevp::control::proxy::fields::soaHvacSetting::FieldType const> samplePtr);
     
    /// @brief Regist callback from software component
    void RegistFieldHandlersoaHvacSetting(std::function<void(const eevp::control::proxy::fields::soaHvacSetting::FieldType&)> handler);
    
    /// @brief Getter method using by software component, soaHvacSetting
    void GetsoaHvacSetting();
    
    /// @brief Subscribe field notification, soaHvacStatus
    void SubscribesoaHvacStatus();
     
    /// @brief Stop field subscription, soaHvacStatus
    void StopSubscribesoaHvacStatus();
     
    /// @brief Field notification receive handler, soaHvacStatus
    void ReceiveFieldsoaHvacStatusTriggered();
     
    /// @brief Field notification receive handler, soaHvacStatus
    void ReceiveFieldsoaHvacStatusCyclic();
     
    /// @brief Read field notification value, soaHvacStatus
    void ReadValuesoaHvacStatus(ara::com::SamplePtr<eevp::control::proxy::fields::soaHvacStatus::FieldType const> samplePtr);
     
    /// @brief Regist callback from software component
    void RegistFieldHandlersoaHvacStatus(std::function<void(const eevp::control::proxy::fields::soaHvacStatus::FieldType&)> handler);
    
    /// @brief Getter method using by software component, soaHvacStatus
    void GetsoaHvacStatus();
    
    /// @brief Subscribe field notification, soaHvacTemps
    void SubscribesoaHvacTemps();
     
    /// @brief Stop field subscription, soaHvacTemps
    void StopSubscribesoaHvacTemps();
     
    /// @brief Field notification receive handler, soaHvacTemps
    void ReceiveFieldsoaHvacTempsTriggered();
     
    /// @brief Field notification receive handler, soaHvacTemps
    void ReceiveFieldsoaHvacTempsCyclic();
     
    /// @brief Read field notification value, soaHvacTemps
    void ReadValuesoaHvacTemps(ara::com::SamplePtr<eevp::control::proxy::fields::soaHvacTemps::FieldType const> samplePtr);
     
    /// @brief Regist callback from software component
    void RegistFieldHandlersoaHvacTemps(std::function<void(const eevp::control::proxy::fields::soaHvacTemps::FieldType&)> handler);
    
    /// @brief Getter method using by software component, soaHvacTemps
    void GetsoaHvacTemps();
    
    /// @brief Fire and Forget method using by software component, SetAcOnOff
    void RequestSetAcOnOff(const bool& on);
    
    /// @brief Fire and Forget method using by software component, SetAirSource
    void RequestSetAirSource(const eevp::control::SoaHvacAirSource& src);
    
    /// @brief Fire and Forget method using by software component, SetAutoTemp
    void RequestSetAutoTemp(const bool& on);
    
    /// @brief Fire and Forget method using by software component, SetBackwardDefrostOn
    void RequestSetBackwardDefrostOn(const bool& on);
    
    /// @brief Fire and Forget method using by software component, SetBlowingDirection
    void RequestSetBlowingDirection(const eevp::control::SoaHvacBlowDir& dir);
    
    /// @brief Fire and Forget method using by software component, SetBlowingForce
    void RequestSetBlowingForce(const std::uint8_t& force);
    
    /// @brief Fire and Forget method using by software component, SetDriverTemp
    void RequestSetDriverTemp(const std::int8_t& temperature);
    
    /// @brief Fire and Forget method using by software component, SetForwardDefrostOn
    void RequestSetForwardDefrostOn(const bool& on);
    
    /// @brief Fire and Forget method using by software component, SetHvacPower
    void RequestSetHvacPower(const bool& on);
    
    /// @brief Fire and Forget method using by software component, SetPassengerTemp
    void RequestSetPassengerTemp(const std::int8_t& temperature);
    
    /// @brief Fire and Forget method using by software component, SetSync
    void RequestSetSync(const bool& on);
    
private:
    /// @brief Callback for find service
    void Find(ara::com::ServiceHandleContainer<eevp::control::proxy::SoaHvacProxy::HandleType> handles,
              ara::com::FindServiceHandle findHandle);

    /// @brief Callback for field notification receiver, SoaHvacSwVersion
    void RegistReceiverSoaHvacSwVersion();
    
    /// @brief Callback for field notification receiver, soaHvacDeviceNormal
    void RegistReceiversoaHvacDeviceNormal();
    
    /// @brief Callback for field notification receiver, soaHvacSetting
    void RegistReceiversoaHvacSetting();
    
    /// @brief Callback for field notification receiver, soaHvacStatus
    void RegistReceiversoaHvacStatus();
    
    /// @brief Callback for field notification receiver, soaHvacTemps
    void RegistReceiversoaHvacTemps();
    
private:
    /// @brief Logger for this port
    ara::log::Logger& m_logger;
    
    /// @brief Flag of port status
    bool m_running;
    
    /// @brief Flag of find service status
    bool m_found;
    
    /// @brief Mutex for this port
    std::mutex m_mutex; 
    
    /// @brief AUTOSAR Port Interface
    std::unique_ptr<eevp::control::proxy::SoaHvacProxy> m_interface;
    
    /// @brief Find service handle
    std::unique_ptr<ara::com::FindServiceHandle> m_findHandle;

    /// @brief Callback from software component, SoaHvacSwVersion
    std::function<void(const eevp::control::proxy::fields::SoaHvacSwVersion::FieldType&)> m_receiverSoaHvacSwVersion;
    
    /// @brief Callback from software component, soaHvacDeviceNormal
    std::function<void(const eevp::control::proxy::fields::soaHvacDeviceNormal::FieldType&)> m_receiversoaHvacDeviceNormal;
    
    /// @brief Callback from software component, soaHvacSetting
    std::function<void(const eevp::control::proxy::fields::soaHvacSetting::FieldType&)> m_receiversoaHvacSetting;
    
    /// @brief Callback from software component, soaHvacStatus
    std::function<void(const eevp::control::proxy::fields::soaHvacStatus::FieldType&)> m_receiversoaHvacStatus;
    
    /// @brief Callback from software component, soaHvacTemps
    std::function<void(const eevp::control::proxy::fields::soaHvacTemps::FieldType&)> m_receiversoaHvacTemps;
    
};
 
} /// namespace port
} /// namespace aa
} /// namespace smokingmonitor
 
#endif /// PARA_AA_GEN_SOFTWARE_COMPONENT_RPORT_SMOKINGMONITOR_AA_RPORT_SOA_HVAC_H