///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : ipchandler_routingipc.cpp
/// SOFTWARE COMPONENT NAME           : IPCHandler_RoutingIPC
/// GENERATED DATE                    : 2025-08-30 10:53:20
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// INCLUSION HEADER FILES
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "ipchandler/rootswcomponent/ipchandler_routingipc.h"
 
namespace ipchandler
{
namespace rootswcomponent
{
 
IPCHandler_RoutingIPC::IPCHandler_RoutingIPC()
    : m_logger(ara::log::CreateLogger("CTX0", "SWC", ara::log::LogLevel::kVerbose))
    , m_running{false}
    , m_workers(2)
{
}
 
IPCHandler_RoutingIPC::~IPCHandler_RoutingIPC()
{
}
 
bool IPCHandler_RoutingIPC::Initialize()
{
    m_logger.LogVerbose() << "IPCHandler_RoutingIPC::Initialize";
    
    bool init = true;
    
    m_IPCHandler = std::make_unique<ipchandler::rootswcomponent::port::IPCHandler>();
    
    // put your code for initialization
    
    return init;
}
 
void IPCHandler_RoutingIPC::Start()
{
    m_logger.LogVerbose() << "IPCHandler_RoutingIPC::Start";
    
    m_IPCHandler->Start();
}
 
void IPCHandler_RoutingIPC::Terminate()
{
    m_logger.LogVerbose() << "IPCHandler_RoutingIPC::Terminate";
    
    // stop running
    m_running = false;
    
    m_IPCHandler->Terminate();
}
 
void IPCHandler_RoutingIPC::Run()
{
    m_logger.LogVerbose() << "IPCHandler_RoutingIPC::Run";
    
    // start running
    m_running = true;
    
    m_workers.Async([this] { m_IPCHandler->SendEventPeriodicSystemInfoCyclic(); });
    m_workers.Async([this] { m_IPCHandler->SendEventSystemControlRequestCyclic(); });
    
    m_workers.Wait();
}
 
} /// namespace rootswcomponent
} /// namespace ipchandler
