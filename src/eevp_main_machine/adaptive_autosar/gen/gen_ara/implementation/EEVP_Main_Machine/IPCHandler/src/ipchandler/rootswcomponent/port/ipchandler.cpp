///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : ipchandler.cpp
/// SOFTWARE COMPONENT NAME           : IPCHandler
/// GENERATED DATE                    : 2025-08-30 10:53:20
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "ipchandler/rootswcomponent/port/ipchandler.h"
 
namespace eevp
{
namespace ipchandler
{
namespace service
{
namespace skeleton
{
 
Main_IPC_RoutingIPCSkeletonImpl::Main_IPC_RoutingIPCSkeletonImpl(ara::core::InstanceSpecifier instanceSpec, ara::com::MethodCallProcessingMode mode)
    : Main_IPC_RoutingIPCSkeleton(instanceSpec, mode)
    , m_logger(ara::log::CreateLogger("CTX0", "PORT", ara::log::LogLevel::kVerbose))
{
}
 
ara::core::Future<Main_IPC_RoutingIPCSkeleton::ASMInfoRequestOutput> Main_IPC_RoutingIPCSkeletonImpl::ASMInfoRequest()
{
    m_logger.LogVerbose() << "IPCHandler::ASMInfoRequest::Requested";
    
    ASMInfoRequestOutput response;
    ara::core::Promise<ASMInfoRequestOutput> promise;
    
    // put your logic
    
    promise.set_value(response);
    return promise.get_future();
}
 
ara::core::Future<Main_IPC_RoutingIPCSkeleton::GetOneTimeSystemInfoOutput> Main_IPC_RoutingIPCSkeletonImpl::GetOneTimeSystemInfo()
{
    m_logger.LogVerbose() << "IPCHandler::GetOneTimeSystemInfo::Requested";
    
    GetOneTimeSystemInfoOutput response;
    ara::core::Promise<GetOneTimeSystemInfoOutput> promise;
    
    // put your logic
    
    promise.set_value(response);
    return promise.get_future();
}
 
ara::core::Future<Main_IPC_RoutingIPCSkeleton::SetAPSystemInfoOutput> Main_IPC_RoutingIPCSkeletonImpl::SetAPSystemInfo(const eevp::type::String& apVersion)
{
    m_logger.LogVerbose() << "IPCHandler::SetAPSystemInfo::Requested";
    
    SetAPSystemInfoOutput response;
    ara::core::Promise<SetAPSystemInfoOutput> promise;
    
    // put your logic
    
    promise.set_value(response);
    return promise.get_future();
}
 
ara::core::Future<Main_IPC_RoutingIPCSkeleton::SystemControlResponseOutput> Main_IPC_RoutingIPCSkeletonImpl::SystemControlResponse(const eevp::ipchandler::type::SysCtrlResp& response)
{
    m_logger.LogVerbose() << "IPCHandler::SystemControlResponse::Requested";
    
    SystemControlResponseOutput response;
    ara::core::Promise<SystemControlResponseOutput> promise;
    
    // put your logic
    
    promise.set_value(response);
    return promise.get_future();
}
 
} /// namespace skeleton
} /// namespace service
} /// namespace ipchandler
} /// namespace eevp

namespace ipchandler
{
namespace rootswcomponent
{
namespace port
{
 
IPCHandler::IPCHandler()
    : m_logger(ara::log::CreateLogger("CTX0", "PORT", ara::log::LogLevel::kVerbose))
    , m_running{false}
    , m_PeriodicSystemInfoData{false, false, false}
    , m_SystemControlRequestData{eevp::ipchandler::type::SysCtrlReq::NORMAL}
{
}
 
IPCHandler::~IPCHandler()
{
}
 
void IPCHandler::Start()
{
    m_logger.LogVerbose() << "IPCHandler::Start";
    
    // construct skeleton
    ara::core::InstanceSpecifier specifier{"IPCHandler/RootSwComponent/IPCHandler"};
    m_interface = std::make_unique<eevp::ipchandler::service::skeleton::Main_IPC_RoutingIPCSkeletonImpl>(specifier);
    
    // offer service
    auto offer = m_interface->OfferService();
    if (offer.HasValue())
    {
        m_running = true;
        m_logger.LogVerbose() << "IPCHandler::Start::OfferService";
    }
    else
    {
        m_running = false;
        m_logger.LogError() << "IPCHandler::Start::OfferService::" << offer.Error().Message();
    }
}
 
void IPCHandler::Terminate()
{
    m_logger.LogVerbose() << "IPCHandler::Terminate";
    
    // stop port
    m_running = false;
    
    // stop offer service
    m_interface->StopOfferService();
    m_logger.LogVerbose() << "IPCHandler::Terminate::StopOfferService";
}
 
void IPCHandler::WriteDataPeriodicSystemInfo(const eevp::ipchandler::service::skeleton::events::PeriodicSystemInfo::SampleType& data)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_PeriodicSystemInfoData = data;
}
 
void IPCHandler::SendEventPeriodicSystemInfoCyclic()
{
    while (m_running)
    {
        {
            std::lock_guard<std::mutex> lock(m_mutex);
            
            auto send = m_interface->PeriodicSystemInfo.Send(m_PeriodicSystemInfoData);
            if (send.HasValue())
            {
                m_logger.LogVerbose() << "IPCHandler::SendEventPeriodicSystemInfoCyclic::Send";
            }
            else
            {
                m_logger.LogError() << "IPCHandler::SendEventPeriodicSystemInfoCyclic::Send::" << send.Error().Message();
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void IPCHandler::SendEventPeriodicSystemInfoTriggered()
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    auto send = m_interface->PeriodicSystemInfo.Send(m_PeriodicSystemInfoData);
    if (send.HasValue())
    {
        m_logger.LogVerbose() << "IPCHandler::SendEventPeriodicSystemInfoTriggered::Send";
    }
    else
    {
        m_logger.LogError() << "IPCHandler::SendEventPeriodicSystemInfoTriggered::Send::" << send.Error().Message();
    }
}
 
void IPCHandler::SendEventPeriodicSystemInfoTriggered(const eevp::ipchandler::service::skeleton::events::PeriodicSystemInfo::SampleType& data)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_PeriodicSystemInfoData = data;
    auto send = m_interface->PeriodicSystemInfo.Send(m_PeriodicSystemInfoData);
    if (send.HasValue())
    {
        m_logger.LogVerbose() << "IPCHandler::SendEventPeriodicSystemInfoTriggered::Send";
    }
    else
    {
        m_logger.LogError() << "IPCHandler::SendEventPeriodicSystemInfoTriggered::Send::" << send.Error().Message();
    }
}
 
void IPCHandler::WriteDataSystemControlRequest(const eevp::ipchandler::service::skeleton::events::SystemControlRequest::SampleType& data)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_SystemControlRequestData = data;
}
 
void IPCHandler::SendEventSystemControlRequestCyclic()
{
    while (m_running)
    {
        {
            std::lock_guard<std::mutex> lock(m_mutex);
            
            auto send = m_interface->SystemControlRequest.Send(m_SystemControlRequestData);
            if (send.HasValue())
            {
                m_logger.LogVerbose() << "IPCHandler::SendEventSystemControlRequestCyclic::Send";
            }
            else
            {
                m_logger.LogError() << "IPCHandler::SendEventSystemControlRequestCyclic::Send::" << send.Error().Message();
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void IPCHandler::SendEventSystemControlRequestTriggered()
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    auto send = m_interface->SystemControlRequest.Send(m_SystemControlRequestData);
    if (send.HasValue())
    {
        m_logger.LogVerbose() << "IPCHandler::SendEventSystemControlRequestTriggered::Send";
    }
    else
    {
        m_logger.LogError() << "IPCHandler::SendEventSystemControlRequestTriggered::Send::" << send.Error().Message();
    }
}
 
void IPCHandler::SendEventSystemControlRequestTriggered(const eevp::ipchandler::service::skeleton::events::SystemControlRequest::SampleType& data)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_SystemControlRequestData = data;
    auto send = m_interface->SystemControlRequest.Send(m_SystemControlRequestData);
    if (send.HasValue())
    {
        m_logger.LogVerbose() << "IPCHandler::SendEventSystemControlRequestTriggered::Send";
    }
    else
    {
        m_logger.LogError() << "IPCHandler::SendEventSystemControlRequestTriggered::Send::" << send.Error().Message();
    }
}
 
} /// namespace port
} /// namespace rootswcomponent
} /// namespace ipchandler
 
/// EOF