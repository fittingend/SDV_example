///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : ipchandler.h
/// SOFTWARE COMPONENT NAME           : IPCHandler
/// GENERATED DATE                    : 2025-08-30 10:53:20
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef PARA_AA_GEN_SOFTWARE_COMPONENT_PPORT_IPCHANDLER_ROOTSWCOMPONENT_IPCHANDLER_H
#define PARA_AA_GEN_SOFTWARE_COMPONENT_PPORT_IPCHANDLER_ROOTSWCOMPONENT_IPCHANDLER_H
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// INCLUSION HEADER FILES
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "eevp/ipchandler/service/main_ipc_routingipc_skeleton.h"
 
#include "ara/log/logger.h"
 
#include <mutex>
#include <thread>
 
namespace eevp
{
namespace ipchandler
{
namespace service
{
namespace skeleton
{
 
class Main_IPC_RoutingIPCSkeletonImpl : public Main_IPC_RoutingIPCSkeleton
{
public:
    /// @brief Constructor
    Main_IPC_RoutingIPCSkeletonImpl(ara::core::InstanceSpecifier instanceSpec, ara::com::MethodCallProcessingMode mode = ara::com::MethodCallProcessingMode::kEvent);
    
    /// @brief Request with Response method, ASMInfoRequest
    ara::core::Future<Main_IPC_RoutingIPCSkeleton::ASMInfoRequestOutput> ASMInfoRequest() override;
    
    /// @brief Request with Response method, GetOneTimeSystemInfo
    ara::core::Future<Main_IPC_RoutingIPCSkeleton::GetOneTimeSystemInfoOutput> GetOneTimeSystemInfo() override;
    
    /// @brief Request with Response method, SetAPSystemInfo
    ara::core::Future<Main_IPC_RoutingIPCSkeleton::SetAPSystemInfoOutput> SetAPSystemInfo(const eevp::type::String& apVersion) override;
    
    /// @brief Request with Response method, SystemControlResponse
    ara::core::Future<Main_IPC_RoutingIPCSkeleton::SystemControlResponseOutput> SystemControlResponse(const eevp::ipchandler::type::SysCtrlResp& response) override;

private:
    /// @brief Logger for this port
    ara::log::Logger& m_logger;

};
 
} /// namespace skeleton
} /// namespace service
} /// namespace ipchandler
} /// namespace eevp

namespace ipchandler
{
namespace rootswcomponent
{
namespace port
{
 
class IPCHandler
{
public:
    /// @brief Constructor
    IPCHandler();
    
    /// @brief Destructor
    ~IPCHandler();
    
    /// @brief Start port
    void Start();
    
    /// @brief Terminate port
    void Terminate();
    
    /// @brief Write event data to buffer, PeriodicSystemInfo
    void WriteDataPeriodicSystemInfo(const eevp::ipchandler::service::skeleton::events::PeriodicSystemInfo::SampleType& data);
     
    /// @brief Send event cyclic from buffer data, PeriodicSystemInfo
    void SendEventPeriodicSystemInfoCyclic();
     
    /// @brief Send event directly from buffer data, PeriodicSystemInfo
    void SendEventPeriodicSystemInfoTriggered();
     
    /// @brief Send event directly with argument, PeriodicSystemInfo
    void SendEventPeriodicSystemInfoTriggered(const eevp::ipchandler::service::skeleton::events::PeriodicSystemInfo::SampleType& data);

    /// @brief Write event data to buffer, SystemControlRequest
    void WriteDataSystemControlRequest(const eevp::ipchandler::service::skeleton::events::SystemControlRequest::SampleType& data);
     
    /// @brief Send event cyclic from buffer data, SystemControlRequest
    void SendEventSystemControlRequestCyclic();
     
    /// @brief Send event directly from buffer data, SystemControlRequest
    void SendEventSystemControlRequestTriggered();
     
    /// @brief Send event directly with argument, SystemControlRequest
    void SendEventSystemControlRequestTriggered(const eevp::ipchandler::service::skeleton::events::SystemControlRequest::SampleType& data);
     
private:
    /// @brief Logger for this port
    ara::log::Logger& m_logger;
    
    /// @brief Flag of port status
    bool m_running;
    
    /// @brief Mutex for this port
    std::mutex m_mutex;
    
    /// @brief AUTOSAR Port Interface
    std::unique_ptr<eevp::ipchandler::service::skeleton::Main_IPC_RoutingIPCSkeletonImpl> m_interface;
    
    /// @brief Data for event, PeriodicSystemInfo
    eevp::ipchandler::service::skeleton::events::PeriodicSystemInfo::SampleType m_PeriodicSystemInfoData;
    
    /// @brief Data for event, SystemControlRequest
    eevp::ipchandler::service::skeleton::events::SystemControlRequest::SampleType m_SystemControlRequestData;
};
 
} /// namespace port
} /// namespace rootswcomponent
} /// namespace ipchandler
 
#endif /// PARA_AA_GEN_SOFTWARE_COMPONENT_PPORT_IPCHANDLER_ROOTSWCOMPONENT_IPCHANDLER_H