///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : rportstatemanager.cpp
/// SOFTWARE COMPONENT NAME           : RPortStateManager
/// GENERATED DATE                    : 2025-08-30 10:53:25
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "monitoringmanager/aa/port/rportstatemanager.h"
 
namespace monitoringmanager
{
namespace aa
{
namespace port
{
 
RPortStateManager::RPortStateManager()
    : m_logger(ara::log::CreateLogger("MONM", "PORT", ara::log::LogLevel::kVerbose))
    , m_running{false}
    , m_found{false}
    , m_receiverNotifySystemState{nullptr}
    , m_receiverNotifyTime{nullptr}
    , m_receiverSystemState{nullptr}
{
}
 
RPortStateManager::~RPortStateManager()
{
}
 
void RPortStateManager::Start()
{
    m_logger.LogVerbose() << "RPortStateManager::Start";
    
    // regist callback
    ara::core::InstanceSpecifier specifier{"MonitoringManager/AA/RPortStateManager"};
    auto handler = [this](ara::com::ServiceHandleContainer<ivi::info::statemanager::service::proxy::StateManagerProxy::HandleType> handles,
                          ara::com::FindServiceHandle findHandle) {
        this->Find(handles, findHandle);
    };
    
    // find service
    auto find = ivi::info::statemanager::service::proxy::StateManagerProxy::StartFindService(handler, specifier);
    if (find.HasValue())
    {
        m_logger.LogVerbose() << "RPortStateManager::Start::StartFindService";
    }
    else
    {
        m_logger.LogError() << "RPortStateManager::Start::StartFindService::" << find.Error().Message();
    }
    
    // run port
    m_running = true;
}
 
void RPortStateManager::Terminate()
{
    m_logger.LogVerbose() << "RPortStateManager::Terminate";
    
    // stop port
    m_running = false;
    
    // clear service proxy
    if (m_interface)
    {
        // stop subscribe
        StopSubscribeNotifySystemState();
        StopSubscribeNotifyTime();
        StopSubscribeSystemState();
        
        // stop find service
        m_interface->StopFindService(*m_findHandle);
        m_found = false;
        
        m_logger.LogVerbose() << "RPortStateManager::Terminate::StopFindService";
    }
}
 
void RPortStateManager::Find(ara::com::ServiceHandleContainer<ivi::info::statemanager::service::proxy::StateManagerProxy::HandleType> handles, ara::com::FindServiceHandle findHandle)
{
    // check finding handles
    if (handles.empty())
    {
        m_logger.LogVerbose() << "RPortStateManager::Find::Service Instances not found";
        return;
    }
    else
    {
        for (auto& handle : handles)
        {
            m_logger.LogVerbose() << "RPortStateManager::Find::Searched Instance::ServiceId =" << 
                                     handle.GetServiceHandle().serviceId << 
                                     ", InstanceId =" << 
                                     handle.GetServiceHandle().instanceId;
        }
    }
    
    // create proxy
    if (m_interface)
    {
        m_logger.LogVerbose() << "RPortStateManager::Find::Proxy is already running";
    }
    else
    {
        m_logger.LogVerbose() << "RPortStateManager::Find::Using Instance::ServiceId =" << 
                                 handles[0].GetServiceHandle().serviceId << 
                                 ", InstanceId =" << 
                                 handles[0].GetServiceHandle().instanceId;
        m_interface = std::make_unique<ivi::info::statemanager::service::proxy::StateManagerProxy>(handles[0]);
        m_findHandle = std::make_unique<ara::com::FindServiceHandle>(findHandle);
        m_found = true;
        
        // subscribe events
        SubscribeNotifySystemState();
        // subscribe field notifications
        SubscribeNotifyTime();
        SubscribeSystemState();
    }
}
 
void RPortStateManager::SubscribeNotifySystemState()
{
    if (m_found)
    {
        // regist receiver handler
        // if you want to enable it, please uncomment below code
        // RegistReceiverNotifySystemState();
        
        // request subscribe
        auto subscribe = m_interface->NotifySystemState.Subscribe(1);
        if (subscribe.HasValue())
        {
            m_logger.LogVerbose() << "RPortStateManager::SubscribeNotifySystemState::Subscribed";
        }
        else
        {
            m_logger.LogError() << "RPortStateManager::SubscribeNotifySystemState::" << subscribe.Error().Message();
        }
    }
}
 
void RPortStateManager::StopSubscribeNotifySystemState()
{
    if (m_found)
    {
        // request stop subscribe
        m_interface->NotifySystemState.Unsubscribe();
        m_logger.LogVerbose() << "RPortStateManager::StopSubscribeNotifySystemState::Unsubscribed";
    }
}
 
void RPortStateManager::RegistReceiverNotifySystemState()
{
    if (m_found)
    {
        // set callback
        auto receiver = [this]() -> void {
            return ReceiveEventNotifySystemStateTriggered();
        };
        
        // regist callback
        auto callback = m_interface->NotifySystemState.SetReceiveHandler(receiver);
        if (callback.HasValue())
        {
            m_logger.LogVerbose() << "RPortStateManager::RegistReceiverNotifySystemState::SetReceiveHandler";
        }
        else
        {
            m_logger.LogError() << "RPortStateManager::RegistReceiverNotifySystemState::SetReceiveHandler::" << callback.Error().Message();
        }
    }
}
 
void RPortStateManager::ReceiveEventNotifySystemStateTriggered()
{
    if (m_found)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_interface->NotifySystemState.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
        {
            auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->NotifySystemState.GetNewSamples([&](auto samplePtr) {
                RPortStateManager::ReadDataNotifySystemState(std::move(samplePtr));
            }));
            if (recv->HasValue())
            {
                m_logger.LogVerbose() << "RPortStateManager::ReceiveEventNotifySystemState::GetNewSamples::" << recv->Value();
            }
            else
            {
                m_logger.LogError() << "RPortStateManager::ReceiveEventNotifySystemState::GetNewSamples::" << recv->Error().Message();
            }
        }
    }
}
 
void RPortStateManager::ReceiveEventNotifySystemStateCyclic()
{
    while (m_running)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_found)
        {
            if (m_interface->NotifySystemState.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
            {
                auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->NotifySystemState.GetNewSamples([&](auto samplePtr) {
                    RPortStateManager::ReadDataNotifySystemState(std::move(samplePtr));
                }));
                if (recv->HasValue())
                {
                    m_logger.LogVerbose() << "RPortStateManager::ReceiveEventNotifySystemState::GetNewSamples::" << recv->Value();
                }
                else
                {
                    m_logger.LogError() << "RPortStateManager::ReceiveEventNotifySystemState::GetNewSamples::" << recv->Error().Message();
                }
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void RPortStateManager::ReadDataNotifySystemState(ara::com::SamplePtr<ivi::info::statemanager::service::proxy::events::NotifySystemState::SampleType const> samplePtr)
{
    auto data = *samplePtr.Get();
    if (m_receiverNotifySystemState)
    {
        m_receiverNotifySystemState(data);
    }
}
 
void RPortStateManager::RegistEventHandlerNotifySystemState(std::function<void(const ivi::info::statemanager::service::proxy::events::NotifySystemState::SampleType&)> handler)
{
    m_receiverNotifySystemState = handler;
}
 
void RPortStateManager::SubscribeNotifyTime()
{
    if (m_found)
    {
        // regist receiver handler
        // if you want to enable it, please uncomment below code
        // RegistReceiverNotifyTime();
        
        // request subscribe
        auto subscribe = m_interface->NotifyTime.Subscribe(1);
        if (subscribe.HasValue())
        {
            m_logger.LogVerbose() << "RPortStateManager::SubscribeNotifyTime::Subscribed";
        }
        else
        {
            m_logger.LogError() << "RPortStateManager::SubscribeNotifyTime::" << subscribe.Error().Message();
        }
    }
}
 
void RPortStateManager::StopSubscribeNotifyTime()
{
    if (m_found)
    {
        // request stop subscribe
        m_interface->NotifyTime.Unsubscribe();
        m_logger.LogVerbose() << "RPortStateManager::StopSubscribeNotifyTime::Unsubscribed";
    }
}
 
void RPortStateManager::RegistReceiverNotifyTime()
{
    if (m_found)
    {
        // set callback
        auto receiver = [this]() -> void {
            return ReceiveFieldNotifyTimeTriggered();
        };
        
        // regist callback
        auto callback = m_interface->NotifyTime.SetReceiveHandler(receiver);
        if (callback.HasValue())
        {
            m_logger.LogVerbose() << "RPortStateManager::RegistReceiverNotifyTime::SetReceiveHandler";
        }
        else
        {
            m_logger.LogError() << "RPortStateManager::RegistReceiverNotifyTime::SetReceiveHandler::" << callback.Error().Message();
        }
    }
}
 
void RPortStateManager::ReceiveFieldNotifyTimeTriggered()
{
    if (m_found)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_interface->NotifyTime.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
        {
            auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->NotifyTime.GetNewSamples([&](auto samplePtr) {
                RPortStateManager::ReadValueNotifyTime(std::move(samplePtr));
            }));
            if (recv->HasValue())
            {
                m_logger.LogVerbose() << "RPortStateManager::ReceiveFieldNotifyTime::GetNewSamples::" << recv->Value();
            }
            else
            {
                m_logger.LogError() << "RPortStateManager::ReceiveFieldNotifyTime::GetNewSamples::" << recv->Error().Message();
            }
        }
    }
}
 
void RPortStateManager::ReceiveFieldNotifyTimeCyclic()
{
    while (m_running)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_found)
        {
            if (m_interface->NotifyTime.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
            {
                auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->NotifyTime.GetNewSamples([&](auto samplePtr) {
                    RPortStateManager::ReadValueNotifyTime(std::move(samplePtr));
                }));
                if (recv->HasValue())
                {
                    m_logger.LogVerbose() << "RPortStateManager::ReceiveFieldNotifyTime::GetNewSamples::" << recv->Value();
                }
                else
                {
                    m_logger.LogError() << "RPortStateManager::ReceiveFieldNotifyTime::GetNewSamples::" << recv->Error().Message();
                }
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void RPortStateManager::ReadValueNotifyTime(ara::com::SamplePtr<ivi::info::statemanager::service::proxy::fields::NotifyTime::FieldType const> samplePtr)
{
    auto value = *samplePtr.Get();
    if (m_receiverNotifyTime)
    {
        m_receiverNotifyTime(value);
    }
}
 
void RPortStateManager::RegistFieldHandlerNotifyTime(std::function<void(const ivi::info::statemanager::service::proxy::fields::NotifyTime::FieldType&)> handler)
{
    m_receiverNotifyTime = handler;
}
 
void RPortStateManager::GetNotifyTime()
{
    if (m_found)
    {
        auto request = m_interface->NotifyTime.Get();
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "RPortStateManager::GetNotifyTime::Responded";
            
            auto result = response.Value();
            if (m_receiverNotifyTime)
            {
                m_receiverNotifyTime(result);
            }
        }
        else
        {
            m_logger.LogError() << "RPortStateManager::GetNotifyTime::" << response.Error().Message();
        }
    }
}
 
void RPortStateManager::SetNotifyTime(const ivi::info::statemanager::service::proxy::fields::NotifyTime::FieldType& value)
{
    if (m_found)
    {
        auto request = m_interface->NotifyTime.Set(value);
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "RPortStateManager::SetNotifyTime::Responded";
            
            auto result = response.Value();
            if (m_receiverNotifyTime)
            {
                m_receiverNotifyTime(result);
            }
        }
        else
        {
            m_logger.LogError() << "RPortStateManager::GetNotifyTime::" << response.Error().Message();
        }
    }
}
 
void RPortStateManager::SubscribeSystemState()
{
    if (m_found)
    {
        // regist receiver handler
        // if you want to enable it, please uncomment below code
        // RegistReceiverSystemState();
        
        // request subscribe
        auto subscribe = m_interface->SystemState.Subscribe(1);
        if (subscribe.HasValue())
        {
            m_logger.LogVerbose() << "RPortStateManager::SubscribeSystemState::Subscribed";
        }
        else
        {
            m_logger.LogError() << "RPortStateManager::SubscribeSystemState::" << subscribe.Error().Message();
        }
    }
}
 
void RPortStateManager::StopSubscribeSystemState()
{
    if (m_found)
    {
        // request stop subscribe
        m_interface->SystemState.Unsubscribe();
        m_logger.LogVerbose() << "RPortStateManager::StopSubscribeSystemState::Unsubscribed";
    }
}
 
void RPortStateManager::RegistReceiverSystemState()
{
    if (m_found)
    {
        // set callback
        auto receiver = [this]() -> void {
            return ReceiveFieldSystemStateTriggered();
        };
        
        // regist callback
        auto callback = m_interface->SystemState.SetReceiveHandler(receiver);
        if (callback.HasValue())
        {
            m_logger.LogVerbose() << "RPortStateManager::RegistReceiverSystemState::SetReceiveHandler";
        }
        else
        {
            m_logger.LogError() << "RPortStateManager::RegistReceiverSystemState::SetReceiveHandler::" << callback.Error().Message();
        }
    }
}
 
void RPortStateManager::ReceiveFieldSystemStateTriggered()
{
    if (m_found)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_interface->SystemState.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
        {
            auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->SystemState.GetNewSamples([&](auto samplePtr) {
                RPortStateManager::ReadValueSystemState(std::move(samplePtr));
            }));
            if (recv->HasValue())
            {
                m_logger.LogVerbose() << "RPortStateManager::ReceiveFieldSystemState::GetNewSamples::" << recv->Value();
            }
            else
            {
                m_logger.LogError() << "RPortStateManager::ReceiveFieldSystemState::GetNewSamples::" << recv->Error().Message();
            }
        }
    }
}
 
void RPortStateManager::ReceiveFieldSystemStateCyclic()
{
    while (m_running)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_found)
        {
            if (m_interface->SystemState.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
            {
                auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->SystemState.GetNewSamples([&](auto samplePtr) {
                    RPortStateManager::ReadValueSystemState(std::move(samplePtr));
                }));
                if (recv->HasValue())
                {
                    m_logger.LogVerbose() << "RPortStateManager::ReceiveFieldSystemState::GetNewSamples::" << recv->Value();
                }
                else
                {
                    m_logger.LogError() << "RPortStateManager::ReceiveFieldSystemState::GetNewSamples::" << recv->Error().Message();
                }
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void RPortStateManager::ReadValueSystemState(ara::com::SamplePtr<ivi::info::statemanager::service::proxy::fields::SystemState::FieldType const> samplePtr)
{
    auto value = *samplePtr.Get();
    if (m_receiverSystemState)
    {
        m_receiverSystemState(value);
    }
}
 
void RPortStateManager::RegistFieldHandlerSystemState(std::function<void(const ivi::info::statemanager::service::proxy::fields::SystemState::FieldType&)> handler)
{
    m_receiverSystemState = handler;
}
 
void RPortStateManager::GetSystemState()
{
    if (m_found)
    {
        auto request = m_interface->SystemState.Get();
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "RPortStateManager::GetSystemState::Responded";
            
            auto result = response.Value();
            if (m_receiverSystemState)
            {
                m_receiverSystemState(result);
            }
        }
        else
        {
            m_logger.LogError() << "RPortStateManager::GetSystemState::" << response.Error().Message();
        }
    }
}
 
} /// namespace port
} /// namespace aa
} /// namespace monitoringmanager
 
/// EOF