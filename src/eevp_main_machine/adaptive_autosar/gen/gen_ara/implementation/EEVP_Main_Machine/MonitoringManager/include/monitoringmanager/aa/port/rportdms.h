///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : rportdms.h
/// SOFTWARE COMPONENT NAME           : RPortDms
/// GENERATED DATE                    : 2025-08-30 10:53:23
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef PARA_AA_GEN_SOFTWARE_COMPONENT_RPORT_MONITORINGMANAGER_AA_RPORTDMS_H
#define PARA_AA_GEN_SOFTWARE_COMPONENT_RPORT_MONITORINGMANAGER_AA_RPORTDMS_H
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// INCLUSION HEADER FILES
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "eevp/control/soadms_proxy.h"
 
#include "ara/log/logger.h"
 
#include <mutex>
#include <thread>
 
namespace monitoringmanager
{
namespace aa
{
namespace port
{
 
class RPortDms
{
public:
    /// @brief Constructor
    RPortDms();
    
    /// @brief Destructor
    ~RPortDms();
    
    /// @brief Start port
    void Start();
    
    /// @brief Terminate port
    void Terminate();
    
    /// @brief Subscribe event, onDriverNotFocusing
    void SubscribeonDriverNotFocusing();
     
    /// @brief Stop event subscription, onDriverNotFocusing
    void StopSubscribeonDriverNotFocusing();
     
    /// @brief Event receive handler, onDriverNotFocusing
    void ReceiveEventonDriverNotFocusingTriggered();
     
    /// @brief Event receive handler, onDriverNotFocusing
    void ReceiveEventonDriverNotFocusingCyclic();
     
    /// @brief Read event data, onDriverNotFocusing
    void ReadDataonDriverNotFocusing(ara::com::SamplePtr<eevp::control::proxy::events::onDriverNotFocusing::SampleType const> samplePtr);
     
    /// @brief Regist callback from software component
    void RegistEventHandleronDriverNotFocusing(std::function<void(const eevp::control::proxy::events::onDriverNotFocusing::SampleType&)> handler);
    
    /// @brief Subscribe event, onDriverNotWaken
    void SubscribeonDriverNotWaken();
     
    /// @brief Stop event subscription, onDriverNotWaken
    void StopSubscribeonDriverNotWaken();
     
    /// @brief Event receive handler, onDriverNotWaken
    void ReceiveEventonDriverNotWakenTriggered();
     
    /// @brief Event receive handler, onDriverNotWaken
    void ReceiveEventonDriverNotWakenCyclic();
     
    /// @brief Read event data, onDriverNotWaken
    void ReadDataonDriverNotWaken(ara::com::SamplePtr<eevp::control::proxy::events::onDriverNotWaken::SampleType const> samplePtr);
     
    /// @brief Regist callback from software component
    void RegistEventHandleronDriverNotWaken(std::function<void(const eevp::control::proxy::events::onDriverNotWaken::SampleType&)> handler);
    
    /// @brief Subscribe event, onDriverNotWatchingFront
    void SubscribeonDriverNotWatchingFront();
     
    /// @brief Stop event subscription, onDriverNotWatchingFront
    void StopSubscribeonDriverNotWatchingFront();
     
    /// @brief Event receive handler, onDriverNotWatchingFront
    void ReceiveEventonDriverNotWatchingFrontTriggered();
     
    /// @brief Event receive handler, onDriverNotWatchingFront
    void ReceiveEventonDriverNotWatchingFrontCyclic();
     
    /// @brief Read event data, onDriverNotWatchingFront
    void ReadDataonDriverNotWatchingFront(ara::com::SamplePtr<eevp::control::proxy::events::onDriverNotWatchingFront::SampleType const> samplePtr);
     
    /// @brief Regist callback from software component
    void RegistEventHandleronDriverNotWatchingFront(std::function<void(const eevp::control::proxy::events::onDriverNotWatchingFront::SampleType&)> handler);
    
    /// @brief Subscribe field notification, soaDmsDeviceNormal
    void SubscribesoaDmsDeviceNormal();
     
    /// @brief Stop field subscription, soaDmsDeviceNormal
    void StopSubscribesoaDmsDeviceNormal();
     
    /// @brief Field notification receive handler, soaDmsDeviceNormal
    void ReceiveFieldsoaDmsDeviceNormalTriggered();
     
    /// @brief Field notification receive handler, soaDmsDeviceNormal
    void ReceiveFieldsoaDmsDeviceNormalCyclic();
     
    /// @brief Read field notification value, soaDmsDeviceNormal
    void ReadValuesoaDmsDeviceNormal(ara::com::SamplePtr<eevp::control::proxy::fields::soaDmsDeviceNormal::FieldType const> samplePtr);
     
    /// @brief Regist callback from software component
    void RegistFieldHandlersoaDmsDeviceNormal(std::function<void(const eevp::control::proxy::fields::soaDmsDeviceNormal::FieldType&)> handler);
    
    /// @brief Getter method using by software component, soaDmsDeviceNormal
    void GetsoaDmsDeviceNormal();
    
    /// @brief Subscribe field notification, soaDmsDriverStatus
    void SubscribesoaDmsDriverStatus();
     
    /// @brief Stop field subscription, soaDmsDriverStatus
    void StopSubscribesoaDmsDriverStatus();
     
    /// @brief Field notification receive handler, soaDmsDriverStatus
    void ReceiveFieldsoaDmsDriverStatusTriggered();
     
    /// @brief Field notification receive handler, soaDmsDriverStatus
    void ReceiveFieldsoaDmsDriverStatusCyclic();
     
    /// @brief Read field notification value, soaDmsDriverStatus
    void ReadValuesoaDmsDriverStatus(ara::com::SamplePtr<eevp::control::proxy::fields::soaDmsDriverStatus::FieldType const> samplePtr);
     
    /// @brief Regist callback from software component
    void RegistFieldHandlersoaDmsDriverStatus(std::function<void(const eevp::control::proxy::fields::soaDmsDriverStatus::FieldType&)> handler);
    
    /// @brief Getter method using by software component, soaDmsDriverStatus
    void GetsoaDmsDriverStatus();
    
    /// @brief Subscribe field notification, soaDmsStatus
    void SubscribesoaDmsStatus();
     
    /// @brief Stop field subscription, soaDmsStatus
    void StopSubscribesoaDmsStatus();
     
    /// @brief Field notification receive handler, soaDmsStatus
    void ReceiveFieldsoaDmsStatusTriggered();
     
    /// @brief Field notification receive handler, soaDmsStatus
    void ReceiveFieldsoaDmsStatusCyclic();
     
    /// @brief Read field notification value, soaDmsStatus
    void ReadValuesoaDmsStatus(ara::com::SamplePtr<eevp::control::proxy::fields::soaDmsStatus::FieldType const> samplePtr);
     
    /// @brief Regist callback from software component
    void RegistFieldHandlersoaDmsStatus(std::function<void(const eevp::control::proxy::fields::soaDmsStatus::FieldType&)> handler);
    
    /// @brief Getter method using by software component, soaDmsStatus
    void GetsoaDmsStatus();
    
    /// @brief Subscribe field notification, soaDmsSwVersion
    void SubscribesoaDmsSwVersion();
     
    /// @brief Stop field subscription, soaDmsSwVersion
    void StopSubscribesoaDmsSwVersion();
     
    /// @brief Field notification receive handler, soaDmsSwVersion
    void ReceiveFieldsoaDmsSwVersionTriggered();
     
    /// @brief Field notification receive handler, soaDmsSwVersion
    void ReceiveFieldsoaDmsSwVersionCyclic();
     
    /// @brief Read field notification value, soaDmsSwVersion
    void ReadValuesoaDmsSwVersion(ara::com::SamplePtr<eevp::control::proxy::fields::soaDmsSwVersion::FieldType const> samplePtr);
     
    /// @brief Regist callback from software component
    void RegistFieldHandlersoaDmsSwVersion(std::function<void(const eevp::control::proxy::fields::soaDmsSwVersion::FieldType&)> handler);
    
    /// @brief Getter method using by software component, soaDmsSwVersion
    void GetsoaDmsSwVersion();
    
    /// @brief Fire and Forget method using by software component, SetDmsPower
    void RequestSetDmsPower(const bool& on);
    
private:
    /// @brief Callback for find service
    void Find(ara::com::ServiceHandleContainer<eevp::control::proxy::SoaDmsProxy::HandleType> handles,
              ara::com::FindServiceHandle findHandle);
    
    /// @brief Callback for event receiver, onDriverNotFocusing
    void RegistReceiveronDriverNotFocusing();
    
    /// @brief Callback for event receiver, onDriverNotWaken
    void RegistReceiveronDriverNotWaken();
    
    /// @brief Callback for event receiver, onDriverNotWatchingFront
    void RegistReceiveronDriverNotWatchingFront();
    
    /// @brief Callback for field notification receiver, soaDmsDeviceNormal
    void RegistReceiversoaDmsDeviceNormal();
    
    /// @brief Callback for field notification receiver, soaDmsDriverStatus
    void RegistReceiversoaDmsDriverStatus();
    
    /// @brief Callback for field notification receiver, soaDmsStatus
    void RegistReceiversoaDmsStatus();
    
    /// @brief Callback for field notification receiver, soaDmsSwVersion
    void RegistReceiversoaDmsSwVersion();
    
private:
    /// @brief Logger for this port
    ara::log::Logger& m_logger;
    
    /// @brief Flag of port status
    bool m_running;
    
    /// @brief Flag of find service status
    bool m_found;
    
    /// @brief Mutex for this port
    std::mutex m_mutex; 
    
    /// @brief AUTOSAR Port Interface
    std::unique_ptr<eevp::control::proxy::SoaDmsProxy> m_interface;
    
    /// @brief Find service handle
    std::unique_ptr<ara::com::FindServiceHandle> m_findHandle;
    
    /// @brief Callback from software component, onDriverNotFocusing
    std::function<void(const eevp::control::proxy::events::onDriverNotFocusing::SampleType&)> m_receiveronDriverNotFocusing;
    
    /// @brief Callback from software component, onDriverNotWaken
    std::function<void(const eevp::control::proxy::events::onDriverNotWaken::SampleType&)> m_receiveronDriverNotWaken;
    
    /// @brief Callback from software component, onDriverNotWatchingFront
    std::function<void(const eevp::control::proxy::events::onDriverNotWatchingFront::SampleType&)> m_receiveronDriverNotWatchingFront;
    
    /// @brief Callback from software component, soaDmsDeviceNormal
    std::function<void(const eevp::control::proxy::fields::soaDmsDeviceNormal::FieldType&)> m_receiversoaDmsDeviceNormal;
    
    /// @brief Callback from software component, soaDmsDriverStatus
    std::function<void(const eevp::control::proxy::fields::soaDmsDriverStatus::FieldType&)> m_receiversoaDmsDriverStatus;
    
    /// @brief Callback from software component, soaDmsStatus
    std::function<void(const eevp::control::proxy::fields::soaDmsStatus::FieldType&)> m_receiversoaDmsStatus;
    
    /// @brief Callback from software component, soaDmsSwVersion
    std::function<void(const eevp::control::proxy::fields::soaDmsSwVersion::FieldType&)> m_receiversoaDmsSwVersion;
    
};
 
} /// namespace port
} /// namespace aa
} /// namespace monitoringmanager
 
#endif /// PARA_AA_GEN_SOFTWARE_COMPONENT_RPORT_MONITORINGMANAGER_AA_RPORTDMS_H