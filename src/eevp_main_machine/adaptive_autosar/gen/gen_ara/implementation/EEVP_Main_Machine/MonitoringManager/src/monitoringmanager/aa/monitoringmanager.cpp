///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : monitoringmanager.cpp
/// SOFTWARE COMPONENT NAME           : MonitoringManager
/// GENERATED DATE                    : 2025-08-30 10:53:24
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// INCLUSION HEADER FILES
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "monitoringmanager/aa/monitoringmanager.h"
 
namespace monitoringmanager
{
namespace aa
{
 
MonitoringManager::MonitoringManager()
    : m_logger(ara::log::CreateLogger("MONM", "SWC", ara::log::LogLevel::kVerbose))
    , m_running{false}
    , m_workers(76)
{
}
 
MonitoringManager::~MonitoringManager()
{
}
 
bool MonitoringManager::Initialize()
{
    m_logger.LogVerbose() << "MonitoringManager::Initialize";
    
    bool init = true;
    
    m_PPortMonitoringManagement = std::make_unique<monitoringmanager::aa::port::PPortMonitoringManagement>();
    m_RPortDms = std::make_unique<monitoringmanager::aa::port::RPortDms>();
    m_RPortDrvSeat = std::make_unique<monitoringmanager::aa::port::RPortDrvSeat>();
    m_RPortHvac = std::make_unique<monitoringmanager::aa::port::RPortHvac>();
    m_RPortMoodLamp = std::make_unique<monitoringmanager::aa::port::RPortMoodLamp>();
    m_RPortOtaMonitoring = std::make_unique<monitoringmanager::aa::port::RPortOtaMonitoring>();
    m_RPortPDWFront = std::make_unique<monitoringmanager::aa::port::RPortPDWFront>();
    m_RPortPDWRear = std::make_unique<monitoringmanager::aa::port::RPortPDWRear>();
    m_RPortPower = std::make_unique<monitoringmanager::aa::port::RPortPower>();
    m_RPortRearCurtain = std::make_unique<monitoringmanager::aa::port::RPortRearCurtain>();
    m_RPortRoa = std::make_unique<monitoringmanager::aa::port::RPortRoa>();
    m_RPortSmartFilm = std::make_unique<monitoringmanager::aa::port::RPortSmartFilm>();
    m_RPortStateManager = std::make_unique<monitoringmanager::aa::port::RPortStateManager>();
    m_RPortWiper = std::make_unique<monitoringmanager::aa::port::RPortWiper>();
    
    // put your code for initialization
    
    return init;
}
 
void MonitoringManager::Start()
{
    m_logger.LogVerbose() << "MonitoringManager::Start";
    
    m_PPortMonitoringManagement->Start();
    m_RPortDms->Start();
    m_RPortDrvSeat->Start();
    m_RPortHvac->Start();
    m_RPortMoodLamp->Start();
    m_RPortOtaMonitoring->Start();
    m_RPortPDWFront->Start();
    m_RPortPDWRear->Start();
    m_RPortPower->Start();
    m_RPortRearCurtain->Start();
    m_RPortRoa->Start();
    m_RPortSmartFilm->Start();
    m_RPortStateManager->Start();
    m_RPortWiper->Start();
}
 
void MonitoringManager::Terminate()
{
    m_logger.LogVerbose() << "MonitoringManager::Terminate";
    
    // stop running
    m_running = false;
    
    m_PPortMonitoringManagement->Terminate();
    m_RPortDms->Terminate();
    m_RPortDrvSeat->Terminate();
    m_RPortHvac->Terminate();
    m_RPortMoodLamp->Terminate();
    m_RPortOtaMonitoring->Terminate();
    m_RPortPDWFront->Terminate();
    m_RPortPDWRear->Terminate();
    m_RPortPower->Terminate();
    m_RPortRearCurtain->Terminate();
    m_RPortRoa->Terminate();
    m_RPortSmartFilm->Terminate();
    m_RPortStateManager->Terminate();
    m_RPortWiper->Terminate();
}
 
void MonitoringManager::Run()
{
    m_logger.LogVerbose() << "MonitoringManager::Run";
    
    // start running
    m_running = true;
    
    m_workers.Async([this] { m_PPortMonitoringManagement->SendEventDistanceLevelFrontCyclic(); });
    m_workers.Async([this] { m_PPortMonitoringManagement->SendEventDistanceLevelRearCyclic(); });
    m_workers.Async([this] { m_PPortMonitoringManagement->SendEventMbTempStatusCyclic(); });
    m_workers.Async([this] { m_PPortMonitoringManagement->SendEventeventServiceInfoCyclic(); });
    m_workers.Async([this] { m_PPortMonitoringManagement->SendEventeventUpdatableServiceCyclic(); });
    m_workers.Async([this] { m_PPortMonitoringManagement->SendEventresetUcmCompletedCyclic(); });
    m_workers.Async([this] { m_PPortMonitoringManagement->NotifyFieldUssStatusFrontCyclic(); });
    m_workers.Async([this] { m_PPortMonitoringManagement->NotifyFieldUssStatusRearCyclic(); });
    m_workers.Async([this] { m_PPortMonitoringManagement->NotifyFieldsoaDmsDeviceNormalCyclic(); });
    m_workers.Async([this] { m_PPortMonitoringManagement->NotifyFieldsoaDmsSwVersionCyclic(); });
    m_workers.Async([this] { m_PPortMonitoringManagement->NotifyFieldsoaDrvSeatDeviceNormalCyclic(); });
    m_workers.Async([this] { m_PPortMonitoringManagement->NotifyFieldsoaDrvSeatMotorDirectionCyclic(); });
    m_workers.Async([this] { m_PPortMonitoringManagement->NotifyFieldsoaDrvSeatMotorPositionCyclic(); });
    m_workers.Async([this] { m_PPortMonitoringManagement->NotifyFieldsoaDrvSeatSwVersionCyclic(); });
    m_workers.Async([this] { m_PPortMonitoringManagement->NotifyFieldsoaFilmDeviceNormalCyclic(); });
    m_workers.Async([this] { m_PPortMonitoringManagement->NotifyFieldsoaFilmSwVersionCyclic(); });
    m_workers.Async([this] { m_PPortMonitoringManagement->NotifyFieldsoaHvacDeviceNormalCyclic(); });
    m_workers.Async([this] { m_PPortMonitoringManagement->NotifyFieldsoaHvacSwVersionCyclic(); });
    m_workers.Async([this] { m_PPortMonitoringManagement->NotifyFieldsoaMlmStatusCyclic(); });
    m_workers.Async([this] { m_PPortMonitoringManagement->NotifyFieldsoaMlmSwVersionCyclic(); });
    m_workers.Async([this] { m_PPortMonitoringManagement->NotifyFieldsoaPowerDeviceNormalCyclic(); });
    m_workers.Async([this] { m_PPortMonitoringManagement->NotifyFieldsoaPowerSwVersionCyclic(); });
    m_workers.Async([this] { m_PPortMonitoringManagement->NotifyFieldsoaRctnStatusCyclic(); });
    m_workers.Async([this] { m_PPortMonitoringManagement->NotifyFieldsoaRctnSwVersionCyclic(); });
    m_workers.Async([this] { m_PPortMonitoringManagement->NotifyFieldsoaRoaDetectStateCyclic(); });
    m_workers.Async([this] { m_PPortMonitoringManagement->NotifyFieldsoaRoaDeviceNormalCyclic(); });
    m_workers.Async([this] { m_PPortMonitoringManagement->NotifyFieldsoaRoaSwVersionCyclic(); });
    m_workers.Async([this] { m_PPortMonitoringManagement->NotifyFieldsoaWiperDeviceNormalCyclic(); });
    m_workers.Async([this] { m_PPortMonitoringManagement->NotifyFieldsoaWiperStatusCyclic(); });
    m_workers.Async([this] { m_PPortMonitoringManagement->NotifyFieldsoaWiperSwVersionCyclic(); });
    m_workers.Async([this] { m_RPortDms->ReceiveEventonDriverNotFocusingCyclic(); });
    m_workers.Async([this] { m_RPortDms->ReceiveEventonDriverNotWakenCyclic(); });
    m_workers.Async([this] { m_RPortDms->ReceiveEventonDriverNotWatchingFrontCyclic(); });
    m_workers.Async([this] { m_RPortDms->ReceiveFieldsoaDmsDeviceNormalCyclic(); });
    m_workers.Async([this] { m_RPortDms->ReceiveFieldsoaDmsDriverStatusCyclic(); });
    m_workers.Async([this] { m_RPortDms->ReceiveFieldsoaDmsStatusCyclic(); });
    m_workers.Async([this] { m_RPortDms->ReceiveFieldsoaDmsSwVersionCyclic(); });
    m_workers.Async([this] { m_RPortDrvSeat->ReceiveFieldsoaDrvSeatDeviceNormalCyclic(); });
    m_workers.Async([this] { m_RPortDrvSeat->ReceiveFieldsoaDrvSeatMotorDirectionCyclic(); });
    m_workers.Async([this] { m_RPortDrvSeat->ReceiveFieldsoaDrvSeatMotorPositionCyclic(); });
    m_workers.Async([this] { m_RPortDrvSeat->ReceiveFieldsoaDrvSeatSwVersionCyclic(); });
    m_workers.Async([this] { m_RPortHvac->ReceiveFieldSoaHvacSwVersionCyclic(); });
    m_workers.Async([this] { m_RPortHvac->ReceiveFieldsoaHvacDeviceNormalCyclic(); });
    m_workers.Async([this] { m_RPortHvac->ReceiveFieldsoaHvacSettingCyclic(); });
    m_workers.Async([this] { m_RPortHvac->ReceiveFieldsoaHvacStatusCyclic(); });
    m_workers.Async([this] { m_RPortHvac->ReceiveFieldsoaHvacTempsCyclic(); });
    m_workers.Async([this] { m_RPortMoodLamp->ReceiveFieldsoaMlmStatusCyclic(); });
    m_workers.Async([this] { m_RPortMoodLamp->ReceiveFieldsoaMlmSwVersionCyclic(); });
    m_workers.Async([this] { m_RPortOtaMonitoring->ReceiveEventnotifyServiceEventCyclic(); });
    m_workers.Async([this] { m_RPortOtaMonitoring->ReceiveEventnotifyUpdatableServiceCyclic(); });
    m_workers.Async([this] { m_RPortOtaMonitoring->ReceiveEventresetUcmCompletedCyclic(); });
    m_workers.Async([this] { m_RPortPDWFront->ReceiveEventDistanceLevelCyclic(); });
    m_workers.Async([this] { m_RPortPDWFront->ReceiveFieldUssStatusCyclic(); });
    m_workers.Async([this] { m_RPortPDWRear->ReceiveEventDistanceLevelCyclic(); });
    m_workers.Async([this] { m_RPortPDWRear->ReceiveFieldUssStatusCyclic(); });
    m_workers.Async([this] { m_RPortPower->ReceiveFieldsoaPowerDeviceNormalCyclic(); });
    m_workers.Async([this] { m_RPortPower->ReceiveFieldsoaPowerSwVersionCyclic(); });
    m_workers.Async([this] { m_RPortRearCurtain->ReceiveFieldsoaRctnStatusCyclic(); });
    m_workers.Async([this] { m_RPortRearCurtain->ReceiveFieldsoaRctnSwVersionCyclic(); });
    m_workers.Async([this] { m_RPortRoa->ReceiveFieldsoaRoaDetectCountCyclic(); });
    m_workers.Async([this] { m_RPortRoa->ReceiveFieldsoaRoaDetectStateCyclic(); });
    m_workers.Async([this] { m_RPortRoa->ReceiveFieldsoaRoaDeviceNormalCyclic(); });
    m_workers.Async([this] { m_RPortRoa->ReceiveFieldsoaRoaModeCyclic(); });
    m_workers.Async([this] { m_RPortRoa->ReceiveFieldsoaRoaRunningStateCyclic(); });
    m_workers.Async([this] { m_RPortRoa->ReceiveFieldsoaRoaSensorErrorCyclic(); });
    m_workers.Async([this] { m_RPortRoa->ReceiveFieldsoaRoaSwVersionCyclic(); });
    m_workers.Async([this] { m_RPortSmartFilm->ReceiveFieldsoaFilmAutoCyclic(); });
    m_workers.Async([this] { m_RPortSmartFilm->ReceiveFieldsoaFilmDeviceNormalCyclic(); });
    m_workers.Async([this] { m_RPortSmartFilm->ReceiveFieldsoaFilmOpacitiesCyclic(); });
    m_workers.Async([this] { m_RPortSmartFilm->ReceiveFieldsoaFilmSwVersionCyclic(); });
    m_workers.Async([this] { m_RPortStateManager->ReceiveEventNotifySystemStateCyclic(); });
    m_workers.Async([this] { m_RPortStateManager->ReceiveFieldNotifyTimeCyclic(); });
    m_workers.Async([this] { m_RPortStateManager->ReceiveFieldSystemStateCyclic(); });
    m_workers.Async([this] { m_RPortWiper->ReceiveFieldsoaWiperDeviceNormalCyclic(); });
    m_workers.Async([this] { m_RPortWiper->ReceiveFieldsoaWiperStatusCyclic(); });
    m_workers.Async([this] { m_RPortWiper->ReceiveFieldsoaWiperSwVersionCyclic(); });
    
    m_workers.Wait();
}
 
} /// namespace aa
} /// namespace monitoringmanager
