///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : rportotamonitoring.cpp
/// SOFTWARE COMPONENT NAME           : RPortOtaMonitoring
/// GENERATED DATE                    : 2025-08-30 10:53:25
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "monitoringmanager/aa/port/rportotamonitoring.h"
 
namespace monitoringmanager
{
namespace aa
{
namespace port
{
 
RPortOtaMonitoring::RPortOtaMonitoring()
    : m_logger(ara::log::CreateLogger("MONM", "PORT", ara::log::LogLevel::kVerbose))
    , m_running{false}
    , m_found{false}
    , m_receivernotifyServiceEvent{nullptr}
    , m_receivernotifyUpdatableService{nullptr}
    , m_receiverresetUcmCompleted{nullptr}
    , m_responderrequestServiceInstall{nullptr}
    , m_responderrequestServiceUpdate{nullptr}
    , m_responderrequestVersionInfo{nullptr}
    , m_responderresetUcmTest{nullptr}
{
}
 
RPortOtaMonitoring::~RPortOtaMonitoring()
{
}
 
void RPortOtaMonitoring::Start()
{
    m_logger.LogVerbose() << "RPortOtaMonitoring::Start";
    
    // regist callback
    ara::core::InstanceSpecifier specifier{"MonitoringManager/AA/RPortOtaMonitoring"};
    auto handler = [this](ara::com::ServiceHandleContainer<eevp::ota::monitoring::service::proxy::OtaMonitoringProxy::HandleType> handles,
                          ara::com::FindServiceHandle findHandle) {
        this->Find(handles, findHandle);
    };
    
    // find service
    auto find = eevp::ota::monitoring::service::proxy::OtaMonitoringProxy::StartFindService(handler, specifier);
    if (find.HasValue())
    {
        m_logger.LogVerbose() << "RPortOtaMonitoring::Start::StartFindService";
    }
    else
    {
        m_logger.LogError() << "RPortOtaMonitoring::Start::StartFindService::" << find.Error().Message();
    }
    
    // run port
    m_running = true;
}
 
void RPortOtaMonitoring::Terminate()
{
    m_logger.LogVerbose() << "RPortOtaMonitoring::Terminate";
    
    // stop port
    m_running = false;
    
    // clear service proxy
    if (m_interface)
    {
        // stop subscribe
        StopSubscribenotifyServiceEvent();
        StopSubscribenotifyUpdatableService();
        StopSubscriberesetUcmCompleted();
        
        // stop find service
        m_interface->StopFindService(*m_findHandle);
        m_found = false;
        
        m_logger.LogVerbose() << "RPortOtaMonitoring::Terminate::StopFindService";
    }
}
 
void RPortOtaMonitoring::Find(ara::com::ServiceHandleContainer<eevp::ota::monitoring::service::proxy::OtaMonitoringProxy::HandleType> handles, ara::com::FindServiceHandle findHandle)
{
    // check finding handles
    if (handles.empty())
    {
        m_logger.LogVerbose() << "RPortOtaMonitoring::Find::Service Instances not found";
        return;
    }
    else
    {
        for (auto& handle : handles)
        {
            m_logger.LogVerbose() << "RPortOtaMonitoring::Find::Searched Instance::ServiceId =" << 
                                     handle.GetServiceHandle().serviceId << 
                                     ", InstanceId =" << 
                                     handle.GetServiceHandle().instanceId;
        }
    }
    
    // create proxy
    if (m_interface)
    {
        m_logger.LogVerbose() << "RPortOtaMonitoring::Find::Proxy is already running";
    }
    else
    {
        m_logger.LogVerbose() << "RPortOtaMonitoring::Find::Using Instance::ServiceId =" << 
                                 handles[0].GetServiceHandle().serviceId << 
                                 ", InstanceId =" << 
                                 handles[0].GetServiceHandle().instanceId;
        m_interface = std::make_unique<eevp::ota::monitoring::service::proxy::OtaMonitoringProxy>(handles[0]);
        m_findHandle = std::make_unique<ara::com::FindServiceHandle>(findHandle);
        m_found = true;
        
        // subscribe events
        SubscribenotifyServiceEvent();
        SubscribenotifyUpdatableService();
        SubscriberesetUcmCompleted();
    }
}
 
void RPortOtaMonitoring::SubscribenotifyServiceEvent()
{
    if (m_found)
    {
        // regist receiver handler
        // if you want to enable it, please uncomment below code
        // RegistReceivernotifyServiceEvent();
        
        // request subscribe
        auto subscribe = m_interface->notifyServiceEvent.Subscribe(1);
        if (subscribe.HasValue())
        {
            m_logger.LogVerbose() << "RPortOtaMonitoring::SubscribenotifyServiceEvent::Subscribed";
        }
        else
        {
            m_logger.LogError() << "RPortOtaMonitoring::SubscribenotifyServiceEvent::" << subscribe.Error().Message();
        }
    }
}
 
void RPortOtaMonitoring::StopSubscribenotifyServiceEvent()
{
    if (m_found)
    {
        // request stop subscribe
        m_interface->notifyServiceEvent.Unsubscribe();
        m_logger.LogVerbose() << "RPortOtaMonitoring::StopSubscribenotifyServiceEvent::Unsubscribed";
    }
}
 
void RPortOtaMonitoring::RegistReceivernotifyServiceEvent()
{
    if (m_found)
    {
        // set callback
        auto receiver = [this]() -> void {
            return ReceiveEventnotifyServiceEventTriggered();
        };
        
        // regist callback
        auto callback = m_interface->notifyServiceEvent.SetReceiveHandler(receiver);
        if (callback.HasValue())
        {
            m_logger.LogVerbose() << "RPortOtaMonitoring::RegistReceivernotifyServiceEvent::SetReceiveHandler";
        }
        else
        {
            m_logger.LogError() << "RPortOtaMonitoring::RegistReceivernotifyServiceEvent::SetReceiveHandler::" << callback.Error().Message();
        }
    }
}
 
void RPortOtaMonitoring::ReceiveEventnotifyServiceEventTriggered()
{
    if (m_found)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_interface->notifyServiceEvent.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
        {
            auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->notifyServiceEvent.GetNewSamples([&](auto samplePtr) {
                RPortOtaMonitoring::ReadDatanotifyServiceEvent(std::move(samplePtr));
            }));
            if (recv->HasValue())
            {
                m_logger.LogVerbose() << "RPortOtaMonitoring::ReceiveEventnotifyServiceEvent::GetNewSamples::" << recv->Value();
            }
            else
            {
                m_logger.LogError() << "RPortOtaMonitoring::ReceiveEventnotifyServiceEvent::GetNewSamples::" << recv->Error().Message();
            }
        }
    }
}
 
void RPortOtaMonitoring::ReceiveEventnotifyServiceEventCyclic()
{
    while (m_running)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_found)
        {
            if (m_interface->notifyServiceEvent.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
            {
                auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->notifyServiceEvent.GetNewSamples([&](auto samplePtr) {
                    RPortOtaMonitoring::ReadDatanotifyServiceEvent(std::move(samplePtr));
                }));
                if (recv->HasValue())
                {
                    m_logger.LogVerbose() << "RPortOtaMonitoring::ReceiveEventnotifyServiceEvent::GetNewSamples::" << recv->Value();
                }
                else
                {
                    m_logger.LogError() << "RPortOtaMonitoring::ReceiveEventnotifyServiceEvent::GetNewSamples::" << recv->Error().Message();
                }
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void RPortOtaMonitoring::ReadDatanotifyServiceEvent(ara::com::SamplePtr<eevp::ota::monitoring::service::proxy::events::notifyServiceEvent::SampleType const> samplePtr)
{
    auto data = *samplePtr.Get();
    if (m_receivernotifyServiceEvent)
    {
        m_receivernotifyServiceEvent(data);
    }
}
 
void RPortOtaMonitoring::RegistEventHandlernotifyServiceEvent(std::function<void(const eevp::ota::monitoring::service::proxy::events::notifyServiceEvent::SampleType&)> handler)
{
    m_receivernotifyServiceEvent = handler;
}
 
void RPortOtaMonitoring::SubscribenotifyUpdatableService()
{
    if (m_found)
    {
        // regist receiver handler
        // if you want to enable it, please uncomment below code
        // RegistReceivernotifyUpdatableService();
        
        // request subscribe
        auto subscribe = m_interface->notifyUpdatableService.Subscribe(1);
        if (subscribe.HasValue())
        {
            m_logger.LogVerbose() << "RPortOtaMonitoring::SubscribenotifyUpdatableService::Subscribed";
        }
        else
        {
            m_logger.LogError() << "RPortOtaMonitoring::SubscribenotifyUpdatableService::" << subscribe.Error().Message();
        }
    }
}
 
void RPortOtaMonitoring::StopSubscribenotifyUpdatableService()
{
    if (m_found)
    {
        // request stop subscribe
        m_interface->notifyUpdatableService.Unsubscribe();
        m_logger.LogVerbose() << "RPortOtaMonitoring::StopSubscribenotifyUpdatableService::Unsubscribed";
    }
}
 
void RPortOtaMonitoring::RegistReceivernotifyUpdatableService()
{
    if (m_found)
    {
        // set callback
        auto receiver = [this]() -> void {
            return ReceiveEventnotifyUpdatableServiceTriggered();
        };
        
        // regist callback
        auto callback = m_interface->notifyUpdatableService.SetReceiveHandler(receiver);
        if (callback.HasValue())
        {
            m_logger.LogVerbose() << "RPortOtaMonitoring::RegistReceivernotifyUpdatableService::SetReceiveHandler";
        }
        else
        {
            m_logger.LogError() << "RPortOtaMonitoring::RegistReceivernotifyUpdatableService::SetReceiveHandler::" << callback.Error().Message();
        }
    }
}
 
void RPortOtaMonitoring::ReceiveEventnotifyUpdatableServiceTriggered()
{
    if (m_found)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_interface->notifyUpdatableService.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
        {
            auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->notifyUpdatableService.GetNewSamples([&](auto samplePtr) {
                RPortOtaMonitoring::ReadDatanotifyUpdatableService(std::move(samplePtr));
            }));
            if (recv->HasValue())
            {
                m_logger.LogVerbose() << "RPortOtaMonitoring::ReceiveEventnotifyUpdatableService::GetNewSamples::" << recv->Value();
            }
            else
            {
                m_logger.LogError() << "RPortOtaMonitoring::ReceiveEventnotifyUpdatableService::GetNewSamples::" << recv->Error().Message();
            }
        }
    }
}
 
void RPortOtaMonitoring::ReceiveEventnotifyUpdatableServiceCyclic()
{
    while (m_running)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_found)
        {
            if (m_interface->notifyUpdatableService.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
            {
                auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->notifyUpdatableService.GetNewSamples([&](auto samplePtr) {
                    RPortOtaMonitoring::ReadDatanotifyUpdatableService(std::move(samplePtr));
                }));
                if (recv->HasValue())
                {
                    m_logger.LogVerbose() << "RPortOtaMonitoring::ReceiveEventnotifyUpdatableService::GetNewSamples::" << recv->Value();
                }
                else
                {
                    m_logger.LogError() << "RPortOtaMonitoring::ReceiveEventnotifyUpdatableService::GetNewSamples::" << recv->Error().Message();
                }
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void RPortOtaMonitoring::ReadDatanotifyUpdatableService(ara::com::SamplePtr<eevp::ota::monitoring::service::proxy::events::notifyUpdatableService::SampleType const> samplePtr)
{
    auto data = *samplePtr.Get();
    if (m_receivernotifyUpdatableService)
    {
        m_receivernotifyUpdatableService(data);
    }
}
 
void RPortOtaMonitoring::RegistEventHandlernotifyUpdatableService(std::function<void(const eevp::ota::monitoring::service::proxy::events::notifyUpdatableService::SampleType&)> handler)
{
    m_receivernotifyUpdatableService = handler;
}
 
void RPortOtaMonitoring::SubscriberesetUcmCompleted()
{
    if (m_found)
    {
        // regist receiver handler
        // if you want to enable it, please uncomment below code
        // RegistReceiverresetUcmCompleted();
        
        // request subscribe
        auto subscribe = m_interface->resetUcmCompleted.Subscribe(1);
        if (subscribe.HasValue())
        {
            m_logger.LogVerbose() << "RPortOtaMonitoring::SubscriberesetUcmCompleted::Subscribed";
        }
        else
        {
            m_logger.LogError() << "RPortOtaMonitoring::SubscriberesetUcmCompleted::" << subscribe.Error().Message();
        }
    }
}
 
void RPortOtaMonitoring::StopSubscriberesetUcmCompleted()
{
    if (m_found)
    {
        // request stop subscribe
        m_interface->resetUcmCompleted.Unsubscribe();
        m_logger.LogVerbose() << "RPortOtaMonitoring::StopSubscriberesetUcmCompleted::Unsubscribed";
    }
}
 
void RPortOtaMonitoring::RegistReceiverresetUcmCompleted()
{
    if (m_found)
    {
        // set callback
        auto receiver = [this]() -> void {
            return ReceiveEventresetUcmCompletedTriggered();
        };
        
        // regist callback
        auto callback = m_interface->resetUcmCompleted.SetReceiveHandler(receiver);
        if (callback.HasValue())
        {
            m_logger.LogVerbose() << "RPortOtaMonitoring::RegistReceiverresetUcmCompleted::SetReceiveHandler";
        }
        else
        {
            m_logger.LogError() << "RPortOtaMonitoring::RegistReceiverresetUcmCompleted::SetReceiveHandler::" << callback.Error().Message();
        }
    }
}
 
void RPortOtaMonitoring::ReceiveEventresetUcmCompletedTriggered()
{
    if (m_found)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_interface->resetUcmCompleted.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
        {
            auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->resetUcmCompleted.GetNewSamples([&](auto samplePtr) {
                RPortOtaMonitoring::ReadDataresetUcmCompleted(std::move(samplePtr));
            }));
            if (recv->HasValue())
            {
                m_logger.LogVerbose() << "RPortOtaMonitoring::ReceiveEventresetUcmCompleted::GetNewSamples::" << recv->Value();
            }
            else
            {
                m_logger.LogError() << "RPortOtaMonitoring::ReceiveEventresetUcmCompleted::GetNewSamples::" << recv->Error().Message();
            }
        }
    }
}
 
void RPortOtaMonitoring::ReceiveEventresetUcmCompletedCyclic()
{
    while (m_running)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_found)
        {
            if (m_interface->resetUcmCompleted.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
            {
                auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->resetUcmCompleted.GetNewSamples([&](auto samplePtr) {
                    RPortOtaMonitoring::ReadDataresetUcmCompleted(std::move(samplePtr));
                }));
                if (recv->HasValue())
                {
                    m_logger.LogVerbose() << "RPortOtaMonitoring::ReceiveEventresetUcmCompleted::GetNewSamples::" << recv->Value();
                }
                else
                {
                    m_logger.LogError() << "RPortOtaMonitoring::ReceiveEventresetUcmCompleted::GetNewSamples::" << recv->Error().Message();
                }
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void RPortOtaMonitoring::ReadDataresetUcmCompleted(ara::com::SamplePtr<eevp::ota::monitoring::service::proxy::events::resetUcmCompleted::SampleType const> samplePtr)
{
    auto data = *samplePtr.Get();
    if (m_receiverresetUcmCompleted)
    {
        m_receiverresetUcmCompleted(data);
    }
}
 
void RPortOtaMonitoring::RegistEventHandlerresetUcmCompleted(std::function<void(const eevp::ota::monitoring::service::proxy::events::resetUcmCompleted::SampleType&)> handler)
{
    m_receiverresetUcmCompleted = handler;
}
 
void RPortOtaMonitoring::RequestrequestServiceInstall(const eevp::type::String& serviceName)
{
    if (m_found)
    {
        auto request = m_interface->requestServiceInstall(serviceName);
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "RPortOtaMonitoring::RequestrequestServiceInstall::Responded";
            
            auto result = response.Value();
            if (m_responderrequestServiceInstall)
            {
                m_responderrequestServiceInstall(result);
            }
        }
        else
        {
            m_logger.LogError() << "RPortOtaMonitoring::RequestrequestServiceInstall::" << response.Error().Message();
        }
    }
}
 
void RPortOtaMonitoring::RegistResponseHandlerrequestServiceInstall(std::function<void(const eevp::ota::monitoring::service::proxy::methods::requestServiceInstall::Output&)> handler)
{
    m_responderrequestServiceInstall = handler;
}
 
void RPortOtaMonitoring::RequestrequestServiceUpdate(const eevp::type::String& serviceName)
{
    if (m_found)
    {
        auto request = m_interface->requestServiceUpdate(serviceName);
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "RPortOtaMonitoring::RequestrequestServiceUpdate::Responded";
            
            auto result = response.Value();
            if (m_responderrequestServiceUpdate)
            {
                m_responderrequestServiceUpdate(result);
            }
        }
        else
        {
            m_logger.LogError() << "RPortOtaMonitoring::RequestrequestServiceUpdate::" << response.Error().Message();
        }
    }
}
 
void RPortOtaMonitoring::RegistResponseHandlerrequestServiceUpdate(std::function<void(const eevp::ota::monitoring::service::proxy::methods::requestServiceUpdate::Output&)> handler)
{
    m_responderrequestServiceUpdate = handler;
}
 
void RPortOtaMonitoring::RequestrequestVersionInfo()
{
    if (m_found)
    {
        auto request = m_interface->requestVersionInfo();
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "RPortOtaMonitoring::RequestrequestVersionInfo::Responded";
            
            auto result = response.Value();
            if (m_responderrequestVersionInfo)
            {
                m_responderrequestVersionInfo(result);
            }
        }
        else
        {
            m_logger.LogError() << "RPortOtaMonitoring::RequestrequestVersionInfo::" << response.Error().Message();
        }
    }
}
 
void RPortOtaMonitoring::RegistResponseHandlerrequestVersionInfo(std::function<void(const eevp::ota::monitoring::service::proxy::methods::requestVersionInfo::Output&)> handler)
{
    m_responderrequestVersionInfo = handler;
}
 
void RPortOtaMonitoring::RequestresetUcmTest()
{
    if (m_found)
    {
        auto request = m_interface->resetUcmTest();
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "RPortOtaMonitoring::RequestresetUcmTest::Responded";
            
            auto result = response.Value();
            if (m_responderresetUcmTest)
            {
                m_responderresetUcmTest(result);
            }
        }
        else
        {
            m_logger.LogError() << "RPortOtaMonitoring::RequestresetUcmTest::" << response.Error().Message();
        }
    }
}
 
void RPortOtaMonitoring::RegistResponseHandlerresetUcmTest(std::function<void(const eevp::ota::monitoring::service::proxy::methods::resetUcmTest::Output&)> handler)
{
    m_responderresetUcmTest = handler;
}
 
} /// namespace port
} /// namespace aa
} /// namespace monitoringmanager
 
/// EOF