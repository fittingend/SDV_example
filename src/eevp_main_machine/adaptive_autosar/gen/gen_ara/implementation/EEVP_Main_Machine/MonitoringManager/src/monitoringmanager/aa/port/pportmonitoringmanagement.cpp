///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : pportmonitoringmanagement.cpp
/// SOFTWARE COMPONENT NAME           : PPortMonitoringManagement
/// GENERATED DATE                    : 2025-08-30 10:53:24
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "monitoringmanager/aa/port/pportmonitoringmanagement.h"
 
namespace eevp
{
namespace monitoring
{
namespace service
{
namespace skeleton
{
 
MonitoringManagementSkeletonImpl::MonitoringManagementSkeletonImpl(ara::core::InstanceSpecifier instanceSpec, ara::com::MethodCallProcessingMode mode)
    : MonitoringManagementSkeleton(instanceSpec, mode)
    , m_logger(ara::log::CreateLogger("MONM", "PORT", ara::log::LogLevel::kVerbose))
    , m_UssStatusFront{eevp::pdw::type::Direction::kFront, eevp::pdw::type::State::NORMAL}
    , m_UssStatusRear{eevp::pdw::type::Direction::kFront, eevp::pdw::type::State::NORMAL}
    , m_soaDmsDeviceNormal{eevp::control::SoaDeviceIsNormal::kNORMAL}
    , m_soaDmsSwVersion{0U}
    , m_soaDrvSeatDeviceNormal{eevp::control::SoaDeviceIsNormal::kNORMAL}
    , m_soaDrvSeatMotorDirection{eevp::control::SoaSeatSlideDirection::kSTOP, eevp::control::SoaSeatReclineDirection::kSTOP, eevp::control::SoaSeatHeightDirection::kSTOP, eevp::control::SoaSeatTiltDirection::kSTOP}
    , m_soaDrvSeatMotorPosition{0U, 0U, 0U, 0U}
    , m_soaDrvSeatSwVersion{0U}
    , m_soaFilmDeviceNormal{eevp::control::SoaDeviceIsNormal::kNORMAL}
    , m_soaFilmSwVersion{0U}
    , m_soaHvacDeviceNormal{eevp::control::SoaDeviceIsNormal::kNORMAL}
    , m_soaHvacSwVersion{0U}
    , m_soaMlmStatus{0U, 0U, eevp::control::SoaDeviceIsNormal::kNORMAL}
    , m_soaMlmSwVersion{0U}
    , m_soaPowerDeviceNormal{eevp::control::SoaDeviceIsNormal::kNORMAL}
    , m_soaPowerSwVersion{0U}
    , m_soaRctnStatus{eevp::control::SoaErrorState::kOK, eevp::control::SoaRctnMotorDir::kSTOP, eevp::control::SoaRctnState::kFULLY_UP, eevp::control::SoaDeviceIsNormal::kNORMAL}
    , m_soaRctnSwVersion{0U}
    , m_soaRoaDetectState{eevp::control::SoaRoaDetectState::kEMPTY}
    , m_soaRoaDeviceNormal{eevp::control::SoaDeviceIsNormal::kNORMAL}
    , m_soaRoaSwVersion{0U}
    , m_soaWiperDeviceNormal{eevp::control::SoaDeviceIsNormal::kNORMAL}
    , m_soaWiperStatus{false, eevp::control::SoaWiperMode::kOFF}
    , m_soaWiperSwVersion{0U}
{
    // regist get handler, UssStatusFront
    auto ussstatusfront_get_handler = [this]() {
        return GetUssStatusFront();
    };
    UssStatusFront.RegisterGetHandler(ussstatusfront_get_handler);
    
    // regist get handler, UssStatusRear
    auto ussstatusrear_get_handler = [this]() {
        return GetUssStatusRear();
    };
    UssStatusRear.RegisterGetHandler(ussstatusrear_get_handler);
    
    // regist get handler, soaDmsDeviceNormal
    auto soadmsdevicenormal_get_handler = [this]() {
        return GetsoaDmsDeviceNormal();
    };
    soaDmsDeviceNormal.RegisterGetHandler(soadmsdevicenormal_get_handler);
    
    // regist get handler, soaDmsSwVersion
    auto soadmsswversion_get_handler = [this]() {
        return GetsoaDmsSwVersion();
    };
    soaDmsSwVersion.RegisterGetHandler(soadmsswversion_get_handler);
    
    // regist get handler, soaDrvSeatDeviceNormal
    auto soadrvseatdevicenormal_get_handler = [this]() {
        return GetsoaDrvSeatDeviceNormal();
    };
    soaDrvSeatDeviceNormal.RegisterGetHandler(soadrvseatdevicenormal_get_handler);
    
    // regist get handler, soaDrvSeatMotorDirection
    auto soadrvseatmotordirection_get_handler = [this]() {
        return GetsoaDrvSeatMotorDirection();
    };
    soaDrvSeatMotorDirection.RegisterGetHandler(soadrvseatmotordirection_get_handler);
    
    // regist get handler, soaDrvSeatMotorPosition
    auto soadrvseatmotorposition_get_handler = [this]() {
        return GetsoaDrvSeatMotorPosition();
    };
    soaDrvSeatMotorPosition.RegisterGetHandler(soadrvseatmotorposition_get_handler);
    
    // regist get handler, soaDrvSeatSwVersion
    auto soadrvseatswversion_get_handler = [this]() {
        return GetsoaDrvSeatSwVersion();
    };
    soaDrvSeatSwVersion.RegisterGetHandler(soadrvseatswversion_get_handler);
    
    // regist get handler, soaFilmDeviceNormal
    auto soafilmdevicenormal_get_handler = [this]() {
        return GetsoaFilmDeviceNormal();
    };
    soaFilmDeviceNormal.RegisterGetHandler(soafilmdevicenormal_get_handler);
    
    // regist get handler, soaFilmSwVersion
    auto soafilmswversion_get_handler = [this]() {
        return GetsoaFilmSwVersion();
    };
    soaFilmSwVersion.RegisterGetHandler(soafilmswversion_get_handler);
    
    // regist get handler, soaHvacDeviceNormal
    auto soahvacdevicenormal_get_handler = [this]() {
        return GetsoaHvacDeviceNormal();
    };
    soaHvacDeviceNormal.RegisterGetHandler(soahvacdevicenormal_get_handler);
    
    // regist get handler, soaHvacSwVersion
    auto soahvacswversion_get_handler = [this]() {
        return GetsoaHvacSwVersion();
    };
    soaHvacSwVersion.RegisterGetHandler(soahvacswversion_get_handler);
    
    // regist get handler, soaMlmStatus
    auto soamlmstatus_get_handler = [this]() {
        return GetsoaMlmStatus();
    };
    soaMlmStatus.RegisterGetHandler(soamlmstatus_get_handler);
    
    // regist get handler, soaMlmSwVersion
    auto soamlmswversion_get_handler = [this]() {
        return GetsoaMlmSwVersion();
    };
    soaMlmSwVersion.RegisterGetHandler(soamlmswversion_get_handler);
    
    // regist get handler, soaPowerDeviceNormal
    auto soapowerdevicenormal_get_handler = [this]() {
        return GetsoaPowerDeviceNormal();
    };
    soaPowerDeviceNormal.RegisterGetHandler(soapowerdevicenormal_get_handler);
    
    // regist get handler, soaPowerSwVersion
    auto soapowerswversion_get_handler = [this]() {
        return GetsoaPowerSwVersion();
    };
    soaPowerSwVersion.RegisterGetHandler(soapowerswversion_get_handler);
    
    // regist get handler, soaRctnStatus
    auto soarctnstatus_get_handler = [this]() {
        return GetsoaRctnStatus();
    };
    soaRctnStatus.RegisterGetHandler(soarctnstatus_get_handler);
    
    // regist get handler, soaRctnSwVersion
    auto soarctnswversion_get_handler = [this]() {
        return GetsoaRctnSwVersion();
    };
    soaRctnSwVersion.RegisterGetHandler(soarctnswversion_get_handler);
    
    // regist get handler, soaRoaDetectState
    auto soaroadetectstate_get_handler = [this]() {
        return GetsoaRoaDetectState();
    };
    soaRoaDetectState.RegisterGetHandler(soaroadetectstate_get_handler);
    
    // regist get handler, soaRoaDeviceNormal
    auto soaroadevicenormal_get_handler = [this]() {
        return GetsoaRoaDeviceNormal();
    };
    soaRoaDeviceNormal.RegisterGetHandler(soaroadevicenormal_get_handler);
    
    // regist get handler, soaRoaSwVersion
    auto soaroaswversion_get_handler = [this]() {
        return GetsoaRoaSwVersion();
    };
    soaRoaSwVersion.RegisterGetHandler(soaroaswversion_get_handler);
    
    // regist get handler, soaWiperDeviceNormal
    auto soawiperdevicenormal_get_handler = [this]() {
        return GetsoaWiperDeviceNormal();
    };
    soaWiperDeviceNormal.RegisterGetHandler(soawiperdevicenormal_get_handler);
    
    // regist get handler, soaWiperStatus
    auto soawiperstatus_get_handler = [this]() {
        return GetsoaWiperStatus();
    };
    soaWiperStatus.RegisterGetHandler(soawiperstatus_get_handler);
    
    // regist get handler, soaWiperSwVersion
    auto soawiperswversion_get_handler = [this]() {
        return GetsoaWiperSwVersion();
    };
    soaWiperSwVersion.RegisterGetHandler(soawiperswversion_get_handler);
}
 
ara::core::Future<MonitoringManagementSkeleton::RequestMlmSetRgbColorOutput> MonitoringManagementSkeletonImpl::RequestMlmSetRgbColor(const std::uint8_t& colorTableIndex)
{
    m_logger.LogVerbose() << "PPortMonitoringManagement::RequestMlmSetRgbColor::Requested";
    
    RequestMlmSetRgbColorOutput response;
    ara::core::Promise<RequestMlmSetRgbColorOutput> promise;
    
    // put your logic
    
    promise.set_value(response);
    return promise.get_future();
}
 
ara::core::Future<MonitoringManagementSkeleton::RequestMoveDrvSeatHeightOutput> MonitoringManagementSkeletonImpl::RequestMoveDrvSeatHeight(const eevp::control::SoaSeatHeightDirection& dir)
{
    m_logger.LogVerbose() << "PPortMonitoringManagement::RequestMoveDrvSeatHeight::Requested";
    
    RequestMoveDrvSeatHeightOutput response;
    ara::core::Promise<RequestMoveDrvSeatHeightOutput> promise;
    
    // put your logic
    
    promise.set_value(response);
    return promise.get_future();
}
 
ara::core::Future<MonitoringManagementSkeleton::RequestMoveDrvSeatReclineOutput> MonitoringManagementSkeletonImpl::RequestMoveDrvSeatRecline(const eevp::control::SoaSeatReclineDirection& dir)
{
    m_logger.LogVerbose() << "PPortMonitoringManagement::RequestMoveDrvSeatRecline::Requested";
    
    RequestMoveDrvSeatReclineOutput response;
    ara::core::Promise<RequestMoveDrvSeatReclineOutput> promise;
    
    // put your logic
    
    promise.set_value(response);
    return promise.get_future();
}
 
ara::core::Future<MonitoringManagementSkeleton::RequestMoveDrvSeatSlideOutput> MonitoringManagementSkeletonImpl::RequestMoveDrvSeatSlide(const eevp::control::SoaSeatSlideDirection& dir)
{
    m_logger.LogVerbose() << "PPortMonitoringManagement::RequestMoveDrvSeatSlide::Requested";
    
    RequestMoveDrvSeatSlideOutput response;
    ara::core::Promise<RequestMoveDrvSeatSlideOutput> promise;
    
    // put your logic
    
    promise.set_value(response);
    return promise.get_future();
}
 
ara::core::Future<MonitoringManagementSkeleton::RequestMoveDrvSeatTiltOutput> MonitoringManagementSkeletonImpl::RequestMoveDrvSeatTilt(const eevp::control::SoaSeatTiltDirection& dir)
{
    m_logger.LogVerbose() << "PPortMonitoringManagement::RequestMoveDrvSeatTilt::Requested";
    
    RequestMoveDrvSeatTiltOutput response;
    ara::core::Promise<RequestMoveDrvSeatTiltOutput> promise;
    
    // put your logic
    
    promise.set_value(response);
    return promise.get_future();
}
 
ara::core::Future<MonitoringManagementSkeleton::RequestRearCurtainOperationOutput> MonitoringManagementSkeletonImpl::RequestRearCurtainOperation(const eevp::control::SoaRctnMotorDir& motorDir)
{
    m_logger.LogVerbose() << "PPortMonitoringManagement::RequestRearCurtainOperation::Requested";
    
    RequestRearCurtainOperationOutput response;
    ara::core::Promise<RequestRearCurtainOperationOutput> promise;
    
    // put your logic
    
    promise.set_value(response);
    return promise.get_future();
}
 
ara::core::Future<MonitoringManagementSkeleton::RequestRearCurtainPositionOutput> MonitoringManagementSkeletonImpl::RequestRearCurtainPosition(const std::uint8_t& posPercentage)
{
    m_logger.LogVerbose() << "PPortMonitoringManagement::RequestRearCurtainPosition::Requested";
    
    RequestRearCurtainPositionOutput response;
    ara::core::Promise<RequestRearCurtainPositionOutput> promise;
    
    // put your logic
    
    promise.set_value(response);
    return promise.get_future();
}
 
ara::core::Future<MonitoringManagementSkeleton::RequestWiperOperationOutput> MonitoringManagementSkeletonImpl::RequestWiperOperation(const eevp::control::SoaWiperMode& mode)
{
    m_logger.LogVerbose() << "PPortMonitoringManagement::RequestWiperOperation::Requested";
    
    RequestWiperOperationOutput response;
    ara::core::Promise<RequestWiperOperationOutput> promise;
    
    // put your logic
    
    promise.set_value(response);
    return promise.get_future();
}
 
ara::core::Future<MonitoringManagementSkeleton::SetWiperAutoSpeedOutput> MonitoringManagementSkeletonImpl::SetWiperAutoSpeed(const bool& isAutoSpeed)
{
    m_logger.LogVerbose() << "PPortMonitoringManagement::SetWiperAutoSpeed::Requested";
    
    SetWiperAutoSpeedOutput response;
    ara::core::Promise<SetWiperAutoSpeedOutput> promise;
    
    // put your logic
    
    promise.set_value(response);
    return promise.get_future();
}
 
ara::core::Future<MonitoringManagementSkeleton::requestAppInstallOutput> MonitoringManagementSkeletonImpl::requestAppInstall(const eevp::type::String& controllerServiceName)
{
    m_logger.LogVerbose() << "PPortMonitoringManagement::requestAppInstall::Requested";
    
    requestAppInstallOutput response;
    ara::core::Promise<requestAppInstallOutput> promise;
    
    // put your logic
    
    promise.set_value(response);
    return promise.get_future();
}
 
ara::core::Future<MonitoringManagementSkeleton::requestAppUpdateOutput> MonitoringManagementSkeletonImpl::requestAppUpdate(const eevp::type::String& controllerServiceName)
{
    m_logger.LogVerbose() << "PPortMonitoringManagement::requestAppUpdate::Requested";
    
    requestAppUpdateOutput response;
    ara::core::Promise<requestAppUpdateOutput> promise;
    
    // put your logic
    
    promise.set_value(response);
    return promise.get_future();
}
 
ara::core::Future<MonitoringManagementSkeleton::requestControllerServiceInfoOutput> MonitoringManagementSkeletonImpl::requestControllerServiceInfo(const eevp::type::String& controllerServiceName)
{
    m_logger.LogVerbose() << "PPortMonitoringManagement::requestControllerServiceInfo::Requested";
    
    requestControllerServiceInfoOutput response;
    ara::core::Promise<requestControllerServiceInfoOutput> promise;
    
    // put your logic
    
    promise.set_value(response);
    return promise.get_future();
}
 
ara::core::Future<MonitoringManagementSkeleton::resetUcmTestOutput> MonitoringManagementSkeletonImpl::resetUcmTest()
{
    m_logger.LogVerbose() << "PPortMonitoringManagement::resetUcmTest::Requested";
    
    resetUcmTestOutput response;
    ara::core::Promise<resetUcmTestOutput> promise;
    
    // put your logic
    
    promise.set_value(response);
    return promise.get_future();
}
 
ara::core::Future<fields::UssStatusFront::FieldType> MonitoringManagementSkeletonImpl::GetUssStatusFront()
{
    m_logger.LogVerbose() << "PPortMonitoringManagement::GetUssStatusFront::Requested";
    
    ara::core::Promise<fields::UssStatusFront::FieldType> promise;
    
    promise.set_value(m_UssStatusFront);
    return promise.get_future();
}
 
void MonitoringManagementSkeletonImpl::NotifyUssStatusFront()
{
    auto notify = UssStatusFront.Update(m_UssStatusFront);
    if (notify.HasValue())
    {
        m_logger.LogVerbose() << "PPortMonitoringManagement::NotifyUssStatusFront::Update";
    }
    else
    {
        m_logger.LogError() << "PPortMonitoringManagement::NotifyUssStatusFront::Update::" << notify.Error().Message();
    }
}
 
void MonitoringManagementSkeletonImpl::UpdateUssStatusFront(const fields::UssStatusFront::FieldType& value)
{
    m_UssStatusFront = value;
}
 
ara::core::Future<fields::UssStatusRear::FieldType> MonitoringManagementSkeletonImpl::GetUssStatusRear()
{
    m_logger.LogVerbose() << "PPortMonitoringManagement::GetUssStatusRear::Requested";
    
    ara::core::Promise<fields::UssStatusRear::FieldType> promise;
    
    promise.set_value(m_UssStatusRear);
    return promise.get_future();
}
 
void MonitoringManagementSkeletonImpl::NotifyUssStatusRear()
{
    auto notify = UssStatusRear.Update(m_UssStatusRear);
    if (notify.HasValue())
    {
        m_logger.LogVerbose() << "PPortMonitoringManagement::NotifyUssStatusRear::Update";
    }
    else
    {
        m_logger.LogError() << "PPortMonitoringManagement::NotifyUssStatusRear::Update::" << notify.Error().Message();
    }
}
 
void MonitoringManagementSkeletonImpl::UpdateUssStatusRear(const fields::UssStatusRear::FieldType& value)
{
    m_UssStatusRear = value;
}
 
ara::core::Future<fields::soaDmsDeviceNormal::FieldType> MonitoringManagementSkeletonImpl::GetsoaDmsDeviceNormal()
{
    m_logger.LogVerbose() << "PPortMonitoringManagement::GetsoaDmsDeviceNormal::Requested";
    
    ara::core::Promise<fields::soaDmsDeviceNormal::FieldType> promise;
    
    promise.set_value(m_soaDmsDeviceNormal);
    return promise.get_future();
}
 
void MonitoringManagementSkeletonImpl::NotifysoaDmsDeviceNormal()
{
    auto notify = soaDmsDeviceNormal.Update(m_soaDmsDeviceNormal);
    if (notify.HasValue())
    {
        m_logger.LogVerbose() << "PPortMonitoringManagement::NotifysoaDmsDeviceNormal::Update";
    }
    else
    {
        m_logger.LogError() << "PPortMonitoringManagement::NotifysoaDmsDeviceNormal::Update::" << notify.Error().Message();
    }
}
 
void MonitoringManagementSkeletonImpl::UpdatesoaDmsDeviceNormal(const fields::soaDmsDeviceNormal::FieldType& value)
{
    m_soaDmsDeviceNormal = value;
}
 
ara::core::Future<fields::soaDmsSwVersion::FieldType> MonitoringManagementSkeletonImpl::GetsoaDmsSwVersion()
{
    m_logger.LogVerbose() << "PPortMonitoringManagement::GetsoaDmsSwVersion::Requested";
    
    ara::core::Promise<fields::soaDmsSwVersion::FieldType> promise;
    
    promise.set_value(m_soaDmsSwVersion);
    return promise.get_future();
}
 
void MonitoringManagementSkeletonImpl::NotifysoaDmsSwVersion()
{
    auto notify = soaDmsSwVersion.Update(m_soaDmsSwVersion);
    if (notify.HasValue())
    {
        m_logger.LogVerbose() << "PPortMonitoringManagement::NotifysoaDmsSwVersion::Update";
    }
    else
    {
        m_logger.LogError() << "PPortMonitoringManagement::NotifysoaDmsSwVersion::Update::" << notify.Error().Message();
    }
}
 
void MonitoringManagementSkeletonImpl::UpdatesoaDmsSwVersion(const fields::soaDmsSwVersion::FieldType& value)
{
    m_soaDmsSwVersion = value;
}
 
ara::core::Future<fields::soaDrvSeatDeviceNormal::FieldType> MonitoringManagementSkeletonImpl::GetsoaDrvSeatDeviceNormal()
{
    m_logger.LogVerbose() << "PPortMonitoringManagement::GetsoaDrvSeatDeviceNormal::Requested";
    
    ara::core::Promise<fields::soaDrvSeatDeviceNormal::FieldType> promise;
    
    promise.set_value(m_soaDrvSeatDeviceNormal);
    return promise.get_future();
}
 
void MonitoringManagementSkeletonImpl::NotifysoaDrvSeatDeviceNormal()
{
    auto notify = soaDrvSeatDeviceNormal.Update(m_soaDrvSeatDeviceNormal);
    if (notify.HasValue())
    {
        m_logger.LogVerbose() << "PPortMonitoringManagement::NotifysoaDrvSeatDeviceNormal::Update";
    }
    else
    {
        m_logger.LogError() << "PPortMonitoringManagement::NotifysoaDrvSeatDeviceNormal::Update::" << notify.Error().Message();
    }
}
 
void MonitoringManagementSkeletonImpl::UpdatesoaDrvSeatDeviceNormal(const fields::soaDrvSeatDeviceNormal::FieldType& value)
{
    m_soaDrvSeatDeviceNormal = value;
}
 
ara::core::Future<fields::soaDrvSeatMotorDirection::FieldType> MonitoringManagementSkeletonImpl::GetsoaDrvSeatMotorDirection()
{
    m_logger.LogVerbose() << "PPortMonitoringManagement::GetsoaDrvSeatMotorDirection::Requested";
    
    ara::core::Promise<fields::soaDrvSeatMotorDirection::FieldType> promise;
    
    promise.set_value(m_soaDrvSeatMotorDirection);
    return promise.get_future();
}
 
void MonitoringManagementSkeletonImpl::NotifysoaDrvSeatMotorDirection()
{
    auto notify = soaDrvSeatMotorDirection.Update(m_soaDrvSeatMotorDirection);
    if (notify.HasValue())
    {
        m_logger.LogVerbose() << "PPortMonitoringManagement::NotifysoaDrvSeatMotorDirection::Update";
    }
    else
    {
        m_logger.LogError() << "PPortMonitoringManagement::NotifysoaDrvSeatMotorDirection::Update::" << notify.Error().Message();
    }
}
 
void MonitoringManagementSkeletonImpl::UpdatesoaDrvSeatMotorDirection(const fields::soaDrvSeatMotorDirection::FieldType& value)
{
    m_soaDrvSeatMotorDirection = value;
}
 
ara::core::Future<fields::soaDrvSeatMotorPosition::FieldType> MonitoringManagementSkeletonImpl::GetsoaDrvSeatMotorPosition()
{
    m_logger.LogVerbose() << "PPortMonitoringManagement::GetsoaDrvSeatMotorPosition::Requested";
    
    ara::core::Promise<fields::soaDrvSeatMotorPosition::FieldType> promise;
    
    promise.set_value(m_soaDrvSeatMotorPosition);
    return promise.get_future();
}
 
void MonitoringManagementSkeletonImpl::NotifysoaDrvSeatMotorPosition()
{
    auto notify = soaDrvSeatMotorPosition.Update(m_soaDrvSeatMotorPosition);
    if (notify.HasValue())
    {
        m_logger.LogVerbose() << "PPortMonitoringManagement::NotifysoaDrvSeatMotorPosition::Update";
    }
    else
    {
        m_logger.LogError() << "PPortMonitoringManagement::NotifysoaDrvSeatMotorPosition::Update::" << notify.Error().Message();
    }
}
 
void MonitoringManagementSkeletonImpl::UpdatesoaDrvSeatMotorPosition(const fields::soaDrvSeatMotorPosition::FieldType& value)
{
    m_soaDrvSeatMotorPosition = value;
}
 
ara::core::Future<fields::soaDrvSeatSwVersion::FieldType> MonitoringManagementSkeletonImpl::GetsoaDrvSeatSwVersion()
{
    m_logger.LogVerbose() << "PPortMonitoringManagement::GetsoaDrvSeatSwVersion::Requested";
    
    ara::core::Promise<fields::soaDrvSeatSwVersion::FieldType> promise;
    
    promise.set_value(m_soaDrvSeatSwVersion);
    return promise.get_future();
}
 
void MonitoringManagementSkeletonImpl::NotifysoaDrvSeatSwVersion()
{
    auto notify = soaDrvSeatSwVersion.Update(m_soaDrvSeatSwVersion);
    if (notify.HasValue())
    {
        m_logger.LogVerbose() << "PPortMonitoringManagement::NotifysoaDrvSeatSwVersion::Update";
    }
    else
    {
        m_logger.LogError() << "PPortMonitoringManagement::NotifysoaDrvSeatSwVersion::Update::" << notify.Error().Message();
    }
}
 
void MonitoringManagementSkeletonImpl::UpdatesoaDrvSeatSwVersion(const fields::soaDrvSeatSwVersion::FieldType& value)
{
    m_soaDrvSeatSwVersion = value;
}
 
ara::core::Future<fields::soaFilmDeviceNormal::FieldType> MonitoringManagementSkeletonImpl::GetsoaFilmDeviceNormal()
{
    m_logger.LogVerbose() << "PPortMonitoringManagement::GetsoaFilmDeviceNormal::Requested";
    
    ara::core::Promise<fields::soaFilmDeviceNormal::FieldType> promise;
    
    promise.set_value(m_soaFilmDeviceNormal);
    return promise.get_future();
}
 
void MonitoringManagementSkeletonImpl::NotifysoaFilmDeviceNormal()
{
    auto notify = soaFilmDeviceNormal.Update(m_soaFilmDeviceNormal);
    if (notify.HasValue())
    {
        m_logger.LogVerbose() << "PPortMonitoringManagement::NotifysoaFilmDeviceNormal::Update";
    }
    else
    {
        m_logger.LogError() << "PPortMonitoringManagement::NotifysoaFilmDeviceNormal::Update::" << notify.Error().Message();
    }
}
 
void MonitoringManagementSkeletonImpl::UpdatesoaFilmDeviceNormal(const fields::soaFilmDeviceNormal::FieldType& value)
{
    m_soaFilmDeviceNormal = value;
}
 
ara::core::Future<fields::soaFilmSwVersion::FieldType> MonitoringManagementSkeletonImpl::GetsoaFilmSwVersion()
{
    m_logger.LogVerbose() << "PPortMonitoringManagement::GetsoaFilmSwVersion::Requested";
    
    ara::core::Promise<fields::soaFilmSwVersion::FieldType> promise;
    
    promise.set_value(m_soaFilmSwVersion);
    return promise.get_future();
}
 
void MonitoringManagementSkeletonImpl::NotifysoaFilmSwVersion()
{
    auto notify = soaFilmSwVersion.Update(m_soaFilmSwVersion);
    if (notify.HasValue())
    {
        m_logger.LogVerbose() << "PPortMonitoringManagement::NotifysoaFilmSwVersion::Update";
    }
    else
    {
        m_logger.LogError() << "PPortMonitoringManagement::NotifysoaFilmSwVersion::Update::" << notify.Error().Message();
    }
}
 
void MonitoringManagementSkeletonImpl::UpdatesoaFilmSwVersion(const fields::soaFilmSwVersion::FieldType& value)
{
    m_soaFilmSwVersion = value;
}
 
ara::core::Future<fields::soaHvacDeviceNormal::FieldType> MonitoringManagementSkeletonImpl::GetsoaHvacDeviceNormal()
{
    m_logger.LogVerbose() << "PPortMonitoringManagement::GetsoaHvacDeviceNormal::Requested";
    
    ara::core::Promise<fields::soaHvacDeviceNormal::FieldType> promise;
    
    promise.set_value(m_soaHvacDeviceNormal);
    return promise.get_future();
}
 
void MonitoringManagementSkeletonImpl::NotifysoaHvacDeviceNormal()
{
    auto notify = soaHvacDeviceNormal.Update(m_soaHvacDeviceNormal);
    if (notify.HasValue())
    {
        m_logger.LogVerbose() << "PPortMonitoringManagement::NotifysoaHvacDeviceNormal::Update";
    }
    else
    {
        m_logger.LogError() << "PPortMonitoringManagement::NotifysoaHvacDeviceNormal::Update::" << notify.Error().Message();
    }
}
 
void MonitoringManagementSkeletonImpl::UpdatesoaHvacDeviceNormal(const fields::soaHvacDeviceNormal::FieldType& value)
{
    m_soaHvacDeviceNormal = value;
}
 
ara::core::Future<fields::soaHvacSwVersion::FieldType> MonitoringManagementSkeletonImpl::GetsoaHvacSwVersion()
{
    m_logger.LogVerbose() << "PPortMonitoringManagement::GetsoaHvacSwVersion::Requested";
    
    ara::core::Promise<fields::soaHvacSwVersion::FieldType> promise;
    
    promise.set_value(m_soaHvacSwVersion);
    return promise.get_future();
}
 
void MonitoringManagementSkeletonImpl::NotifysoaHvacSwVersion()
{
    auto notify = soaHvacSwVersion.Update(m_soaHvacSwVersion);
    if (notify.HasValue())
    {
        m_logger.LogVerbose() << "PPortMonitoringManagement::NotifysoaHvacSwVersion::Update";
    }
    else
    {
        m_logger.LogError() << "PPortMonitoringManagement::NotifysoaHvacSwVersion::Update::" << notify.Error().Message();
    }
}
 
void MonitoringManagementSkeletonImpl::UpdatesoaHvacSwVersion(const fields::soaHvacSwVersion::FieldType& value)
{
    m_soaHvacSwVersion = value;
}
 
ara::core::Future<fields::soaMlmStatus::FieldType> MonitoringManagementSkeletonImpl::GetsoaMlmStatus()
{
    m_logger.LogVerbose() << "PPortMonitoringManagement::GetsoaMlmStatus::Requested";
    
    ara::core::Promise<fields::soaMlmStatus::FieldType> promise;
    
    promise.set_value(m_soaMlmStatus);
    return promise.get_future();
}
 
void MonitoringManagementSkeletonImpl::NotifysoaMlmStatus()
{
    auto notify = soaMlmStatus.Update(m_soaMlmStatus);
    if (notify.HasValue())
    {
        m_logger.LogVerbose() << "PPortMonitoringManagement::NotifysoaMlmStatus::Update";
    }
    else
    {
        m_logger.LogError() << "PPortMonitoringManagement::NotifysoaMlmStatus::Update::" << notify.Error().Message();
    }
}
 
void MonitoringManagementSkeletonImpl::UpdatesoaMlmStatus(const fields::soaMlmStatus::FieldType& value)
{
    m_soaMlmStatus = value;
}
 
ara::core::Future<fields::soaMlmSwVersion::FieldType> MonitoringManagementSkeletonImpl::GetsoaMlmSwVersion()
{
    m_logger.LogVerbose() << "PPortMonitoringManagement::GetsoaMlmSwVersion::Requested";
    
    ara::core::Promise<fields::soaMlmSwVersion::FieldType> promise;
    
    promise.set_value(m_soaMlmSwVersion);
    return promise.get_future();
}
 
void MonitoringManagementSkeletonImpl::NotifysoaMlmSwVersion()
{
    auto notify = soaMlmSwVersion.Update(m_soaMlmSwVersion);
    if (notify.HasValue())
    {
        m_logger.LogVerbose() << "PPortMonitoringManagement::NotifysoaMlmSwVersion::Update";
    }
    else
    {
        m_logger.LogError() << "PPortMonitoringManagement::NotifysoaMlmSwVersion::Update::" << notify.Error().Message();
    }
}
 
void MonitoringManagementSkeletonImpl::UpdatesoaMlmSwVersion(const fields::soaMlmSwVersion::FieldType& value)
{
    m_soaMlmSwVersion = value;
}
 
ara::core::Future<fields::soaPowerDeviceNormal::FieldType> MonitoringManagementSkeletonImpl::GetsoaPowerDeviceNormal()
{
    m_logger.LogVerbose() << "PPortMonitoringManagement::GetsoaPowerDeviceNormal::Requested";
    
    ara::core::Promise<fields::soaPowerDeviceNormal::FieldType> promise;
    
    promise.set_value(m_soaPowerDeviceNormal);
    return promise.get_future();
}
 
void MonitoringManagementSkeletonImpl::NotifysoaPowerDeviceNormal()
{
    auto notify = soaPowerDeviceNormal.Update(m_soaPowerDeviceNormal);
    if (notify.HasValue())
    {
        m_logger.LogVerbose() << "PPortMonitoringManagement::NotifysoaPowerDeviceNormal::Update";
    }
    else
    {
        m_logger.LogError() << "PPortMonitoringManagement::NotifysoaPowerDeviceNormal::Update::" << notify.Error().Message();
    }
}
 
void MonitoringManagementSkeletonImpl::UpdatesoaPowerDeviceNormal(const fields::soaPowerDeviceNormal::FieldType& value)
{
    m_soaPowerDeviceNormal = value;
}
 
ara::core::Future<fields::soaPowerSwVersion::FieldType> MonitoringManagementSkeletonImpl::GetsoaPowerSwVersion()
{
    m_logger.LogVerbose() << "PPortMonitoringManagement::GetsoaPowerSwVersion::Requested";
    
    ara::core::Promise<fields::soaPowerSwVersion::FieldType> promise;
    
    promise.set_value(m_soaPowerSwVersion);
    return promise.get_future();
}
 
void MonitoringManagementSkeletonImpl::NotifysoaPowerSwVersion()
{
    auto notify = soaPowerSwVersion.Update(m_soaPowerSwVersion);
    if (notify.HasValue())
    {
        m_logger.LogVerbose() << "PPortMonitoringManagement::NotifysoaPowerSwVersion::Update";
    }
    else
    {
        m_logger.LogError() << "PPortMonitoringManagement::NotifysoaPowerSwVersion::Update::" << notify.Error().Message();
    }
}
 
void MonitoringManagementSkeletonImpl::UpdatesoaPowerSwVersion(const fields::soaPowerSwVersion::FieldType& value)
{
    m_soaPowerSwVersion = value;
}
 
ara::core::Future<fields::soaRctnStatus::FieldType> MonitoringManagementSkeletonImpl::GetsoaRctnStatus()
{
    m_logger.LogVerbose() << "PPortMonitoringManagement::GetsoaRctnStatus::Requested";
    
    ara::core::Promise<fields::soaRctnStatus::FieldType> promise;
    
    promise.set_value(m_soaRctnStatus);
    return promise.get_future();
}
 
void MonitoringManagementSkeletonImpl::NotifysoaRctnStatus()
{
    auto notify = soaRctnStatus.Update(m_soaRctnStatus);
    if (notify.HasValue())
    {
        m_logger.LogVerbose() << "PPortMonitoringManagement::NotifysoaRctnStatus::Update";
    }
    else
    {
        m_logger.LogError() << "PPortMonitoringManagement::NotifysoaRctnStatus::Update::" << notify.Error().Message();
    }
}
 
void MonitoringManagementSkeletonImpl::UpdatesoaRctnStatus(const fields::soaRctnStatus::FieldType& value)
{
    m_soaRctnStatus = value;
}
 
ara::core::Future<fields::soaRctnSwVersion::FieldType> MonitoringManagementSkeletonImpl::GetsoaRctnSwVersion()
{
    m_logger.LogVerbose() << "PPortMonitoringManagement::GetsoaRctnSwVersion::Requested";
    
    ara::core::Promise<fields::soaRctnSwVersion::FieldType> promise;
    
    promise.set_value(m_soaRctnSwVersion);
    return promise.get_future();
}
 
void MonitoringManagementSkeletonImpl::NotifysoaRctnSwVersion()
{
    auto notify = soaRctnSwVersion.Update(m_soaRctnSwVersion);
    if (notify.HasValue())
    {
        m_logger.LogVerbose() << "PPortMonitoringManagement::NotifysoaRctnSwVersion::Update";
    }
    else
    {
        m_logger.LogError() << "PPortMonitoringManagement::NotifysoaRctnSwVersion::Update::" << notify.Error().Message();
    }
}
 
void MonitoringManagementSkeletonImpl::UpdatesoaRctnSwVersion(const fields::soaRctnSwVersion::FieldType& value)
{
    m_soaRctnSwVersion = value;
}
 
ara::core::Future<fields::soaRoaDetectState::FieldType> MonitoringManagementSkeletonImpl::GetsoaRoaDetectState()
{
    m_logger.LogVerbose() << "PPortMonitoringManagement::GetsoaRoaDetectState::Requested";
    
    ara::core::Promise<fields::soaRoaDetectState::FieldType> promise;
    
    promise.set_value(m_soaRoaDetectState);
    return promise.get_future();
}
 
void MonitoringManagementSkeletonImpl::NotifysoaRoaDetectState()
{
    auto notify = soaRoaDetectState.Update(m_soaRoaDetectState);
    if (notify.HasValue())
    {
        m_logger.LogVerbose() << "PPortMonitoringManagement::NotifysoaRoaDetectState::Update";
    }
    else
    {
        m_logger.LogError() << "PPortMonitoringManagement::NotifysoaRoaDetectState::Update::" << notify.Error().Message();
    }
}
 
void MonitoringManagementSkeletonImpl::UpdatesoaRoaDetectState(const fields::soaRoaDetectState::FieldType& value)
{
    m_soaRoaDetectState = value;
}
 
ara::core::Future<fields::soaRoaDeviceNormal::FieldType> MonitoringManagementSkeletonImpl::GetsoaRoaDeviceNormal()
{
    m_logger.LogVerbose() << "PPortMonitoringManagement::GetsoaRoaDeviceNormal::Requested";
    
    ara::core::Promise<fields::soaRoaDeviceNormal::FieldType> promise;
    
    promise.set_value(m_soaRoaDeviceNormal);
    return promise.get_future();
}
 
void MonitoringManagementSkeletonImpl::NotifysoaRoaDeviceNormal()
{
    auto notify = soaRoaDeviceNormal.Update(m_soaRoaDeviceNormal);
    if (notify.HasValue())
    {
        m_logger.LogVerbose() << "PPortMonitoringManagement::NotifysoaRoaDeviceNormal::Update";
    }
    else
    {
        m_logger.LogError() << "PPortMonitoringManagement::NotifysoaRoaDeviceNormal::Update::" << notify.Error().Message();
    }
}
 
void MonitoringManagementSkeletonImpl::UpdatesoaRoaDeviceNormal(const fields::soaRoaDeviceNormal::FieldType& value)
{
    m_soaRoaDeviceNormal = value;
}
 
ara::core::Future<fields::soaRoaSwVersion::FieldType> MonitoringManagementSkeletonImpl::GetsoaRoaSwVersion()
{
    m_logger.LogVerbose() << "PPortMonitoringManagement::GetsoaRoaSwVersion::Requested";
    
    ara::core::Promise<fields::soaRoaSwVersion::FieldType> promise;
    
    promise.set_value(m_soaRoaSwVersion);
    return promise.get_future();
}
 
void MonitoringManagementSkeletonImpl::NotifysoaRoaSwVersion()
{
    auto notify = soaRoaSwVersion.Update(m_soaRoaSwVersion);
    if (notify.HasValue())
    {
        m_logger.LogVerbose() << "PPortMonitoringManagement::NotifysoaRoaSwVersion::Update";
    }
    else
    {
        m_logger.LogError() << "PPortMonitoringManagement::NotifysoaRoaSwVersion::Update::" << notify.Error().Message();
    }
}
 
void MonitoringManagementSkeletonImpl::UpdatesoaRoaSwVersion(const fields::soaRoaSwVersion::FieldType& value)
{
    m_soaRoaSwVersion = value;
}
 
ara::core::Future<fields::soaWiperDeviceNormal::FieldType> MonitoringManagementSkeletonImpl::GetsoaWiperDeviceNormal()
{
    m_logger.LogVerbose() << "PPortMonitoringManagement::GetsoaWiperDeviceNormal::Requested";
    
    ara::core::Promise<fields::soaWiperDeviceNormal::FieldType> promise;
    
    promise.set_value(m_soaWiperDeviceNormal);
    return promise.get_future();
}
 
void MonitoringManagementSkeletonImpl::NotifysoaWiperDeviceNormal()
{
    auto notify = soaWiperDeviceNormal.Update(m_soaWiperDeviceNormal);
    if (notify.HasValue())
    {
        m_logger.LogVerbose() << "PPortMonitoringManagement::NotifysoaWiperDeviceNormal::Update";
    }
    else
    {
        m_logger.LogError() << "PPortMonitoringManagement::NotifysoaWiperDeviceNormal::Update::" << notify.Error().Message();
    }
}
 
void MonitoringManagementSkeletonImpl::UpdatesoaWiperDeviceNormal(const fields::soaWiperDeviceNormal::FieldType& value)
{
    m_soaWiperDeviceNormal = value;
}
 
ara::core::Future<fields::soaWiperStatus::FieldType> MonitoringManagementSkeletonImpl::GetsoaWiperStatus()
{
    m_logger.LogVerbose() << "PPortMonitoringManagement::GetsoaWiperStatus::Requested";
    
    ara::core::Promise<fields::soaWiperStatus::FieldType> promise;
    
    promise.set_value(m_soaWiperStatus);
    return promise.get_future();
}
 
void MonitoringManagementSkeletonImpl::NotifysoaWiperStatus()
{
    auto notify = soaWiperStatus.Update(m_soaWiperStatus);
    if (notify.HasValue())
    {
        m_logger.LogVerbose() << "PPortMonitoringManagement::NotifysoaWiperStatus::Update";
    }
    else
    {
        m_logger.LogError() << "PPortMonitoringManagement::NotifysoaWiperStatus::Update::" << notify.Error().Message();
    }
}
 
void MonitoringManagementSkeletonImpl::UpdatesoaWiperStatus(const fields::soaWiperStatus::FieldType& value)
{
    m_soaWiperStatus = value;
}
 
ara::core::Future<fields::soaWiperSwVersion::FieldType> MonitoringManagementSkeletonImpl::GetsoaWiperSwVersion()
{
    m_logger.LogVerbose() << "PPortMonitoringManagement::GetsoaWiperSwVersion::Requested";
    
    ara::core::Promise<fields::soaWiperSwVersion::FieldType> promise;
    
    promise.set_value(m_soaWiperSwVersion);
    return promise.get_future();
}
 
void MonitoringManagementSkeletonImpl::NotifysoaWiperSwVersion()
{
    auto notify = soaWiperSwVersion.Update(m_soaWiperSwVersion);
    if (notify.HasValue())
    {
        m_logger.LogVerbose() << "PPortMonitoringManagement::NotifysoaWiperSwVersion::Update";
    }
    else
    {
        m_logger.LogError() << "PPortMonitoringManagement::NotifysoaWiperSwVersion::Update::" << notify.Error().Message();
    }
}
 
void MonitoringManagementSkeletonImpl::UpdatesoaWiperSwVersion(const fields::soaWiperSwVersion::FieldType& value)
{
    m_soaWiperSwVersion = value;
}
 
} /// namespace skeleton
} /// namespace service
} /// namespace monitoring
} /// namespace eevp

namespace monitoringmanager
{
namespace aa
{
namespace port
{
 
PPortMonitoringManagement::PPortMonitoringManagement()
    : m_logger(ara::log::CreateLogger("MONM", "PORT", ara::log::LogLevel::kVerbose))
    , m_running{false}
    , m_DistanceLevelFrontData{0U, 0U, 0U, eevp::pdw::type::Direction::kFront}
    , m_DistanceLevelRearData{0U, 0U, 0U, eevp::pdw::type::Direction::kFront}
    , m_MbTempStatusData{eevp::monitoring::type::MainState::NORMAL, eevp::monitoring::type::MainErrorReason::NO_ERROR}
    , m_eventServiceInfoData{"str_string", "str_string", 0ULL, "str_string"}
    , m_eventUpdatableServiceData{"str_string", "str_string", "str_string"}
    , m_resetUcmCompletedData{false}
{
}
 
PPortMonitoringManagement::~PPortMonitoringManagement()
{
}
 
void PPortMonitoringManagement::Start()
{
    m_logger.LogVerbose() << "PPortMonitoringManagement::Start";
    
    // construct skeleton
    ara::core::InstanceSpecifier specifier{"MonitoringManager/AA/PPortMonitoringManagement"};
    m_interface = std::make_unique<eevp::monitoring::service::skeleton::MonitoringManagementSkeletonImpl>(specifier);
    
    // offer service
    auto offer = m_interface->OfferService();
    if (offer.HasValue())
    {
        m_running = true;
        m_logger.LogVerbose() << "PPortMonitoringManagement::Start::OfferService";
    }
    else
    {
        m_running = false;
        m_logger.LogError() << "PPortMonitoringManagement::Start::OfferService::" << offer.Error().Message();
    }
}
 
void PPortMonitoringManagement::Terminate()
{
    m_logger.LogVerbose() << "PPortMonitoringManagement::Terminate";
    
    // stop port
    m_running = false;
    
    // stop offer service
    m_interface->StopOfferService();
    m_logger.LogVerbose() << "PPortMonitoringManagement::Terminate::StopOfferService";
}
 
void PPortMonitoringManagement::WriteDataDistanceLevelFront(const eevp::monitoring::service::skeleton::events::DistanceLevelFront::SampleType& data)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_DistanceLevelFrontData = data;
}
 
void PPortMonitoringManagement::SendEventDistanceLevelFrontCyclic()
{
    while (m_running)
    {
        {
            std::lock_guard<std::mutex> lock(m_mutex);
            
            auto send = m_interface->DistanceLevelFront.Send(m_DistanceLevelFrontData);
            if (send.HasValue())
            {
                m_logger.LogVerbose() << "PPortMonitoringManagement::SendEventDistanceLevelFrontCyclic::Send";
            }
            else
            {
                m_logger.LogError() << "PPortMonitoringManagement::SendEventDistanceLevelFrontCyclic::Send::" << send.Error().Message();
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void PPortMonitoringManagement::SendEventDistanceLevelFrontTriggered()
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    auto send = m_interface->DistanceLevelFront.Send(m_DistanceLevelFrontData);
    if (send.HasValue())
    {
        m_logger.LogVerbose() << "PPortMonitoringManagement::SendEventDistanceLevelFrontTriggered::Send";
    }
    else
    {
        m_logger.LogError() << "PPortMonitoringManagement::SendEventDistanceLevelFrontTriggered::Send::" << send.Error().Message();
    }
}
 
void PPortMonitoringManagement::SendEventDistanceLevelFrontTriggered(const eevp::monitoring::service::skeleton::events::DistanceLevelFront::SampleType& data)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_DistanceLevelFrontData = data;
    auto send = m_interface->DistanceLevelFront.Send(m_DistanceLevelFrontData);
    if (send.HasValue())
    {
        m_logger.LogVerbose() << "PPortMonitoringManagement::SendEventDistanceLevelFrontTriggered::Send";
    }
    else
    {
        m_logger.LogError() << "PPortMonitoringManagement::SendEventDistanceLevelFrontTriggered::Send::" << send.Error().Message();
    }
}
 
void PPortMonitoringManagement::WriteDataDistanceLevelRear(const eevp::monitoring::service::skeleton::events::DistanceLevelRear::SampleType& data)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_DistanceLevelRearData = data;
}
 
void PPortMonitoringManagement::SendEventDistanceLevelRearCyclic()
{
    while (m_running)
    {
        {
            std::lock_guard<std::mutex> lock(m_mutex);
            
            auto send = m_interface->DistanceLevelRear.Send(m_DistanceLevelRearData);
            if (send.HasValue())
            {
                m_logger.LogVerbose() << "PPortMonitoringManagement::SendEventDistanceLevelRearCyclic::Send";
            }
            else
            {
                m_logger.LogError() << "PPortMonitoringManagement::SendEventDistanceLevelRearCyclic::Send::" << send.Error().Message();
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void PPortMonitoringManagement::SendEventDistanceLevelRearTriggered()
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    auto send = m_interface->DistanceLevelRear.Send(m_DistanceLevelRearData);
    if (send.HasValue())
    {
        m_logger.LogVerbose() << "PPortMonitoringManagement::SendEventDistanceLevelRearTriggered::Send";
    }
    else
    {
        m_logger.LogError() << "PPortMonitoringManagement::SendEventDistanceLevelRearTriggered::Send::" << send.Error().Message();
    }
}
 
void PPortMonitoringManagement::SendEventDistanceLevelRearTriggered(const eevp::monitoring::service::skeleton::events::DistanceLevelRear::SampleType& data)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_DistanceLevelRearData = data;
    auto send = m_interface->DistanceLevelRear.Send(m_DistanceLevelRearData);
    if (send.HasValue())
    {
        m_logger.LogVerbose() << "PPortMonitoringManagement::SendEventDistanceLevelRearTriggered::Send";
    }
    else
    {
        m_logger.LogError() << "PPortMonitoringManagement::SendEventDistanceLevelRearTriggered::Send::" << send.Error().Message();
    }
}
 
void PPortMonitoringManagement::WriteDataMbTempStatus(const eevp::monitoring::service::skeleton::events::MbTempStatus::SampleType& data)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_MbTempStatusData = data;
}
 
void PPortMonitoringManagement::SendEventMbTempStatusCyclic()
{
    while (m_running)
    {
        {
            std::lock_guard<std::mutex> lock(m_mutex);
            
            auto send = m_interface->MbTempStatus.Send(m_MbTempStatusData);
            if (send.HasValue())
            {
                m_logger.LogVerbose() << "PPortMonitoringManagement::SendEventMbTempStatusCyclic::Send";
            }
            else
            {
                m_logger.LogError() << "PPortMonitoringManagement::SendEventMbTempStatusCyclic::Send::" << send.Error().Message();
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void PPortMonitoringManagement::SendEventMbTempStatusTriggered()
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    auto send = m_interface->MbTempStatus.Send(m_MbTempStatusData);
    if (send.HasValue())
    {
        m_logger.LogVerbose() << "PPortMonitoringManagement::SendEventMbTempStatusTriggered::Send";
    }
    else
    {
        m_logger.LogError() << "PPortMonitoringManagement::SendEventMbTempStatusTriggered::Send::" << send.Error().Message();
    }
}
 
void PPortMonitoringManagement::SendEventMbTempStatusTriggered(const eevp::monitoring::service::skeleton::events::MbTempStatus::SampleType& data)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_MbTempStatusData = data;
    auto send = m_interface->MbTempStatus.Send(m_MbTempStatusData);
    if (send.HasValue())
    {
        m_logger.LogVerbose() << "PPortMonitoringManagement::SendEventMbTempStatusTriggered::Send";
    }
    else
    {
        m_logger.LogError() << "PPortMonitoringManagement::SendEventMbTempStatusTriggered::Send::" << send.Error().Message();
    }
}
 
void PPortMonitoringManagement::WriteDataeventServiceInfo(const eevp::monitoring::service::skeleton::events::eventServiceInfo::SampleType& data)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_eventServiceInfoData = data;
}
 
void PPortMonitoringManagement::SendEventeventServiceInfoCyclic()
{
    while (m_running)
    {
        {
            std::lock_guard<std::mutex> lock(m_mutex);
            
            auto send = m_interface->eventServiceInfo.Send(m_eventServiceInfoData);
            if (send.HasValue())
            {
                m_logger.LogVerbose() << "PPortMonitoringManagement::SendEventeventServiceInfoCyclic::Send";
            }
            else
            {
                m_logger.LogError() << "PPortMonitoringManagement::SendEventeventServiceInfoCyclic::Send::" << send.Error().Message();
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void PPortMonitoringManagement::SendEventeventServiceInfoTriggered()
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    auto send = m_interface->eventServiceInfo.Send(m_eventServiceInfoData);
    if (send.HasValue())
    {
        m_logger.LogVerbose() << "PPortMonitoringManagement::SendEventeventServiceInfoTriggered::Send";
    }
    else
    {
        m_logger.LogError() << "PPortMonitoringManagement::SendEventeventServiceInfoTriggered::Send::" << send.Error().Message();
    }
}
 
void PPortMonitoringManagement::SendEventeventServiceInfoTriggered(const eevp::monitoring::service::skeleton::events::eventServiceInfo::SampleType& data)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_eventServiceInfoData = data;
    auto send = m_interface->eventServiceInfo.Send(m_eventServiceInfoData);
    if (send.HasValue())
    {
        m_logger.LogVerbose() << "PPortMonitoringManagement::SendEventeventServiceInfoTriggered::Send";
    }
    else
    {
        m_logger.LogError() << "PPortMonitoringManagement::SendEventeventServiceInfoTriggered::Send::" << send.Error().Message();
    }
}
 
void PPortMonitoringManagement::WriteDataeventUpdatableService(const eevp::monitoring::service::skeleton::events::eventUpdatableService::SampleType& data)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_eventUpdatableServiceData = data;
}
 
void PPortMonitoringManagement::SendEventeventUpdatableServiceCyclic()
{
    while (m_running)
    {
        {
            std::lock_guard<std::mutex> lock(m_mutex);
            
            auto send = m_interface->eventUpdatableService.Send(m_eventUpdatableServiceData);
            if (send.HasValue())
            {
                m_logger.LogVerbose() << "PPortMonitoringManagement::SendEventeventUpdatableServiceCyclic::Send";
            }
            else
            {
                m_logger.LogError() << "PPortMonitoringManagement::SendEventeventUpdatableServiceCyclic::Send::" << send.Error().Message();
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void PPortMonitoringManagement::SendEventeventUpdatableServiceTriggered()
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    auto send = m_interface->eventUpdatableService.Send(m_eventUpdatableServiceData);
    if (send.HasValue())
    {
        m_logger.LogVerbose() << "PPortMonitoringManagement::SendEventeventUpdatableServiceTriggered::Send";
    }
    else
    {
        m_logger.LogError() << "PPortMonitoringManagement::SendEventeventUpdatableServiceTriggered::Send::" << send.Error().Message();
    }
}
 
void PPortMonitoringManagement::SendEventeventUpdatableServiceTriggered(const eevp::monitoring::service::skeleton::events::eventUpdatableService::SampleType& data)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_eventUpdatableServiceData = data;
    auto send = m_interface->eventUpdatableService.Send(m_eventUpdatableServiceData);
    if (send.HasValue())
    {
        m_logger.LogVerbose() << "PPortMonitoringManagement::SendEventeventUpdatableServiceTriggered::Send";
    }
    else
    {
        m_logger.LogError() << "PPortMonitoringManagement::SendEventeventUpdatableServiceTriggered::Send::" << send.Error().Message();
    }
}
 
void PPortMonitoringManagement::WriteDataresetUcmCompleted(const eevp::monitoring::service::skeleton::events::resetUcmCompleted::SampleType& data)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_resetUcmCompletedData = data;
}
 
void PPortMonitoringManagement::SendEventresetUcmCompletedCyclic()
{
    while (m_running)
    {
        {
            std::lock_guard<std::mutex> lock(m_mutex);
            
            auto send = m_interface->resetUcmCompleted.Send(m_resetUcmCompletedData);
            if (send.HasValue())
            {
                m_logger.LogVerbose() << "PPortMonitoringManagement::SendEventresetUcmCompletedCyclic::Send";
            }
            else
            {
                m_logger.LogError() << "PPortMonitoringManagement::SendEventresetUcmCompletedCyclic::Send::" << send.Error().Message();
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void PPortMonitoringManagement::SendEventresetUcmCompletedTriggered()
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    auto send = m_interface->resetUcmCompleted.Send(m_resetUcmCompletedData);
    if (send.HasValue())
    {
        m_logger.LogVerbose() << "PPortMonitoringManagement::SendEventresetUcmCompletedTriggered::Send";
    }
    else
    {
        m_logger.LogError() << "PPortMonitoringManagement::SendEventresetUcmCompletedTriggered::Send::" << send.Error().Message();
    }
}
 
void PPortMonitoringManagement::SendEventresetUcmCompletedTriggered(const eevp::monitoring::service::skeleton::events::resetUcmCompleted::SampleType& data)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_resetUcmCompletedData = data;
    auto send = m_interface->resetUcmCompleted.Send(m_resetUcmCompletedData);
    if (send.HasValue())
    {
        m_logger.LogVerbose() << "PPortMonitoringManagement::SendEventresetUcmCompletedTriggered::Send";
    }
    else
    {
        m_logger.LogError() << "PPortMonitoringManagement::SendEventresetUcmCompletedTriggered::Send::" << send.Error().Message();
    }
}
 
void PPortMonitoringManagement::WriteValueUssStatusFront(const eevp::monitoring::service::skeleton::fields::UssStatusFront::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdateUssStatusFront(value);
}
 
void PPortMonitoringManagement::NotifyFieldUssStatusFrontCyclic()
{
    while (m_running)
    {
        {
            std::lock_guard<std::mutex> lock(m_mutex);
            
            m_interface->NotifyUssStatusFront();
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void PPortMonitoringManagement::NotifyFieldUssStatusFrontTriggered()
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->NotifyUssStatusFront();
}
 
void PPortMonitoringManagement::NotifyFieldUssStatusFrontTriggered(const eevp::monitoring::service::skeleton::fields::UssStatusFront::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdateUssStatusFront(value);
    m_interface->NotifyUssStatusFront();
}
 
void PPortMonitoringManagement::WriteValueUssStatusRear(const eevp::monitoring::service::skeleton::fields::UssStatusRear::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdateUssStatusRear(value);
}
 
void PPortMonitoringManagement::NotifyFieldUssStatusRearCyclic()
{
    while (m_running)
    {
        {
            std::lock_guard<std::mutex> lock(m_mutex);
            
            m_interface->NotifyUssStatusRear();
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void PPortMonitoringManagement::NotifyFieldUssStatusRearTriggered()
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->NotifyUssStatusRear();
}
 
void PPortMonitoringManagement::NotifyFieldUssStatusRearTriggered(const eevp::monitoring::service::skeleton::fields::UssStatusRear::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdateUssStatusRear(value);
    m_interface->NotifyUssStatusRear();
}
 
void PPortMonitoringManagement::WriteValuesoaDmsDeviceNormal(const eevp::monitoring::service::skeleton::fields::soaDmsDeviceNormal::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdatesoaDmsDeviceNormal(value);
}
 
void PPortMonitoringManagement::NotifyFieldsoaDmsDeviceNormalCyclic()
{
    while (m_running)
    {
        {
            std::lock_guard<std::mutex> lock(m_mutex);
            
            m_interface->NotifysoaDmsDeviceNormal();
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void PPortMonitoringManagement::NotifyFieldsoaDmsDeviceNormalTriggered()
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->NotifysoaDmsDeviceNormal();
}
 
void PPortMonitoringManagement::NotifyFieldsoaDmsDeviceNormalTriggered(const eevp::monitoring::service::skeleton::fields::soaDmsDeviceNormal::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdatesoaDmsDeviceNormal(value);
    m_interface->NotifysoaDmsDeviceNormal();
}
 
void PPortMonitoringManagement::WriteValuesoaDmsSwVersion(const eevp::monitoring::service::skeleton::fields::soaDmsSwVersion::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdatesoaDmsSwVersion(value);
}
 
void PPortMonitoringManagement::NotifyFieldsoaDmsSwVersionCyclic()
{
    while (m_running)
    {
        {
            std::lock_guard<std::mutex> lock(m_mutex);
            
            m_interface->NotifysoaDmsSwVersion();
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void PPortMonitoringManagement::NotifyFieldsoaDmsSwVersionTriggered()
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->NotifysoaDmsSwVersion();
}
 
void PPortMonitoringManagement::NotifyFieldsoaDmsSwVersionTriggered(const eevp::monitoring::service::skeleton::fields::soaDmsSwVersion::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdatesoaDmsSwVersion(value);
    m_interface->NotifysoaDmsSwVersion();
}
 
void PPortMonitoringManagement::WriteValuesoaDrvSeatDeviceNormal(const eevp::monitoring::service::skeleton::fields::soaDrvSeatDeviceNormal::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdatesoaDrvSeatDeviceNormal(value);
}
 
void PPortMonitoringManagement::NotifyFieldsoaDrvSeatDeviceNormalCyclic()
{
    while (m_running)
    {
        {
            std::lock_guard<std::mutex> lock(m_mutex);
            
            m_interface->NotifysoaDrvSeatDeviceNormal();
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void PPortMonitoringManagement::NotifyFieldsoaDrvSeatDeviceNormalTriggered()
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->NotifysoaDrvSeatDeviceNormal();
}
 
void PPortMonitoringManagement::NotifyFieldsoaDrvSeatDeviceNormalTriggered(const eevp::monitoring::service::skeleton::fields::soaDrvSeatDeviceNormal::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdatesoaDrvSeatDeviceNormal(value);
    m_interface->NotifysoaDrvSeatDeviceNormal();
}
 
void PPortMonitoringManagement::WriteValuesoaDrvSeatMotorDirection(const eevp::monitoring::service::skeleton::fields::soaDrvSeatMotorDirection::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdatesoaDrvSeatMotorDirection(value);
}
 
void PPortMonitoringManagement::NotifyFieldsoaDrvSeatMotorDirectionCyclic()
{
    while (m_running)
    {
        {
            std::lock_guard<std::mutex> lock(m_mutex);
            
            m_interface->NotifysoaDrvSeatMotorDirection();
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void PPortMonitoringManagement::NotifyFieldsoaDrvSeatMotorDirectionTriggered()
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->NotifysoaDrvSeatMotorDirection();
}
 
void PPortMonitoringManagement::NotifyFieldsoaDrvSeatMotorDirectionTriggered(const eevp::monitoring::service::skeleton::fields::soaDrvSeatMotorDirection::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdatesoaDrvSeatMotorDirection(value);
    m_interface->NotifysoaDrvSeatMotorDirection();
}
 
void PPortMonitoringManagement::WriteValuesoaDrvSeatMotorPosition(const eevp::monitoring::service::skeleton::fields::soaDrvSeatMotorPosition::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdatesoaDrvSeatMotorPosition(value);
}
 
void PPortMonitoringManagement::NotifyFieldsoaDrvSeatMotorPositionCyclic()
{
    while (m_running)
    {
        {
            std::lock_guard<std::mutex> lock(m_mutex);
            
            m_interface->NotifysoaDrvSeatMotorPosition();
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void PPortMonitoringManagement::NotifyFieldsoaDrvSeatMotorPositionTriggered()
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->NotifysoaDrvSeatMotorPosition();
}
 
void PPortMonitoringManagement::NotifyFieldsoaDrvSeatMotorPositionTriggered(const eevp::monitoring::service::skeleton::fields::soaDrvSeatMotorPosition::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdatesoaDrvSeatMotorPosition(value);
    m_interface->NotifysoaDrvSeatMotorPosition();
}
 
void PPortMonitoringManagement::WriteValuesoaDrvSeatSwVersion(const eevp::monitoring::service::skeleton::fields::soaDrvSeatSwVersion::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdatesoaDrvSeatSwVersion(value);
}
 
void PPortMonitoringManagement::NotifyFieldsoaDrvSeatSwVersionCyclic()
{
    while (m_running)
    {
        {
            std::lock_guard<std::mutex> lock(m_mutex);
            
            m_interface->NotifysoaDrvSeatSwVersion();
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void PPortMonitoringManagement::NotifyFieldsoaDrvSeatSwVersionTriggered()
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->NotifysoaDrvSeatSwVersion();
}
 
void PPortMonitoringManagement::NotifyFieldsoaDrvSeatSwVersionTriggered(const eevp::monitoring::service::skeleton::fields::soaDrvSeatSwVersion::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdatesoaDrvSeatSwVersion(value);
    m_interface->NotifysoaDrvSeatSwVersion();
}
 
void PPortMonitoringManagement::WriteValuesoaFilmDeviceNormal(const eevp::monitoring::service::skeleton::fields::soaFilmDeviceNormal::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdatesoaFilmDeviceNormal(value);
}
 
void PPortMonitoringManagement::NotifyFieldsoaFilmDeviceNormalCyclic()
{
    while (m_running)
    {
        {
            std::lock_guard<std::mutex> lock(m_mutex);
            
            m_interface->NotifysoaFilmDeviceNormal();
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void PPortMonitoringManagement::NotifyFieldsoaFilmDeviceNormalTriggered()
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->NotifysoaFilmDeviceNormal();
}
 
void PPortMonitoringManagement::NotifyFieldsoaFilmDeviceNormalTriggered(const eevp::monitoring::service::skeleton::fields::soaFilmDeviceNormal::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdatesoaFilmDeviceNormal(value);
    m_interface->NotifysoaFilmDeviceNormal();
}
 
void PPortMonitoringManagement::WriteValuesoaFilmSwVersion(const eevp::monitoring::service::skeleton::fields::soaFilmSwVersion::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdatesoaFilmSwVersion(value);
}
 
void PPortMonitoringManagement::NotifyFieldsoaFilmSwVersionCyclic()
{
    while (m_running)
    {
        {
            std::lock_guard<std::mutex> lock(m_mutex);
            
            m_interface->NotifysoaFilmSwVersion();
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void PPortMonitoringManagement::NotifyFieldsoaFilmSwVersionTriggered()
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->NotifysoaFilmSwVersion();
}
 
void PPortMonitoringManagement::NotifyFieldsoaFilmSwVersionTriggered(const eevp::monitoring::service::skeleton::fields::soaFilmSwVersion::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdatesoaFilmSwVersion(value);
    m_interface->NotifysoaFilmSwVersion();
}
 
void PPortMonitoringManagement::WriteValuesoaHvacDeviceNormal(const eevp::monitoring::service::skeleton::fields::soaHvacDeviceNormal::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdatesoaHvacDeviceNormal(value);
}
 
void PPortMonitoringManagement::NotifyFieldsoaHvacDeviceNormalCyclic()
{
    while (m_running)
    {
        {
            std::lock_guard<std::mutex> lock(m_mutex);
            
            m_interface->NotifysoaHvacDeviceNormal();
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void PPortMonitoringManagement::NotifyFieldsoaHvacDeviceNormalTriggered()
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->NotifysoaHvacDeviceNormal();
}
 
void PPortMonitoringManagement::NotifyFieldsoaHvacDeviceNormalTriggered(const eevp::monitoring::service::skeleton::fields::soaHvacDeviceNormal::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdatesoaHvacDeviceNormal(value);
    m_interface->NotifysoaHvacDeviceNormal();
}
 
void PPortMonitoringManagement::WriteValuesoaHvacSwVersion(const eevp::monitoring::service::skeleton::fields::soaHvacSwVersion::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdatesoaHvacSwVersion(value);
}
 
void PPortMonitoringManagement::NotifyFieldsoaHvacSwVersionCyclic()
{
    while (m_running)
    {
        {
            std::lock_guard<std::mutex> lock(m_mutex);
            
            m_interface->NotifysoaHvacSwVersion();
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void PPortMonitoringManagement::NotifyFieldsoaHvacSwVersionTriggered()
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->NotifysoaHvacSwVersion();
}
 
void PPortMonitoringManagement::NotifyFieldsoaHvacSwVersionTriggered(const eevp::monitoring::service::skeleton::fields::soaHvacSwVersion::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdatesoaHvacSwVersion(value);
    m_interface->NotifysoaHvacSwVersion();
}
 
void PPortMonitoringManagement::WriteValuesoaMlmStatus(const eevp::monitoring::service::skeleton::fields::soaMlmStatus::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdatesoaMlmStatus(value);
}
 
void PPortMonitoringManagement::NotifyFieldsoaMlmStatusCyclic()
{
    while (m_running)
    {
        {
            std::lock_guard<std::mutex> lock(m_mutex);
            
            m_interface->NotifysoaMlmStatus();
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void PPortMonitoringManagement::NotifyFieldsoaMlmStatusTriggered()
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->NotifysoaMlmStatus();
}
 
void PPortMonitoringManagement::NotifyFieldsoaMlmStatusTriggered(const eevp::monitoring::service::skeleton::fields::soaMlmStatus::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdatesoaMlmStatus(value);
    m_interface->NotifysoaMlmStatus();
}
 
void PPortMonitoringManagement::WriteValuesoaMlmSwVersion(const eevp::monitoring::service::skeleton::fields::soaMlmSwVersion::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdatesoaMlmSwVersion(value);
}
 
void PPortMonitoringManagement::NotifyFieldsoaMlmSwVersionCyclic()
{
    while (m_running)
    {
        {
            std::lock_guard<std::mutex> lock(m_mutex);
            
            m_interface->NotifysoaMlmSwVersion();
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void PPortMonitoringManagement::NotifyFieldsoaMlmSwVersionTriggered()
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->NotifysoaMlmSwVersion();
}
 
void PPortMonitoringManagement::NotifyFieldsoaMlmSwVersionTriggered(const eevp::monitoring::service::skeleton::fields::soaMlmSwVersion::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdatesoaMlmSwVersion(value);
    m_interface->NotifysoaMlmSwVersion();
}
 
void PPortMonitoringManagement::WriteValuesoaPowerDeviceNormal(const eevp::monitoring::service::skeleton::fields::soaPowerDeviceNormal::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdatesoaPowerDeviceNormal(value);
}
 
void PPortMonitoringManagement::NotifyFieldsoaPowerDeviceNormalCyclic()
{
    while (m_running)
    {
        {
            std::lock_guard<std::mutex> lock(m_mutex);
            
            m_interface->NotifysoaPowerDeviceNormal();
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void PPortMonitoringManagement::NotifyFieldsoaPowerDeviceNormalTriggered()
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->NotifysoaPowerDeviceNormal();
}
 
void PPortMonitoringManagement::NotifyFieldsoaPowerDeviceNormalTriggered(const eevp::monitoring::service::skeleton::fields::soaPowerDeviceNormal::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdatesoaPowerDeviceNormal(value);
    m_interface->NotifysoaPowerDeviceNormal();
}
 
void PPortMonitoringManagement::WriteValuesoaPowerSwVersion(const eevp::monitoring::service::skeleton::fields::soaPowerSwVersion::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdatesoaPowerSwVersion(value);
}
 
void PPortMonitoringManagement::NotifyFieldsoaPowerSwVersionCyclic()
{
    while (m_running)
    {
        {
            std::lock_guard<std::mutex> lock(m_mutex);
            
            m_interface->NotifysoaPowerSwVersion();
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void PPortMonitoringManagement::NotifyFieldsoaPowerSwVersionTriggered()
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->NotifysoaPowerSwVersion();
}
 
void PPortMonitoringManagement::NotifyFieldsoaPowerSwVersionTriggered(const eevp::monitoring::service::skeleton::fields::soaPowerSwVersion::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdatesoaPowerSwVersion(value);
    m_interface->NotifysoaPowerSwVersion();
}
 
void PPortMonitoringManagement::WriteValuesoaRctnStatus(const eevp::monitoring::service::skeleton::fields::soaRctnStatus::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdatesoaRctnStatus(value);
}
 
void PPortMonitoringManagement::NotifyFieldsoaRctnStatusCyclic()
{
    while (m_running)
    {
        {
            std::lock_guard<std::mutex> lock(m_mutex);
            
            m_interface->NotifysoaRctnStatus();
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void PPortMonitoringManagement::NotifyFieldsoaRctnStatusTriggered()
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->NotifysoaRctnStatus();
}
 
void PPortMonitoringManagement::NotifyFieldsoaRctnStatusTriggered(const eevp::monitoring::service::skeleton::fields::soaRctnStatus::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdatesoaRctnStatus(value);
    m_interface->NotifysoaRctnStatus();
}
 
void PPortMonitoringManagement::WriteValuesoaRctnSwVersion(const eevp::monitoring::service::skeleton::fields::soaRctnSwVersion::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdatesoaRctnSwVersion(value);
}
 
void PPortMonitoringManagement::NotifyFieldsoaRctnSwVersionCyclic()
{
    while (m_running)
    {
        {
            std::lock_guard<std::mutex> lock(m_mutex);
            
            m_interface->NotifysoaRctnSwVersion();
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void PPortMonitoringManagement::NotifyFieldsoaRctnSwVersionTriggered()
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->NotifysoaRctnSwVersion();
}
 
void PPortMonitoringManagement::NotifyFieldsoaRctnSwVersionTriggered(const eevp::monitoring::service::skeleton::fields::soaRctnSwVersion::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdatesoaRctnSwVersion(value);
    m_interface->NotifysoaRctnSwVersion();
}
 
void PPortMonitoringManagement::WriteValuesoaRoaDetectState(const eevp::monitoring::service::skeleton::fields::soaRoaDetectState::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdatesoaRoaDetectState(value);
}
 
void PPortMonitoringManagement::NotifyFieldsoaRoaDetectStateCyclic()
{
    while (m_running)
    {
        {
            std::lock_guard<std::mutex> lock(m_mutex);
            
            m_interface->NotifysoaRoaDetectState();
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void PPortMonitoringManagement::NotifyFieldsoaRoaDetectStateTriggered()
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->NotifysoaRoaDetectState();
}
 
void PPortMonitoringManagement::NotifyFieldsoaRoaDetectStateTriggered(const eevp::monitoring::service::skeleton::fields::soaRoaDetectState::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdatesoaRoaDetectState(value);
    m_interface->NotifysoaRoaDetectState();
}
 
void PPortMonitoringManagement::WriteValuesoaRoaDeviceNormal(const eevp::monitoring::service::skeleton::fields::soaRoaDeviceNormal::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdatesoaRoaDeviceNormal(value);
}
 
void PPortMonitoringManagement::NotifyFieldsoaRoaDeviceNormalCyclic()
{
    while (m_running)
    {
        {
            std::lock_guard<std::mutex> lock(m_mutex);
            
            m_interface->NotifysoaRoaDeviceNormal();
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void PPortMonitoringManagement::NotifyFieldsoaRoaDeviceNormalTriggered()
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->NotifysoaRoaDeviceNormal();
}
 
void PPortMonitoringManagement::NotifyFieldsoaRoaDeviceNormalTriggered(const eevp::monitoring::service::skeleton::fields::soaRoaDeviceNormal::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdatesoaRoaDeviceNormal(value);
    m_interface->NotifysoaRoaDeviceNormal();
}
 
void PPortMonitoringManagement::WriteValuesoaRoaSwVersion(const eevp::monitoring::service::skeleton::fields::soaRoaSwVersion::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdatesoaRoaSwVersion(value);
}
 
void PPortMonitoringManagement::NotifyFieldsoaRoaSwVersionCyclic()
{
    while (m_running)
    {
        {
            std::lock_guard<std::mutex> lock(m_mutex);
            
            m_interface->NotifysoaRoaSwVersion();
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void PPortMonitoringManagement::NotifyFieldsoaRoaSwVersionTriggered()
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->NotifysoaRoaSwVersion();
}
 
void PPortMonitoringManagement::NotifyFieldsoaRoaSwVersionTriggered(const eevp::monitoring::service::skeleton::fields::soaRoaSwVersion::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdatesoaRoaSwVersion(value);
    m_interface->NotifysoaRoaSwVersion();
}
 
void PPortMonitoringManagement::WriteValuesoaWiperDeviceNormal(const eevp::monitoring::service::skeleton::fields::soaWiperDeviceNormal::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdatesoaWiperDeviceNormal(value);
}
 
void PPortMonitoringManagement::NotifyFieldsoaWiperDeviceNormalCyclic()
{
    while (m_running)
    {
        {
            std::lock_guard<std::mutex> lock(m_mutex);
            
            m_interface->NotifysoaWiperDeviceNormal();
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void PPortMonitoringManagement::NotifyFieldsoaWiperDeviceNormalTriggered()
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->NotifysoaWiperDeviceNormal();
}
 
void PPortMonitoringManagement::NotifyFieldsoaWiperDeviceNormalTriggered(const eevp::monitoring::service::skeleton::fields::soaWiperDeviceNormal::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdatesoaWiperDeviceNormal(value);
    m_interface->NotifysoaWiperDeviceNormal();
}
 
void PPortMonitoringManagement::WriteValuesoaWiperStatus(const eevp::monitoring::service::skeleton::fields::soaWiperStatus::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdatesoaWiperStatus(value);
}
 
void PPortMonitoringManagement::NotifyFieldsoaWiperStatusCyclic()
{
    while (m_running)
    {
        {
            std::lock_guard<std::mutex> lock(m_mutex);
            
            m_interface->NotifysoaWiperStatus();
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void PPortMonitoringManagement::NotifyFieldsoaWiperStatusTriggered()
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->NotifysoaWiperStatus();
}
 
void PPortMonitoringManagement::NotifyFieldsoaWiperStatusTriggered(const eevp::monitoring::service::skeleton::fields::soaWiperStatus::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdatesoaWiperStatus(value);
    m_interface->NotifysoaWiperStatus();
}
 
void PPortMonitoringManagement::WriteValuesoaWiperSwVersion(const eevp::monitoring::service::skeleton::fields::soaWiperSwVersion::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdatesoaWiperSwVersion(value);
}
 
void PPortMonitoringManagement::NotifyFieldsoaWiperSwVersionCyclic()
{
    while (m_running)
    {
        {
            std::lock_guard<std::mutex> lock(m_mutex);
            
            m_interface->NotifysoaWiperSwVersion();
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void PPortMonitoringManagement::NotifyFieldsoaWiperSwVersionTriggered()
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->NotifysoaWiperSwVersion();
}
 
void PPortMonitoringManagement::NotifyFieldsoaWiperSwVersionTriggered(const eevp::monitoring::service::skeleton::fields::soaWiperSwVersion::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdatesoaWiperSwVersion(value);
    m_interface->NotifysoaWiperSwVersion();
}
 
} /// namespace port
} /// namespace aa
} /// namespace monitoringmanager
 
/// EOF