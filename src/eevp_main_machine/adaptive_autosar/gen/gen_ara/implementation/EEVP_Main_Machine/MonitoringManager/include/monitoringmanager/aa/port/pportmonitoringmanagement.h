///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : pportmonitoringmanagement.h
/// SOFTWARE COMPONENT NAME           : PPortMonitoringManagement
/// GENERATED DATE                    : 2025-08-30 10:53:23
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef PARA_AA_GEN_SOFTWARE_COMPONENT_PPORT_MONITORINGMANAGER_AA_PPORTMONITORINGMANAGEMENT_H
#define PARA_AA_GEN_SOFTWARE_COMPONENT_PPORT_MONITORINGMANAGER_AA_PPORTMONITORINGMANAGEMENT_H
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// INCLUSION HEADER FILES
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "eevp/monitoring/service/monitoringmanagement_skeleton.h"
 
#include "ara/log/logger.h"
 
#include <mutex>
#include <thread>
 
namespace eevp
{
namespace monitoring
{
namespace service
{
namespace skeleton
{
 
class MonitoringManagementSkeletonImpl : public MonitoringManagementSkeleton
{
public:
    /// @brief Constructor
    MonitoringManagementSkeletonImpl(ara::core::InstanceSpecifier instanceSpec, ara::com::MethodCallProcessingMode mode = ara::com::MethodCallProcessingMode::kEvent);
    
    /// @brief Request with Response method, RequestMlmSetRgbColor
    ara::core::Future<MonitoringManagementSkeleton::RequestMlmSetRgbColorOutput> RequestMlmSetRgbColor(const std::uint8_t& colorTableIndex) override;
    
    /// @brief Request with Response method, RequestMoveDrvSeatHeight
    ara::core::Future<MonitoringManagementSkeleton::RequestMoveDrvSeatHeightOutput> RequestMoveDrvSeatHeight(const eevp::control::SoaSeatHeightDirection& dir) override;
    
    /// @brief Request with Response method, RequestMoveDrvSeatRecline
    ara::core::Future<MonitoringManagementSkeleton::RequestMoveDrvSeatReclineOutput> RequestMoveDrvSeatRecline(const eevp::control::SoaSeatReclineDirection& dir) override;
    
    /// @brief Request with Response method, RequestMoveDrvSeatSlide
    ara::core::Future<MonitoringManagementSkeleton::RequestMoveDrvSeatSlideOutput> RequestMoveDrvSeatSlide(const eevp::control::SoaSeatSlideDirection& dir) override;
    
    /// @brief Request with Response method, RequestMoveDrvSeatTilt
    ara::core::Future<MonitoringManagementSkeleton::RequestMoveDrvSeatTiltOutput> RequestMoveDrvSeatTilt(const eevp::control::SoaSeatTiltDirection& dir) override;
    
    /// @brief Request with Response method, RequestRearCurtainOperation
    ara::core::Future<MonitoringManagementSkeleton::RequestRearCurtainOperationOutput> RequestRearCurtainOperation(const eevp::control::SoaRctnMotorDir& motorDir) override;
    
    /// @brief Request with Response method, RequestRearCurtainPosition
    ara::core::Future<MonitoringManagementSkeleton::RequestRearCurtainPositionOutput> RequestRearCurtainPosition(const std::uint8_t& posPercentage) override;
    
    /// @brief Request with Response method, RequestWiperOperation
    ara::core::Future<MonitoringManagementSkeleton::RequestWiperOperationOutput> RequestWiperOperation(const eevp::control::SoaWiperMode& mode) override;
    
    /// @brief Request with Response method, SetWiperAutoSpeed
    ara::core::Future<MonitoringManagementSkeleton::SetWiperAutoSpeedOutput> SetWiperAutoSpeed(const bool& isAutoSpeed) override;
    
    /// @brief Request with Response method, requestAppInstall
    ara::core::Future<MonitoringManagementSkeleton::requestAppInstallOutput> requestAppInstall(const eevp::type::String& controllerServiceName) override;
    
    /// @brief Request with Response method, requestAppUpdate
    ara::core::Future<MonitoringManagementSkeleton::requestAppUpdateOutput> requestAppUpdate(const eevp::type::String& controllerServiceName) override;
    
    /// @brief Request with Response method, requestControllerServiceInfo
    ara::core::Future<MonitoringManagementSkeleton::requestControllerServiceInfoOutput> requestControllerServiceInfo(const eevp::type::String& controllerServiceName) override;
    
    /// @brief Request with Response method, resetUcmTest
    ara::core::Future<MonitoringManagementSkeleton::resetUcmTestOutput> resetUcmTest() override;
    
    /// @brief Getter for field, UssStatusFront
    ara::core::Future<fields::UssStatusFront::FieldType> GetUssStatusFront();
    
    /// @brief Notifier for field, UssStatusFront
    void NotifyUssStatusFront();
    
    /// @brief Update field value by software component, UssStatusFront
    void UpdateUssStatusFront(const fields::UssStatusFront::FieldType& value);
    
    /// @brief Getter for field, UssStatusRear
    ara::core::Future<fields::UssStatusRear::FieldType> GetUssStatusRear();
    
    /// @brief Notifier for field, UssStatusRear
    void NotifyUssStatusRear();
    
    /// @brief Update field value by software component, UssStatusRear
    void UpdateUssStatusRear(const fields::UssStatusRear::FieldType& value);
    
    /// @brief Getter for field, soaDmsDeviceNormal
    ara::core::Future<fields::soaDmsDeviceNormal::FieldType> GetsoaDmsDeviceNormal();
    
    /// @brief Notifier for field, soaDmsDeviceNormal
    void NotifysoaDmsDeviceNormal();
    
    /// @brief Update field value by software component, soaDmsDeviceNormal
    void UpdatesoaDmsDeviceNormal(const fields::soaDmsDeviceNormal::FieldType& value);
    
    /// @brief Getter for field, soaDmsSwVersion
    ara::core::Future<fields::soaDmsSwVersion::FieldType> GetsoaDmsSwVersion();
    
    /// @brief Notifier for field, soaDmsSwVersion
    void NotifysoaDmsSwVersion();
    
    /// @brief Update field value by software component, soaDmsSwVersion
    void UpdatesoaDmsSwVersion(const fields::soaDmsSwVersion::FieldType& value);
    
    /// @brief Getter for field, soaDrvSeatDeviceNormal
    ara::core::Future<fields::soaDrvSeatDeviceNormal::FieldType> GetsoaDrvSeatDeviceNormal();
    
    /// @brief Notifier for field, soaDrvSeatDeviceNormal
    void NotifysoaDrvSeatDeviceNormal();
    
    /// @brief Update field value by software component, soaDrvSeatDeviceNormal
    void UpdatesoaDrvSeatDeviceNormal(const fields::soaDrvSeatDeviceNormal::FieldType& value);
    
    /// @brief Getter for field, soaDrvSeatMotorDirection
    ara::core::Future<fields::soaDrvSeatMotorDirection::FieldType> GetsoaDrvSeatMotorDirection();
    
    /// @brief Notifier for field, soaDrvSeatMotorDirection
    void NotifysoaDrvSeatMotorDirection();
    
    /// @brief Update field value by software component, soaDrvSeatMotorDirection
    void UpdatesoaDrvSeatMotorDirection(const fields::soaDrvSeatMotorDirection::FieldType& value);
    
    /// @brief Getter for field, soaDrvSeatMotorPosition
    ara::core::Future<fields::soaDrvSeatMotorPosition::FieldType> GetsoaDrvSeatMotorPosition();
    
    /// @brief Notifier for field, soaDrvSeatMotorPosition
    void NotifysoaDrvSeatMotorPosition();
    
    /// @brief Update field value by software component, soaDrvSeatMotorPosition
    void UpdatesoaDrvSeatMotorPosition(const fields::soaDrvSeatMotorPosition::FieldType& value);
    
    /// @brief Getter for field, soaDrvSeatSwVersion
    ara::core::Future<fields::soaDrvSeatSwVersion::FieldType> GetsoaDrvSeatSwVersion();
    
    /// @brief Notifier for field, soaDrvSeatSwVersion
    void NotifysoaDrvSeatSwVersion();
    
    /// @brief Update field value by software component, soaDrvSeatSwVersion
    void UpdatesoaDrvSeatSwVersion(const fields::soaDrvSeatSwVersion::FieldType& value);
    
    /// @brief Getter for field, soaFilmDeviceNormal
    ara::core::Future<fields::soaFilmDeviceNormal::FieldType> GetsoaFilmDeviceNormal();
    
    /// @brief Notifier for field, soaFilmDeviceNormal
    void NotifysoaFilmDeviceNormal();
    
    /// @brief Update field value by software component, soaFilmDeviceNormal
    void UpdatesoaFilmDeviceNormal(const fields::soaFilmDeviceNormal::FieldType& value);
    
    /// @brief Getter for field, soaFilmSwVersion
    ara::core::Future<fields::soaFilmSwVersion::FieldType> GetsoaFilmSwVersion();
    
    /// @brief Notifier for field, soaFilmSwVersion
    void NotifysoaFilmSwVersion();
    
    /// @brief Update field value by software component, soaFilmSwVersion
    void UpdatesoaFilmSwVersion(const fields::soaFilmSwVersion::FieldType& value);
    
    /// @brief Getter for field, soaHvacDeviceNormal
    ara::core::Future<fields::soaHvacDeviceNormal::FieldType> GetsoaHvacDeviceNormal();
    
    /// @brief Notifier for field, soaHvacDeviceNormal
    void NotifysoaHvacDeviceNormal();
    
    /// @brief Update field value by software component, soaHvacDeviceNormal
    void UpdatesoaHvacDeviceNormal(const fields::soaHvacDeviceNormal::FieldType& value);
    
    /// @brief Getter for field, soaHvacSwVersion
    ara::core::Future<fields::soaHvacSwVersion::FieldType> GetsoaHvacSwVersion();
    
    /// @brief Notifier for field, soaHvacSwVersion
    void NotifysoaHvacSwVersion();
    
    /// @brief Update field value by software component, soaHvacSwVersion
    void UpdatesoaHvacSwVersion(const fields::soaHvacSwVersion::FieldType& value);
    
    /// @brief Getter for field, soaMlmStatus
    ara::core::Future<fields::soaMlmStatus::FieldType> GetsoaMlmStatus();
    
    /// @brief Notifier for field, soaMlmStatus
    void NotifysoaMlmStatus();
    
    /// @brief Update field value by software component, soaMlmStatus
    void UpdatesoaMlmStatus(const fields::soaMlmStatus::FieldType& value);
    
    /// @brief Getter for field, soaMlmSwVersion
    ara::core::Future<fields::soaMlmSwVersion::FieldType> GetsoaMlmSwVersion();
    
    /// @brief Notifier for field, soaMlmSwVersion
    void NotifysoaMlmSwVersion();
    
    /// @brief Update field value by software component, soaMlmSwVersion
    void UpdatesoaMlmSwVersion(const fields::soaMlmSwVersion::FieldType& value);
    
    /// @brief Getter for field, soaPowerDeviceNormal
    ara::core::Future<fields::soaPowerDeviceNormal::FieldType> GetsoaPowerDeviceNormal();
    
    /// @brief Notifier for field, soaPowerDeviceNormal
    void NotifysoaPowerDeviceNormal();
    
    /// @brief Update field value by software component, soaPowerDeviceNormal
    void UpdatesoaPowerDeviceNormal(const fields::soaPowerDeviceNormal::FieldType& value);
    
    /// @brief Getter for field, soaPowerSwVersion
    ara::core::Future<fields::soaPowerSwVersion::FieldType> GetsoaPowerSwVersion();
    
    /// @brief Notifier for field, soaPowerSwVersion
    void NotifysoaPowerSwVersion();
    
    /// @brief Update field value by software component, soaPowerSwVersion
    void UpdatesoaPowerSwVersion(const fields::soaPowerSwVersion::FieldType& value);
    
    /// @brief Getter for field, soaRctnStatus
    ara::core::Future<fields::soaRctnStatus::FieldType> GetsoaRctnStatus();
    
    /// @brief Notifier for field, soaRctnStatus
    void NotifysoaRctnStatus();
    
    /// @brief Update field value by software component, soaRctnStatus
    void UpdatesoaRctnStatus(const fields::soaRctnStatus::FieldType& value);
    
    /// @brief Getter for field, soaRctnSwVersion
    ara::core::Future<fields::soaRctnSwVersion::FieldType> GetsoaRctnSwVersion();
    
    /// @brief Notifier for field, soaRctnSwVersion
    void NotifysoaRctnSwVersion();
    
    /// @brief Update field value by software component, soaRctnSwVersion
    void UpdatesoaRctnSwVersion(const fields::soaRctnSwVersion::FieldType& value);
    
    /// @brief Getter for field, soaRoaDetectState
    ara::core::Future<fields::soaRoaDetectState::FieldType> GetsoaRoaDetectState();
    
    /// @brief Notifier for field, soaRoaDetectState
    void NotifysoaRoaDetectState();
    
    /// @brief Update field value by software component, soaRoaDetectState
    void UpdatesoaRoaDetectState(const fields::soaRoaDetectState::FieldType& value);
    
    /// @brief Getter for field, soaRoaDeviceNormal
    ara::core::Future<fields::soaRoaDeviceNormal::FieldType> GetsoaRoaDeviceNormal();
    
    /// @brief Notifier for field, soaRoaDeviceNormal
    void NotifysoaRoaDeviceNormal();
    
    /// @brief Update field value by software component, soaRoaDeviceNormal
    void UpdatesoaRoaDeviceNormal(const fields::soaRoaDeviceNormal::FieldType& value);
    
    /// @brief Getter for field, soaRoaSwVersion
    ara::core::Future<fields::soaRoaSwVersion::FieldType> GetsoaRoaSwVersion();
    
    /// @brief Notifier for field, soaRoaSwVersion
    void NotifysoaRoaSwVersion();
    
    /// @brief Update field value by software component, soaRoaSwVersion
    void UpdatesoaRoaSwVersion(const fields::soaRoaSwVersion::FieldType& value);
    
    /// @brief Getter for field, soaWiperDeviceNormal
    ara::core::Future<fields::soaWiperDeviceNormal::FieldType> GetsoaWiperDeviceNormal();
    
    /// @brief Notifier for field, soaWiperDeviceNormal
    void NotifysoaWiperDeviceNormal();
    
    /// @brief Update field value by software component, soaWiperDeviceNormal
    void UpdatesoaWiperDeviceNormal(const fields::soaWiperDeviceNormal::FieldType& value);
    
    /// @brief Getter for field, soaWiperStatus
    ara::core::Future<fields::soaWiperStatus::FieldType> GetsoaWiperStatus();
    
    /// @brief Notifier for field, soaWiperStatus
    void NotifysoaWiperStatus();
    
    /// @brief Update field value by software component, soaWiperStatus
    void UpdatesoaWiperStatus(const fields::soaWiperStatus::FieldType& value);
    
    /// @brief Getter for field, soaWiperSwVersion
    ara::core::Future<fields::soaWiperSwVersion::FieldType> GetsoaWiperSwVersion();
    
    /// @brief Notifier for field, soaWiperSwVersion
    void NotifysoaWiperSwVersion();
    
    /// @brief Update field value by software component, soaWiperSwVersion
    void UpdatesoaWiperSwVersion(const fields::soaWiperSwVersion::FieldType& value);
    
private:
    /// @brief Logger for this port
    ara::log::Logger& m_logger;
    
    /// @brief Field, UssStatusFront
    fields::UssStatusFront::FieldType m_UssStatusFront;
    
    /// @brief Field, UssStatusRear
    fields::UssStatusRear::FieldType m_UssStatusRear;
    
    /// @brief Field, soaDmsDeviceNormal
    fields::soaDmsDeviceNormal::FieldType m_soaDmsDeviceNormal;
    
    /// @brief Field, soaDmsSwVersion
    fields::soaDmsSwVersion::FieldType m_soaDmsSwVersion;
    
    /// @brief Field, soaDrvSeatDeviceNormal
    fields::soaDrvSeatDeviceNormal::FieldType m_soaDrvSeatDeviceNormal;
    
    /// @brief Field, soaDrvSeatMotorDirection
    fields::soaDrvSeatMotorDirection::FieldType m_soaDrvSeatMotorDirection;
    
    /// @brief Field, soaDrvSeatMotorPosition
    fields::soaDrvSeatMotorPosition::FieldType m_soaDrvSeatMotorPosition;
    
    /// @brief Field, soaDrvSeatSwVersion
    fields::soaDrvSeatSwVersion::FieldType m_soaDrvSeatSwVersion;
    
    /// @brief Field, soaFilmDeviceNormal
    fields::soaFilmDeviceNormal::FieldType m_soaFilmDeviceNormal;
    
    /// @brief Field, soaFilmSwVersion
    fields::soaFilmSwVersion::FieldType m_soaFilmSwVersion;
    
    /// @brief Field, soaHvacDeviceNormal
    fields::soaHvacDeviceNormal::FieldType m_soaHvacDeviceNormal;
    
    /// @brief Field, soaHvacSwVersion
    fields::soaHvacSwVersion::FieldType m_soaHvacSwVersion;
    
    /// @brief Field, soaMlmStatus
    fields::soaMlmStatus::FieldType m_soaMlmStatus;
    
    /// @brief Field, soaMlmSwVersion
    fields::soaMlmSwVersion::FieldType m_soaMlmSwVersion;
    
    /// @brief Field, soaPowerDeviceNormal
    fields::soaPowerDeviceNormal::FieldType m_soaPowerDeviceNormal;
    
    /// @brief Field, soaPowerSwVersion
    fields::soaPowerSwVersion::FieldType m_soaPowerSwVersion;
    
    /// @brief Field, soaRctnStatus
    fields::soaRctnStatus::FieldType m_soaRctnStatus;
    
    /// @brief Field, soaRctnSwVersion
    fields::soaRctnSwVersion::FieldType m_soaRctnSwVersion;
    
    /// @brief Field, soaRoaDetectState
    fields::soaRoaDetectState::FieldType m_soaRoaDetectState;
    
    /// @brief Field, soaRoaDeviceNormal
    fields::soaRoaDeviceNormal::FieldType m_soaRoaDeviceNormal;
    
    /// @brief Field, soaRoaSwVersion
    fields::soaRoaSwVersion::FieldType m_soaRoaSwVersion;
    
    /// @brief Field, soaWiperDeviceNormal
    fields::soaWiperDeviceNormal::FieldType m_soaWiperDeviceNormal;
    
    /// @brief Field, soaWiperStatus
    fields::soaWiperStatus::FieldType m_soaWiperStatus;
    
    /// @brief Field, soaWiperSwVersion
    fields::soaWiperSwVersion::FieldType m_soaWiperSwVersion;
    
};
 
} /// namespace skeleton
} /// namespace service
} /// namespace monitoring
} /// namespace eevp

namespace monitoringmanager
{
namespace aa
{
namespace port
{
 
class PPortMonitoringManagement
{
public:
    /// @brief Constructor
    PPortMonitoringManagement();
    
    /// @brief Destructor
    ~PPortMonitoringManagement();
    
    /// @brief Start port
    void Start();
    
    /// @brief Terminate port
    void Terminate();
    
    /// @brief Write event data to buffer, DistanceLevelFront
    void WriteDataDistanceLevelFront(const eevp::monitoring::service::skeleton::events::DistanceLevelFront::SampleType& data);
     
    /// @brief Send event cyclic from buffer data, DistanceLevelFront
    void SendEventDistanceLevelFrontCyclic();
     
    /// @brief Send event directly from buffer data, DistanceLevelFront
    void SendEventDistanceLevelFrontTriggered();
     
    /// @brief Send event directly with argument, DistanceLevelFront
    void SendEventDistanceLevelFrontTriggered(const eevp::monitoring::service::skeleton::events::DistanceLevelFront::SampleType& data);

    /// @brief Write event data to buffer, DistanceLevelRear
    void WriteDataDistanceLevelRear(const eevp::monitoring::service::skeleton::events::DistanceLevelRear::SampleType& data);
     
    /// @brief Send event cyclic from buffer data, DistanceLevelRear
    void SendEventDistanceLevelRearCyclic();
     
    /// @brief Send event directly from buffer data, DistanceLevelRear
    void SendEventDistanceLevelRearTriggered();
     
    /// @brief Send event directly with argument, DistanceLevelRear
    void SendEventDistanceLevelRearTriggered(const eevp::monitoring::service::skeleton::events::DistanceLevelRear::SampleType& data);

    /// @brief Write event data to buffer, MbTempStatus
    void WriteDataMbTempStatus(const eevp::monitoring::service::skeleton::events::MbTempStatus::SampleType& data);
     
    /// @brief Send event cyclic from buffer data, MbTempStatus
    void SendEventMbTempStatusCyclic();
     
    /// @brief Send event directly from buffer data, MbTempStatus
    void SendEventMbTempStatusTriggered();
     
    /// @brief Send event directly with argument, MbTempStatus
    void SendEventMbTempStatusTriggered(const eevp::monitoring::service::skeleton::events::MbTempStatus::SampleType& data);

    /// @brief Write event data to buffer, eventServiceInfo
    void WriteDataeventServiceInfo(const eevp::monitoring::service::skeleton::events::eventServiceInfo::SampleType& data);
     
    /// @brief Send event cyclic from buffer data, eventServiceInfo
    void SendEventeventServiceInfoCyclic();
     
    /// @brief Send event directly from buffer data, eventServiceInfo
    void SendEventeventServiceInfoTriggered();
     
    /// @brief Send event directly with argument, eventServiceInfo
    void SendEventeventServiceInfoTriggered(const eevp::monitoring::service::skeleton::events::eventServiceInfo::SampleType& data);

    /// @brief Write event data to buffer, eventUpdatableService
    void WriteDataeventUpdatableService(const eevp::monitoring::service::skeleton::events::eventUpdatableService::SampleType& data);
     
    /// @brief Send event cyclic from buffer data, eventUpdatableService
    void SendEventeventUpdatableServiceCyclic();
     
    /// @brief Send event directly from buffer data, eventUpdatableService
    void SendEventeventUpdatableServiceTriggered();
     
    /// @brief Send event directly with argument, eventUpdatableService
    void SendEventeventUpdatableServiceTriggered(const eevp::monitoring::service::skeleton::events::eventUpdatableService::SampleType& data);

    /// @brief Write event data to buffer, resetUcmCompleted
    void WriteDataresetUcmCompleted(const eevp::monitoring::service::skeleton::events::resetUcmCompleted::SampleType& data);
     
    /// @brief Send event cyclic from buffer data, resetUcmCompleted
    void SendEventresetUcmCompletedCyclic();
     
    /// @brief Send event directly from buffer data, resetUcmCompleted
    void SendEventresetUcmCompletedTriggered();
     
    /// @brief Send event directly with argument, resetUcmCompleted
    void SendEventresetUcmCompletedTriggered(const eevp::monitoring::service::skeleton::events::resetUcmCompleted::SampleType& data);
     
    /// @brief Write field value to buffer, UssStatusFront
    void WriteValueUssStatusFront(const eevp::monitoring::service::skeleton::fields::UssStatusFront::FieldType& value);
     
    /// @brief Notify field cyclic from buffer, UssStatusFront
    void NotifyFieldUssStatusFrontCyclic();
     
    /// @brief Notify field directly from buffer data, UssStatusFront
    void NotifyFieldUssStatusFrontTriggered();
     
    /// @brief Notify field directly with argument, UssStatusFront
    void NotifyFieldUssStatusFrontTriggered(const eevp::monitoring::service::skeleton::fields::UssStatusFront::FieldType& value);

    /// @brief Write field value to buffer, UssStatusRear
    void WriteValueUssStatusRear(const eevp::monitoring::service::skeleton::fields::UssStatusRear::FieldType& value);
     
    /// @brief Notify field cyclic from buffer, UssStatusRear
    void NotifyFieldUssStatusRearCyclic();
     
    /// @brief Notify field directly from buffer data, UssStatusRear
    void NotifyFieldUssStatusRearTriggered();
     
    /// @brief Notify field directly with argument, UssStatusRear
    void NotifyFieldUssStatusRearTriggered(const eevp::monitoring::service::skeleton::fields::UssStatusRear::FieldType& value);

    /// @brief Write field value to buffer, soaDmsDeviceNormal
    void WriteValuesoaDmsDeviceNormal(const eevp::monitoring::service::skeleton::fields::soaDmsDeviceNormal::FieldType& value);
     
    /// @brief Notify field cyclic from buffer, soaDmsDeviceNormal
    void NotifyFieldsoaDmsDeviceNormalCyclic();
     
    /// @brief Notify field directly from buffer data, soaDmsDeviceNormal
    void NotifyFieldsoaDmsDeviceNormalTriggered();
     
    /// @brief Notify field directly with argument, soaDmsDeviceNormal
    void NotifyFieldsoaDmsDeviceNormalTriggered(const eevp::monitoring::service::skeleton::fields::soaDmsDeviceNormal::FieldType& value);

    /// @brief Write field value to buffer, soaDmsSwVersion
    void WriteValuesoaDmsSwVersion(const eevp::monitoring::service::skeleton::fields::soaDmsSwVersion::FieldType& value);
     
    /// @brief Notify field cyclic from buffer, soaDmsSwVersion
    void NotifyFieldsoaDmsSwVersionCyclic();
     
    /// @brief Notify field directly from buffer data, soaDmsSwVersion
    void NotifyFieldsoaDmsSwVersionTriggered();
     
    /// @brief Notify field directly with argument, soaDmsSwVersion
    void NotifyFieldsoaDmsSwVersionTriggered(const eevp::monitoring::service::skeleton::fields::soaDmsSwVersion::FieldType& value);

    /// @brief Write field value to buffer, soaDrvSeatDeviceNormal
    void WriteValuesoaDrvSeatDeviceNormal(const eevp::monitoring::service::skeleton::fields::soaDrvSeatDeviceNormal::FieldType& value);
     
    /// @brief Notify field cyclic from buffer, soaDrvSeatDeviceNormal
    void NotifyFieldsoaDrvSeatDeviceNormalCyclic();
     
    /// @brief Notify field directly from buffer data, soaDrvSeatDeviceNormal
    void NotifyFieldsoaDrvSeatDeviceNormalTriggered();
     
    /// @brief Notify field directly with argument, soaDrvSeatDeviceNormal
    void NotifyFieldsoaDrvSeatDeviceNormalTriggered(const eevp::monitoring::service::skeleton::fields::soaDrvSeatDeviceNormal::FieldType& value);

    /// @brief Write field value to buffer, soaDrvSeatMotorDirection
    void WriteValuesoaDrvSeatMotorDirection(const eevp::monitoring::service::skeleton::fields::soaDrvSeatMotorDirection::FieldType& value);
     
    /// @brief Notify field cyclic from buffer, soaDrvSeatMotorDirection
    void NotifyFieldsoaDrvSeatMotorDirectionCyclic();
     
    /// @brief Notify field directly from buffer data, soaDrvSeatMotorDirection
    void NotifyFieldsoaDrvSeatMotorDirectionTriggered();
     
    /// @brief Notify field directly with argument, soaDrvSeatMotorDirection
    void NotifyFieldsoaDrvSeatMotorDirectionTriggered(const eevp::monitoring::service::skeleton::fields::soaDrvSeatMotorDirection::FieldType& value);

    /// @brief Write field value to buffer, soaDrvSeatMotorPosition
    void WriteValuesoaDrvSeatMotorPosition(const eevp::monitoring::service::skeleton::fields::soaDrvSeatMotorPosition::FieldType& value);
     
    /// @brief Notify field cyclic from buffer, soaDrvSeatMotorPosition
    void NotifyFieldsoaDrvSeatMotorPositionCyclic();
     
    /// @brief Notify field directly from buffer data, soaDrvSeatMotorPosition
    void NotifyFieldsoaDrvSeatMotorPositionTriggered();
     
    /// @brief Notify field directly with argument, soaDrvSeatMotorPosition
    void NotifyFieldsoaDrvSeatMotorPositionTriggered(const eevp::monitoring::service::skeleton::fields::soaDrvSeatMotorPosition::FieldType& value);

    /// @brief Write field value to buffer, soaDrvSeatSwVersion
    void WriteValuesoaDrvSeatSwVersion(const eevp::monitoring::service::skeleton::fields::soaDrvSeatSwVersion::FieldType& value);
     
    /// @brief Notify field cyclic from buffer, soaDrvSeatSwVersion
    void NotifyFieldsoaDrvSeatSwVersionCyclic();
     
    /// @brief Notify field directly from buffer data, soaDrvSeatSwVersion
    void NotifyFieldsoaDrvSeatSwVersionTriggered();
     
    /// @brief Notify field directly with argument, soaDrvSeatSwVersion
    void NotifyFieldsoaDrvSeatSwVersionTriggered(const eevp::monitoring::service::skeleton::fields::soaDrvSeatSwVersion::FieldType& value);

    /// @brief Write field value to buffer, soaFilmDeviceNormal
    void WriteValuesoaFilmDeviceNormal(const eevp::monitoring::service::skeleton::fields::soaFilmDeviceNormal::FieldType& value);
     
    /// @brief Notify field cyclic from buffer, soaFilmDeviceNormal
    void NotifyFieldsoaFilmDeviceNormalCyclic();
     
    /// @brief Notify field directly from buffer data, soaFilmDeviceNormal
    void NotifyFieldsoaFilmDeviceNormalTriggered();
     
    /// @brief Notify field directly with argument, soaFilmDeviceNormal
    void NotifyFieldsoaFilmDeviceNormalTriggered(const eevp::monitoring::service::skeleton::fields::soaFilmDeviceNormal::FieldType& value);

    /// @brief Write field value to buffer, soaFilmSwVersion
    void WriteValuesoaFilmSwVersion(const eevp::monitoring::service::skeleton::fields::soaFilmSwVersion::FieldType& value);
     
    /// @brief Notify field cyclic from buffer, soaFilmSwVersion
    void NotifyFieldsoaFilmSwVersionCyclic();
     
    /// @brief Notify field directly from buffer data, soaFilmSwVersion
    void NotifyFieldsoaFilmSwVersionTriggered();
     
    /// @brief Notify field directly with argument, soaFilmSwVersion
    void NotifyFieldsoaFilmSwVersionTriggered(const eevp::monitoring::service::skeleton::fields::soaFilmSwVersion::FieldType& value);

    /// @brief Write field value to buffer, soaHvacDeviceNormal
    void WriteValuesoaHvacDeviceNormal(const eevp::monitoring::service::skeleton::fields::soaHvacDeviceNormal::FieldType& value);
     
    /// @brief Notify field cyclic from buffer, soaHvacDeviceNormal
    void NotifyFieldsoaHvacDeviceNormalCyclic();
     
    /// @brief Notify field directly from buffer data, soaHvacDeviceNormal
    void NotifyFieldsoaHvacDeviceNormalTriggered();
     
    /// @brief Notify field directly with argument, soaHvacDeviceNormal
    void NotifyFieldsoaHvacDeviceNormalTriggered(const eevp::monitoring::service::skeleton::fields::soaHvacDeviceNormal::FieldType& value);

    /// @brief Write field value to buffer, soaHvacSwVersion
    void WriteValuesoaHvacSwVersion(const eevp::monitoring::service::skeleton::fields::soaHvacSwVersion::FieldType& value);
     
    /// @brief Notify field cyclic from buffer, soaHvacSwVersion
    void NotifyFieldsoaHvacSwVersionCyclic();
     
    /// @brief Notify field directly from buffer data, soaHvacSwVersion
    void NotifyFieldsoaHvacSwVersionTriggered();
     
    /// @brief Notify field directly with argument, soaHvacSwVersion
    void NotifyFieldsoaHvacSwVersionTriggered(const eevp::monitoring::service::skeleton::fields::soaHvacSwVersion::FieldType& value);

    /// @brief Write field value to buffer, soaMlmStatus
    void WriteValuesoaMlmStatus(const eevp::monitoring::service::skeleton::fields::soaMlmStatus::FieldType& value);
     
    /// @brief Notify field cyclic from buffer, soaMlmStatus
    void NotifyFieldsoaMlmStatusCyclic();
     
    /// @brief Notify field directly from buffer data, soaMlmStatus
    void NotifyFieldsoaMlmStatusTriggered();
     
    /// @brief Notify field directly with argument, soaMlmStatus
    void NotifyFieldsoaMlmStatusTriggered(const eevp::monitoring::service::skeleton::fields::soaMlmStatus::FieldType& value);

    /// @brief Write field value to buffer, soaMlmSwVersion
    void WriteValuesoaMlmSwVersion(const eevp::monitoring::service::skeleton::fields::soaMlmSwVersion::FieldType& value);
     
    /// @brief Notify field cyclic from buffer, soaMlmSwVersion
    void NotifyFieldsoaMlmSwVersionCyclic();
     
    /// @brief Notify field directly from buffer data, soaMlmSwVersion
    void NotifyFieldsoaMlmSwVersionTriggered();
     
    /// @brief Notify field directly with argument, soaMlmSwVersion
    void NotifyFieldsoaMlmSwVersionTriggered(const eevp::monitoring::service::skeleton::fields::soaMlmSwVersion::FieldType& value);

    /// @brief Write field value to buffer, soaPowerDeviceNormal
    void WriteValuesoaPowerDeviceNormal(const eevp::monitoring::service::skeleton::fields::soaPowerDeviceNormal::FieldType& value);
     
    /// @brief Notify field cyclic from buffer, soaPowerDeviceNormal
    void NotifyFieldsoaPowerDeviceNormalCyclic();
     
    /// @brief Notify field directly from buffer data, soaPowerDeviceNormal
    void NotifyFieldsoaPowerDeviceNormalTriggered();
     
    /// @brief Notify field directly with argument, soaPowerDeviceNormal
    void NotifyFieldsoaPowerDeviceNormalTriggered(const eevp::monitoring::service::skeleton::fields::soaPowerDeviceNormal::FieldType& value);

    /// @brief Write field value to buffer, soaPowerSwVersion
    void WriteValuesoaPowerSwVersion(const eevp::monitoring::service::skeleton::fields::soaPowerSwVersion::FieldType& value);
     
    /// @brief Notify field cyclic from buffer, soaPowerSwVersion
    void NotifyFieldsoaPowerSwVersionCyclic();
     
    /// @brief Notify field directly from buffer data, soaPowerSwVersion
    void NotifyFieldsoaPowerSwVersionTriggered();
     
    /// @brief Notify field directly with argument, soaPowerSwVersion
    void NotifyFieldsoaPowerSwVersionTriggered(const eevp::monitoring::service::skeleton::fields::soaPowerSwVersion::FieldType& value);

    /// @brief Write field value to buffer, soaRctnStatus
    void WriteValuesoaRctnStatus(const eevp::monitoring::service::skeleton::fields::soaRctnStatus::FieldType& value);
     
    /// @brief Notify field cyclic from buffer, soaRctnStatus
    void NotifyFieldsoaRctnStatusCyclic();
     
    /// @brief Notify field directly from buffer data, soaRctnStatus
    void NotifyFieldsoaRctnStatusTriggered();
     
    /// @brief Notify field directly with argument, soaRctnStatus
    void NotifyFieldsoaRctnStatusTriggered(const eevp::monitoring::service::skeleton::fields::soaRctnStatus::FieldType& value);

    /// @brief Write field value to buffer, soaRctnSwVersion
    void WriteValuesoaRctnSwVersion(const eevp::monitoring::service::skeleton::fields::soaRctnSwVersion::FieldType& value);
     
    /// @brief Notify field cyclic from buffer, soaRctnSwVersion
    void NotifyFieldsoaRctnSwVersionCyclic();
     
    /// @brief Notify field directly from buffer data, soaRctnSwVersion
    void NotifyFieldsoaRctnSwVersionTriggered();
     
    /// @brief Notify field directly with argument, soaRctnSwVersion
    void NotifyFieldsoaRctnSwVersionTriggered(const eevp::monitoring::service::skeleton::fields::soaRctnSwVersion::FieldType& value);

    /// @brief Write field value to buffer, soaRoaDetectState
    void WriteValuesoaRoaDetectState(const eevp::monitoring::service::skeleton::fields::soaRoaDetectState::FieldType& value);
     
    /// @brief Notify field cyclic from buffer, soaRoaDetectState
    void NotifyFieldsoaRoaDetectStateCyclic();
     
    /// @brief Notify field directly from buffer data, soaRoaDetectState
    void NotifyFieldsoaRoaDetectStateTriggered();
     
    /// @brief Notify field directly with argument, soaRoaDetectState
    void NotifyFieldsoaRoaDetectStateTriggered(const eevp::monitoring::service::skeleton::fields::soaRoaDetectState::FieldType& value);

    /// @brief Write field value to buffer, soaRoaDeviceNormal
    void WriteValuesoaRoaDeviceNormal(const eevp::monitoring::service::skeleton::fields::soaRoaDeviceNormal::FieldType& value);
     
    /// @brief Notify field cyclic from buffer, soaRoaDeviceNormal
    void NotifyFieldsoaRoaDeviceNormalCyclic();
     
    /// @brief Notify field directly from buffer data, soaRoaDeviceNormal
    void NotifyFieldsoaRoaDeviceNormalTriggered();
     
    /// @brief Notify field directly with argument, soaRoaDeviceNormal
    void NotifyFieldsoaRoaDeviceNormalTriggered(const eevp::monitoring::service::skeleton::fields::soaRoaDeviceNormal::FieldType& value);

    /// @brief Write field value to buffer, soaRoaSwVersion
    void WriteValuesoaRoaSwVersion(const eevp::monitoring::service::skeleton::fields::soaRoaSwVersion::FieldType& value);
     
    /// @brief Notify field cyclic from buffer, soaRoaSwVersion
    void NotifyFieldsoaRoaSwVersionCyclic();
     
    /// @brief Notify field directly from buffer data, soaRoaSwVersion
    void NotifyFieldsoaRoaSwVersionTriggered();
     
    /// @brief Notify field directly with argument, soaRoaSwVersion
    void NotifyFieldsoaRoaSwVersionTriggered(const eevp::monitoring::service::skeleton::fields::soaRoaSwVersion::FieldType& value);

    /// @brief Write field value to buffer, soaWiperDeviceNormal
    void WriteValuesoaWiperDeviceNormal(const eevp::monitoring::service::skeleton::fields::soaWiperDeviceNormal::FieldType& value);
     
    /// @brief Notify field cyclic from buffer, soaWiperDeviceNormal
    void NotifyFieldsoaWiperDeviceNormalCyclic();
     
    /// @brief Notify field directly from buffer data, soaWiperDeviceNormal
    void NotifyFieldsoaWiperDeviceNormalTriggered();
     
    /// @brief Notify field directly with argument, soaWiperDeviceNormal
    void NotifyFieldsoaWiperDeviceNormalTriggered(const eevp::monitoring::service::skeleton::fields::soaWiperDeviceNormal::FieldType& value);

    /// @brief Write field value to buffer, soaWiperStatus
    void WriteValuesoaWiperStatus(const eevp::monitoring::service::skeleton::fields::soaWiperStatus::FieldType& value);
     
    /// @brief Notify field cyclic from buffer, soaWiperStatus
    void NotifyFieldsoaWiperStatusCyclic();
     
    /// @brief Notify field directly from buffer data, soaWiperStatus
    void NotifyFieldsoaWiperStatusTriggered();
     
    /// @brief Notify field directly with argument, soaWiperStatus
    void NotifyFieldsoaWiperStatusTriggered(const eevp::monitoring::service::skeleton::fields::soaWiperStatus::FieldType& value);

    /// @brief Write field value to buffer, soaWiperSwVersion
    void WriteValuesoaWiperSwVersion(const eevp::monitoring::service::skeleton::fields::soaWiperSwVersion::FieldType& value);
     
    /// @brief Notify field cyclic from buffer, soaWiperSwVersion
    void NotifyFieldsoaWiperSwVersionCyclic();
     
    /// @brief Notify field directly from buffer data, soaWiperSwVersion
    void NotifyFieldsoaWiperSwVersionTriggered();
     
    /// @brief Notify field directly with argument, soaWiperSwVersion
    void NotifyFieldsoaWiperSwVersionTriggered(const eevp::monitoring::service::skeleton::fields::soaWiperSwVersion::FieldType& value);
     
private:
    /// @brief Logger for this port
    ara::log::Logger& m_logger;
    
    /// @brief Flag of port status
    bool m_running;
    
    /// @brief Mutex for this port
    std::mutex m_mutex;
    
    /// @brief AUTOSAR Port Interface
    std::unique_ptr<eevp::monitoring::service::skeleton::MonitoringManagementSkeletonImpl> m_interface;
    
    /// @brief Data for event, DistanceLevelFront
    eevp::monitoring::service::skeleton::events::DistanceLevelFront::SampleType m_DistanceLevelFrontData;
    
    /// @brief Data for event, DistanceLevelRear
    eevp::monitoring::service::skeleton::events::DistanceLevelRear::SampleType m_DistanceLevelRearData;
    
    /// @brief Data for event, MbTempStatus
    eevp::monitoring::service::skeleton::events::MbTempStatus::SampleType m_MbTempStatusData;
    
    /// @brief Data for event, eventServiceInfo
    eevp::monitoring::service::skeleton::events::eventServiceInfo::SampleType m_eventServiceInfoData;
    
    /// @brief Data for event, eventUpdatableService
    eevp::monitoring::service::skeleton::events::eventUpdatableService::SampleType m_eventUpdatableServiceData;
    
    /// @brief Data for event, resetUcmCompleted
    eevp::monitoring::service::skeleton::events::resetUcmCompleted::SampleType m_resetUcmCompletedData;
};
 
} /// namespace port
} /// namespace aa
} /// namespace monitoringmanager
 
#endif /// PARA_AA_GEN_SOFTWARE_COMPONENT_PPORT_MONITORINGMANAGER_AA_PPORTMONITORINGMANAGEMENT_H