///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : rportotamonitoring.h
/// SOFTWARE COMPONENT NAME           : RPortOtaMonitoring
/// GENERATED DATE                    : 2025-08-30 10:53:23
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef PARA_AA_GEN_SOFTWARE_COMPONENT_RPORT_MONITORINGMANAGER_AA_RPORTOTAMONITORING_H
#define PARA_AA_GEN_SOFTWARE_COMPONENT_RPORT_MONITORINGMANAGER_AA_RPORTOTAMONITORING_H
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// INCLUSION HEADER FILES
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "eevp/ota/monitoring/service/otamonitoring_proxy.h"
 
#include "ara/log/logger.h"
 
#include <mutex>
#include <thread>
 
namespace monitoringmanager
{
namespace aa
{
namespace port
{
 
class RPortOtaMonitoring
{
public:
    /// @brief Constructor
    RPortOtaMonitoring();
    
    /// @brief Destructor
    ~RPortOtaMonitoring();
    
    /// @brief Start port
    void Start();
    
    /// @brief Terminate port
    void Terminate();
    
    /// @brief Subscribe event, notifyServiceEvent
    void SubscribenotifyServiceEvent();
     
    /// @brief Stop event subscription, notifyServiceEvent
    void StopSubscribenotifyServiceEvent();
     
    /// @brief Event receive handler, notifyServiceEvent
    void ReceiveEventnotifyServiceEventTriggered();
     
    /// @brief Event receive handler, notifyServiceEvent
    void ReceiveEventnotifyServiceEventCyclic();
     
    /// @brief Read event data, notifyServiceEvent
    void ReadDatanotifyServiceEvent(ara::com::SamplePtr<eevp::ota::monitoring::service::proxy::events::notifyServiceEvent::SampleType const> samplePtr);
     
    /// @brief Regist callback from software component
    void RegistEventHandlernotifyServiceEvent(std::function<void(const eevp::ota::monitoring::service::proxy::events::notifyServiceEvent::SampleType&)> handler);
    
    /// @brief Subscribe event, notifyUpdatableService
    void SubscribenotifyUpdatableService();
     
    /// @brief Stop event subscription, notifyUpdatableService
    void StopSubscribenotifyUpdatableService();
     
    /// @brief Event receive handler, notifyUpdatableService
    void ReceiveEventnotifyUpdatableServiceTriggered();
     
    /// @brief Event receive handler, notifyUpdatableService
    void ReceiveEventnotifyUpdatableServiceCyclic();
     
    /// @brief Read event data, notifyUpdatableService
    void ReadDatanotifyUpdatableService(ara::com::SamplePtr<eevp::ota::monitoring::service::proxy::events::notifyUpdatableService::SampleType const> samplePtr);
     
    /// @brief Regist callback from software component
    void RegistEventHandlernotifyUpdatableService(std::function<void(const eevp::ota::monitoring::service::proxy::events::notifyUpdatableService::SampleType&)> handler);
    
    /// @brief Subscribe event, resetUcmCompleted
    void SubscriberesetUcmCompleted();
     
    /// @brief Stop event subscription, resetUcmCompleted
    void StopSubscriberesetUcmCompleted();
     
    /// @brief Event receive handler, resetUcmCompleted
    void ReceiveEventresetUcmCompletedTriggered();
     
    /// @brief Event receive handler, resetUcmCompleted
    void ReceiveEventresetUcmCompletedCyclic();
     
    /// @brief Read event data, resetUcmCompleted
    void ReadDataresetUcmCompleted(ara::com::SamplePtr<eevp::ota::monitoring::service::proxy::events::resetUcmCompleted::SampleType const> samplePtr);
     
    /// @brief Regist callback from software component
    void RegistEventHandlerresetUcmCompleted(std::function<void(const eevp::ota::monitoring::service::proxy::events::resetUcmCompleted::SampleType&)> handler);

    /// @brief Request with Response method using by software component, requestServiceInstall
    void RequestrequestServiceInstall(const eevp::type::String& serviceName);
     
    /// @brief Regist callback from software component
    void RegistResponseHandlerrequestServiceInstall(std::function<void(const eevp::ota::monitoring::service::proxy::methods::requestServiceInstall::Output&)> handler);
    
    /// @brief Request with Response method using by software component, requestServiceUpdate
    void RequestrequestServiceUpdate(const eevp::type::String& serviceName);
     
    /// @brief Regist callback from software component
    void RegistResponseHandlerrequestServiceUpdate(std::function<void(const eevp::ota::monitoring::service::proxy::methods::requestServiceUpdate::Output&)> handler);
    
    /// @brief Request with Response method using by software component, requestVersionInfo
    void RequestrequestVersionInfo();
     
    /// @brief Regist callback from software component
    void RegistResponseHandlerrequestVersionInfo(std::function<void(const eevp::ota::monitoring::service::proxy::methods::requestVersionInfo::Output&)> handler);
    
    /// @brief Request with Response method using by software component, resetUcmTest
    void RequestresetUcmTest();
     
    /// @brief Regist callback from software component
    void RegistResponseHandlerresetUcmTest(std::function<void(const eevp::ota::monitoring::service::proxy::methods::resetUcmTest::Output&)> handler);
    
private:
    /// @brief Callback for find service
    void Find(ara::com::ServiceHandleContainer<eevp::ota::monitoring::service::proxy::OtaMonitoringProxy::HandleType> handles,
              ara::com::FindServiceHandle findHandle);
    
    /// @brief Callback for event receiver, notifyServiceEvent
    void RegistReceivernotifyServiceEvent();
    
    /// @brief Callback for event receiver, notifyUpdatableService
    void RegistReceivernotifyUpdatableService();
    
    /// @brief Callback for event receiver, resetUcmCompleted
    void RegistReceiverresetUcmCompleted();

private:
    /// @brief Logger for this port
    ara::log::Logger& m_logger;
    
    /// @brief Flag of port status
    bool m_running;
    
    /// @brief Flag of find service status
    bool m_found;
    
    /// @brief Mutex for this port
    std::mutex m_mutex; 
    
    /// @brief AUTOSAR Port Interface
    std::unique_ptr<eevp::ota::monitoring::service::proxy::OtaMonitoringProxy> m_interface;
    
    /// @brief Find service handle
    std::unique_ptr<ara::com::FindServiceHandle> m_findHandle;
    
    /// @brief Callback from software component, notifyServiceEvent
    std::function<void(const eevp::ota::monitoring::service::proxy::events::notifyServiceEvent::SampleType&)> m_receivernotifyServiceEvent;
    
    /// @brief Callback from software component, notifyUpdatableService
    std::function<void(const eevp::ota::monitoring::service::proxy::events::notifyUpdatableService::SampleType&)> m_receivernotifyUpdatableService;
    
    /// @brief Callback from software component, resetUcmCompleted
    std::function<void(const eevp::ota::monitoring::service::proxy::events::resetUcmCompleted::SampleType&)> m_receiverresetUcmCompleted;

    /// @brief Callback from software component, requestServiceInstall
    std::function<void(const eevp::ota::monitoring::service::proxy::methods::requestServiceInstall::Output&)> m_responderrequestServiceInstall;
    
    /// @brief Callback from software component, requestServiceUpdate
    std::function<void(const eevp::ota::monitoring::service::proxy::methods::requestServiceUpdate::Output&)> m_responderrequestServiceUpdate;
    
    /// @brief Callback from software component, requestVersionInfo
    std::function<void(const eevp::ota::monitoring::service::proxy::methods::requestVersionInfo::Output&)> m_responderrequestVersionInfo;
    
    /// @brief Callback from software component, resetUcmTest
    std::function<void(const eevp::ota::monitoring::service::proxy::methods::resetUcmTest::Output&)> m_responderresetUcmTest;
};
 
} /// namespace port
} /// namespace aa
} /// namespace monitoringmanager
 
#endif /// PARA_AA_GEN_SOFTWARE_COMPONENT_RPORT_MONITORINGMANAGER_AA_RPORTOTAMONITORING_H