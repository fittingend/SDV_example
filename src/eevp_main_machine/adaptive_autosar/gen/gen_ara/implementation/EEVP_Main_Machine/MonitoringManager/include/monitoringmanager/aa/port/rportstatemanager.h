///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : rportstatemanager.h
/// SOFTWARE COMPONENT NAME           : RPortStateManager
/// GENERATED DATE                    : 2025-08-30 10:53:24
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef PARA_AA_GEN_SOFTWARE_COMPONENT_RPORT_MONITORINGMANAGER_AA_RPORTSTATEMANAGER_H
#define PARA_AA_GEN_SOFTWARE_COMPONENT_RPORT_MONITORINGMANAGER_AA_RPORTSTATEMANAGER_H
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// INCLUSION HEADER FILES
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "ivi/info/statemanager/service/statemanager_proxy.h"
 
#include "ara/log/logger.h"
 
#include <mutex>
#include <thread>
 
namespace monitoringmanager
{
namespace aa
{
namespace port
{
 
class RPortStateManager
{
public:
    /// @brief Constructor
    RPortStateManager();
    
    /// @brief Destructor
    ~RPortStateManager();
    
    /// @brief Start port
    void Start();
    
    /// @brief Terminate port
    void Terminate();
    
    /// @brief Subscribe event, NotifySystemState
    void SubscribeNotifySystemState();
     
    /// @brief Stop event subscription, NotifySystemState
    void StopSubscribeNotifySystemState();
     
    /// @brief Event receive handler, NotifySystemState
    void ReceiveEventNotifySystemStateTriggered();
     
    /// @brief Event receive handler, NotifySystemState
    void ReceiveEventNotifySystemStateCyclic();
     
    /// @brief Read event data, NotifySystemState
    void ReadDataNotifySystemState(ara::com::SamplePtr<ivi::info::statemanager::service::proxy::events::NotifySystemState::SampleType const> samplePtr);
     
    /// @brief Regist callback from software component
    void RegistEventHandlerNotifySystemState(std::function<void(const ivi::info::statemanager::service::proxy::events::NotifySystemState::SampleType&)> handler);
    
    /// @brief Subscribe field notification, NotifyTime
    void SubscribeNotifyTime();
     
    /// @brief Stop field subscription, NotifyTime
    void StopSubscribeNotifyTime();
     
    /// @brief Field notification receive handler, NotifyTime
    void ReceiveFieldNotifyTimeTriggered();
     
    /// @brief Field notification receive handler, NotifyTime
    void ReceiveFieldNotifyTimeCyclic();
     
    /// @brief Read field notification value, NotifyTime
    void ReadValueNotifyTime(ara::com::SamplePtr<ivi::info::statemanager::service::proxy::fields::NotifyTime::FieldType const> samplePtr);
     
    /// @brief Regist callback from software component
    void RegistFieldHandlerNotifyTime(std::function<void(const ivi::info::statemanager::service::proxy::fields::NotifyTime::FieldType&)> handler);
    
    /// @brief Getter method using by software component, NotifyTime
    void GetNotifyTime();
    
    /// @brief Setter method using by software component, NotifyTime
    void SetNotifyTime(const ivi::info::statemanager::service::proxy::fields::NotifyTime::FieldType& value);
    
    /// @brief Subscribe field notification, SystemState
    void SubscribeSystemState();
     
    /// @brief Stop field subscription, SystemState
    void StopSubscribeSystemState();
     
    /// @brief Field notification receive handler, SystemState
    void ReceiveFieldSystemStateTriggered();
     
    /// @brief Field notification receive handler, SystemState
    void ReceiveFieldSystemStateCyclic();
     
    /// @brief Read field notification value, SystemState
    void ReadValueSystemState(ara::com::SamplePtr<ivi::info::statemanager::service::proxy::fields::SystemState::FieldType const> samplePtr);
     
    /// @brief Regist callback from software component
    void RegistFieldHandlerSystemState(std::function<void(const ivi::info::statemanager::service::proxy::fields::SystemState::FieldType&)> handler);
    
    /// @brief Getter method using by software component, SystemState
    void GetSystemState();

private:
    /// @brief Callback for find service
    void Find(ara::com::ServiceHandleContainer<ivi::info::statemanager::service::proxy::StateManagerProxy::HandleType> handles,
              ara::com::FindServiceHandle findHandle);
    
    /// @brief Callback for event receiver, NotifySystemState
    void RegistReceiverNotifySystemState();
    
    /// @brief Callback for field notification receiver, NotifyTime
    void RegistReceiverNotifyTime();
    
    /// @brief Callback for field notification receiver, SystemState
    void RegistReceiverSystemState();
    
private:
    /// @brief Logger for this port
    ara::log::Logger& m_logger;
    
    /// @brief Flag of port status
    bool m_running;
    
    /// @brief Flag of find service status
    bool m_found;
    
    /// @brief Mutex for this port
    std::mutex m_mutex; 
    
    /// @brief AUTOSAR Port Interface
    std::unique_ptr<ivi::info::statemanager::service::proxy::StateManagerProxy> m_interface;
    
    /// @brief Find service handle
    std::unique_ptr<ara::com::FindServiceHandle> m_findHandle;
    
    /// @brief Callback from software component, NotifySystemState
    std::function<void(const ivi::info::statemanager::service::proxy::events::NotifySystemState::SampleType&)> m_receiverNotifySystemState;
    
    /// @brief Callback from software component, NotifyTime
    std::function<void(const ivi::info::statemanager::service::proxy::fields::NotifyTime::FieldType&)> m_receiverNotifyTime;
    
    /// @brief Callback from software component, SystemState
    std::function<void(const ivi::info::statemanager::service::proxy::fields::SystemState::FieldType&)> m_receiverSystemState;
    
};
 
} /// namespace port
} /// namespace aa
} /// namespace monitoringmanager
 
#endif /// PARA_AA_GEN_SOFTWARE_COMPONENT_RPORT_MONITORINGMANAGER_AA_RPORTSTATEMANAGER_H