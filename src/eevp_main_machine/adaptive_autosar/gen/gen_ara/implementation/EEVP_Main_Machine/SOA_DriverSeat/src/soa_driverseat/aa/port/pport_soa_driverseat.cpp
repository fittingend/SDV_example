///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : pport_soa_driverseat.cpp
/// SOFTWARE COMPONENT NAME           : PPort_SOA_DriverSeat
/// GENERATED DATE                    : 2025-08-30 10:53:36
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "soa_driverseat/aa/port/pport_soa_driverseat.h"
 
namespace eevp
{
namespace control
{
namespace skeleton
{
 
SoaDriverSeatSkeletonImpl::SoaDriverSeatSkeletonImpl(ara::core::InstanceSpecifier instanceSpec, ara::com::MethodCallProcessingMode mode)
    : SoaDriverSeatSkeleton(instanceSpec, mode)
    , m_logger(ara::log::CreateLogger("SDST", "PORT", ara::log::LogLevel::kVerbose))
    , m_soaDrvSeatDeviceNormal{eevp::control::SoaDeviceIsNormal::kNORMAL}
    , m_soaDrvSeatMotorDirection{eevp::control::SoaSeatSlideDirection::kSTOP, eevp::control::SoaSeatReclineDirection::kSTOP, eevp::control::SoaSeatHeightDirection::kSTOP, eevp::control::SoaSeatTiltDirection::kSTOP}
    , m_soaDrvSeatMotorPosition{0U, 0U, 0U, 0U}
    , m_soaDrvSeatSwVersion{0U}
{
    // regist get handler, soaDrvSeatDeviceNormal
    auto soadrvseatdevicenormal_get_handler = [this]() {
        return GetsoaDrvSeatDeviceNormal();
    };
    soaDrvSeatDeviceNormal.RegisterGetHandler(soadrvseatdevicenormal_get_handler);
    
    // regist get handler, soaDrvSeatMotorDirection
    auto soadrvseatmotordirection_get_handler = [this]() {
        return GetsoaDrvSeatMotorDirection();
    };
    soaDrvSeatMotorDirection.RegisterGetHandler(soadrvseatmotordirection_get_handler);
    
    // regist get handler, soaDrvSeatMotorPosition
    auto soadrvseatmotorposition_get_handler = [this]() {
        return GetsoaDrvSeatMotorPosition();
    };
    soaDrvSeatMotorPosition.RegisterGetHandler(soadrvseatmotorposition_get_handler);
    
    // regist get handler, soaDrvSeatSwVersion
    auto soadrvseatswversion_get_handler = [this]() {
        return GetsoaDrvSeatSwVersion();
    };
    soaDrvSeatSwVersion.RegisterGetHandler(soadrvseatswversion_get_handler);
}
 
void SoaDriverSeatSkeletonImpl::RequestMoveDrvSeatHeight(const eevp::control::SoaSeatHeightDirection& dir)
{
    m_logger.LogVerbose() << "PPort_SOA_DriverSeat::RequestMoveDrvSeatHeight::Triggered";
    
    // put your logic
}
 
void SoaDriverSeatSkeletonImpl::RequestMoveDrvSeatRecline(const eevp::control::SoaSeatReclineDirection& dir)
{
    m_logger.LogVerbose() << "PPort_SOA_DriverSeat::RequestMoveDrvSeatRecline::Triggered";
    
    // put your logic
}
 
void SoaDriverSeatSkeletonImpl::RequestMoveDrvSeatSlide(const eevp::control::SoaSeatSlideDirection& dir)
{
    m_logger.LogVerbose() << "PPort_SOA_DriverSeat::RequestMoveDrvSeatSlide::Triggered";
    
    // put your logic
}
 
void SoaDriverSeatSkeletonImpl::RequestMoveDrvSeatTilt(const eevp::control::SoaSeatTiltDirection& dir)
{
    m_logger.LogVerbose() << "PPort_SOA_DriverSeat::RequestMoveDrvSeatTilt::Triggered";
    
    // put your logic
}
 
ara::core::Future<fields::soaDrvSeatDeviceNormal::FieldType> SoaDriverSeatSkeletonImpl::GetsoaDrvSeatDeviceNormal()
{
    m_logger.LogVerbose() << "PPort_SOA_DriverSeat::GetsoaDrvSeatDeviceNormal::Requested";
    
    ara::core::Promise<fields::soaDrvSeatDeviceNormal::FieldType> promise;
    
    promise.set_value(m_soaDrvSeatDeviceNormal);
    return promise.get_future();
}
 
void SoaDriverSeatSkeletonImpl::NotifysoaDrvSeatDeviceNormal()
{
    auto notify = soaDrvSeatDeviceNormal.Update(m_soaDrvSeatDeviceNormal);
    if (notify.HasValue())
    {
        m_logger.LogVerbose() << "PPort_SOA_DriverSeat::NotifysoaDrvSeatDeviceNormal::Update";
    }
    else
    {
        m_logger.LogError() << "PPort_SOA_DriverSeat::NotifysoaDrvSeatDeviceNormal::Update::" << notify.Error().Message();
    }
}
 
void SoaDriverSeatSkeletonImpl::UpdatesoaDrvSeatDeviceNormal(const fields::soaDrvSeatDeviceNormal::FieldType& value)
{
    m_soaDrvSeatDeviceNormal = value;
}
 
ara::core::Future<fields::soaDrvSeatMotorDirection::FieldType> SoaDriverSeatSkeletonImpl::GetsoaDrvSeatMotorDirection()
{
    m_logger.LogVerbose() << "PPort_SOA_DriverSeat::GetsoaDrvSeatMotorDirection::Requested";
    
    ara::core::Promise<fields::soaDrvSeatMotorDirection::FieldType> promise;
    
    promise.set_value(m_soaDrvSeatMotorDirection);
    return promise.get_future();
}
 
void SoaDriverSeatSkeletonImpl::NotifysoaDrvSeatMotorDirection()
{
    auto notify = soaDrvSeatMotorDirection.Update(m_soaDrvSeatMotorDirection);
    if (notify.HasValue())
    {
        m_logger.LogVerbose() << "PPort_SOA_DriverSeat::NotifysoaDrvSeatMotorDirection::Update";
    }
    else
    {
        m_logger.LogError() << "PPort_SOA_DriverSeat::NotifysoaDrvSeatMotorDirection::Update::" << notify.Error().Message();
    }
}
 
void SoaDriverSeatSkeletonImpl::UpdatesoaDrvSeatMotorDirection(const fields::soaDrvSeatMotorDirection::FieldType& value)
{
    m_soaDrvSeatMotorDirection = value;
}
 
ara::core::Future<fields::soaDrvSeatMotorPosition::FieldType> SoaDriverSeatSkeletonImpl::GetsoaDrvSeatMotorPosition()
{
    m_logger.LogVerbose() << "PPort_SOA_DriverSeat::GetsoaDrvSeatMotorPosition::Requested";
    
    ara::core::Promise<fields::soaDrvSeatMotorPosition::FieldType> promise;
    
    promise.set_value(m_soaDrvSeatMotorPosition);
    return promise.get_future();
}
 
void SoaDriverSeatSkeletonImpl::NotifysoaDrvSeatMotorPosition()
{
    auto notify = soaDrvSeatMotorPosition.Update(m_soaDrvSeatMotorPosition);
    if (notify.HasValue())
    {
        m_logger.LogVerbose() << "PPort_SOA_DriverSeat::NotifysoaDrvSeatMotorPosition::Update";
    }
    else
    {
        m_logger.LogError() << "PPort_SOA_DriverSeat::NotifysoaDrvSeatMotorPosition::Update::" << notify.Error().Message();
    }
}
 
void SoaDriverSeatSkeletonImpl::UpdatesoaDrvSeatMotorPosition(const fields::soaDrvSeatMotorPosition::FieldType& value)
{
    m_soaDrvSeatMotorPosition = value;
}
 
ara::core::Future<fields::soaDrvSeatSwVersion::FieldType> SoaDriverSeatSkeletonImpl::GetsoaDrvSeatSwVersion()
{
    m_logger.LogVerbose() << "PPort_SOA_DriverSeat::GetsoaDrvSeatSwVersion::Requested";
    
    ara::core::Promise<fields::soaDrvSeatSwVersion::FieldType> promise;
    
    promise.set_value(m_soaDrvSeatSwVersion);
    return promise.get_future();
}
 
void SoaDriverSeatSkeletonImpl::NotifysoaDrvSeatSwVersion()
{
    auto notify = soaDrvSeatSwVersion.Update(m_soaDrvSeatSwVersion);
    if (notify.HasValue())
    {
        m_logger.LogVerbose() << "PPort_SOA_DriverSeat::NotifysoaDrvSeatSwVersion::Update";
    }
    else
    {
        m_logger.LogError() << "PPort_SOA_DriverSeat::NotifysoaDrvSeatSwVersion::Update::" << notify.Error().Message();
    }
}
 
void SoaDriverSeatSkeletonImpl::UpdatesoaDrvSeatSwVersion(const fields::soaDrvSeatSwVersion::FieldType& value)
{
    m_soaDrvSeatSwVersion = value;
}
 
} /// namespace skeleton
} /// namespace control
} /// namespace eevp

namespace soa_driverseat
{
namespace aa
{
namespace port
{
 
PPort_SOA_DriverSeat::PPort_SOA_DriverSeat()
    : m_logger(ara::log::CreateLogger("SDST", "PORT", ara::log::LogLevel::kVerbose))
    , m_running{false}
{
}
 
PPort_SOA_DriverSeat::~PPort_SOA_DriverSeat()
{
}
 
void PPort_SOA_DriverSeat::Start()
{
    m_logger.LogVerbose() << "PPort_SOA_DriverSeat::Start";
    
    // construct skeleton
    ara::core::InstanceSpecifier specifier{"SOA_DriverSeat/AA/PPort_SOA_DriverSeat"};
    m_interface = std::make_unique<eevp::control::skeleton::SoaDriverSeatSkeletonImpl>(specifier);
    
    // offer service
    auto offer = m_interface->OfferService();
    if (offer.HasValue())
    {
        m_running = true;
        m_logger.LogVerbose() << "PPort_SOA_DriverSeat::Start::OfferService";
    }
    else
    {
        m_running = false;
        m_logger.LogError() << "PPort_SOA_DriverSeat::Start::OfferService::" << offer.Error().Message();
    }
}
 
void PPort_SOA_DriverSeat::Terminate()
{
    m_logger.LogVerbose() << "PPort_SOA_DriverSeat::Terminate";
    
    // stop port
    m_running = false;
    
    // stop offer service
    m_interface->StopOfferService();
    m_logger.LogVerbose() << "PPort_SOA_DriverSeat::Terminate::StopOfferService";
}
 
void PPort_SOA_DriverSeat::WriteValuesoaDrvSeatDeviceNormal(const eevp::control::skeleton::fields::soaDrvSeatDeviceNormal::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdatesoaDrvSeatDeviceNormal(value);
}
 
void PPort_SOA_DriverSeat::NotifyFieldsoaDrvSeatDeviceNormalCyclic()
{
    while (m_running)
    {
        {
            std::lock_guard<std::mutex> lock(m_mutex);
            
            m_interface->NotifysoaDrvSeatDeviceNormal();
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void PPort_SOA_DriverSeat::NotifyFieldsoaDrvSeatDeviceNormalTriggered()
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->NotifysoaDrvSeatDeviceNormal();
}
 
void PPort_SOA_DriverSeat::NotifyFieldsoaDrvSeatDeviceNormalTriggered(const eevp::control::skeleton::fields::soaDrvSeatDeviceNormal::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdatesoaDrvSeatDeviceNormal(value);
    m_interface->NotifysoaDrvSeatDeviceNormal();
}
 
void PPort_SOA_DriverSeat::WriteValuesoaDrvSeatMotorDirection(const eevp::control::skeleton::fields::soaDrvSeatMotorDirection::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdatesoaDrvSeatMotorDirection(value);
}
 
void PPort_SOA_DriverSeat::NotifyFieldsoaDrvSeatMotorDirectionCyclic()
{
    while (m_running)
    {
        {
            std::lock_guard<std::mutex> lock(m_mutex);
            
            m_interface->NotifysoaDrvSeatMotorDirection();
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void PPort_SOA_DriverSeat::NotifyFieldsoaDrvSeatMotorDirectionTriggered()
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->NotifysoaDrvSeatMotorDirection();
}
 
void PPort_SOA_DriverSeat::NotifyFieldsoaDrvSeatMotorDirectionTriggered(const eevp::control::skeleton::fields::soaDrvSeatMotorDirection::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdatesoaDrvSeatMotorDirection(value);
    m_interface->NotifysoaDrvSeatMotorDirection();
}
 
void PPort_SOA_DriverSeat::WriteValuesoaDrvSeatMotorPosition(const eevp::control::skeleton::fields::soaDrvSeatMotorPosition::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdatesoaDrvSeatMotorPosition(value);
}
 
void PPort_SOA_DriverSeat::NotifyFieldsoaDrvSeatMotorPositionCyclic()
{
    while (m_running)
    {
        {
            std::lock_guard<std::mutex> lock(m_mutex);
            
            m_interface->NotifysoaDrvSeatMotorPosition();
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void PPort_SOA_DriverSeat::NotifyFieldsoaDrvSeatMotorPositionTriggered()
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->NotifysoaDrvSeatMotorPosition();
}
 
void PPort_SOA_DriverSeat::NotifyFieldsoaDrvSeatMotorPositionTriggered(const eevp::control::skeleton::fields::soaDrvSeatMotorPosition::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdatesoaDrvSeatMotorPosition(value);
    m_interface->NotifysoaDrvSeatMotorPosition();
}
 
void PPort_SOA_DriverSeat::WriteValuesoaDrvSeatSwVersion(const eevp::control::skeleton::fields::soaDrvSeatSwVersion::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdatesoaDrvSeatSwVersion(value);
}
 
void PPort_SOA_DriverSeat::NotifyFieldsoaDrvSeatSwVersionCyclic()
{
    while (m_running)
    {
        {
            std::lock_guard<std::mutex> lock(m_mutex);
            
            m_interface->NotifysoaDrvSeatSwVersion();
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void PPort_SOA_DriverSeat::NotifyFieldsoaDrvSeatSwVersionTriggered()
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->NotifysoaDrvSeatSwVersion();
}
 
void PPort_SOA_DriverSeat::NotifyFieldsoaDrvSeatSwVersionTriggered(const eevp::control::skeleton::fields::soaDrvSeatSwVersion::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdatesoaDrvSeatSwVersion(value);
    m_interface->NotifysoaDrvSeatSwVersion();
}
 
} /// namespace port
} /// namespace aa
} /// namespace soa_driverseat
 
/// EOF