///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : pport_soa_driverseat.h
/// SOFTWARE COMPONENT NAME           : PPort_SOA_DriverSeat
/// GENERATED DATE                    : 2025-08-30 10:53:36
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef PARA_AA_GEN_SOFTWARE_COMPONENT_PPORT_SOA_DRIVERSEAT_AA_PPORT_SOA_DRIVERSEAT_H
#define PARA_AA_GEN_SOFTWARE_COMPONENT_PPORT_SOA_DRIVERSEAT_AA_PPORT_SOA_DRIVERSEAT_H
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// INCLUSION HEADER FILES
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "eevp/control/soadriverseat_skeleton.h"
 
#include "ara/log/logger.h"
 
#include <mutex>
#include <thread>
 
namespace eevp
{
namespace control
{
namespace skeleton
{
 
class SoaDriverSeatSkeletonImpl : public SoaDriverSeatSkeleton
{
public:
    /// @brief Constructor
    SoaDriverSeatSkeletonImpl(ara::core::InstanceSpecifier instanceSpec, ara::com::MethodCallProcessingMode mode = ara::com::MethodCallProcessingMode::kEvent);
    
    /// @brief Fire & Forget method, RequestMoveDrvSeatHeight
    void RequestMoveDrvSeatHeight(const eevp::control::SoaSeatHeightDirection& dir) override;
    
    /// @brief Fire & Forget method, RequestMoveDrvSeatRecline
    void RequestMoveDrvSeatRecline(const eevp::control::SoaSeatReclineDirection& dir) override;
    
    /// @brief Fire & Forget method, RequestMoveDrvSeatSlide
    void RequestMoveDrvSeatSlide(const eevp::control::SoaSeatSlideDirection& dir) override;
    
    /// @brief Fire & Forget method, RequestMoveDrvSeatTilt
    void RequestMoveDrvSeatTilt(const eevp::control::SoaSeatTiltDirection& dir) override;
    
    /// @brief Getter for field, soaDrvSeatDeviceNormal
    ara::core::Future<fields::soaDrvSeatDeviceNormal::FieldType> GetsoaDrvSeatDeviceNormal();
    
    /// @brief Notifier for field, soaDrvSeatDeviceNormal
    void NotifysoaDrvSeatDeviceNormal();
    
    /// @brief Update field value by software component, soaDrvSeatDeviceNormal
    void UpdatesoaDrvSeatDeviceNormal(const fields::soaDrvSeatDeviceNormal::FieldType& value);
    
    /// @brief Getter for field, soaDrvSeatMotorDirection
    ara::core::Future<fields::soaDrvSeatMotorDirection::FieldType> GetsoaDrvSeatMotorDirection();
    
    /// @brief Notifier for field, soaDrvSeatMotorDirection
    void NotifysoaDrvSeatMotorDirection();
    
    /// @brief Update field value by software component, soaDrvSeatMotorDirection
    void UpdatesoaDrvSeatMotorDirection(const fields::soaDrvSeatMotorDirection::FieldType& value);
    
    /// @brief Getter for field, soaDrvSeatMotorPosition
    ara::core::Future<fields::soaDrvSeatMotorPosition::FieldType> GetsoaDrvSeatMotorPosition();
    
    /// @brief Notifier for field, soaDrvSeatMotorPosition
    void NotifysoaDrvSeatMotorPosition();
    
    /// @brief Update field value by software component, soaDrvSeatMotorPosition
    void UpdatesoaDrvSeatMotorPosition(const fields::soaDrvSeatMotorPosition::FieldType& value);
    
    /// @brief Getter for field, soaDrvSeatSwVersion
    ara::core::Future<fields::soaDrvSeatSwVersion::FieldType> GetsoaDrvSeatSwVersion();
    
    /// @brief Notifier for field, soaDrvSeatSwVersion
    void NotifysoaDrvSeatSwVersion();
    
    /// @brief Update field value by software component, soaDrvSeatSwVersion
    void UpdatesoaDrvSeatSwVersion(const fields::soaDrvSeatSwVersion::FieldType& value);
    
private:
    /// @brief Logger for this port
    ara::log::Logger& m_logger;
    
    /// @brief Field, soaDrvSeatDeviceNormal
    fields::soaDrvSeatDeviceNormal::FieldType m_soaDrvSeatDeviceNormal;
    
    /// @brief Field, soaDrvSeatMotorDirection
    fields::soaDrvSeatMotorDirection::FieldType m_soaDrvSeatMotorDirection;
    
    /// @brief Field, soaDrvSeatMotorPosition
    fields::soaDrvSeatMotorPosition::FieldType m_soaDrvSeatMotorPosition;
    
    /// @brief Field, soaDrvSeatSwVersion
    fields::soaDrvSeatSwVersion::FieldType m_soaDrvSeatSwVersion;
    
};
 
} /// namespace skeleton
} /// namespace control
} /// namespace eevp

namespace soa_driverseat
{
namespace aa
{
namespace port
{
 
class PPort_SOA_DriverSeat
{
public:
    /// @brief Constructor
    PPort_SOA_DriverSeat();
    
    /// @brief Destructor
    ~PPort_SOA_DriverSeat();
    
    /// @brief Start port
    void Start();
    
    /// @brief Terminate port
    void Terminate();
    
    /// @brief Write field value to buffer, soaDrvSeatDeviceNormal
    void WriteValuesoaDrvSeatDeviceNormal(const eevp::control::skeleton::fields::soaDrvSeatDeviceNormal::FieldType& value);
     
    /// @brief Notify field cyclic from buffer, soaDrvSeatDeviceNormal
    void NotifyFieldsoaDrvSeatDeviceNormalCyclic();
     
    /// @brief Notify field directly from buffer data, soaDrvSeatDeviceNormal
    void NotifyFieldsoaDrvSeatDeviceNormalTriggered();
     
    /// @brief Notify field directly with argument, soaDrvSeatDeviceNormal
    void NotifyFieldsoaDrvSeatDeviceNormalTriggered(const eevp::control::skeleton::fields::soaDrvSeatDeviceNormal::FieldType& value);

    /// @brief Write field value to buffer, soaDrvSeatMotorDirection
    void WriteValuesoaDrvSeatMotorDirection(const eevp::control::skeleton::fields::soaDrvSeatMotorDirection::FieldType& value);
     
    /// @brief Notify field cyclic from buffer, soaDrvSeatMotorDirection
    void NotifyFieldsoaDrvSeatMotorDirectionCyclic();
     
    /// @brief Notify field directly from buffer data, soaDrvSeatMotorDirection
    void NotifyFieldsoaDrvSeatMotorDirectionTriggered();
     
    /// @brief Notify field directly with argument, soaDrvSeatMotorDirection
    void NotifyFieldsoaDrvSeatMotorDirectionTriggered(const eevp::control::skeleton::fields::soaDrvSeatMotorDirection::FieldType& value);

    /// @brief Write field value to buffer, soaDrvSeatMotorPosition
    void WriteValuesoaDrvSeatMotorPosition(const eevp::control::skeleton::fields::soaDrvSeatMotorPosition::FieldType& value);
     
    /// @brief Notify field cyclic from buffer, soaDrvSeatMotorPosition
    void NotifyFieldsoaDrvSeatMotorPositionCyclic();
     
    /// @brief Notify field directly from buffer data, soaDrvSeatMotorPosition
    void NotifyFieldsoaDrvSeatMotorPositionTriggered();
     
    /// @brief Notify field directly with argument, soaDrvSeatMotorPosition
    void NotifyFieldsoaDrvSeatMotorPositionTriggered(const eevp::control::skeleton::fields::soaDrvSeatMotorPosition::FieldType& value);

    /// @brief Write field value to buffer, soaDrvSeatSwVersion
    void WriteValuesoaDrvSeatSwVersion(const eevp::control::skeleton::fields::soaDrvSeatSwVersion::FieldType& value);
     
    /// @brief Notify field cyclic from buffer, soaDrvSeatSwVersion
    void NotifyFieldsoaDrvSeatSwVersionCyclic();
     
    /// @brief Notify field directly from buffer data, soaDrvSeatSwVersion
    void NotifyFieldsoaDrvSeatSwVersionTriggered();
     
    /// @brief Notify field directly with argument, soaDrvSeatSwVersion
    void NotifyFieldsoaDrvSeatSwVersionTriggered(const eevp::control::skeleton::fields::soaDrvSeatSwVersion::FieldType& value);
     
private:
    /// @brief Logger for this port
    ara::log::Logger& m_logger;
    
    /// @brief Flag of port status
    bool m_running;
    
    /// @brief Mutex for this port
    std::mutex m_mutex;
    
    /// @brief AUTOSAR Port Interface
    std::unique_ptr<eevp::control::skeleton::SoaDriverSeatSkeletonImpl> m_interface;
    
};
 
} /// namespace port
} /// namespace aa
} /// namespace soa_driverseat
 
#endif /// PARA_AA_GEN_SOFTWARE_COMPONENT_PPORT_SOA_DRIVERSEAT_AA_PPORT_SOA_DRIVERSEAT_H