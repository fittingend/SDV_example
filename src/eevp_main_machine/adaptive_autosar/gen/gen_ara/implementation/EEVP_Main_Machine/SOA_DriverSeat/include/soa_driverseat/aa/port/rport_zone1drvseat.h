///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : rport_zone1drvseat.h
/// SOFTWARE COMPONENT NAME           : RPort_Zone1DrvSeat
/// GENERATED DATE                    : 2025-08-30 10:53:36
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef PARA_AA_GEN_SOFTWARE_COMPONENT_RPORT_SOA_DRIVERSEAT_AA_RPORT_ZONE1DRVSEAT_H
#define PARA_AA_GEN_SOFTWARE_COMPONENT_RPORT_SOA_DRIVERSEAT_AA_RPORT_ZONE1DRVSEAT_H
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// INCLUSION HEADER FILES
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "zone1/drvseat/control/zone1drvseat_proxy.h"
 
#include "ara/log/logger.h"
 
#include <mutex>
#include <thread>
 
namespace soa_driverseat
{
namespace aa
{
namespace port
{
 
class RPort_Zone1DrvSeat
{
public:
    /// @brief Constructor
    RPort_Zone1DrvSeat();
    
    /// @brief Destructor
    ~RPort_Zone1DrvSeat();
    
    /// @brief Start port
    void Start();
    
    /// @brief Terminate port
    void Terminate();

    /// @brief Subscribe field notification, zone1DrvSeatMotorDir
    void Subscribezone1DrvSeatMotorDir();
     
    /// @brief Stop field subscription, zone1DrvSeatMotorDir
    void StopSubscribezone1DrvSeatMotorDir();
     
    /// @brief Field notification receive handler, zone1DrvSeatMotorDir
    void ReceiveFieldzone1DrvSeatMotorDirTriggered();
     
    /// @brief Field notification receive handler, zone1DrvSeatMotorDir
    void ReceiveFieldzone1DrvSeatMotorDirCyclic();
     
    /// @brief Read field notification value, zone1DrvSeatMotorDir
    void ReadValuezone1DrvSeatMotorDir(ara::com::SamplePtr<zone1::drvseat::control::proxy::fields::zone1DrvSeatMotorDir::FieldType const> samplePtr);
     
    /// @brief Regist callback from software component
    void RegistFieldHandlerzone1DrvSeatMotorDir(std::function<void(const zone1::drvseat::control::proxy::fields::zone1DrvSeatMotorDir::FieldType&)> handler);
    
    /// @brief Getter method using by software component, zone1DrvSeatMotorDir
    void Getzone1DrvSeatMotorDir();
    
    /// @brief Subscribe field notification, zone1DrvSeatMotorPos
    void Subscribezone1DrvSeatMotorPos();
     
    /// @brief Stop field subscription, zone1DrvSeatMotorPos
    void StopSubscribezone1DrvSeatMotorPos();
     
    /// @brief Field notification receive handler, zone1DrvSeatMotorPos
    void ReceiveFieldzone1DrvSeatMotorPosTriggered();
     
    /// @brief Field notification receive handler, zone1DrvSeatMotorPos
    void ReceiveFieldzone1DrvSeatMotorPosCyclic();
     
    /// @brief Read field notification value, zone1DrvSeatMotorPos
    void ReadValuezone1DrvSeatMotorPos(ara::com::SamplePtr<zone1::drvseat::control::proxy::fields::zone1DrvSeatMotorPos::FieldType const> samplePtr);
     
    /// @brief Regist callback from software component
    void RegistFieldHandlerzone1DrvSeatMotorPos(std::function<void(const zone1::drvseat::control::proxy::fields::zone1DrvSeatMotorPos::FieldType&)> handler);
    
    /// @brief Getter method using by software component, zone1DrvSeatMotorPos
    void Getzone1DrvSeatMotorPos();
    
    /// @brief Fire and Forget method using by software component, controlMotor
    void RequestcontrolMotor(const zone1::drvseat::control::EcuDrvSeatMotorInst& inst);
    
private:
    /// @brief Callback for find service
    void Find(ara::com::ServiceHandleContainer<zone1::drvseat::control::proxy::Zone1DrvSeatProxy::HandleType> handles,
              ara::com::FindServiceHandle findHandle);

    /// @brief Callback for field notification receiver, zone1DrvSeatMotorDir
    void RegistReceiverzone1DrvSeatMotorDir();
    
    /// @brief Callback for field notification receiver, zone1DrvSeatMotorPos
    void RegistReceiverzone1DrvSeatMotorPos();
    
private:
    /// @brief Logger for this port
    ara::log::Logger& m_logger;
    
    /// @brief Flag of port status
    bool m_running;
    
    /// @brief Flag of find service status
    bool m_found;
    
    /// @brief Mutex for this port
    std::mutex m_mutex; 
    
    /// @brief AUTOSAR Port Interface
    std::unique_ptr<zone1::drvseat::control::proxy::Zone1DrvSeatProxy> m_interface;
    
    /// @brief Find service handle
    std::unique_ptr<ara::com::FindServiceHandle> m_findHandle;

    /// @brief Callback from software component, zone1DrvSeatMotorDir
    std::function<void(const zone1::drvseat::control::proxy::fields::zone1DrvSeatMotorDir::FieldType&)> m_receiverzone1DrvSeatMotorDir;
    
    /// @brief Callback from software component, zone1DrvSeatMotorPos
    std::function<void(const zone1::drvseat::control::proxy::fields::zone1DrvSeatMotorPos::FieldType&)> m_receiverzone1DrvSeatMotorPos;
    
};
 
} /// namespace port
} /// namespace aa
} /// namespace soa_driverseat
 
#endif /// PARA_AA_GEN_SOFTWARE_COMPONENT_RPORT_SOA_DRIVERSEAT_AA_RPORT_ZONE1DRVSEAT_H