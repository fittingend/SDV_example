///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : soa_driverseat.cpp
/// SOFTWARE COMPONENT NAME           : SOA_DriverSeat
/// GENERATED DATE                    : 2025-08-30 10:53:36
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// INCLUSION HEADER FILES
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "soa_driverseat/aa/soa_driverseat.h"
 
namespace soa_driverseat
{
namespace aa
{
 
SOA_DriverSeat::SOA_DriverSeat()
    : m_logger(ara::log::CreateLogger("SDST", "SWC", ara::log::LogLevel::kVerbose))
    , m_running{false}
    , m_workers(7)
{
}
 
SOA_DriverSeat::~SOA_DriverSeat()
{
}
 
bool SOA_DriverSeat::Initialize()
{
    m_logger.LogVerbose() << "SOA_DriverSeat::Initialize";
    
    bool init = true;
    
    m_PPort_SOA_DriverSeat = std::make_unique<soa_driverseat::aa::port::PPort_SOA_DriverSeat>();
    m_RPort_Zone1DrvSeat = std::make_unique<soa_driverseat::aa::port::RPort_Zone1DrvSeat>();
    m_RPort_Zone1VehicleInfo = std::make_unique<soa_driverseat::aa::port::RPort_Zone1VehicleInfo>();
    
    // put your code for initialization
    
    return init;
}
 
void SOA_DriverSeat::Start()
{
    m_logger.LogVerbose() << "SOA_DriverSeat::Start";
    
    m_PPort_SOA_DriverSeat->Start();
    m_RPort_Zone1DrvSeat->Start();
    m_RPort_Zone1VehicleInfo->Start();
}
 
void SOA_DriverSeat::Terminate()
{
    m_logger.LogVerbose() << "SOA_DriverSeat::Terminate";
    
    // stop running
    m_running = false;
    
    m_PPort_SOA_DriverSeat->Terminate();
    m_RPort_Zone1DrvSeat->Terminate();
    m_RPort_Zone1VehicleInfo->Terminate();
}
 
void SOA_DriverSeat::Run()
{
    m_logger.LogVerbose() << "SOA_DriverSeat::Run";
    
    // start running
    m_running = true;
    
    m_workers.Async([this] { m_PPort_SOA_DriverSeat->NotifyFieldsoaDrvSeatDeviceNormalCyclic(); });
    m_workers.Async([this] { m_PPort_SOA_DriverSeat->NotifyFieldsoaDrvSeatMotorDirectionCyclic(); });
    m_workers.Async([this] { m_PPort_SOA_DriverSeat->NotifyFieldsoaDrvSeatMotorPositionCyclic(); });
    m_workers.Async([this] { m_PPort_SOA_DriverSeat->NotifyFieldsoaDrvSeatSwVersionCyclic(); });
    m_workers.Async([this] { m_RPort_Zone1DrvSeat->ReceiveFieldzone1DrvSeatMotorDirCyclic(); });
    m_workers.Async([this] { m_RPort_Zone1DrvSeat->ReceiveFieldzone1DrvSeatMotorPosCyclic(); });
    m_workers.Async([this] { m_RPort_Zone1VehicleInfo->ReceiveEventVehicleInfoCyclic(); });
    
    m_workers.Wait();
}
 
} /// namespace aa
} /// namespace soa_driverseat
