///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : drivernotification.cpp
/// SOFTWARE COMPONENT NAME           : DriverNotification
/// GENERATED DATE                    : 2025-08-30 10:53:51
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "vucm/para/port/drivernotification.h"
 
namespace ara
{
namespace vucm
{
namespace driver
{
namespace skeleton
{
 
VehicleDriverApplicationSkeletonImpl::VehicleDriverApplicationSkeletonImpl(ara::core::InstanceSpecifier instanceSpec, ara::com::MethodCallProcessingMode mode)
    : VehicleDriverApplicationSkeleton(instanceSpec, mode)
    , m_logger(ara::log::CreateLogger("VUCM", "PORT", ara::log::LogLevel::kVerbose))
    , m_ApprovalRequired{false}
    , m_CampaignState{ara::ucm::CampaignStateType::kIdle}
    , m_SafetyPolicy{"str_safetypolicytype"}
    , m_SafetyState{false}
{
    // regist get handler, ApprovalRequired
    auto approvalrequired_get_handler = [this]() {
        return GetApprovalRequired();
    };
    ApprovalRequired.RegisterGetHandler(approvalrequired_get_handler);
    
    // regist get handler, CampaignState
    auto campaignstate_get_handler = [this]() {
        return GetCampaignState();
    };
    CampaignState.RegisterGetHandler(campaignstate_get_handler);
    
    // regist get handler, SafetyPolicy
    auto safetypolicy_get_handler = [this]() {
        return GetSafetyPolicy();
    };
    SafetyPolicy.RegisterGetHandler(safetypolicy_get_handler);
    
    // regist get handler, SafetyState
    auto safetystate_get_handler = [this]() {
        return GetSafetyState();
    };
    SafetyState.RegisterGetHandler(safetystate_get_handler);
}
 
ara::core::Future<VehicleDriverApplicationSkeleton::AllowCampaignOutput> VehicleDriverApplicationSkeletonImpl::AllowCampaign()
{
    m_logger.LogVerbose() << "DriverNotification::AllowCampaign::Requested";
    
    AllowCampaignOutput response;
    ara::core::Promise<AllowCampaignOutput> promise;
    
    // put your logic
    
    promise.set_value(response);
    return promise.get_future();
}
 
ara::core::Future<VehicleDriverApplicationSkeleton::CancelCampaignOutput> VehicleDriverApplicationSkeletonImpl::CancelCampaign(const bool& DisableCampaign)
{
    m_logger.LogVerbose() << "DriverNotification::CancelCampaign::Requested";
    
    CancelCampaignOutput response;
    ara::core::Promise<CancelCampaignOutput> promise;
    
    // put your logic
    
    promise.set_value(response);
    return promise.get_future();
}
 
ara::core::Future<VehicleDriverApplicationSkeleton::DriverApprovalOutput> VehicleDriverApplicationSkeletonImpl::DriverApproval(const bool& Approval, const ara::ucm::SafetyPolicyType& SafetyPolicy)
{
    m_logger.LogVerbose() << "DriverNotification::DriverApproval::Requested";
    
    DriverApprovalOutput response;
    ara::core::Promise<DriverApprovalOutput> promise;
    
    // put your logic
    
    promise.set_value(response);
    return promise.get_future();
}
 
ara::core::Future<VehicleDriverApplicationSkeleton::GetCampaignHistoryOutput> VehicleDriverApplicationSkeletonImpl::GetCampaignHistory(const std::uint64_t& timestampGE, const std::uint64_t& timestampLT)
{
    m_logger.LogVerbose() << "DriverNotification::GetCampaignHistory::Requested";
    
    GetCampaignHistoryOutput response;
    ara::core::Promise<GetCampaignHistoryOutput> promise;
    
    // put your logic
    
    promise.set_value(response);
    return promise.get_future();
}
 
ara::core::Future<VehicleDriverApplicationSkeleton::GetSwClusterDescriptionOutput> VehicleDriverApplicationSkeletonImpl::GetSwClusterDescription()
{
    m_logger.LogVerbose() << "DriverNotification::GetSwClusterDescription::Requested";
    
    GetSwClusterDescriptionOutput response;
    ara::core::Promise<GetSwClusterDescriptionOutput> promise;
    
    // put your logic
    
    promise.set_value(response);
    return promise.get_future();
}
 
ara::core::Future<VehicleDriverApplicationSkeleton::GetSwPackageDescriptionOutput> VehicleDriverApplicationSkeletonImpl::GetSwPackageDescription()
{
    m_logger.LogVerbose() << "DriverNotification::GetSwPackageDescription::Requested";
    
    GetSwPackageDescriptionOutput response;
    ara::core::Promise<GetSwPackageDescriptionOutput> promise;
    
    // put your logic
    
    promise.set_value(response);
    return promise.get_future();
}
 
ara::core::Future<VehicleDriverApplicationSkeleton::GetSwProcessProgressOutput> VehicleDriverApplicationSkeletonImpl::GetSwProcessProgress()
{
    m_logger.LogVerbose() << "DriverNotification::GetSwProcessProgress::Requested";
    
    GetSwProcessProgressOutput response;
    ara::core::Promise<GetSwProcessProgressOutput> promise;
    
    // put your logic
    
    promise.set_value(response);
    return promise.get_future();
}
 
ara::core::Future<VehicleDriverApplicationSkeleton::GetSwTransferProgressOutput> VehicleDriverApplicationSkeletonImpl::GetSwTransferProgress()
{
    m_logger.LogVerbose() << "DriverNotification::GetSwTransferProgress::Requested";
    
    GetSwTransferProgressOutput response;
    ara::core::Promise<GetSwTransferProgressOutput> promise;
    
    // put your logic
    
    promise.set_value(response);
    return promise.get_future();
}
 
ara::core::Future<fields::ApprovalRequired::FieldType> VehicleDriverApplicationSkeletonImpl::GetApprovalRequired()
{
    m_logger.LogVerbose() << "DriverNotification::GetApprovalRequired::Requested";
    
    ara::core::Promise<fields::ApprovalRequired::FieldType> promise;
    
    promise.set_value(m_ApprovalRequired);
    return promise.get_future();
}
 
void VehicleDriverApplicationSkeletonImpl::NotifyApprovalRequired()
{
    auto notify = ApprovalRequired.Update(m_ApprovalRequired);
    if (notify.HasValue())
    {
        m_logger.LogVerbose() << "DriverNotification::NotifyApprovalRequired::Update";
    }
    else
    {
        m_logger.LogError() << "DriverNotification::NotifyApprovalRequired::Update::" << notify.Error().Message();
    }
}
 
void VehicleDriverApplicationSkeletonImpl::UpdateApprovalRequired(const fields::ApprovalRequired::FieldType& value)
{
    m_ApprovalRequired = value;
}
 
ara::core::Future<fields::CampaignState::FieldType> VehicleDriverApplicationSkeletonImpl::GetCampaignState()
{
    m_logger.LogVerbose() << "DriverNotification::GetCampaignState::Requested";
    
    ara::core::Promise<fields::CampaignState::FieldType> promise;
    
    promise.set_value(m_CampaignState);
    return promise.get_future();
}
 
void VehicleDriverApplicationSkeletonImpl::NotifyCampaignState()
{
    auto notify = CampaignState.Update(m_CampaignState);
    if (notify.HasValue())
    {
        m_logger.LogVerbose() << "DriverNotification::NotifyCampaignState::Update";
    }
    else
    {
        m_logger.LogError() << "DriverNotification::NotifyCampaignState::Update::" << notify.Error().Message();
    }
}
 
void VehicleDriverApplicationSkeletonImpl::UpdateCampaignState(const fields::CampaignState::FieldType& value)
{
    m_CampaignState = value;
}
 
ara::core::Future<fields::SafetyPolicy::FieldType> VehicleDriverApplicationSkeletonImpl::GetSafetyPolicy()
{
    m_logger.LogVerbose() << "DriverNotification::GetSafetyPolicy::Requested";
    
    ara::core::Promise<fields::SafetyPolicy::FieldType> promise;
    
    promise.set_value(m_SafetyPolicy);
    return promise.get_future();
}
 
void VehicleDriverApplicationSkeletonImpl::NotifySafetyPolicy()
{
    auto notify = SafetyPolicy.Update(m_SafetyPolicy);
    if (notify.HasValue())
    {
        m_logger.LogVerbose() << "DriverNotification::NotifySafetyPolicy::Update";
    }
    else
    {
        m_logger.LogError() << "DriverNotification::NotifySafetyPolicy::Update::" << notify.Error().Message();
    }
}
 
void VehicleDriverApplicationSkeletonImpl::UpdateSafetyPolicy(const fields::SafetyPolicy::FieldType& value)
{
    m_SafetyPolicy = value;
}
 
ara::core::Future<fields::SafetyState::FieldType> VehicleDriverApplicationSkeletonImpl::GetSafetyState()
{
    m_logger.LogVerbose() << "DriverNotification::GetSafetyState::Requested";
    
    ara::core::Promise<fields::SafetyState::FieldType> promise;
    
    promise.set_value(m_SafetyState);
    return promise.get_future();
}
 
void VehicleDriverApplicationSkeletonImpl::NotifySafetyState()
{
    auto notify = SafetyState.Update(m_SafetyState);
    if (notify.HasValue())
    {
        m_logger.LogVerbose() << "DriverNotification::NotifySafetyState::Update";
    }
    else
    {
        m_logger.LogError() << "DriverNotification::NotifySafetyState::Update::" << notify.Error().Message();
    }
}
 
void VehicleDriverApplicationSkeletonImpl::UpdateSafetyState(const fields::SafetyState::FieldType& value)
{
    m_SafetyState = value;
}
 
} /// namespace skeleton
} /// namespace driver
} /// namespace vucm
} /// namespace ara

namespace vucm
{
namespace para
{
namespace port
{
 
DriverNotification::DriverNotification()
    : m_logger(ara::log::CreateLogger("VUCM", "PORT", ara::log::LogLevel::kVerbose))
    , m_running{false}
{
}
 
DriverNotification::~DriverNotification()
{
}
 
void DriverNotification::Start()
{
    m_logger.LogVerbose() << "DriverNotification::Start";
    
    // construct skeleton
    ara::core::InstanceSpecifier specifier{"VUCM/PARA/DriverNotification"};
    m_interface = std::make_unique<ara::vucm::driver::skeleton::VehicleDriverApplicationSkeletonImpl>(specifier);
    
    // offer service
    auto offer = m_interface->OfferService();
    if (offer.HasValue())
    {
        m_running = true;
        m_logger.LogVerbose() << "DriverNotification::Start::OfferService";
    }
    else
    {
        m_running = false;
        m_logger.LogError() << "DriverNotification::Start::OfferService::" << offer.Error().Message();
    }
}
 
void DriverNotification::Terminate()
{
    m_logger.LogVerbose() << "DriverNotification::Terminate";
    
    // stop port
    m_running = false;
    
    // stop offer service
    m_interface->StopOfferService();
    m_logger.LogVerbose() << "DriverNotification::Terminate::StopOfferService";
}
 
void DriverNotification::WriteValueApprovalRequired(const ara::vucm::driver::skeleton::fields::ApprovalRequired::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdateApprovalRequired(value);
}
 
void DriverNotification::NotifyFieldApprovalRequiredCyclic()
{
    while (m_running)
    {
        {
            std::lock_guard<std::mutex> lock(m_mutex);
            
            m_interface->NotifyApprovalRequired();
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void DriverNotification::NotifyFieldApprovalRequiredTriggered()
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->NotifyApprovalRequired();
}
 
void DriverNotification::NotifyFieldApprovalRequiredTriggered(const ara::vucm::driver::skeleton::fields::ApprovalRequired::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdateApprovalRequired(value);
    m_interface->NotifyApprovalRequired();
}
 
void DriverNotification::WriteValueCampaignState(const ara::vucm::driver::skeleton::fields::CampaignState::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdateCampaignState(value);
}
 
void DriverNotification::NotifyFieldCampaignStateCyclic()
{
    while (m_running)
    {
        {
            std::lock_guard<std::mutex> lock(m_mutex);
            
            m_interface->NotifyCampaignState();
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void DriverNotification::NotifyFieldCampaignStateTriggered()
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->NotifyCampaignState();
}
 
void DriverNotification::NotifyFieldCampaignStateTriggered(const ara::vucm::driver::skeleton::fields::CampaignState::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdateCampaignState(value);
    m_interface->NotifyCampaignState();
}
 
void DriverNotification::WriteValueSafetyPolicy(const ara::vucm::driver::skeleton::fields::SafetyPolicy::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdateSafetyPolicy(value);
}
 
void DriverNotification::NotifyFieldSafetyPolicyCyclic()
{
    while (m_running)
    {
        {
            std::lock_guard<std::mutex> lock(m_mutex);
            
            m_interface->NotifySafetyPolicy();
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void DriverNotification::NotifyFieldSafetyPolicyTriggered()
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->NotifySafetyPolicy();
}
 
void DriverNotification::NotifyFieldSafetyPolicyTriggered(const ara::vucm::driver::skeleton::fields::SafetyPolicy::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdateSafetyPolicy(value);
    m_interface->NotifySafetyPolicy();
}
 
void DriverNotification::WriteValueSafetyState(const ara::vucm::driver::skeleton::fields::SafetyState::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdateSafetyState(value);
}
 
void DriverNotification::NotifyFieldSafetyStateCyclic()
{
    while (m_running)
    {
        {
            std::lock_guard<std::mutex> lock(m_mutex);
            
            m_interface->NotifySafetyState();
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void DriverNotification::NotifyFieldSafetyStateTriggered()
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->NotifySafetyState();
}
 
void DriverNotification::NotifyFieldSafetyStateTriggered(const ara::vucm::driver::skeleton::fields::SafetyState::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdateSafetyState(value);
    m_interface->NotifySafetyState();
}
 
} /// namespace port
} /// namespace para
} /// namespace vucm
 
/// EOF