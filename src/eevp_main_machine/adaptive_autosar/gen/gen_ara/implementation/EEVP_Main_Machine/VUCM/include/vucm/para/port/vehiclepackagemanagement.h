///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : vehiclepackagemanagement.h
/// SOFTWARE COMPONENT NAME           : VehiclePackageManagement
/// GENERATED DATE                    : 2025-08-30 10:53:51
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef PARA_AA_GEN_SOFTWARE_COMPONENT_PPORT_VUCM_PARA_VEHICLEPACKAGEMANAGEMENT_H
#define PARA_AA_GEN_SOFTWARE_COMPONENT_PPORT_VUCM_PARA_VEHICLEPACKAGEMANAGEMENT_H
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// INCLUSION HEADER FILES
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "ara/vucm/pkgmgr/vehiclepackagemanagement_skeleton.h"
 
#include "ara/log/logger.h"
 
#include <mutex>
#include <thread>
 
namespace ara
{
namespace vucm
{
namespace pkgmgr
{
namespace skeleton
{
 
class VehiclePackageManagementSkeletonImpl : public VehiclePackageManagementSkeleton
{
public:
    /// @brief Constructor
    VehiclePackageManagementSkeletonImpl(ara::core::InstanceSpecifier instanceSpec, ara::com::MethodCallProcessingMode mode = ara::com::MethodCallProcessingMode::kEvent);
    
    /// @brief Request with Response method, AllowCampaign
    ara::core::Future<VehiclePackageManagementSkeleton::AllowCampaignOutput> AllowCampaign() override;
    
    /// @brief Request with Response method, CancelCampaign
    ara::core::Future<VehiclePackageManagementSkeleton::CancelCampaignOutput> CancelCampaign(const bool& DisableCampaign) override;
    
    /// @brief Request with Response method, DeleteTransfer
    ara::core::Future<VehiclePackageManagementSkeleton::DeleteTransferOutput> DeleteTransfer(const ara::ucm::TransferIdType& id) override;
    
    /// @brief Request with Response method, GetCampaignHistory
    ara::core::Future<VehiclePackageManagementSkeleton::GetCampaignHistoryOutput> GetCampaignHistory(const std::uint64_t& timestampGE, const std::uint64_t& timestampLT) override;
    
    /// @brief Request with Response method, GetSwClusterInfo
    ara::core::Future<VehiclePackageManagementSkeleton::GetSwClusterInfoOutput> GetSwClusterInfo() override;
    
    /// @brief Request with Response method, GetSwPackages
    ara::core::Future<VehiclePackageManagementSkeleton::GetSwPackagesOutput> GetSwPackages() override;
    
    /// @brief Request with Response method, SwPackageInventory
    ara::core::Future<VehiclePackageManagementSkeleton::SwPackageInventoryOutput> SwPackageInventory(const ara::ucm::SwNameVersionVectorType& AvailableSoftwarePackages) override;
    
    /// @brief Request with Response method, TransferData
    ara::core::Future<VehiclePackageManagementSkeleton::TransferDataOutput> TransferData(const ara::ucm::TransferIdType& id, const ara::ucm::ByteVectorType& data, const std::uint64_t& blockCounter) override;
    
    /// @brief Request with Response method, TransferExit
    ara::core::Future<VehiclePackageManagementSkeleton::TransferExitOutput> TransferExit(const ara::ucm::TransferIdType& id) override;
    
    /// @brief Request with Response method, TransferStart
    ara::core::Future<VehiclePackageManagementSkeleton::TransferStartOutput> TransferStart(const ara::ucm::SwNameType& SoftwarePackageName, const std::uint64_t& size) override;
    
    /// @brief Request with Response method, TransferVehiclePackage
    ara::core::Future<VehiclePackageManagementSkeleton::TransferVehiclePackageOutput> TransferVehiclePackage(const std::uint64_t& size) override;
    
    /// @brief Getter for field, RequestedPackage
    ara::core::Future<fields::RequestedPackage::FieldType> GetRequestedPackage();
    
    /// @brief Notifier for field, RequestedPackage
    void NotifyRequestedPackage();
    
    /// @brief Update field value by software component, RequestedPackage
    void UpdateRequestedPackage(const fields::RequestedPackage::FieldType& value);
    
    /// @brief Getter for field, SafetyState
    ara::core::Future<fields::SafetyState::FieldType> GetSafetyState();
    
    /// @brief Notifier for field, SafetyState
    void NotifySafetyState();
    
    /// @brief Update field value by software component, SafetyState
    void UpdateSafetyState(const fields::SafetyState::FieldType& value);
    
    /// @brief Getter for field, TransferState
    ara::core::Future<fields::TransferState::FieldType> GetTransferState();
    
    /// @brief Notifier for field, TransferState
    void NotifyTransferState();
    
    /// @brief Update field value by software component, TransferState
    void UpdateTransferState(const fields::TransferState::FieldType& value);
    
private:
    /// @brief Logger for this port
    ara::log::Logger& m_logger;
    
    /// @brief Field, RequestedPackage
    fields::RequestedPackage::FieldType m_RequestedPackage;
    
    /// @brief Field, SafetyState
    fields::SafetyState::FieldType m_SafetyState;
    
    /// @brief Field, TransferState
    fields::TransferState::FieldType m_TransferState;
    
};
 
} /// namespace skeleton
} /// namespace pkgmgr
} /// namespace vucm
} /// namespace ara

namespace vucm
{
namespace para
{
namespace port
{
 
class VehiclePackageManagement
{
public:
    /// @brief Constructor
    VehiclePackageManagement();
    
    /// @brief Destructor
    ~VehiclePackageManagement();
    
    /// @brief Start port
    void Start();
    
    /// @brief Terminate port
    void Terminate();
    
    /// @brief Write field value to buffer, RequestedPackage
    void WriteValueRequestedPackage(const ara::vucm::pkgmgr::skeleton::fields::RequestedPackage::FieldType& value);
     
    /// @brief Notify field cyclic from buffer, RequestedPackage
    void NotifyFieldRequestedPackageCyclic();
     
    /// @brief Notify field directly from buffer data, RequestedPackage
    void NotifyFieldRequestedPackageTriggered();
     
    /// @brief Notify field directly with argument, RequestedPackage
    void NotifyFieldRequestedPackageTriggered(const ara::vucm::pkgmgr::skeleton::fields::RequestedPackage::FieldType& value);

    /// @brief Write field value to buffer, SafetyState
    void WriteValueSafetyState(const ara::vucm::pkgmgr::skeleton::fields::SafetyState::FieldType& value);
     
    /// @brief Notify field cyclic from buffer, SafetyState
    void NotifyFieldSafetyStateCyclic();
     
    /// @brief Notify field directly from buffer data, SafetyState
    void NotifyFieldSafetyStateTriggered();
     
    /// @brief Notify field directly with argument, SafetyState
    void NotifyFieldSafetyStateTriggered(const ara::vucm::pkgmgr::skeleton::fields::SafetyState::FieldType& value);

    /// @brief Write field value to buffer, TransferState
    void WriteValueTransferState(const ara::vucm::pkgmgr::skeleton::fields::TransferState::FieldType& value);
     
    /// @brief Notify field cyclic from buffer, TransferState
    void NotifyFieldTransferStateCyclic();
     
    /// @brief Notify field directly from buffer data, TransferState
    void NotifyFieldTransferStateTriggered();
     
    /// @brief Notify field directly with argument, TransferState
    void NotifyFieldTransferStateTriggered(const ara::vucm::pkgmgr::skeleton::fields::TransferState::FieldType& value);
     
private:
    /// @brief Logger for this port
    ara::log::Logger& m_logger;
    
    /// @brief Flag of port status
    bool m_running;
    
    /// @brief Mutex for this port
    std::mutex m_mutex;
    
    /// @brief AUTOSAR Port Interface
    std::unique_ptr<ara::vucm::pkgmgr::skeleton::VehiclePackageManagementSkeletonImpl> m_interface;
    
};
 
} /// namespace port
} /// namespace para
} /// namespace vucm
 
#endif /// PARA_AA_GEN_SOFTWARE_COMPONENT_PPORT_VUCM_PARA_VEHICLEPACKAGEMANAGEMENT_H