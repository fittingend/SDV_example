///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : packagemanagement.h
/// SOFTWARE COMPONENT NAME           : PackageManagement
/// GENERATED DATE                    : 2025-08-30 10:53:51
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef PARA_AA_GEN_SOFTWARE_COMPONENT_RPORT_VUCM_PARA_PACKAGEMANAGEMENT_H
#define PARA_AA_GEN_SOFTWARE_COMPONENT_RPORT_VUCM_PARA_PACKAGEMANAGEMENT_H
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// INCLUSION HEADER FILES
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "ara/ucm/pkgmgr/packagemanagement_proxy.h"
 
#include "ara/log/logger.h"
 
#include <mutex>
#include <thread>
 
namespace vucm
{
namespace para
{
namespace port
{
 
class PackageManagement
{
public:
    /// @brief Constructor
    PackageManagement();
    
    /// @brief Destructor
    ~PackageManagement();
    
    /// @brief Start port
    void Start();
    
    /// @brief Terminate port
    void Terminate();

    /// @brief Subscribe field notification, CurrentStatus
    void SubscribeCurrentStatus();
     
    /// @brief Stop field subscription, CurrentStatus
    void StopSubscribeCurrentStatus();
     
    /// @brief Field notification receive handler, CurrentStatus
    void ReceiveFieldCurrentStatusTriggered();
     
    /// @brief Field notification receive handler, CurrentStatus
    void ReceiveFieldCurrentStatusCyclic();
     
    /// @brief Read field notification value, CurrentStatus
    void ReadValueCurrentStatus(ara::com::SamplePtr<ara::ucm::pkgmgr::proxy::fields::CurrentStatus::FieldType const> samplePtr);
     
    /// @brief Regist callback from software component
    void RegistFieldHandlerCurrentStatus(std::function<void(const ara::ucm::pkgmgr::proxy::fields::CurrentStatus::FieldType&)> handler);
    
    /// @brief Getter method using by software component, CurrentStatus
    void GetCurrentStatus();
    
    /// @brief Request with Response method using by software component, Activate
    void RequestActivate();
     
    /// @brief Regist callback from software component
    void RegistResponseHandlerActivate(std::function<void(const ara::ucm::pkgmgr::proxy::methods::Activate::Output&)> handler);
    
    /// @brief Request with Response method using by software component, Cancel
    void RequestCancel(const ara::ucm::TransferIdType& id);
     
    /// @brief Regist callback from software component
    void RegistResponseHandlerCancel(std::function<void(const ara::ucm::pkgmgr::proxy::methods::Cancel::Output&)> handler);
    
    /// @brief Request with Response method using by software component, DeleteTransfer
    void RequestDeleteTransfer(const ara::ucm::TransferIdType& id);
     
    /// @brief Regist callback from software component
    void RegistResponseHandlerDeleteTransfer(std::function<void(const ara::ucm::pkgmgr::proxy::methods::DeleteTransfer::Output&)> handler);
    
    /// @brief Request with Response method using by software component, Finish
    void RequestFinish();
     
    /// @brief Regist callback from software component
    void RegistResponseHandlerFinish(std::function<void(const ara::ucm::pkgmgr::proxy::methods::Finish::Output&)> handler);
    
    /// @brief Request with Response method using by software component, GetHistory
    void RequestGetHistory(const std::uint64_t& timestampGE, const std::uint64_t& timestampLT);
     
    /// @brief Regist callback from software component
    void RegistResponseHandlerGetHistory(std::function<void(const ara::ucm::pkgmgr::proxy::methods::GetHistory::Output&)> handler);
    
    /// @brief Request with Response method using by software component, GetId
    void RequestGetId();
     
    /// @brief Regist callback from software component
    void RegistResponseHandlerGetId(std::function<void(const ara::ucm::pkgmgr::proxy::methods::GetId::Output&)> handler);
    
    /// @brief Request with Response method using by software component, GetSwClusterChangeInfo
    void RequestGetSwClusterChangeInfo();
     
    /// @brief Regist callback from software component
    void RegistResponseHandlerGetSwClusterChangeInfo(std::function<void(const ara::ucm::pkgmgr::proxy::methods::GetSwClusterChangeInfo::Output&)> handler);
    
    /// @brief Request with Response method using by software component, GetSwClusterDescription
    void RequestGetSwClusterDescription();
     
    /// @brief Regist callback from software component
    void RegistResponseHandlerGetSwClusterDescription(std::function<void(const ara::ucm::pkgmgr::proxy::methods::GetSwClusterDescription::Output&)> handler);
    
    /// @brief Request with Response method using by software component, GetSwClusterInfo
    void RequestGetSwClusterInfo();
     
    /// @brief Regist callback from software component
    void RegistResponseHandlerGetSwClusterInfo(std::function<void(const ara::ucm::pkgmgr::proxy::methods::GetSwClusterInfo::Output&)> handler);
    
    /// @brief Request with Response method using by software component, GetSwPackages
    void RequestGetSwPackages();
     
    /// @brief Regist callback from software component
    void RegistResponseHandlerGetSwPackages(std::function<void(const ara::ucm::pkgmgr::proxy::methods::GetSwPackages::Output&)> handler);
    
    /// @brief Request with Response method using by software component, GetSwProcessProgress
    void RequestGetSwProcessProgress(const ara::ucm::TransferIdType& id);
     
    /// @brief Regist callback from software component
    void RegistResponseHandlerGetSwProcessProgress(std::function<void(const ara::ucm::pkgmgr::proxy::methods::GetSwProcessProgress::Output&)> handler);
    
    /// @brief Request with Response method using by software component, ProcessSwPackage
    void RequestProcessSwPackage(const ara::ucm::TransferIdType& id);
     
    /// @brief Regist callback from software component
    void RegistResponseHandlerProcessSwPackage(std::function<void(const ara::ucm::pkgmgr::proxy::methods::ProcessSwPackage::Output&)> handler);
    
    /// @brief Request with Response method using by software component, RevertProcessedSwPackages
    void RequestRevertProcessedSwPackages();
     
    /// @brief Regist callback from software component
    void RegistResponseHandlerRevertProcessedSwPackages(std::function<void(const ara::ucm::pkgmgr::proxy::methods::RevertProcessedSwPackages::Output&)> handler);
    
    /// @brief Request with Response method using by software component, Rollback
    void RequestRollback();
     
    /// @brief Regist callback from software component
    void RegistResponseHandlerRollback(std::function<void(const ara::ucm::pkgmgr::proxy::methods::Rollback::Output&)> handler);
    
    /// @brief Request with Response method using by software component, TransferData
    void RequestTransferData(const ara::ucm::TransferIdType& id, const ara::ucm::ByteVectorType& data, const std::uint64_t& blockCounter);
     
    /// @brief Regist callback from software component
    void RegistResponseHandlerTransferData(std::function<void(const ara::ucm::pkgmgr::proxy::methods::TransferData::Output&)> handler);
    
    /// @brief Request with Response method using by software component, TransferExit
    void RequestTransferExit(const ara::ucm::TransferIdType& id);
     
    /// @brief Regist callback from software component
    void RegistResponseHandlerTransferExit(std::function<void(const ara::ucm::pkgmgr::proxy::methods::TransferExit::Output&)> handler);
    
    /// @brief Request with Response method using by software component, TransferStart
    void RequestTransferStart(const std::uint64_t& size);
     
    /// @brief Regist callback from software component
    void RegistResponseHandlerTransferStart(std::function<void(const ara::ucm::pkgmgr::proxy::methods::TransferStart::Output&)> handler);
    
private:
    /// @brief Callback for find service
    void Find(ara::com::ServiceHandleContainer<ara::ucm::pkgmgr::proxy::PackageManagementProxy::HandleType> handles,
              ara::com::FindServiceHandle findHandle);

    /// @brief Callback for field notification receiver, CurrentStatus
    void RegistReceiverCurrentStatus();
    
private:
    /// @brief Logger for this port
    ara::log::Logger& m_logger;
    
    /// @brief Flag of port status
    bool m_running;
    
    /// @brief Flag of find service status
    bool m_found;
    
    /// @brief Mutex for this port
    std::mutex m_mutex; 
    
    /// @brief AUTOSAR Port Interface
    std::unique_ptr<ara::ucm::pkgmgr::proxy::PackageManagementProxy> m_interface;
    
    /// @brief Find service handle
    std::unique_ptr<ara::com::FindServiceHandle> m_findHandle;

    /// @brief Callback from software component, CurrentStatus
    std::function<void(const ara::ucm::pkgmgr::proxy::fields::CurrentStatus::FieldType&)> m_receiverCurrentStatus;
    
    /// @brief Callback from software component, Activate
    std::function<void(const ara::ucm::pkgmgr::proxy::methods::Activate::Output&)> m_responderActivate;
    
    /// @brief Callback from software component, Cancel
    std::function<void(const ara::ucm::pkgmgr::proxy::methods::Cancel::Output&)> m_responderCancel;
    
    /// @brief Callback from software component, DeleteTransfer
    std::function<void(const ara::ucm::pkgmgr::proxy::methods::DeleteTransfer::Output&)> m_responderDeleteTransfer;
    
    /// @brief Callback from software component, Finish
    std::function<void(const ara::ucm::pkgmgr::proxy::methods::Finish::Output&)> m_responderFinish;
    
    /// @brief Callback from software component, GetHistory
    std::function<void(const ara::ucm::pkgmgr::proxy::methods::GetHistory::Output&)> m_responderGetHistory;
    
    /// @brief Callback from software component, GetId
    std::function<void(const ara::ucm::pkgmgr::proxy::methods::GetId::Output&)> m_responderGetId;
    
    /// @brief Callback from software component, GetSwClusterChangeInfo
    std::function<void(const ara::ucm::pkgmgr::proxy::methods::GetSwClusterChangeInfo::Output&)> m_responderGetSwClusterChangeInfo;
    
    /// @brief Callback from software component, GetSwClusterDescription
    std::function<void(const ara::ucm::pkgmgr::proxy::methods::GetSwClusterDescription::Output&)> m_responderGetSwClusterDescription;
    
    /// @brief Callback from software component, GetSwClusterInfo
    std::function<void(const ara::ucm::pkgmgr::proxy::methods::GetSwClusterInfo::Output&)> m_responderGetSwClusterInfo;
    
    /// @brief Callback from software component, GetSwPackages
    std::function<void(const ara::ucm::pkgmgr::proxy::methods::GetSwPackages::Output&)> m_responderGetSwPackages;
    
    /// @brief Callback from software component, GetSwProcessProgress
    std::function<void(const ara::ucm::pkgmgr::proxy::methods::GetSwProcessProgress::Output&)> m_responderGetSwProcessProgress;
    
    /// @brief Callback from software component, ProcessSwPackage
    std::function<void(const ara::ucm::pkgmgr::proxy::methods::ProcessSwPackage::Output&)> m_responderProcessSwPackage;
    
    /// @brief Callback from software component, RevertProcessedSwPackages
    std::function<void(const ara::ucm::pkgmgr::proxy::methods::RevertProcessedSwPackages::Output&)> m_responderRevertProcessedSwPackages;
    
    /// @brief Callback from software component, Rollback
    std::function<void(const ara::ucm::pkgmgr::proxy::methods::Rollback::Output&)> m_responderRollback;
    
    /// @brief Callback from software component, TransferData
    std::function<void(const ara::ucm::pkgmgr::proxy::methods::TransferData::Output&)> m_responderTransferData;
    
    /// @brief Callback from software component, TransferExit
    std::function<void(const ara::ucm::pkgmgr::proxy::methods::TransferExit::Output&)> m_responderTransferExit;
    
    /// @brief Callback from software component, TransferStart
    std::function<void(const ara::ucm::pkgmgr::proxy::methods::TransferStart::Output&)> m_responderTransferStart;
};
 
} /// namespace port
} /// namespace para
} /// namespace vucm
 
#endif /// PARA_AA_GEN_SOFTWARE_COMPONENT_RPORT_VUCM_PARA_PACKAGEMANAGEMENT_H