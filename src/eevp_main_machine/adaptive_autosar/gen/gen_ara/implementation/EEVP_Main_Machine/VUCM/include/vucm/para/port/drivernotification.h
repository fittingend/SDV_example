///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : drivernotification.h
/// SOFTWARE COMPONENT NAME           : DriverNotification
/// GENERATED DATE                    : 2025-08-30 10:53:51
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef PARA_AA_GEN_SOFTWARE_COMPONENT_PPORT_VUCM_PARA_DRIVERNOTIFICATION_H
#define PARA_AA_GEN_SOFTWARE_COMPONENT_PPORT_VUCM_PARA_DRIVERNOTIFICATION_H
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// INCLUSION HEADER FILES
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "ara/vucm/driver/vehicledriverapplication_skeleton.h"
 
#include "ara/log/logger.h"
 
#include <mutex>
#include <thread>
 
namespace ara
{
namespace vucm
{
namespace driver
{
namespace skeleton
{
 
class VehicleDriverApplicationSkeletonImpl : public VehicleDriverApplicationSkeleton
{
public:
    /// @brief Constructor
    VehicleDriverApplicationSkeletonImpl(ara::core::InstanceSpecifier instanceSpec, ara::com::MethodCallProcessingMode mode = ara::com::MethodCallProcessingMode::kEvent);
    
    /// @brief Request with Response method, AllowCampaign
    ara::core::Future<VehicleDriverApplicationSkeleton::AllowCampaignOutput> AllowCampaign() override;
    
    /// @brief Request with Response method, CancelCampaign
    ara::core::Future<VehicleDriverApplicationSkeleton::CancelCampaignOutput> CancelCampaign(const bool& DisableCampaign) override;
    
    /// @brief Request with Response method, DriverApproval
    ara::core::Future<VehicleDriverApplicationSkeleton::DriverApprovalOutput> DriverApproval(const bool& Approval, const ara::ucm::SafetyPolicyType& SafetyPolicy) override;
    
    /// @brief Request with Response method, GetCampaignHistory
    ara::core::Future<VehicleDriverApplicationSkeleton::GetCampaignHistoryOutput> GetCampaignHistory(const std::uint64_t& timestampGE, const std::uint64_t& timestampLT) override;
    
    /// @brief Request with Response method, GetSwClusterDescription
    ara::core::Future<VehicleDriverApplicationSkeleton::GetSwClusterDescriptionOutput> GetSwClusterDescription() override;
    
    /// @brief Request with Response method, GetSwPackageDescription
    ara::core::Future<VehicleDriverApplicationSkeleton::GetSwPackageDescriptionOutput> GetSwPackageDescription() override;
    
    /// @brief Request with Response method, GetSwProcessProgress
    ara::core::Future<VehicleDriverApplicationSkeleton::GetSwProcessProgressOutput> GetSwProcessProgress() override;
    
    /// @brief Request with Response method, GetSwTransferProgress
    ara::core::Future<VehicleDriverApplicationSkeleton::GetSwTransferProgressOutput> GetSwTransferProgress() override;
    
    /// @brief Getter for field, ApprovalRequired
    ara::core::Future<fields::ApprovalRequired::FieldType> GetApprovalRequired();
    
    /// @brief Notifier for field, ApprovalRequired
    void NotifyApprovalRequired();
    
    /// @brief Update field value by software component, ApprovalRequired
    void UpdateApprovalRequired(const fields::ApprovalRequired::FieldType& value);
    
    /// @brief Getter for field, CampaignState
    ara::core::Future<fields::CampaignState::FieldType> GetCampaignState();
    
    /// @brief Notifier for field, CampaignState
    void NotifyCampaignState();
    
    /// @brief Update field value by software component, CampaignState
    void UpdateCampaignState(const fields::CampaignState::FieldType& value);
    
    /// @brief Getter for field, SafetyPolicy
    ara::core::Future<fields::SafetyPolicy::FieldType> GetSafetyPolicy();
    
    /// @brief Notifier for field, SafetyPolicy
    void NotifySafetyPolicy();
    
    /// @brief Update field value by software component, SafetyPolicy
    void UpdateSafetyPolicy(const fields::SafetyPolicy::FieldType& value);
    
    /// @brief Getter for field, SafetyState
    ara::core::Future<fields::SafetyState::FieldType> GetSafetyState();
    
    /// @brief Notifier for field, SafetyState
    void NotifySafetyState();
    
    /// @brief Update field value by software component, SafetyState
    void UpdateSafetyState(const fields::SafetyState::FieldType& value);
    
private:
    /// @brief Logger for this port
    ara::log::Logger& m_logger;
    
    /// @brief Field, ApprovalRequired
    fields::ApprovalRequired::FieldType m_ApprovalRequired;
    
    /// @brief Field, CampaignState
    fields::CampaignState::FieldType m_CampaignState;
    
    /// @brief Field, SafetyPolicy
    fields::SafetyPolicy::FieldType m_SafetyPolicy;
    
    /// @brief Field, SafetyState
    fields::SafetyState::FieldType m_SafetyState;
    
};
 
} /// namespace skeleton
} /// namespace driver
} /// namespace vucm
} /// namespace ara

namespace vucm
{
namespace para
{
namespace port
{
 
class DriverNotification
{
public:
    /// @brief Constructor
    DriverNotification();
    
    /// @brief Destructor
    ~DriverNotification();
    
    /// @brief Start port
    void Start();
    
    /// @brief Terminate port
    void Terminate();
    
    /// @brief Write field value to buffer, ApprovalRequired
    void WriteValueApprovalRequired(const ara::vucm::driver::skeleton::fields::ApprovalRequired::FieldType& value);
     
    /// @brief Notify field cyclic from buffer, ApprovalRequired
    void NotifyFieldApprovalRequiredCyclic();
     
    /// @brief Notify field directly from buffer data, ApprovalRequired
    void NotifyFieldApprovalRequiredTriggered();
     
    /// @brief Notify field directly with argument, ApprovalRequired
    void NotifyFieldApprovalRequiredTriggered(const ara::vucm::driver::skeleton::fields::ApprovalRequired::FieldType& value);

    /// @brief Write field value to buffer, CampaignState
    void WriteValueCampaignState(const ara::vucm::driver::skeleton::fields::CampaignState::FieldType& value);
     
    /// @brief Notify field cyclic from buffer, CampaignState
    void NotifyFieldCampaignStateCyclic();
     
    /// @brief Notify field directly from buffer data, CampaignState
    void NotifyFieldCampaignStateTriggered();
     
    /// @brief Notify field directly with argument, CampaignState
    void NotifyFieldCampaignStateTriggered(const ara::vucm::driver::skeleton::fields::CampaignState::FieldType& value);

    /// @brief Write field value to buffer, SafetyPolicy
    void WriteValueSafetyPolicy(const ara::vucm::driver::skeleton::fields::SafetyPolicy::FieldType& value);
     
    /// @brief Notify field cyclic from buffer, SafetyPolicy
    void NotifyFieldSafetyPolicyCyclic();
     
    /// @brief Notify field directly from buffer data, SafetyPolicy
    void NotifyFieldSafetyPolicyTriggered();
     
    /// @brief Notify field directly with argument, SafetyPolicy
    void NotifyFieldSafetyPolicyTriggered(const ara::vucm::driver::skeleton::fields::SafetyPolicy::FieldType& value);

    /// @brief Write field value to buffer, SafetyState
    void WriteValueSafetyState(const ara::vucm::driver::skeleton::fields::SafetyState::FieldType& value);
     
    /// @brief Notify field cyclic from buffer, SafetyState
    void NotifyFieldSafetyStateCyclic();
     
    /// @brief Notify field directly from buffer data, SafetyState
    void NotifyFieldSafetyStateTriggered();
     
    /// @brief Notify field directly with argument, SafetyState
    void NotifyFieldSafetyStateTriggered(const ara::vucm::driver::skeleton::fields::SafetyState::FieldType& value);
     
private:
    /// @brief Logger for this port
    ara::log::Logger& m_logger;
    
    /// @brief Flag of port status
    bool m_running;
    
    /// @brief Mutex for this port
    std::mutex m_mutex;
    
    /// @brief AUTOSAR Port Interface
    std::unique_ptr<ara::vucm::driver::skeleton::VehicleDriverApplicationSkeletonImpl> m_interface;
    
};
 
} /// namespace port
} /// namespace para
} /// namespace vucm
 
#endif /// PARA_AA_GEN_SOFTWARE_COMPONENT_PPORT_VUCM_PARA_DRIVERNOTIFICATION_H