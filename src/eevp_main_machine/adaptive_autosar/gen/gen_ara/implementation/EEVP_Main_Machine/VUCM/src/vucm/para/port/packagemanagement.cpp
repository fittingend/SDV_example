///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : packagemanagement.cpp
/// SOFTWARE COMPONENT NAME           : PackageManagement
/// GENERATED DATE                    : 2025-08-30 10:53:51
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "vucm/para/port/packagemanagement.h"
 
namespace vucm
{
namespace para
{
namespace port
{
 
PackageManagement::PackageManagement()
    : m_logger(ara::log::CreateLogger("VUCM", "PORT", ara::log::LogLevel::kVerbose))
    , m_running{false}
    , m_found{false}
    , m_receiverCurrentStatus{nullptr}
    , m_responderActivate{nullptr}
    , m_responderCancel{nullptr}
    , m_responderDeleteTransfer{nullptr}
    , m_responderFinish{nullptr}
    , m_responderGetHistory{nullptr}
    , m_responderGetId{nullptr}
    , m_responderGetSwClusterChangeInfo{nullptr}
    , m_responderGetSwClusterDescription{nullptr}
    , m_responderGetSwClusterInfo{nullptr}
    , m_responderGetSwPackages{nullptr}
    , m_responderGetSwProcessProgress{nullptr}
    , m_responderProcessSwPackage{nullptr}
    , m_responderRevertProcessedSwPackages{nullptr}
    , m_responderRollback{nullptr}
    , m_responderTransferData{nullptr}
    , m_responderTransferExit{nullptr}
    , m_responderTransferStart{nullptr}
{
}
 
PackageManagement::~PackageManagement()
{
}
 
void PackageManagement::Start()
{
    m_logger.LogVerbose() << "PackageManagement::Start";
    
    // regist callback
    ara::core::InstanceSpecifier specifier{"VUCM/PARA/PackageManagement"};
    auto handler = [this](ara::com::ServiceHandleContainer<ara::ucm::pkgmgr::proxy::PackageManagementProxy::HandleType> handles,
                          ara::com::FindServiceHandle findHandle) {
        this->Find(handles, findHandle);
    };
    
    // find service
    auto find = ara::ucm::pkgmgr::proxy::PackageManagementProxy::StartFindService(handler, specifier);
    if (find.HasValue())
    {
        m_logger.LogVerbose() << "PackageManagement::Start::StartFindService";
    }
    else
    {
        m_logger.LogError() << "PackageManagement::Start::StartFindService::" << find.Error().Message();
    }
    
    // run port
    m_running = true;
}
 
void PackageManagement::Terminate()
{
    m_logger.LogVerbose() << "PackageManagement::Terminate";
    
    // stop port
    m_running = false;
    
    // clear service proxy
    if (m_interface)
    {
        StopSubscribeCurrentStatus();
        
        // stop find service
        m_interface->StopFindService(*m_findHandle);
        m_found = false;
        
        m_logger.LogVerbose() << "PackageManagement::Terminate::StopFindService";
    }
}
 
void PackageManagement::Find(ara::com::ServiceHandleContainer<ara::ucm::pkgmgr::proxy::PackageManagementProxy::HandleType> handles, ara::com::FindServiceHandle findHandle)
{
    // check finding handles
    if (handles.empty())
    {
        m_logger.LogVerbose() << "PackageManagement::Find::Service Instances not found";
        return;
    }
    else
    {
        for (auto& handle : handles)
        {
            m_logger.LogVerbose() << "PackageManagement::Find::Searched Instance::ServiceId =" << 
                                     handle.GetServiceHandle().serviceId << 
                                     ", InstanceId =" << 
                                     handle.GetServiceHandle().instanceId;
        }
    }
    
    // create proxy
    if (m_interface)
    {
        m_logger.LogVerbose() << "PackageManagement::Find::Proxy is already running";
    }
    else
    {
        m_logger.LogVerbose() << "PackageManagement::Find::Using Instance::ServiceId =" << 
                                 handles[0].GetServiceHandle().serviceId << 
                                 ", InstanceId =" << 
                                 handles[0].GetServiceHandle().instanceId;
        m_interface = std::make_unique<ara::ucm::pkgmgr::proxy::PackageManagementProxy>(handles[0]);
        m_findHandle = std::make_unique<ara::com::FindServiceHandle>(findHandle);
        m_found = true;
        
        // subscribe field notifications
        SubscribeCurrentStatus();
    }
}
 
void PackageManagement::SubscribeCurrentStatus()
{
    if (m_found)
    {
        // regist receiver handler
        // if you want to enable it, please uncomment below code
        // RegistReceiverCurrentStatus();
        
        // request subscribe
        auto subscribe = m_interface->CurrentStatus.Subscribe(1);
        if (subscribe.HasValue())
        {
            m_logger.LogVerbose() << "PackageManagement::SubscribeCurrentStatus::Subscribed";
        }
        else
        {
            m_logger.LogError() << "PackageManagement::SubscribeCurrentStatus::" << subscribe.Error().Message();
        }
    }
}
 
void PackageManagement::StopSubscribeCurrentStatus()
{
    if (m_found)
    {
        // request stop subscribe
        m_interface->CurrentStatus.Unsubscribe();
        m_logger.LogVerbose() << "PackageManagement::StopSubscribeCurrentStatus::Unsubscribed";
    }
}
 
void PackageManagement::RegistReceiverCurrentStatus()
{
    if (m_found)
    {
        // set callback
        auto receiver = [this]() -> void {
            return ReceiveFieldCurrentStatusTriggered();
        };
        
        // regist callback
        auto callback = m_interface->CurrentStatus.SetReceiveHandler(receiver);
        if (callback.HasValue())
        {
            m_logger.LogVerbose() << "PackageManagement::RegistReceiverCurrentStatus::SetReceiveHandler";
        }
        else
        {
            m_logger.LogError() << "PackageManagement::RegistReceiverCurrentStatus::SetReceiveHandler::" << callback.Error().Message();
        }
    }
}
 
void PackageManagement::ReceiveFieldCurrentStatusTriggered()
{
    if (m_found)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_interface->CurrentStatus.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
        {
            auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->CurrentStatus.GetNewSamples([&](auto samplePtr) {
                PackageManagement::ReadValueCurrentStatus(std::move(samplePtr));
            }));
            if (recv->HasValue())
            {
                m_logger.LogVerbose() << "PackageManagement::ReceiveFieldCurrentStatus::GetNewSamples::" << recv->Value();
            }
            else
            {
                m_logger.LogError() << "PackageManagement::ReceiveFieldCurrentStatus::GetNewSamples::" << recv->Error().Message();
            }
        }
    }
}
 
void PackageManagement::ReceiveFieldCurrentStatusCyclic()
{
    while (m_running)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_found)
        {
            if (m_interface->CurrentStatus.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
            {
                auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->CurrentStatus.GetNewSamples([&](auto samplePtr) {
                    PackageManagement::ReadValueCurrentStatus(std::move(samplePtr));
                }));
                if (recv->HasValue())
                {
                    m_logger.LogVerbose() << "PackageManagement::ReceiveFieldCurrentStatus::GetNewSamples::" << recv->Value();
                }
                else
                {
                    m_logger.LogError() << "PackageManagement::ReceiveFieldCurrentStatus::GetNewSamples::" << recv->Error().Message();
                }
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void PackageManagement::ReadValueCurrentStatus(ara::com::SamplePtr<ara::ucm::pkgmgr::proxy::fields::CurrentStatus::FieldType const> samplePtr)
{
    auto value = *samplePtr.Get();
    if (m_receiverCurrentStatus)
    {
        m_receiverCurrentStatus(value);
    }
}
 
void PackageManagement::RegistFieldHandlerCurrentStatus(std::function<void(const ara::ucm::pkgmgr::proxy::fields::CurrentStatus::FieldType&)> handler)
{
    m_receiverCurrentStatus = handler;
}
 
void PackageManagement::GetCurrentStatus()
{
    if (m_found)
    {
        auto request = m_interface->CurrentStatus.Get();
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "PackageManagement::GetCurrentStatus::Responded";
            
            auto result = response.Value();
            if (m_receiverCurrentStatus)
            {
                m_receiverCurrentStatus(result);
            }
        }
        else
        {
            m_logger.LogError() << "PackageManagement::GetCurrentStatus::" << response.Error().Message();
        }
    }
}
 
void PackageManagement::RequestActivate()
{
    if (m_found)
    {
        auto request = m_interface->Activate();
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "PackageManagement::RequestActivate::Responded";
            
            auto result = response.Value();
            if (m_responderActivate)
            {
                m_responderActivate(result);
            }
        }
        else
        {
            m_logger.LogError() << "PackageManagement::RequestActivate::" << response.Error().Message();
        }
    }
}
 
void PackageManagement::RegistResponseHandlerActivate(std::function<void(const ara::ucm::pkgmgr::proxy::methods::Activate::Output&)> handler)
{
    m_responderActivate = handler;
}
 
void PackageManagement::RequestCancel(const ara::ucm::TransferIdType& id)
{
    if (m_found)
    {
        auto request = m_interface->Cancel(id);
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "PackageManagement::RequestCancel::Responded";
            
            auto result = response.Value();
            if (m_responderCancel)
            {
                m_responderCancel(result);
            }
        }
        else
        {
            m_logger.LogError() << "PackageManagement::RequestCancel::" << response.Error().Message();
        }
    }
}
 
void PackageManagement::RegistResponseHandlerCancel(std::function<void(const ara::ucm::pkgmgr::proxy::methods::Cancel::Output&)> handler)
{
    m_responderCancel = handler;
}
 
void PackageManagement::RequestDeleteTransfer(const ara::ucm::TransferIdType& id)
{
    if (m_found)
    {
        auto request = m_interface->DeleteTransfer(id);
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "PackageManagement::RequestDeleteTransfer::Responded";
            
            auto result = response.Value();
            if (m_responderDeleteTransfer)
            {
                m_responderDeleteTransfer(result);
            }
        }
        else
        {
            m_logger.LogError() << "PackageManagement::RequestDeleteTransfer::" << response.Error().Message();
        }
    }
}
 
void PackageManagement::RegistResponseHandlerDeleteTransfer(std::function<void(const ara::ucm::pkgmgr::proxy::methods::DeleteTransfer::Output&)> handler)
{
    m_responderDeleteTransfer = handler;
}
 
void PackageManagement::RequestFinish()
{
    if (m_found)
    {
        auto request = m_interface->Finish();
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "PackageManagement::RequestFinish::Responded";
            
            auto result = response.Value();
            if (m_responderFinish)
            {
                m_responderFinish(result);
            }
        }
        else
        {
            m_logger.LogError() << "PackageManagement::RequestFinish::" << response.Error().Message();
        }
    }
}
 
void PackageManagement::RegistResponseHandlerFinish(std::function<void(const ara::ucm::pkgmgr::proxy::methods::Finish::Output&)> handler)
{
    m_responderFinish = handler;
}
 
void PackageManagement::RequestGetHistory(const std::uint64_t& timestampGE, const std::uint64_t& timestampLT)
{
    if (m_found)
    {
        auto request = m_interface->GetHistory(timestampGE, timestampLT);
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "PackageManagement::RequestGetHistory::Responded";
            
            auto result = response.Value();
            if (m_responderGetHistory)
            {
                m_responderGetHistory(result);
            }
        }
        else
        {
            m_logger.LogError() << "PackageManagement::RequestGetHistory::" << response.Error().Message();
        }
    }
}
 
void PackageManagement::RegistResponseHandlerGetHistory(std::function<void(const ara::ucm::pkgmgr::proxy::methods::GetHistory::Output&)> handler)
{
    m_responderGetHistory = handler;
}
 
void PackageManagement::RequestGetId()
{
    if (m_found)
    {
        auto request = m_interface->GetId();
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "PackageManagement::RequestGetId::Responded";
            
            auto result = response.Value();
            if (m_responderGetId)
            {
                m_responderGetId(result);
            }
        }
        else
        {
            m_logger.LogError() << "PackageManagement::RequestGetId::" << response.Error().Message();
        }
    }
}
 
void PackageManagement::RegistResponseHandlerGetId(std::function<void(const ara::ucm::pkgmgr::proxy::methods::GetId::Output&)> handler)
{
    m_responderGetId = handler;
}
 
void PackageManagement::RequestGetSwClusterChangeInfo()
{
    if (m_found)
    {
        auto request = m_interface->GetSwClusterChangeInfo();
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "PackageManagement::RequestGetSwClusterChangeInfo::Responded";
            
            auto result = response.Value();
            if (m_responderGetSwClusterChangeInfo)
            {
                m_responderGetSwClusterChangeInfo(result);
            }
        }
        else
        {
            m_logger.LogError() << "PackageManagement::RequestGetSwClusterChangeInfo::" << response.Error().Message();
        }
    }
}
 
void PackageManagement::RegistResponseHandlerGetSwClusterChangeInfo(std::function<void(const ara::ucm::pkgmgr::proxy::methods::GetSwClusterChangeInfo::Output&)> handler)
{
    m_responderGetSwClusterChangeInfo = handler;
}
 
void PackageManagement::RequestGetSwClusterDescription()
{
    if (m_found)
    {
        auto request = m_interface->GetSwClusterDescription();
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "PackageManagement::RequestGetSwClusterDescription::Responded";
            
            auto result = response.Value();
            if (m_responderGetSwClusterDescription)
            {
                m_responderGetSwClusterDescription(result);
            }
        }
        else
        {
            m_logger.LogError() << "PackageManagement::RequestGetSwClusterDescription::" << response.Error().Message();
        }
    }
}
 
void PackageManagement::RegistResponseHandlerGetSwClusterDescription(std::function<void(const ara::ucm::pkgmgr::proxy::methods::GetSwClusterDescription::Output&)> handler)
{
    m_responderGetSwClusterDescription = handler;
}
 
void PackageManagement::RequestGetSwClusterInfo()
{
    if (m_found)
    {
        auto request = m_interface->GetSwClusterInfo();
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "PackageManagement::RequestGetSwClusterInfo::Responded";
            
            auto result = response.Value();
            if (m_responderGetSwClusterInfo)
            {
                m_responderGetSwClusterInfo(result);
            }
        }
        else
        {
            m_logger.LogError() << "PackageManagement::RequestGetSwClusterInfo::" << response.Error().Message();
        }
    }
}
 
void PackageManagement::RegistResponseHandlerGetSwClusterInfo(std::function<void(const ara::ucm::pkgmgr::proxy::methods::GetSwClusterInfo::Output&)> handler)
{
    m_responderGetSwClusterInfo = handler;
}
 
void PackageManagement::RequestGetSwPackages()
{
    if (m_found)
    {
        auto request = m_interface->GetSwPackages();
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "PackageManagement::RequestGetSwPackages::Responded";
            
            auto result = response.Value();
            if (m_responderGetSwPackages)
            {
                m_responderGetSwPackages(result);
            }
        }
        else
        {
            m_logger.LogError() << "PackageManagement::RequestGetSwPackages::" << response.Error().Message();
        }
    }
}
 
void PackageManagement::RegistResponseHandlerGetSwPackages(std::function<void(const ara::ucm::pkgmgr::proxy::methods::GetSwPackages::Output&)> handler)
{
    m_responderGetSwPackages = handler;
}
 
void PackageManagement::RequestGetSwProcessProgress(const ara::ucm::TransferIdType& id)
{
    if (m_found)
    {
        auto request = m_interface->GetSwProcessProgress(id);
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "PackageManagement::RequestGetSwProcessProgress::Responded";
            
            auto result = response.Value();
            if (m_responderGetSwProcessProgress)
            {
                m_responderGetSwProcessProgress(result);
            }
        }
        else
        {
            m_logger.LogError() << "PackageManagement::RequestGetSwProcessProgress::" << response.Error().Message();
        }
    }
}
 
void PackageManagement::RegistResponseHandlerGetSwProcessProgress(std::function<void(const ara::ucm::pkgmgr::proxy::methods::GetSwProcessProgress::Output&)> handler)
{
    m_responderGetSwProcessProgress = handler;
}
 
void PackageManagement::RequestProcessSwPackage(const ara::ucm::TransferIdType& id)
{
    if (m_found)
    {
        auto request = m_interface->ProcessSwPackage(id);
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "PackageManagement::RequestProcessSwPackage::Responded";
            
            auto result = response.Value();
            if (m_responderProcessSwPackage)
            {
                m_responderProcessSwPackage(result);
            }
        }
        else
        {
            m_logger.LogError() << "PackageManagement::RequestProcessSwPackage::" << response.Error().Message();
        }
    }
}
 
void PackageManagement::RegistResponseHandlerProcessSwPackage(std::function<void(const ara::ucm::pkgmgr::proxy::methods::ProcessSwPackage::Output&)> handler)
{
    m_responderProcessSwPackage = handler;
}
 
void PackageManagement::RequestRevertProcessedSwPackages()
{
    if (m_found)
    {
        auto request = m_interface->RevertProcessedSwPackages();
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "PackageManagement::RequestRevertProcessedSwPackages::Responded";
            
            auto result = response.Value();
            if (m_responderRevertProcessedSwPackages)
            {
                m_responderRevertProcessedSwPackages(result);
            }
        }
        else
        {
            m_logger.LogError() << "PackageManagement::RequestRevertProcessedSwPackages::" << response.Error().Message();
        }
    }
}
 
void PackageManagement::RegistResponseHandlerRevertProcessedSwPackages(std::function<void(const ara::ucm::pkgmgr::proxy::methods::RevertProcessedSwPackages::Output&)> handler)
{
    m_responderRevertProcessedSwPackages = handler;
}
 
void PackageManagement::RequestRollback()
{
    if (m_found)
    {
        auto request = m_interface->Rollback();
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "PackageManagement::RequestRollback::Responded";
            
            auto result = response.Value();
            if (m_responderRollback)
            {
                m_responderRollback(result);
            }
        }
        else
        {
            m_logger.LogError() << "PackageManagement::RequestRollback::" << response.Error().Message();
        }
    }
}
 
void PackageManagement::RegistResponseHandlerRollback(std::function<void(const ara::ucm::pkgmgr::proxy::methods::Rollback::Output&)> handler)
{
    m_responderRollback = handler;
}
 
void PackageManagement::RequestTransferData(const ara::ucm::TransferIdType& id, const ara::ucm::ByteVectorType& data, const std::uint64_t& blockCounter)
{
    if (m_found)
    {
        auto request = m_interface->TransferData(id, data, blockCounter);
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "PackageManagement::RequestTransferData::Responded";
            
            auto result = response.Value();
            if (m_responderTransferData)
            {
                m_responderTransferData(result);
            }
        }
        else
        {
            m_logger.LogError() << "PackageManagement::RequestTransferData::" << response.Error().Message();
        }
    }
}
 
void PackageManagement::RegistResponseHandlerTransferData(std::function<void(const ara::ucm::pkgmgr::proxy::methods::TransferData::Output&)> handler)
{
    m_responderTransferData = handler;
}
 
void PackageManagement::RequestTransferExit(const ara::ucm::TransferIdType& id)
{
    if (m_found)
    {
        auto request = m_interface->TransferExit(id);
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "PackageManagement::RequestTransferExit::Responded";
            
            auto result = response.Value();
            if (m_responderTransferExit)
            {
                m_responderTransferExit(result);
            }
        }
        else
        {
            m_logger.LogError() << "PackageManagement::RequestTransferExit::" << response.Error().Message();
        }
    }
}
 
void PackageManagement::RegistResponseHandlerTransferExit(std::function<void(const ara::ucm::pkgmgr::proxy::methods::TransferExit::Output&)> handler)
{
    m_responderTransferExit = handler;
}
 
void PackageManagement::RequestTransferStart(const std::uint64_t& size)
{
    if (m_found)
    {
        auto request = m_interface->TransferStart(size);
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "PackageManagement::RequestTransferStart::Responded";
            
            auto result = response.Value();
            if (m_responderTransferStart)
            {
                m_responderTransferStart(result);
            }
        }
        else
        {
            m_logger.LogError() << "PackageManagement::RequestTransferStart::" << response.Error().Message();
        }
    }
}
 
void PackageManagement::RegistResponseHandlerTransferStart(std::function<void(const ara::ucm::pkgmgr::proxy::methods::TransferStart::Output&)> handler)
{
    m_responderTransferStart = handler;
}
 
} /// namespace port
} /// namespace para
} /// namespace vucm
 
/// EOF