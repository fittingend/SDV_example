///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : soa_debugger.cpp
/// SOFTWARE COMPONENT NAME           : SOA_Debugger
/// GENERATED DATE                    : 2025-08-30 10:53:35
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// INCLUSION HEADER FILES
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "soa_debugger/aa/soa_debugger.h"
 
namespace soa_debugger
{
namespace aa
{
 
SOA_Debugger::SOA_Debugger()
    : m_logger(ara::log::CreateLogger("SDBG", "SWC", ara::log::LogLevel::kVerbose))
    , m_running{false}
    , m_workers(36)
{
}
 
SOA_Debugger::~SOA_Debugger()
{
}
 
bool SOA_Debugger::Initialize()
{
    m_logger.LogVerbose() << "SOA_Debugger::Initialize";
    
    bool init = true;
    
    m_RPort_SOADBG_Dms = std::make_unique<soa_debugger::aa::port::RPort_SOADBG_Dms>();
    m_RPort_SOADBG_DriverSeat = std::make_unique<soa_debugger::aa::port::RPort_SOADBG_DriverSeat>();
    m_RPort_SOADBG_Hvac = std::make_unique<soa_debugger::aa::port::RPort_SOADBG_Hvac>();
    m_RPort_SOADBG_MoodLamp = std::make_unique<soa_debugger::aa::port::RPort_SOADBG_MoodLamp>();
    m_RPort_SOADBG_Power = std::make_unique<soa_debugger::aa::port::RPort_SOADBG_Power>();
    m_RPort_SOADBG_ROA = std::make_unique<soa_debugger::aa::port::RPort_SOADBG_ROA>();
    m_RPort_SOADBG_RearCurtain = std::make_unique<soa_debugger::aa::port::RPort_SOADBG_RearCurtain>();
    m_RPort_SOADBG_SmartFilm = std::make_unique<soa_debugger::aa::port::RPort_SOADBG_SmartFilm>();
    m_RPort_SOADBG_Wiper = std::make_unique<soa_debugger::aa::port::RPort_SOADBG_Wiper>();
    
    // put your code for initialization
    
    return init;
}
 
void SOA_Debugger::Start()
{
    m_logger.LogVerbose() << "SOA_Debugger::Start";
    
    m_RPort_SOADBG_Dms->Start();
    m_RPort_SOADBG_DriverSeat->Start();
    m_RPort_SOADBG_Hvac->Start();
    m_RPort_SOADBG_MoodLamp->Start();
    m_RPort_SOADBG_Power->Start();
    m_RPort_SOADBG_ROA->Start();
    m_RPort_SOADBG_RearCurtain->Start();
    m_RPort_SOADBG_SmartFilm->Start();
    m_RPort_SOADBG_Wiper->Start();
}
 
void SOA_Debugger::Terminate()
{
    m_logger.LogVerbose() << "SOA_Debugger::Terminate";
    
    // stop running
    m_running = false;
    
    m_RPort_SOADBG_Dms->Terminate();
    m_RPort_SOADBG_DriverSeat->Terminate();
    m_RPort_SOADBG_Hvac->Terminate();
    m_RPort_SOADBG_MoodLamp->Terminate();
    m_RPort_SOADBG_Power->Terminate();
    m_RPort_SOADBG_ROA->Terminate();
    m_RPort_SOADBG_RearCurtain->Terminate();
    m_RPort_SOADBG_SmartFilm->Terminate();
    m_RPort_SOADBG_Wiper->Terminate();
}
 
void SOA_Debugger::Run()
{
    m_logger.LogVerbose() << "SOA_Debugger::Run";
    
    // start running
    m_running = true;
    
    m_workers.Async([this] { m_RPort_SOADBG_Dms->ReceiveEventonDriverNotFocusingCyclic(); });
    m_workers.Async([this] { m_RPort_SOADBG_Dms->ReceiveEventonDriverNotWakenCyclic(); });
    m_workers.Async([this] { m_RPort_SOADBG_Dms->ReceiveEventonDriverNotWatchingFrontCyclic(); });
    m_workers.Async([this] { m_RPort_SOADBG_Dms->ReceiveFieldsoaDmsDeviceNormalCyclic(); });
    m_workers.Async([this] { m_RPort_SOADBG_Dms->ReceiveFieldsoaDmsDriverStatusCyclic(); });
    m_workers.Async([this] { m_RPort_SOADBG_Dms->ReceiveFieldsoaDmsStatusCyclic(); });
    m_workers.Async([this] { m_RPort_SOADBG_Dms->ReceiveFieldsoaDmsSwVersionCyclic(); });
    m_workers.Async([this] { m_RPort_SOADBG_DriverSeat->ReceiveFieldsoaDrvSeatDeviceNormalCyclic(); });
    m_workers.Async([this] { m_RPort_SOADBG_DriverSeat->ReceiveFieldsoaDrvSeatMotorDirectionCyclic(); });
    m_workers.Async([this] { m_RPort_SOADBG_DriverSeat->ReceiveFieldsoaDrvSeatMotorPositionCyclic(); });
    m_workers.Async([this] { m_RPort_SOADBG_DriverSeat->ReceiveFieldsoaDrvSeatSwVersionCyclic(); });
    m_workers.Async([this] { m_RPort_SOADBG_Hvac->ReceiveFieldSoaHvacSwVersionCyclic(); });
    m_workers.Async([this] { m_RPort_SOADBG_Hvac->ReceiveFieldsoaHvacDeviceNormalCyclic(); });
    m_workers.Async([this] { m_RPort_SOADBG_Hvac->ReceiveFieldsoaHvacSettingCyclic(); });
    m_workers.Async([this] { m_RPort_SOADBG_Hvac->ReceiveFieldsoaHvacStatusCyclic(); });
    m_workers.Async([this] { m_RPort_SOADBG_Hvac->ReceiveFieldsoaHvacTempsCyclic(); });
    m_workers.Async([this] { m_RPort_SOADBG_MoodLamp->ReceiveFieldsoaMlmStatusCyclic(); });
    m_workers.Async([this] { m_RPort_SOADBG_MoodLamp->ReceiveFieldsoaMlmSwVersionCyclic(); });
    m_workers.Async([this] { m_RPort_SOADBG_Power->ReceiveFieldsoaPowerDeviceNormalCyclic(); });
    m_workers.Async([this] { m_RPort_SOADBG_Power->ReceiveFieldsoaPowerSwVersionCyclic(); });
    m_workers.Async([this] { m_RPort_SOADBG_ROA->ReceiveFieldsoaRoaDetectCountCyclic(); });
    m_workers.Async([this] { m_RPort_SOADBG_ROA->ReceiveFieldsoaRoaDetectStateCyclic(); });
    m_workers.Async([this] { m_RPort_SOADBG_ROA->ReceiveFieldsoaRoaDeviceNormalCyclic(); });
    m_workers.Async([this] { m_RPort_SOADBG_ROA->ReceiveFieldsoaRoaModeCyclic(); });
    m_workers.Async([this] { m_RPort_SOADBG_ROA->ReceiveFieldsoaRoaRunningStateCyclic(); });
    m_workers.Async([this] { m_RPort_SOADBG_ROA->ReceiveFieldsoaRoaSensorErrorCyclic(); });
    m_workers.Async([this] { m_RPort_SOADBG_ROA->ReceiveFieldsoaRoaSwVersionCyclic(); });
    m_workers.Async([this] { m_RPort_SOADBG_RearCurtain->ReceiveFieldsoaRctnStatusCyclic(); });
    m_workers.Async([this] { m_RPort_SOADBG_RearCurtain->ReceiveFieldsoaRctnSwVersionCyclic(); });
    m_workers.Async([this] { m_RPort_SOADBG_SmartFilm->ReceiveFieldsoaFilmAutoCyclic(); });
    m_workers.Async([this] { m_RPort_SOADBG_SmartFilm->ReceiveFieldsoaFilmDeviceNormalCyclic(); });
    m_workers.Async([this] { m_RPort_SOADBG_SmartFilm->ReceiveFieldsoaFilmOpacitiesCyclic(); });
    m_workers.Async([this] { m_RPort_SOADBG_SmartFilm->ReceiveFieldsoaFilmSwVersionCyclic(); });
    m_workers.Async([this] { m_RPort_SOADBG_Wiper->ReceiveFieldsoaWiperDeviceNormalCyclic(); });
    m_workers.Async([this] { m_RPort_SOADBG_Wiper->ReceiveFieldsoaWiperStatusCyclic(); });
    m_workers.Async([this] { m_RPort_SOADBG_Wiper->ReceiveFieldsoaWiperSwVersionCyclic(); });
    
    m_workers.Wait();
}
 
} /// namespace aa
} /// namespace soa_debugger
