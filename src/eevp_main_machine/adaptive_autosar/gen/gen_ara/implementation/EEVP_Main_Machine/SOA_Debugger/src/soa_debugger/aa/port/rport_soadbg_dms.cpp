///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : rport_soadbg_dms.cpp
/// SOFTWARE COMPONENT NAME           : RPort_SOADBG_Dms
/// GENERATED DATE                    : 2025-08-30 10:53:35
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "soa_debugger/aa/port/rport_soadbg_dms.h"
 
namespace soa_debugger
{
namespace aa
{
namespace port
{
 
RPort_SOADBG_Dms::RPort_SOADBG_Dms()
    : m_logger(ara::log::CreateLogger("SDBG", "PORT", ara::log::LogLevel::kVerbose))
    , m_running{false}
    , m_found{false}
    , m_receiveronDriverNotFocusing{nullptr}
    , m_receiveronDriverNotWaken{nullptr}
    , m_receiveronDriverNotWatchingFront{nullptr}
    , m_receiversoaDmsDeviceNormal{nullptr}
    , m_receiversoaDmsDriverStatus{nullptr}
    , m_receiversoaDmsStatus{nullptr}
    , m_receiversoaDmsSwVersion{nullptr}
{
}
 
RPort_SOADBG_Dms::~RPort_SOADBG_Dms()
{
}
 
void RPort_SOADBG_Dms::Start()
{
    m_logger.LogVerbose() << "RPort_SOADBG_Dms::Start";
    
    // regist callback
    ara::core::InstanceSpecifier specifier{"SOA_Debugger/AA/RPort_SOADBG_Dms"};
    auto handler = [this](ara::com::ServiceHandleContainer<eevp::control::proxy::SoaDmsProxy::HandleType> handles,
                          ara::com::FindServiceHandle findHandle) {
        this->Find(handles, findHandle);
    };
    
    // find service
    auto find = eevp::control::proxy::SoaDmsProxy::StartFindService(handler, specifier);
    if (find.HasValue())
    {
        m_logger.LogVerbose() << "RPort_SOADBG_Dms::Start::StartFindService";
    }
    else
    {
        m_logger.LogError() << "RPort_SOADBG_Dms::Start::StartFindService::" << find.Error().Message();
    }
    
    // run port
    m_running = true;
}
 
void RPort_SOADBG_Dms::Terminate()
{
    m_logger.LogVerbose() << "RPort_SOADBG_Dms::Terminate";
    
    // stop port
    m_running = false;
    
    // clear service proxy
    if (m_interface)
    {
        // stop subscribe
        StopSubscribeonDriverNotFocusing();
        StopSubscribeonDriverNotWaken();
        StopSubscribeonDriverNotWatchingFront();
        StopSubscribesoaDmsDeviceNormal();
        StopSubscribesoaDmsDriverStatus();
        StopSubscribesoaDmsStatus();
        StopSubscribesoaDmsSwVersion();
        
        // stop find service
        m_interface->StopFindService(*m_findHandle);
        m_found = false;
        
        m_logger.LogVerbose() << "RPort_SOADBG_Dms::Terminate::StopFindService";
    }
}
 
void RPort_SOADBG_Dms::Find(ara::com::ServiceHandleContainer<eevp::control::proxy::SoaDmsProxy::HandleType> handles, ara::com::FindServiceHandle findHandle)
{
    // check finding handles
    if (handles.empty())
    {
        m_logger.LogVerbose() << "RPort_SOADBG_Dms::Find::Service Instances not found";
        return;
    }
    else
    {
        for (auto& handle : handles)
        {
            m_logger.LogVerbose() << "RPort_SOADBG_Dms::Find::Searched Instance::ServiceId =" << 
                                     handle.GetServiceHandle().serviceId << 
                                     ", InstanceId =" << 
                                     handle.GetServiceHandle().instanceId;
        }
    }
    
    // create proxy
    if (m_interface)
    {
        m_logger.LogVerbose() << "RPort_SOADBG_Dms::Find::Proxy is already running";
    }
    else
    {
        m_logger.LogVerbose() << "RPort_SOADBG_Dms::Find::Using Instance::ServiceId =" << 
                                 handles[0].GetServiceHandle().serviceId << 
                                 ", InstanceId =" << 
                                 handles[0].GetServiceHandle().instanceId;
        m_interface = std::make_unique<eevp::control::proxy::SoaDmsProxy>(handles[0]);
        m_findHandle = std::make_unique<ara::com::FindServiceHandle>(findHandle);
        m_found = true;
        
        // subscribe events
        SubscribeonDriverNotFocusing();
        SubscribeonDriverNotWaken();
        SubscribeonDriverNotWatchingFront();
        // subscribe field notifications
        SubscribesoaDmsDeviceNormal();
        SubscribesoaDmsDriverStatus();
        SubscribesoaDmsStatus();
        SubscribesoaDmsSwVersion();
    }
}
 
void RPort_SOADBG_Dms::SubscribeonDriverNotFocusing()
{
    if (m_found)
    {
        // regist receiver handler
        // if you want to enable it, please uncomment below code
        // RegistReceiveronDriverNotFocusing();
        
        // request subscribe
        auto subscribe = m_interface->onDriverNotFocusing.Subscribe(1);
        if (subscribe.HasValue())
        {
            m_logger.LogVerbose() << "RPort_SOADBG_Dms::SubscribeonDriverNotFocusing::Subscribed";
        }
        else
        {
            m_logger.LogError() << "RPort_SOADBG_Dms::SubscribeonDriverNotFocusing::" << subscribe.Error().Message();
        }
    }
}
 
void RPort_SOADBG_Dms::StopSubscribeonDriverNotFocusing()
{
    if (m_found)
    {
        // request stop subscribe
        m_interface->onDriverNotFocusing.Unsubscribe();
        m_logger.LogVerbose() << "RPort_SOADBG_Dms::StopSubscribeonDriverNotFocusing::Unsubscribed";
    }
}
 
void RPort_SOADBG_Dms::RegistReceiveronDriverNotFocusing()
{
    if (m_found)
    {
        // set callback
        auto receiver = [this]() -> void {
            return ReceiveEventonDriverNotFocusingTriggered();
        };
        
        // regist callback
        auto callback = m_interface->onDriverNotFocusing.SetReceiveHandler(receiver);
        if (callback.HasValue())
        {
            m_logger.LogVerbose() << "RPort_SOADBG_Dms::RegistReceiveronDriverNotFocusing::SetReceiveHandler";
        }
        else
        {
            m_logger.LogError() << "RPort_SOADBG_Dms::RegistReceiveronDriverNotFocusing::SetReceiveHandler::" << callback.Error().Message();
        }
    }
}
 
void RPort_SOADBG_Dms::ReceiveEventonDriverNotFocusingTriggered()
{
    if (m_found)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_interface->onDriverNotFocusing.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
        {
            auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->onDriverNotFocusing.GetNewSamples([&](auto samplePtr) {
                RPort_SOADBG_Dms::ReadDataonDriverNotFocusing(std::move(samplePtr));
            }));
            if (recv->HasValue())
            {
                m_logger.LogVerbose() << "RPort_SOADBG_Dms::ReceiveEventonDriverNotFocusing::GetNewSamples::" << recv->Value();
            }
            else
            {
                m_logger.LogError() << "RPort_SOADBG_Dms::ReceiveEventonDriverNotFocusing::GetNewSamples::" << recv->Error().Message();
            }
        }
    }
}
 
void RPort_SOADBG_Dms::ReceiveEventonDriverNotFocusingCyclic()
{
    while (m_running)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_found)
        {
            if (m_interface->onDriverNotFocusing.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
            {
                auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->onDriverNotFocusing.GetNewSamples([&](auto samplePtr) {
                    RPort_SOADBG_Dms::ReadDataonDriverNotFocusing(std::move(samplePtr));
                }));
                if (recv->HasValue())
                {
                    m_logger.LogVerbose() << "RPort_SOADBG_Dms::ReceiveEventonDriverNotFocusing::GetNewSamples::" << recv->Value();
                }
                else
                {
                    m_logger.LogError() << "RPort_SOADBG_Dms::ReceiveEventonDriverNotFocusing::GetNewSamples::" << recv->Error().Message();
                }
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void RPort_SOADBG_Dms::ReadDataonDriverNotFocusing(ara::com::SamplePtr<eevp::control::proxy::events::onDriverNotFocusing::SampleType const> samplePtr)
{
    auto data = *samplePtr.Get();
    if (m_receiveronDriverNotFocusing)
    {
        m_receiveronDriverNotFocusing(data);
    }
}
 
void RPort_SOADBG_Dms::RegistEventHandleronDriverNotFocusing(std::function<void(const eevp::control::proxy::events::onDriverNotFocusing::SampleType&)> handler)
{
    m_receiveronDriverNotFocusing = handler;
}
 
void RPort_SOADBG_Dms::SubscribeonDriverNotWaken()
{
    if (m_found)
    {
        // regist receiver handler
        // if you want to enable it, please uncomment below code
        // RegistReceiveronDriverNotWaken();
        
        // request subscribe
        auto subscribe = m_interface->onDriverNotWaken.Subscribe(1);
        if (subscribe.HasValue())
        {
            m_logger.LogVerbose() << "RPort_SOADBG_Dms::SubscribeonDriverNotWaken::Subscribed";
        }
        else
        {
            m_logger.LogError() << "RPort_SOADBG_Dms::SubscribeonDriverNotWaken::" << subscribe.Error().Message();
        }
    }
}
 
void RPort_SOADBG_Dms::StopSubscribeonDriverNotWaken()
{
    if (m_found)
    {
        // request stop subscribe
        m_interface->onDriverNotWaken.Unsubscribe();
        m_logger.LogVerbose() << "RPort_SOADBG_Dms::StopSubscribeonDriverNotWaken::Unsubscribed";
    }
}
 
void RPort_SOADBG_Dms::RegistReceiveronDriverNotWaken()
{
    if (m_found)
    {
        // set callback
        auto receiver = [this]() -> void {
            return ReceiveEventonDriverNotWakenTriggered();
        };
        
        // regist callback
        auto callback = m_interface->onDriverNotWaken.SetReceiveHandler(receiver);
        if (callback.HasValue())
        {
            m_logger.LogVerbose() << "RPort_SOADBG_Dms::RegistReceiveronDriverNotWaken::SetReceiveHandler";
        }
        else
        {
            m_logger.LogError() << "RPort_SOADBG_Dms::RegistReceiveronDriverNotWaken::SetReceiveHandler::" << callback.Error().Message();
        }
    }
}
 
void RPort_SOADBG_Dms::ReceiveEventonDriverNotWakenTriggered()
{
    if (m_found)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_interface->onDriverNotWaken.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
        {
            auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->onDriverNotWaken.GetNewSamples([&](auto samplePtr) {
                RPort_SOADBG_Dms::ReadDataonDriverNotWaken(std::move(samplePtr));
            }));
            if (recv->HasValue())
            {
                m_logger.LogVerbose() << "RPort_SOADBG_Dms::ReceiveEventonDriverNotWaken::GetNewSamples::" << recv->Value();
            }
            else
            {
                m_logger.LogError() << "RPort_SOADBG_Dms::ReceiveEventonDriverNotWaken::GetNewSamples::" << recv->Error().Message();
            }
        }
    }
}
 
void RPort_SOADBG_Dms::ReceiveEventonDriverNotWakenCyclic()
{
    while (m_running)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_found)
        {
            if (m_interface->onDriverNotWaken.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
            {
                auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->onDriverNotWaken.GetNewSamples([&](auto samplePtr) {
                    RPort_SOADBG_Dms::ReadDataonDriverNotWaken(std::move(samplePtr));
                }));
                if (recv->HasValue())
                {
                    m_logger.LogVerbose() << "RPort_SOADBG_Dms::ReceiveEventonDriverNotWaken::GetNewSamples::" << recv->Value();
                }
                else
                {
                    m_logger.LogError() << "RPort_SOADBG_Dms::ReceiveEventonDriverNotWaken::GetNewSamples::" << recv->Error().Message();
                }
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void RPort_SOADBG_Dms::ReadDataonDriverNotWaken(ara::com::SamplePtr<eevp::control::proxy::events::onDriverNotWaken::SampleType const> samplePtr)
{
    auto data = *samplePtr.Get();
    if (m_receiveronDriverNotWaken)
    {
        m_receiveronDriverNotWaken(data);
    }
}
 
void RPort_SOADBG_Dms::RegistEventHandleronDriverNotWaken(std::function<void(const eevp::control::proxy::events::onDriverNotWaken::SampleType&)> handler)
{
    m_receiveronDriverNotWaken = handler;
}
 
void RPort_SOADBG_Dms::SubscribeonDriverNotWatchingFront()
{
    if (m_found)
    {
        // regist receiver handler
        // if you want to enable it, please uncomment below code
        // RegistReceiveronDriverNotWatchingFront();
        
        // request subscribe
        auto subscribe = m_interface->onDriverNotWatchingFront.Subscribe(1);
        if (subscribe.HasValue())
        {
            m_logger.LogVerbose() << "RPort_SOADBG_Dms::SubscribeonDriverNotWatchingFront::Subscribed";
        }
        else
        {
            m_logger.LogError() << "RPort_SOADBG_Dms::SubscribeonDriverNotWatchingFront::" << subscribe.Error().Message();
        }
    }
}
 
void RPort_SOADBG_Dms::StopSubscribeonDriverNotWatchingFront()
{
    if (m_found)
    {
        // request stop subscribe
        m_interface->onDriverNotWatchingFront.Unsubscribe();
        m_logger.LogVerbose() << "RPort_SOADBG_Dms::StopSubscribeonDriverNotWatchingFront::Unsubscribed";
    }
}
 
void RPort_SOADBG_Dms::RegistReceiveronDriverNotWatchingFront()
{
    if (m_found)
    {
        // set callback
        auto receiver = [this]() -> void {
            return ReceiveEventonDriverNotWatchingFrontTriggered();
        };
        
        // regist callback
        auto callback = m_interface->onDriverNotWatchingFront.SetReceiveHandler(receiver);
        if (callback.HasValue())
        {
            m_logger.LogVerbose() << "RPort_SOADBG_Dms::RegistReceiveronDriverNotWatchingFront::SetReceiveHandler";
        }
        else
        {
            m_logger.LogError() << "RPort_SOADBG_Dms::RegistReceiveronDriverNotWatchingFront::SetReceiveHandler::" << callback.Error().Message();
        }
    }
}
 
void RPort_SOADBG_Dms::ReceiveEventonDriverNotWatchingFrontTriggered()
{
    if (m_found)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_interface->onDriverNotWatchingFront.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
        {
            auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->onDriverNotWatchingFront.GetNewSamples([&](auto samplePtr) {
                RPort_SOADBG_Dms::ReadDataonDriverNotWatchingFront(std::move(samplePtr));
            }));
            if (recv->HasValue())
            {
                m_logger.LogVerbose() << "RPort_SOADBG_Dms::ReceiveEventonDriverNotWatchingFront::GetNewSamples::" << recv->Value();
            }
            else
            {
                m_logger.LogError() << "RPort_SOADBG_Dms::ReceiveEventonDriverNotWatchingFront::GetNewSamples::" << recv->Error().Message();
            }
        }
    }
}
 
void RPort_SOADBG_Dms::ReceiveEventonDriverNotWatchingFrontCyclic()
{
    while (m_running)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_found)
        {
            if (m_interface->onDriverNotWatchingFront.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
            {
                auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->onDriverNotWatchingFront.GetNewSamples([&](auto samplePtr) {
                    RPort_SOADBG_Dms::ReadDataonDriverNotWatchingFront(std::move(samplePtr));
                }));
                if (recv->HasValue())
                {
                    m_logger.LogVerbose() << "RPort_SOADBG_Dms::ReceiveEventonDriverNotWatchingFront::GetNewSamples::" << recv->Value();
                }
                else
                {
                    m_logger.LogError() << "RPort_SOADBG_Dms::ReceiveEventonDriverNotWatchingFront::GetNewSamples::" << recv->Error().Message();
                }
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void RPort_SOADBG_Dms::ReadDataonDriverNotWatchingFront(ara::com::SamplePtr<eevp::control::proxy::events::onDriverNotWatchingFront::SampleType const> samplePtr)
{
    auto data = *samplePtr.Get();
    if (m_receiveronDriverNotWatchingFront)
    {
        m_receiveronDriverNotWatchingFront(data);
    }
}
 
void RPort_SOADBG_Dms::RegistEventHandleronDriverNotWatchingFront(std::function<void(const eevp::control::proxy::events::onDriverNotWatchingFront::SampleType&)> handler)
{
    m_receiveronDriverNotWatchingFront = handler;
}
 
void RPort_SOADBG_Dms::SubscribesoaDmsDeviceNormal()
{
    if (m_found)
    {
        // regist receiver handler
        // if you want to enable it, please uncomment below code
        // RegistReceiversoaDmsDeviceNormal();
        
        // request subscribe
        auto subscribe = m_interface->soaDmsDeviceNormal.Subscribe(1);
        if (subscribe.HasValue())
        {
            m_logger.LogVerbose() << "RPort_SOADBG_Dms::SubscribesoaDmsDeviceNormal::Subscribed";
        }
        else
        {
            m_logger.LogError() << "RPort_SOADBG_Dms::SubscribesoaDmsDeviceNormal::" << subscribe.Error().Message();
        }
    }
}
 
void RPort_SOADBG_Dms::StopSubscribesoaDmsDeviceNormal()
{
    if (m_found)
    {
        // request stop subscribe
        m_interface->soaDmsDeviceNormal.Unsubscribe();
        m_logger.LogVerbose() << "RPort_SOADBG_Dms::StopSubscribesoaDmsDeviceNormal::Unsubscribed";
    }
}
 
void RPort_SOADBG_Dms::RegistReceiversoaDmsDeviceNormal()
{
    if (m_found)
    {
        // set callback
        auto receiver = [this]() -> void {
            return ReceiveFieldsoaDmsDeviceNormalTriggered();
        };
        
        // regist callback
        auto callback = m_interface->soaDmsDeviceNormal.SetReceiveHandler(receiver);
        if (callback.HasValue())
        {
            m_logger.LogVerbose() << "RPort_SOADBG_Dms::RegistReceiversoaDmsDeviceNormal::SetReceiveHandler";
        }
        else
        {
            m_logger.LogError() << "RPort_SOADBG_Dms::RegistReceiversoaDmsDeviceNormal::SetReceiveHandler::" << callback.Error().Message();
        }
    }
}
 
void RPort_SOADBG_Dms::ReceiveFieldsoaDmsDeviceNormalTriggered()
{
    if (m_found)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_interface->soaDmsDeviceNormal.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
        {
            auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaDmsDeviceNormal.GetNewSamples([&](auto samplePtr) {
                RPort_SOADBG_Dms::ReadValuesoaDmsDeviceNormal(std::move(samplePtr));
            }));
            if (recv->HasValue())
            {
                m_logger.LogVerbose() << "RPort_SOADBG_Dms::ReceiveFieldsoaDmsDeviceNormal::GetNewSamples::" << recv->Value();
            }
            else
            {
                m_logger.LogError() << "RPort_SOADBG_Dms::ReceiveFieldsoaDmsDeviceNormal::GetNewSamples::" << recv->Error().Message();
            }
        }
    }
}
 
void RPort_SOADBG_Dms::ReceiveFieldsoaDmsDeviceNormalCyclic()
{
    while (m_running)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_found)
        {
            if (m_interface->soaDmsDeviceNormal.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
            {
                auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaDmsDeviceNormal.GetNewSamples([&](auto samplePtr) {
                    RPort_SOADBG_Dms::ReadValuesoaDmsDeviceNormal(std::move(samplePtr));
                }));
                if (recv->HasValue())
                {
                    m_logger.LogVerbose() << "RPort_SOADBG_Dms::ReceiveFieldsoaDmsDeviceNormal::GetNewSamples::" << recv->Value();
                }
                else
                {
                    m_logger.LogError() << "RPort_SOADBG_Dms::ReceiveFieldsoaDmsDeviceNormal::GetNewSamples::" << recv->Error().Message();
                }
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void RPort_SOADBG_Dms::ReadValuesoaDmsDeviceNormal(ara::com::SamplePtr<eevp::control::proxy::fields::soaDmsDeviceNormal::FieldType const> samplePtr)
{
    auto value = *samplePtr.Get();
    if (m_receiversoaDmsDeviceNormal)
    {
        m_receiversoaDmsDeviceNormal(value);
    }
}
 
void RPort_SOADBG_Dms::RegistFieldHandlersoaDmsDeviceNormal(std::function<void(const eevp::control::proxy::fields::soaDmsDeviceNormal::FieldType&)> handler)
{
    m_receiversoaDmsDeviceNormal = handler;
}
 
void RPort_SOADBG_Dms::GetsoaDmsDeviceNormal()
{
    if (m_found)
    {
        auto request = m_interface->soaDmsDeviceNormal.Get();
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "RPort_SOADBG_Dms::GetsoaDmsDeviceNormal::Responded";
            
            auto result = response.Value();
            if (m_receiversoaDmsDeviceNormal)
            {
                m_receiversoaDmsDeviceNormal(result);
            }
        }
        else
        {
            m_logger.LogError() << "RPort_SOADBG_Dms::GetsoaDmsDeviceNormal::" << response.Error().Message();
        }
    }
}
 
void RPort_SOADBG_Dms::SubscribesoaDmsDriverStatus()
{
    if (m_found)
    {
        // regist receiver handler
        // if you want to enable it, please uncomment below code
        // RegistReceiversoaDmsDriverStatus();
        
        // request subscribe
        auto subscribe = m_interface->soaDmsDriverStatus.Subscribe(1);
        if (subscribe.HasValue())
        {
            m_logger.LogVerbose() << "RPort_SOADBG_Dms::SubscribesoaDmsDriverStatus::Subscribed";
        }
        else
        {
            m_logger.LogError() << "RPort_SOADBG_Dms::SubscribesoaDmsDriverStatus::" << subscribe.Error().Message();
        }
    }
}
 
void RPort_SOADBG_Dms::StopSubscribesoaDmsDriverStatus()
{
    if (m_found)
    {
        // request stop subscribe
        m_interface->soaDmsDriverStatus.Unsubscribe();
        m_logger.LogVerbose() << "RPort_SOADBG_Dms::StopSubscribesoaDmsDriverStatus::Unsubscribed";
    }
}
 
void RPort_SOADBG_Dms::RegistReceiversoaDmsDriverStatus()
{
    if (m_found)
    {
        // set callback
        auto receiver = [this]() -> void {
            return ReceiveFieldsoaDmsDriverStatusTriggered();
        };
        
        // regist callback
        auto callback = m_interface->soaDmsDriverStatus.SetReceiveHandler(receiver);
        if (callback.HasValue())
        {
            m_logger.LogVerbose() << "RPort_SOADBG_Dms::RegistReceiversoaDmsDriverStatus::SetReceiveHandler";
        }
        else
        {
            m_logger.LogError() << "RPort_SOADBG_Dms::RegistReceiversoaDmsDriverStatus::SetReceiveHandler::" << callback.Error().Message();
        }
    }
}
 
void RPort_SOADBG_Dms::ReceiveFieldsoaDmsDriverStatusTriggered()
{
    if (m_found)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_interface->soaDmsDriverStatus.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
        {
            auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaDmsDriverStatus.GetNewSamples([&](auto samplePtr) {
                RPort_SOADBG_Dms::ReadValuesoaDmsDriverStatus(std::move(samplePtr));
            }));
            if (recv->HasValue())
            {
                m_logger.LogVerbose() << "RPort_SOADBG_Dms::ReceiveFieldsoaDmsDriverStatus::GetNewSamples::" << recv->Value();
            }
            else
            {
                m_logger.LogError() << "RPort_SOADBG_Dms::ReceiveFieldsoaDmsDriverStatus::GetNewSamples::" << recv->Error().Message();
            }
        }
    }
}
 
void RPort_SOADBG_Dms::ReceiveFieldsoaDmsDriverStatusCyclic()
{
    while (m_running)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_found)
        {
            if (m_interface->soaDmsDriverStatus.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
            {
                auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaDmsDriverStatus.GetNewSamples([&](auto samplePtr) {
                    RPort_SOADBG_Dms::ReadValuesoaDmsDriverStatus(std::move(samplePtr));
                }));
                if (recv->HasValue())
                {
                    m_logger.LogVerbose() << "RPort_SOADBG_Dms::ReceiveFieldsoaDmsDriverStatus::GetNewSamples::" << recv->Value();
                }
                else
                {
                    m_logger.LogError() << "RPort_SOADBG_Dms::ReceiveFieldsoaDmsDriverStatus::GetNewSamples::" << recv->Error().Message();
                }
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void RPort_SOADBG_Dms::ReadValuesoaDmsDriverStatus(ara::com::SamplePtr<eevp::control::proxy::fields::soaDmsDriverStatus::FieldType const> samplePtr)
{
    auto value = *samplePtr.Get();
    if (m_receiversoaDmsDriverStatus)
    {
        m_receiversoaDmsDriverStatus(value);
    }
}
 
void RPort_SOADBG_Dms::RegistFieldHandlersoaDmsDriverStatus(std::function<void(const eevp::control::proxy::fields::soaDmsDriverStatus::FieldType&)> handler)
{
    m_receiversoaDmsDriverStatus = handler;
}
 
void RPort_SOADBG_Dms::GetsoaDmsDriverStatus()
{
    if (m_found)
    {
        auto request = m_interface->soaDmsDriverStatus.Get();
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "RPort_SOADBG_Dms::GetsoaDmsDriverStatus::Responded";
            
            auto result = response.Value();
            if (m_receiversoaDmsDriverStatus)
            {
                m_receiversoaDmsDriverStatus(result);
            }
        }
        else
        {
            m_logger.LogError() << "RPort_SOADBG_Dms::GetsoaDmsDriverStatus::" << response.Error().Message();
        }
    }
}
 
void RPort_SOADBG_Dms::SubscribesoaDmsStatus()
{
    if (m_found)
    {
        // regist receiver handler
        // if you want to enable it, please uncomment below code
        // RegistReceiversoaDmsStatus();
        
        // request subscribe
        auto subscribe = m_interface->soaDmsStatus.Subscribe(1);
        if (subscribe.HasValue())
        {
            m_logger.LogVerbose() << "RPort_SOADBG_Dms::SubscribesoaDmsStatus::Subscribed";
        }
        else
        {
            m_logger.LogError() << "RPort_SOADBG_Dms::SubscribesoaDmsStatus::" << subscribe.Error().Message();
        }
    }
}
 
void RPort_SOADBG_Dms::StopSubscribesoaDmsStatus()
{
    if (m_found)
    {
        // request stop subscribe
        m_interface->soaDmsStatus.Unsubscribe();
        m_logger.LogVerbose() << "RPort_SOADBG_Dms::StopSubscribesoaDmsStatus::Unsubscribed";
    }
}
 
void RPort_SOADBG_Dms::RegistReceiversoaDmsStatus()
{
    if (m_found)
    {
        // set callback
        auto receiver = [this]() -> void {
            return ReceiveFieldsoaDmsStatusTriggered();
        };
        
        // regist callback
        auto callback = m_interface->soaDmsStatus.SetReceiveHandler(receiver);
        if (callback.HasValue())
        {
            m_logger.LogVerbose() << "RPort_SOADBG_Dms::RegistReceiversoaDmsStatus::SetReceiveHandler";
        }
        else
        {
            m_logger.LogError() << "RPort_SOADBG_Dms::RegistReceiversoaDmsStatus::SetReceiveHandler::" << callback.Error().Message();
        }
    }
}
 
void RPort_SOADBG_Dms::ReceiveFieldsoaDmsStatusTriggered()
{
    if (m_found)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_interface->soaDmsStatus.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
        {
            auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaDmsStatus.GetNewSamples([&](auto samplePtr) {
                RPort_SOADBG_Dms::ReadValuesoaDmsStatus(std::move(samplePtr));
            }));
            if (recv->HasValue())
            {
                m_logger.LogVerbose() << "RPort_SOADBG_Dms::ReceiveFieldsoaDmsStatus::GetNewSamples::" << recv->Value();
            }
            else
            {
                m_logger.LogError() << "RPort_SOADBG_Dms::ReceiveFieldsoaDmsStatus::GetNewSamples::" << recv->Error().Message();
            }
        }
    }
}
 
void RPort_SOADBG_Dms::ReceiveFieldsoaDmsStatusCyclic()
{
    while (m_running)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_found)
        {
            if (m_interface->soaDmsStatus.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
            {
                auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaDmsStatus.GetNewSamples([&](auto samplePtr) {
                    RPort_SOADBG_Dms::ReadValuesoaDmsStatus(std::move(samplePtr));
                }));
                if (recv->HasValue())
                {
                    m_logger.LogVerbose() << "RPort_SOADBG_Dms::ReceiveFieldsoaDmsStatus::GetNewSamples::" << recv->Value();
                }
                else
                {
                    m_logger.LogError() << "RPort_SOADBG_Dms::ReceiveFieldsoaDmsStatus::GetNewSamples::" << recv->Error().Message();
                }
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void RPort_SOADBG_Dms::ReadValuesoaDmsStatus(ara::com::SamplePtr<eevp::control::proxy::fields::soaDmsStatus::FieldType const> samplePtr)
{
    auto value = *samplePtr.Get();
    if (m_receiversoaDmsStatus)
    {
        m_receiversoaDmsStatus(value);
    }
}
 
void RPort_SOADBG_Dms::RegistFieldHandlersoaDmsStatus(std::function<void(const eevp::control::proxy::fields::soaDmsStatus::FieldType&)> handler)
{
    m_receiversoaDmsStatus = handler;
}
 
void RPort_SOADBG_Dms::GetsoaDmsStatus()
{
    if (m_found)
    {
        auto request = m_interface->soaDmsStatus.Get();
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "RPort_SOADBG_Dms::GetsoaDmsStatus::Responded";
            
            auto result = response.Value();
            if (m_receiversoaDmsStatus)
            {
                m_receiversoaDmsStatus(result);
            }
        }
        else
        {
            m_logger.LogError() << "RPort_SOADBG_Dms::GetsoaDmsStatus::" << response.Error().Message();
        }
    }
}
 
void RPort_SOADBG_Dms::SubscribesoaDmsSwVersion()
{
    if (m_found)
    {
        // regist receiver handler
        // if you want to enable it, please uncomment below code
        // RegistReceiversoaDmsSwVersion();
        
        // request subscribe
        auto subscribe = m_interface->soaDmsSwVersion.Subscribe(1);
        if (subscribe.HasValue())
        {
            m_logger.LogVerbose() << "RPort_SOADBG_Dms::SubscribesoaDmsSwVersion::Subscribed";
        }
        else
        {
            m_logger.LogError() << "RPort_SOADBG_Dms::SubscribesoaDmsSwVersion::" << subscribe.Error().Message();
        }
    }
}
 
void RPort_SOADBG_Dms::StopSubscribesoaDmsSwVersion()
{
    if (m_found)
    {
        // request stop subscribe
        m_interface->soaDmsSwVersion.Unsubscribe();
        m_logger.LogVerbose() << "RPort_SOADBG_Dms::StopSubscribesoaDmsSwVersion::Unsubscribed";
    }
}
 
void RPort_SOADBG_Dms::RegistReceiversoaDmsSwVersion()
{
    if (m_found)
    {
        // set callback
        auto receiver = [this]() -> void {
            return ReceiveFieldsoaDmsSwVersionTriggered();
        };
        
        // regist callback
        auto callback = m_interface->soaDmsSwVersion.SetReceiveHandler(receiver);
        if (callback.HasValue())
        {
            m_logger.LogVerbose() << "RPort_SOADBG_Dms::RegistReceiversoaDmsSwVersion::SetReceiveHandler";
        }
        else
        {
            m_logger.LogError() << "RPort_SOADBG_Dms::RegistReceiversoaDmsSwVersion::SetReceiveHandler::" << callback.Error().Message();
        }
    }
}
 
void RPort_SOADBG_Dms::ReceiveFieldsoaDmsSwVersionTriggered()
{
    if (m_found)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_interface->soaDmsSwVersion.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
        {
            auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaDmsSwVersion.GetNewSamples([&](auto samplePtr) {
                RPort_SOADBG_Dms::ReadValuesoaDmsSwVersion(std::move(samplePtr));
            }));
            if (recv->HasValue())
            {
                m_logger.LogVerbose() << "RPort_SOADBG_Dms::ReceiveFieldsoaDmsSwVersion::GetNewSamples::" << recv->Value();
            }
            else
            {
                m_logger.LogError() << "RPort_SOADBG_Dms::ReceiveFieldsoaDmsSwVersion::GetNewSamples::" << recv->Error().Message();
            }
        }
    }
}
 
void RPort_SOADBG_Dms::ReceiveFieldsoaDmsSwVersionCyclic()
{
    while (m_running)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_found)
        {
            if (m_interface->soaDmsSwVersion.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
            {
                auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaDmsSwVersion.GetNewSamples([&](auto samplePtr) {
                    RPort_SOADBG_Dms::ReadValuesoaDmsSwVersion(std::move(samplePtr));
                }));
                if (recv->HasValue())
                {
                    m_logger.LogVerbose() << "RPort_SOADBG_Dms::ReceiveFieldsoaDmsSwVersion::GetNewSamples::" << recv->Value();
                }
                else
                {
                    m_logger.LogError() << "RPort_SOADBG_Dms::ReceiveFieldsoaDmsSwVersion::GetNewSamples::" << recv->Error().Message();
                }
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void RPort_SOADBG_Dms::ReadValuesoaDmsSwVersion(ara::com::SamplePtr<eevp::control::proxy::fields::soaDmsSwVersion::FieldType const> samplePtr)
{
    auto value = *samplePtr.Get();
    if (m_receiversoaDmsSwVersion)
    {
        m_receiversoaDmsSwVersion(value);
    }
}
 
void RPort_SOADBG_Dms::RegistFieldHandlersoaDmsSwVersion(std::function<void(const eevp::control::proxy::fields::soaDmsSwVersion::FieldType&)> handler)
{
    m_receiversoaDmsSwVersion = handler;
}
 
void RPort_SOADBG_Dms::GetsoaDmsSwVersion()
{
    if (m_found)
    {
        auto request = m_interface->soaDmsSwVersion.Get();
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "RPort_SOADBG_Dms::GetsoaDmsSwVersion::Responded";
            
            auto result = response.Value();
            if (m_receiversoaDmsSwVersion)
            {
                m_receiversoaDmsSwVersion(result);
            }
        }
        else
        {
            m_logger.LogError() << "RPort_SOADBG_Dms::GetsoaDmsSwVersion::" << response.Error().Message();
        }
    }
}
 
void RPort_SOADBG_Dms::RequestSetDmsPower(const bool& on)
{
    if (m_found)
    {
        m_interface->SetDmsPower(on);
    }
}
 
} /// namespace port
} /// namespace aa
} /// namespace soa_debugger
 
/// EOF