///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : rport_soadbg_driverseat.h
/// SOFTWARE COMPONENT NAME           : RPort_SOADBG_DriverSeat
/// GENERATED DATE                    : 2025-08-30 10:53:34
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef PARA_AA_GEN_SOFTWARE_COMPONENT_RPORT_SOA_DEBUGGER_AA_RPORT_SOADBG_DRIVERSEAT_H
#define PARA_AA_GEN_SOFTWARE_COMPONENT_RPORT_SOA_DEBUGGER_AA_RPORT_SOADBG_DRIVERSEAT_H
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// INCLUSION HEADER FILES
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "eevp/control/soadriverseat_proxy.h"
 
#include "ara/log/logger.h"
 
#include <mutex>
#include <thread>
 
namespace soa_debugger
{
namespace aa
{
namespace port
{
 
class RPort_SOADBG_DriverSeat
{
public:
    /// @brief Constructor
    RPort_SOADBG_DriverSeat();
    
    /// @brief Destructor
    ~RPort_SOADBG_DriverSeat();
    
    /// @brief Start port
    void Start();
    
    /// @brief Terminate port
    void Terminate();

    /// @brief Subscribe field notification, soaDrvSeatDeviceNormal
    void SubscribesoaDrvSeatDeviceNormal();
     
    /// @brief Stop field subscription, soaDrvSeatDeviceNormal
    void StopSubscribesoaDrvSeatDeviceNormal();
     
    /// @brief Field notification receive handler, soaDrvSeatDeviceNormal
    void ReceiveFieldsoaDrvSeatDeviceNormalTriggered();
     
    /// @brief Field notification receive handler, soaDrvSeatDeviceNormal
    void ReceiveFieldsoaDrvSeatDeviceNormalCyclic();
     
    /// @brief Read field notification value, soaDrvSeatDeviceNormal
    void ReadValuesoaDrvSeatDeviceNormal(ara::com::SamplePtr<eevp::control::proxy::fields::soaDrvSeatDeviceNormal::FieldType const> samplePtr);
     
    /// @brief Regist callback from software component
    void RegistFieldHandlersoaDrvSeatDeviceNormal(std::function<void(const eevp::control::proxy::fields::soaDrvSeatDeviceNormal::FieldType&)> handler);
    
    /// @brief Getter method using by software component, soaDrvSeatDeviceNormal
    void GetsoaDrvSeatDeviceNormal();
    
    /// @brief Subscribe field notification, soaDrvSeatMotorDirection
    void SubscribesoaDrvSeatMotorDirection();
     
    /// @brief Stop field subscription, soaDrvSeatMotorDirection
    void StopSubscribesoaDrvSeatMotorDirection();
     
    /// @brief Field notification receive handler, soaDrvSeatMotorDirection
    void ReceiveFieldsoaDrvSeatMotorDirectionTriggered();
     
    /// @brief Field notification receive handler, soaDrvSeatMotorDirection
    void ReceiveFieldsoaDrvSeatMotorDirectionCyclic();
     
    /// @brief Read field notification value, soaDrvSeatMotorDirection
    void ReadValuesoaDrvSeatMotorDirection(ara::com::SamplePtr<eevp::control::proxy::fields::soaDrvSeatMotorDirection::FieldType const> samplePtr);
     
    /// @brief Regist callback from software component
    void RegistFieldHandlersoaDrvSeatMotorDirection(std::function<void(const eevp::control::proxy::fields::soaDrvSeatMotorDirection::FieldType&)> handler);
    
    /// @brief Getter method using by software component, soaDrvSeatMotorDirection
    void GetsoaDrvSeatMotorDirection();
    
    /// @brief Subscribe field notification, soaDrvSeatMotorPosition
    void SubscribesoaDrvSeatMotorPosition();
     
    /// @brief Stop field subscription, soaDrvSeatMotorPosition
    void StopSubscribesoaDrvSeatMotorPosition();
     
    /// @brief Field notification receive handler, soaDrvSeatMotorPosition
    void ReceiveFieldsoaDrvSeatMotorPositionTriggered();
     
    /// @brief Field notification receive handler, soaDrvSeatMotorPosition
    void ReceiveFieldsoaDrvSeatMotorPositionCyclic();
     
    /// @brief Read field notification value, soaDrvSeatMotorPosition
    void ReadValuesoaDrvSeatMotorPosition(ara::com::SamplePtr<eevp::control::proxy::fields::soaDrvSeatMotorPosition::FieldType const> samplePtr);
     
    /// @brief Regist callback from software component
    void RegistFieldHandlersoaDrvSeatMotorPosition(std::function<void(const eevp::control::proxy::fields::soaDrvSeatMotorPosition::FieldType&)> handler);
    
    /// @brief Getter method using by software component, soaDrvSeatMotorPosition
    void GetsoaDrvSeatMotorPosition();
    
    /// @brief Subscribe field notification, soaDrvSeatSwVersion
    void SubscribesoaDrvSeatSwVersion();
     
    /// @brief Stop field subscription, soaDrvSeatSwVersion
    void StopSubscribesoaDrvSeatSwVersion();
     
    /// @brief Field notification receive handler, soaDrvSeatSwVersion
    void ReceiveFieldsoaDrvSeatSwVersionTriggered();
     
    /// @brief Field notification receive handler, soaDrvSeatSwVersion
    void ReceiveFieldsoaDrvSeatSwVersionCyclic();
     
    /// @brief Read field notification value, soaDrvSeatSwVersion
    void ReadValuesoaDrvSeatSwVersion(ara::com::SamplePtr<eevp::control::proxy::fields::soaDrvSeatSwVersion::FieldType const> samplePtr);
     
    /// @brief Regist callback from software component
    void RegistFieldHandlersoaDrvSeatSwVersion(std::function<void(const eevp::control::proxy::fields::soaDrvSeatSwVersion::FieldType&)> handler);
    
    /// @brief Getter method using by software component, soaDrvSeatSwVersion
    void GetsoaDrvSeatSwVersion();
    
    /// @brief Fire and Forget method using by software component, RequestMoveDrvSeatHeight
    void RequestRequestMoveDrvSeatHeight(const eevp::control::SoaSeatHeightDirection& dir);
    
    /// @brief Fire and Forget method using by software component, RequestMoveDrvSeatRecline
    void RequestRequestMoveDrvSeatRecline(const eevp::control::SoaSeatReclineDirection& dir);
    
    /// @brief Fire and Forget method using by software component, RequestMoveDrvSeatSlide
    void RequestRequestMoveDrvSeatSlide(const eevp::control::SoaSeatSlideDirection& dir);
    
    /// @brief Fire and Forget method using by software component, RequestMoveDrvSeatTilt
    void RequestRequestMoveDrvSeatTilt(const eevp::control::SoaSeatTiltDirection& dir);
    
private:
    /// @brief Callback for find service
    void Find(ara::com::ServiceHandleContainer<eevp::control::proxy::SoaDriverSeatProxy::HandleType> handles,
              ara::com::FindServiceHandle findHandle);

    /// @brief Callback for field notification receiver, soaDrvSeatDeviceNormal
    void RegistReceiversoaDrvSeatDeviceNormal();
    
    /// @brief Callback for field notification receiver, soaDrvSeatMotorDirection
    void RegistReceiversoaDrvSeatMotorDirection();
    
    /// @brief Callback for field notification receiver, soaDrvSeatMotorPosition
    void RegistReceiversoaDrvSeatMotorPosition();
    
    /// @brief Callback for field notification receiver, soaDrvSeatSwVersion
    void RegistReceiversoaDrvSeatSwVersion();
    
private:
    /// @brief Logger for this port
    ara::log::Logger& m_logger;
    
    /// @brief Flag of port status
    bool m_running;
    
    /// @brief Flag of find service status
    bool m_found;
    
    /// @brief Mutex for this port
    std::mutex m_mutex; 
    
    /// @brief AUTOSAR Port Interface
    std::unique_ptr<eevp::control::proxy::SoaDriverSeatProxy> m_interface;
    
    /// @brief Find service handle
    std::unique_ptr<ara::com::FindServiceHandle> m_findHandle;

    /// @brief Callback from software component, soaDrvSeatDeviceNormal
    std::function<void(const eevp::control::proxy::fields::soaDrvSeatDeviceNormal::FieldType&)> m_receiversoaDrvSeatDeviceNormal;
    
    /// @brief Callback from software component, soaDrvSeatMotorDirection
    std::function<void(const eevp::control::proxy::fields::soaDrvSeatMotorDirection::FieldType&)> m_receiversoaDrvSeatMotorDirection;
    
    /// @brief Callback from software component, soaDrvSeatMotorPosition
    std::function<void(const eevp::control::proxy::fields::soaDrvSeatMotorPosition::FieldType&)> m_receiversoaDrvSeatMotorPosition;
    
    /// @brief Callback from software component, soaDrvSeatSwVersion
    std::function<void(const eevp::control::proxy::fields::soaDrvSeatSwVersion::FieldType&)> m_receiversoaDrvSeatSwVersion;
    
};
 
} /// namespace port
} /// namespace aa
} /// namespace soa_debugger
 
#endif /// PARA_AA_GEN_SOFTWARE_COMPONENT_RPORT_SOA_DEBUGGER_AA_RPORT_SOADBG_DRIVERSEAT_H