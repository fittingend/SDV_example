///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : rport_soadbg_driverseat.cpp
/// SOFTWARE COMPONENT NAME           : RPort_SOADBG_DriverSeat
/// GENERATED DATE                    : 2025-08-30 10:53:35
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "soa_debugger/aa/port/rport_soadbg_driverseat.h"
 
namespace soa_debugger
{
namespace aa
{
namespace port
{
 
RPort_SOADBG_DriverSeat::RPort_SOADBG_DriverSeat()
    : m_logger(ara::log::CreateLogger("SDBG", "PORT", ara::log::LogLevel::kVerbose))
    , m_running{false}
    , m_found{false}
    , m_receiversoaDrvSeatDeviceNormal{nullptr}
    , m_receiversoaDrvSeatMotorDirection{nullptr}
    , m_receiversoaDrvSeatMotorPosition{nullptr}
    , m_receiversoaDrvSeatSwVersion{nullptr}
{
}
 
RPort_SOADBG_DriverSeat::~RPort_SOADBG_DriverSeat()
{
}
 
void RPort_SOADBG_DriverSeat::Start()
{
    m_logger.LogVerbose() << "RPort_SOADBG_DriverSeat::Start";
    
    // regist callback
    ara::core::InstanceSpecifier specifier{"SOA_Debugger/AA/RPort_SOADBG_DriverSeat"};
    auto handler = [this](ara::com::ServiceHandleContainer<eevp::control::proxy::SoaDriverSeatProxy::HandleType> handles,
                          ara::com::FindServiceHandle findHandle) {
        this->Find(handles, findHandle);
    };
    
    // find service
    auto find = eevp::control::proxy::SoaDriverSeatProxy::StartFindService(handler, specifier);
    if (find.HasValue())
    {
        m_logger.LogVerbose() << "RPort_SOADBG_DriverSeat::Start::StartFindService";
    }
    else
    {
        m_logger.LogError() << "RPort_SOADBG_DriverSeat::Start::StartFindService::" << find.Error().Message();
    }
    
    // run port
    m_running = true;
}
 
void RPort_SOADBG_DriverSeat::Terminate()
{
    m_logger.LogVerbose() << "RPort_SOADBG_DriverSeat::Terminate";
    
    // stop port
    m_running = false;
    
    // clear service proxy
    if (m_interface)
    {
        StopSubscribesoaDrvSeatDeviceNormal();
        StopSubscribesoaDrvSeatMotorDirection();
        StopSubscribesoaDrvSeatMotorPosition();
        StopSubscribesoaDrvSeatSwVersion();
        
        // stop find service
        m_interface->StopFindService(*m_findHandle);
        m_found = false;
        
        m_logger.LogVerbose() << "RPort_SOADBG_DriverSeat::Terminate::StopFindService";
    }
}
 
void RPort_SOADBG_DriverSeat::Find(ara::com::ServiceHandleContainer<eevp::control::proxy::SoaDriverSeatProxy::HandleType> handles, ara::com::FindServiceHandle findHandle)
{
    // check finding handles
    if (handles.empty())
    {
        m_logger.LogVerbose() << "RPort_SOADBG_DriverSeat::Find::Service Instances not found";
        return;
    }
    else
    {
        for (auto& handle : handles)
        {
            m_logger.LogVerbose() << "RPort_SOADBG_DriverSeat::Find::Searched Instance::ServiceId =" << 
                                     handle.GetServiceHandle().serviceId << 
                                     ", InstanceId =" << 
                                     handle.GetServiceHandle().instanceId;
        }
    }
    
    // create proxy
    if (m_interface)
    {
        m_logger.LogVerbose() << "RPort_SOADBG_DriverSeat::Find::Proxy is already running";
    }
    else
    {
        m_logger.LogVerbose() << "RPort_SOADBG_DriverSeat::Find::Using Instance::ServiceId =" << 
                                 handles[0].GetServiceHandle().serviceId << 
                                 ", InstanceId =" << 
                                 handles[0].GetServiceHandle().instanceId;
        m_interface = std::make_unique<eevp::control::proxy::SoaDriverSeatProxy>(handles[0]);
        m_findHandle = std::make_unique<ara::com::FindServiceHandle>(findHandle);
        m_found = true;
        
        // subscribe field notifications
        SubscribesoaDrvSeatDeviceNormal();
        SubscribesoaDrvSeatMotorDirection();
        SubscribesoaDrvSeatMotorPosition();
        SubscribesoaDrvSeatSwVersion();
    }
}
 
void RPort_SOADBG_DriverSeat::SubscribesoaDrvSeatDeviceNormal()
{
    if (m_found)
    {
        // regist receiver handler
        // if you want to enable it, please uncomment below code
        // RegistReceiversoaDrvSeatDeviceNormal();
        
        // request subscribe
        auto subscribe = m_interface->soaDrvSeatDeviceNormal.Subscribe(1);
        if (subscribe.HasValue())
        {
            m_logger.LogVerbose() << "RPort_SOADBG_DriverSeat::SubscribesoaDrvSeatDeviceNormal::Subscribed";
        }
        else
        {
            m_logger.LogError() << "RPort_SOADBG_DriverSeat::SubscribesoaDrvSeatDeviceNormal::" << subscribe.Error().Message();
        }
    }
}
 
void RPort_SOADBG_DriverSeat::StopSubscribesoaDrvSeatDeviceNormal()
{
    if (m_found)
    {
        // request stop subscribe
        m_interface->soaDrvSeatDeviceNormal.Unsubscribe();
        m_logger.LogVerbose() << "RPort_SOADBG_DriverSeat::StopSubscribesoaDrvSeatDeviceNormal::Unsubscribed";
    }
}
 
void RPort_SOADBG_DriverSeat::RegistReceiversoaDrvSeatDeviceNormal()
{
    if (m_found)
    {
        // set callback
        auto receiver = [this]() -> void {
            return ReceiveFieldsoaDrvSeatDeviceNormalTriggered();
        };
        
        // regist callback
        auto callback = m_interface->soaDrvSeatDeviceNormal.SetReceiveHandler(receiver);
        if (callback.HasValue())
        {
            m_logger.LogVerbose() << "RPort_SOADBG_DriverSeat::RegistReceiversoaDrvSeatDeviceNormal::SetReceiveHandler";
        }
        else
        {
            m_logger.LogError() << "RPort_SOADBG_DriverSeat::RegistReceiversoaDrvSeatDeviceNormal::SetReceiveHandler::" << callback.Error().Message();
        }
    }
}
 
void RPort_SOADBG_DriverSeat::ReceiveFieldsoaDrvSeatDeviceNormalTriggered()
{
    if (m_found)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_interface->soaDrvSeatDeviceNormal.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
        {
            auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaDrvSeatDeviceNormal.GetNewSamples([&](auto samplePtr) {
                RPort_SOADBG_DriverSeat::ReadValuesoaDrvSeatDeviceNormal(std::move(samplePtr));
            }));
            if (recv->HasValue())
            {
                m_logger.LogVerbose() << "RPort_SOADBG_DriverSeat::ReceiveFieldsoaDrvSeatDeviceNormal::GetNewSamples::" << recv->Value();
            }
            else
            {
                m_logger.LogError() << "RPort_SOADBG_DriverSeat::ReceiveFieldsoaDrvSeatDeviceNormal::GetNewSamples::" << recv->Error().Message();
            }
        }
    }
}
 
void RPort_SOADBG_DriverSeat::ReceiveFieldsoaDrvSeatDeviceNormalCyclic()
{
    while (m_running)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_found)
        {
            if (m_interface->soaDrvSeatDeviceNormal.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
            {
                auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaDrvSeatDeviceNormal.GetNewSamples([&](auto samplePtr) {
                    RPort_SOADBG_DriverSeat::ReadValuesoaDrvSeatDeviceNormal(std::move(samplePtr));
                }));
                if (recv->HasValue())
                {
                    m_logger.LogVerbose() << "RPort_SOADBG_DriverSeat::ReceiveFieldsoaDrvSeatDeviceNormal::GetNewSamples::" << recv->Value();
                }
                else
                {
                    m_logger.LogError() << "RPort_SOADBG_DriverSeat::ReceiveFieldsoaDrvSeatDeviceNormal::GetNewSamples::" << recv->Error().Message();
                }
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void RPort_SOADBG_DriverSeat::ReadValuesoaDrvSeatDeviceNormal(ara::com::SamplePtr<eevp::control::proxy::fields::soaDrvSeatDeviceNormal::FieldType const> samplePtr)
{
    auto value = *samplePtr.Get();
    if (m_receiversoaDrvSeatDeviceNormal)
    {
        m_receiversoaDrvSeatDeviceNormal(value);
    }
}
 
void RPort_SOADBG_DriverSeat::RegistFieldHandlersoaDrvSeatDeviceNormal(std::function<void(const eevp::control::proxy::fields::soaDrvSeatDeviceNormal::FieldType&)> handler)
{
    m_receiversoaDrvSeatDeviceNormal = handler;
}
 
void RPort_SOADBG_DriverSeat::GetsoaDrvSeatDeviceNormal()
{
    if (m_found)
    {
        auto request = m_interface->soaDrvSeatDeviceNormal.Get();
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "RPort_SOADBG_DriverSeat::GetsoaDrvSeatDeviceNormal::Responded";
            
            auto result = response.Value();
            if (m_receiversoaDrvSeatDeviceNormal)
            {
                m_receiversoaDrvSeatDeviceNormal(result);
            }
        }
        else
        {
            m_logger.LogError() << "RPort_SOADBG_DriverSeat::GetsoaDrvSeatDeviceNormal::" << response.Error().Message();
        }
    }
}
 
void RPort_SOADBG_DriverSeat::SubscribesoaDrvSeatMotorDirection()
{
    if (m_found)
    {
        // regist receiver handler
        // if you want to enable it, please uncomment below code
        // RegistReceiversoaDrvSeatMotorDirection();
        
        // request subscribe
        auto subscribe = m_interface->soaDrvSeatMotorDirection.Subscribe(1);
        if (subscribe.HasValue())
        {
            m_logger.LogVerbose() << "RPort_SOADBG_DriverSeat::SubscribesoaDrvSeatMotorDirection::Subscribed";
        }
        else
        {
            m_logger.LogError() << "RPort_SOADBG_DriverSeat::SubscribesoaDrvSeatMotorDirection::" << subscribe.Error().Message();
        }
    }
}
 
void RPort_SOADBG_DriverSeat::StopSubscribesoaDrvSeatMotorDirection()
{
    if (m_found)
    {
        // request stop subscribe
        m_interface->soaDrvSeatMotorDirection.Unsubscribe();
        m_logger.LogVerbose() << "RPort_SOADBG_DriverSeat::StopSubscribesoaDrvSeatMotorDirection::Unsubscribed";
    }
}
 
void RPort_SOADBG_DriverSeat::RegistReceiversoaDrvSeatMotorDirection()
{
    if (m_found)
    {
        // set callback
        auto receiver = [this]() -> void {
            return ReceiveFieldsoaDrvSeatMotorDirectionTriggered();
        };
        
        // regist callback
        auto callback = m_interface->soaDrvSeatMotorDirection.SetReceiveHandler(receiver);
        if (callback.HasValue())
        {
            m_logger.LogVerbose() << "RPort_SOADBG_DriverSeat::RegistReceiversoaDrvSeatMotorDirection::SetReceiveHandler";
        }
        else
        {
            m_logger.LogError() << "RPort_SOADBG_DriverSeat::RegistReceiversoaDrvSeatMotorDirection::SetReceiveHandler::" << callback.Error().Message();
        }
    }
}
 
void RPort_SOADBG_DriverSeat::ReceiveFieldsoaDrvSeatMotorDirectionTriggered()
{
    if (m_found)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_interface->soaDrvSeatMotorDirection.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
        {
            auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaDrvSeatMotorDirection.GetNewSamples([&](auto samplePtr) {
                RPort_SOADBG_DriverSeat::ReadValuesoaDrvSeatMotorDirection(std::move(samplePtr));
            }));
            if (recv->HasValue())
            {
                m_logger.LogVerbose() << "RPort_SOADBG_DriverSeat::ReceiveFieldsoaDrvSeatMotorDirection::GetNewSamples::" << recv->Value();
            }
            else
            {
                m_logger.LogError() << "RPort_SOADBG_DriverSeat::ReceiveFieldsoaDrvSeatMotorDirection::GetNewSamples::" << recv->Error().Message();
            }
        }
    }
}
 
void RPort_SOADBG_DriverSeat::ReceiveFieldsoaDrvSeatMotorDirectionCyclic()
{
    while (m_running)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_found)
        {
            if (m_interface->soaDrvSeatMotorDirection.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
            {
                auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaDrvSeatMotorDirection.GetNewSamples([&](auto samplePtr) {
                    RPort_SOADBG_DriverSeat::ReadValuesoaDrvSeatMotorDirection(std::move(samplePtr));
                }));
                if (recv->HasValue())
                {
                    m_logger.LogVerbose() << "RPort_SOADBG_DriverSeat::ReceiveFieldsoaDrvSeatMotorDirection::GetNewSamples::" << recv->Value();
                }
                else
                {
                    m_logger.LogError() << "RPort_SOADBG_DriverSeat::ReceiveFieldsoaDrvSeatMotorDirection::GetNewSamples::" << recv->Error().Message();
                }
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void RPort_SOADBG_DriverSeat::ReadValuesoaDrvSeatMotorDirection(ara::com::SamplePtr<eevp::control::proxy::fields::soaDrvSeatMotorDirection::FieldType const> samplePtr)
{
    auto value = *samplePtr.Get();
    if (m_receiversoaDrvSeatMotorDirection)
    {
        m_receiversoaDrvSeatMotorDirection(value);
    }
}
 
void RPort_SOADBG_DriverSeat::RegistFieldHandlersoaDrvSeatMotorDirection(std::function<void(const eevp::control::proxy::fields::soaDrvSeatMotorDirection::FieldType&)> handler)
{
    m_receiversoaDrvSeatMotorDirection = handler;
}
 
void RPort_SOADBG_DriverSeat::GetsoaDrvSeatMotorDirection()
{
    if (m_found)
    {
        auto request = m_interface->soaDrvSeatMotorDirection.Get();
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "RPort_SOADBG_DriverSeat::GetsoaDrvSeatMotorDirection::Responded";
            
            auto result = response.Value();
            if (m_receiversoaDrvSeatMotorDirection)
            {
                m_receiversoaDrvSeatMotorDirection(result);
            }
        }
        else
        {
            m_logger.LogError() << "RPort_SOADBG_DriverSeat::GetsoaDrvSeatMotorDirection::" << response.Error().Message();
        }
    }
}
 
void RPort_SOADBG_DriverSeat::SubscribesoaDrvSeatMotorPosition()
{
    if (m_found)
    {
        // regist receiver handler
        // if you want to enable it, please uncomment below code
        // RegistReceiversoaDrvSeatMotorPosition();
        
        // request subscribe
        auto subscribe = m_interface->soaDrvSeatMotorPosition.Subscribe(1);
        if (subscribe.HasValue())
        {
            m_logger.LogVerbose() << "RPort_SOADBG_DriverSeat::SubscribesoaDrvSeatMotorPosition::Subscribed";
        }
        else
        {
            m_logger.LogError() << "RPort_SOADBG_DriverSeat::SubscribesoaDrvSeatMotorPosition::" << subscribe.Error().Message();
        }
    }
}
 
void RPort_SOADBG_DriverSeat::StopSubscribesoaDrvSeatMotorPosition()
{
    if (m_found)
    {
        // request stop subscribe
        m_interface->soaDrvSeatMotorPosition.Unsubscribe();
        m_logger.LogVerbose() << "RPort_SOADBG_DriverSeat::StopSubscribesoaDrvSeatMotorPosition::Unsubscribed";
    }
}
 
void RPort_SOADBG_DriverSeat::RegistReceiversoaDrvSeatMotorPosition()
{
    if (m_found)
    {
        // set callback
        auto receiver = [this]() -> void {
            return ReceiveFieldsoaDrvSeatMotorPositionTriggered();
        };
        
        // regist callback
        auto callback = m_interface->soaDrvSeatMotorPosition.SetReceiveHandler(receiver);
        if (callback.HasValue())
        {
            m_logger.LogVerbose() << "RPort_SOADBG_DriverSeat::RegistReceiversoaDrvSeatMotorPosition::SetReceiveHandler";
        }
        else
        {
            m_logger.LogError() << "RPort_SOADBG_DriverSeat::RegistReceiversoaDrvSeatMotorPosition::SetReceiveHandler::" << callback.Error().Message();
        }
    }
}
 
void RPort_SOADBG_DriverSeat::ReceiveFieldsoaDrvSeatMotorPositionTriggered()
{
    if (m_found)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_interface->soaDrvSeatMotorPosition.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
        {
            auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaDrvSeatMotorPosition.GetNewSamples([&](auto samplePtr) {
                RPort_SOADBG_DriverSeat::ReadValuesoaDrvSeatMotorPosition(std::move(samplePtr));
            }));
            if (recv->HasValue())
            {
                m_logger.LogVerbose() << "RPort_SOADBG_DriverSeat::ReceiveFieldsoaDrvSeatMotorPosition::GetNewSamples::" << recv->Value();
            }
            else
            {
                m_logger.LogError() << "RPort_SOADBG_DriverSeat::ReceiveFieldsoaDrvSeatMotorPosition::GetNewSamples::" << recv->Error().Message();
            }
        }
    }
}
 
void RPort_SOADBG_DriverSeat::ReceiveFieldsoaDrvSeatMotorPositionCyclic()
{
    while (m_running)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_found)
        {
            if (m_interface->soaDrvSeatMotorPosition.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
            {
                auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaDrvSeatMotorPosition.GetNewSamples([&](auto samplePtr) {
                    RPort_SOADBG_DriverSeat::ReadValuesoaDrvSeatMotorPosition(std::move(samplePtr));
                }));
                if (recv->HasValue())
                {
                    m_logger.LogVerbose() << "RPort_SOADBG_DriverSeat::ReceiveFieldsoaDrvSeatMotorPosition::GetNewSamples::" << recv->Value();
                }
                else
                {
                    m_logger.LogError() << "RPort_SOADBG_DriverSeat::ReceiveFieldsoaDrvSeatMotorPosition::GetNewSamples::" << recv->Error().Message();
                }
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void RPort_SOADBG_DriverSeat::ReadValuesoaDrvSeatMotorPosition(ara::com::SamplePtr<eevp::control::proxy::fields::soaDrvSeatMotorPosition::FieldType const> samplePtr)
{
    auto value = *samplePtr.Get();
    if (m_receiversoaDrvSeatMotorPosition)
    {
        m_receiversoaDrvSeatMotorPosition(value);
    }
}
 
void RPort_SOADBG_DriverSeat::RegistFieldHandlersoaDrvSeatMotorPosition(std::function<void(const eevp::control::proxy::fields::soaDrvSeatMotorPosition::FieldType&)> handler)
{
    m_receiversoaDrvSeatMotorPosition = handler;
}
 
void RPort_SOADBG_DriverSeat::GetsoaDrvSeatMotorPosition()
{
    if (m_found)
    {
        auto request = m_interface->soaDrvSeatMotorPosition.Get();
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "RPort_SOADBG_DriverSeat::GetsoaDrvSeatMotorPosition::Responded";
            
            auto result = response.Value();
            if (m_receiversoaDrvSeatMotorPosition)
            {
                m_receiversoaDrvSeatMotorPosition(result);
            }
        }
        else
        {
            m_logger.LogError() << "RPort_SOADBG_DriverSeat::GetsoaDrvSeatMotorPosition::" << response.Error().Message();
        }
    }
}
 
void RPort_SOADBG_DriverSeat::SubscribesoaDrvSeatSwVersion()
{
    if (m_found)
    {
        // regist receiver handler
        // if you want to enable it, please uncomment below code
        // RegistReceiversoaDrvSeatSwVersion();
        
        // request subscribe
        auto subscribe = m_interface->soaDrvSeatSwVersion.Subscribe(1);
        if (subscribe.HasValue())
        {
            m_logger.LogVerbose() << "RPort_SOADBG_DriverSeat::SubscribesoaDrvSeatSwVersion::Subscribed";
        }
        else
        {
            m_logger.LogError() << "RPort_SOADBG_DriverSeat::SubscribesoaDrvSeatSwVersion::" << subscribe.Error().Message();
        }
    }
}
 
void RPort_SOADBG_DriverSeat::StopSubscribesoaDrvSeatSwVersion()
{
    if (m_found)
    {
        // request stop subscribe
        m_interface->soaDrvSeatSwVersion.Unsubscribe();
        m_logger.LogVerbose() << "RPort_SOADBG_DriverSeat::StopSubscribesoaDrvSeatSwVersion::Unsubscribed";
    }
}
 
void RPort_SOADBG_DriverSeat::RegistReceiversoaDrvSeatSwVersion()
{
    if (m_found)
    {
        // set callback
        auto receiver = [this]() -> void {
            return ReceiveFieldsoaDrvSeatSwVersionTriggered();
        };
        
        // regist callback
        auto callback = m_interface->soaDrvSeatSwVersion.SetReceiveHandler(receiver);
        if (callback.HasValue())
        {
            m_logger.LogVerbose() << "RPort_SOADBG_DriverSeat::RegistReceiversoaDrvSeatSwVersion::SetReceiveHandler";
        }
        else
        {
            m_logger.LogError() << "RPort_SOADBG_DriverSeat::RegistReceiversoaDrvSeatSwVersion::SetReceiveHandler::" << callback.Error().Message();
        }
    }
}
 
void RPort_SOADBG_DriverSeat::ReceiveFieldsoaDrvSeatSwVersionTriggered()
{
    if (m_found)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_interface->soaDrvSeatSwVersion.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
        {
            auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaDrvSeatSwVersion.GetNewSamples([&](auto samplePtr) {
                RPort_SOADBG_DriverSeat::ReadValuesoaDrvSeatSwVersion(std::move(samplePtr));
            }));
            if (recv->HasValue())
            {
                m_logger.LogVerbose() << "RPort_SOADBG_DriverSeat::ReceiveFieldsoaDrvSeatSwVersion::GetNewSamples::" << recv->Value();
            }
            else
            {
                m_logger.LogError() << "RPort_SOADBG_DriverSeat::ReceiveFieldsoaDrvSeatSwVersion::GetNewSamples::" << recv->Error().Message();
            }
        }
    }
}
 
void RPort_SOADBG_DriverSeat::ReceiveFieldsoaDrvSeatSwVersionCyclic()
{
    while (m_running)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_found)
        {
            if (m_interface->soaDrvSeatSwVersion.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
            {
                auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaDrvSeatSwVersion.GetNewSamples([&](auto samplePtr) {
                    RPort_SOADBG_DriverSeat::ReadValuesoaDrvSeatSwVersion(std::move(samplePtr));
                }));
                if (recv->HasValue())
                {
                    m_logger.LogVerbose() << "RPort_SOADBG_DriverSeat::ReceiveFieldsoaDrvSeatSwVersion::GetNewSamples::" << recv->Value();
                }
                else
                {
                    m_logger.LogError() << "RPort_SOADBG_DriverSeat::ReceiveFieldsoaDrvSeatSwVersion::GetNewSamples::" << recv->Error().Message();
                }
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void RPort_SOADBG_DriverSeat::ReadValuesoaDrvSeatSwVersion(ara::com::SamplePtr<eevp::control::proxy::fields::soaDrvSeatSwVersion::FieldType const> samplePtr)
{
    auto value = *samplePtr.Get();
    if (m_receiversoaDrvSeatSwVersion)
    {
        m_receiversoaDrvSeatSwVersion(value);
    }
}
 
void RPort_SOADBG_DriverSeat::RegistFieldHandlersoaDrvSeatSwVersion(std::function<void(const eevp::control::proxy::fields::soaDrvSeatSwVersion::FieldType&)> handler)
{
    m_receiversoaDrvSeatSwVersion = handler;
}
 
void RPort_SOADBG_DriverSeat::GetsoaDrvSeatSwVersion()
{
    if (m_found)
    {
        auto request = m_interface->soaDrvSeatSwVersion.Get();
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "RPort_SOADBG_DriverSeat::GetsoaDrvSeatSwVersion::Responded";
            
            auto result = response.Value();
            if (m_receiversoaDrvSeatSwVersion)
            {
                m_receiversoaDrvSeatSwVersion(result);
            }
        }
        else
        {
            m_logger.LogError() << "RPort_SOADBG_DriverSeat::GetsoaDrvSeatSwVersion::" << response.Error().Message();
        }
    }
}
 
void RPort_SOADBG_DriverSeat::RequestRequestMoveDrvSeatHeight(const eevp::control::SoaSeatHeightDirection& dir)
{
    if (m_found)
    {
        m_interface->RequestMoveDrvSeatHeight(dir);
    }
}
 
void RPort_SOADBG_DriverSeat::RequestRequestMoveDrvSeatRecline(const eevp::control::SoaSeatReclineDirection& dir)
{
    if (m_found)
    {
        m_interface->RequestMoveDrvSeatRecline(dir);
    }
}
 
void RPort_SOADBG_DriverSeat::RequestRequestMoveDrvSeatSlide(const eevp::control::SoaSeatSlideDirection& dir)
{
    if (m_found)
    {
        m_interface->RequestMoveDrvSeatSlide(dir);
    }
}
 
void RPort_SOADBG_DriverSeat::RequestRequestMoveDrvSeatTilt(const eevp::control::SoaSeatTiltDirection& dir)
{
    if (m_found)
    {
        m_interface->RequestMoveDrvSeatTilt(dir);
    }
}
 
} /// namespace port
} /// namespace aa
} /// namespace soa_debugger
 
/// EOF