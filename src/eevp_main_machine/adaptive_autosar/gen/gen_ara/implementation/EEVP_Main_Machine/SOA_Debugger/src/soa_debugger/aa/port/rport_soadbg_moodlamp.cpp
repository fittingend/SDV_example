///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : rport_soadbg_moodlamp.cpp
/// SOFTWARE COMPONENT NAME           : RPort_SOADBG_MoodLamp
/// GENERATED DATE                    : 2025-08-30 10:53:35
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "soa_debugger/aa/port/rport_soadbg_moodlamp.h"
 
namespace soa_debugger
{
namespace aa
{
namespace port
{
 
RPort_SOADBG_MoodLamp::RPort_SOADBG_MoodLamp()
    : m_logger(ara::log::CreateLogger("SDBG", "PORT", ara::log::LogLevel::kVerbose))
    , m_running{false}
    , m_found{false}
    , m_receiversoaMlmStatus{nullptr}
    , m_receiversoaMlmSwVersion{nullptr}
{
}
 
RPort_SOADBG_MoodLamp::~RPort_SOADBG_MoodLamp()
{
}
 
void RPort_SOADBG_MoodLamp::Start()
{
    m_logger.LogVerbose() << "RPort_SOADBG_MoodLamp::Start";
    
    // regist callback
    ara::core::InstanceSpecifier specifier{"SOA_Debugger/AA/RPort_SOADBG_MoodLamp"};
    auto handler = [this](ara::com::ServiceHandleContainer<eevp::control::proxy::SoaMlmProxy::HandleType> handles,
                          ara::com::FindServiceHandle findHandle) {
        this->Find(handles, findHandle);
    };
    
    // find service
    auto find = eevp::control::proxy::SoaMlmProxy::StartFindService(handler, specifier);
    if (find.HasValue())
    {
        m_logger.LogVerbose() << "RPort_SOADBG_MoodLamp::Start::StartFindService";
    }
    else
    {
        m_logger.LogError() << "RPort_SOADBG_MoodLamp::Start::StartFindService::" << find.Error().Message();
    }
    
    // run port
    m_running = true;
}
 
void RPort_SOADBG_MoodLamp::Terminate()
{
    m_logger.LogVerbose() << "RPort_SOADBG_MoodLamp::Terminate";
    
    // stop port
    m_running = false;
    
    // clear service proxy
    if (m_interface)
    {
        StopSubscribesoaMlmStatus();
        StopSubscribesoaMlmSwVersion();
        
        // stop find service
        m_interface->StopFindService(*m_findHandle);
        m_found = false;
        
        m_logger.LogVerbose() << "RPort_SOADBG_MoodLamp::Terminate::StopFindService";
    }
}
 
void RPort_SOADBG_MoodLamp::Find(ara::com::ServiceHandleContainer<eevp::control::proxy::SoaMlmProxy::HandleType> handles, ara::com::FindServiceHandle findHandle)
{
    // check finding handles
    if (handles.empty())
    {
        m_logger.LogVerbose() << "RPort_SOADBG_MoodLamp::Find::Service Instances not found";
        return;
    }
    else
    {
        for (auto& handle : handles)
        {
            m_logger.LogVerbose() << "RPort_SOADBG_MoodLamp::Find::Searched Instance::ServiceId =" << 
                                     handle.GetServiceHandle().serviceId << 
                                     ", InstanceId =" << 
                                     handle.GetServiceHandle().instanceId;
        }
    }
    
    // create proxy
    if (m_interface)
    {
        m_logger.LogVerbose() << "RPort_SOADBG_MoodLamp::Find::Proxy is already running";
    }
    else
    {
        m_logger.LogVerbose() << "RPort_SOADBG_MoodLamp::Find::Using Instance::ServiceId =" << 
                                 handles[0].GetServiceHandle().serviceId << 
                                 ", InstanceId =" << 
                                 handles[0].GetServiceHandle().instanceId;
        m_interface = std::make_unique<eevp::control::proxy::SoaMlmProxy>(handles[0]);
        m_findHandle = std::make_unique<ara::com::FindServiceHandle>(findHandle);
        m_found = true;
        
        // subscribe field notifications
        SubscribesoaMlmStatus();
        SubscribesoaMlmSwVersion();
    }
}
 
void RPort_SOADBG_MoodLamp::SubscribesoaMlmStatus()
{
    if (m_found)
    {
        // regist receiver handler
        // if you want to enable it, please uncomment below code
        // RegistReceiversoaMlmStatus();
        
        // request subscribe
        auto subscribe = m_interface->soaMlmStatus.Subscribe(1);
        if (subscribe.HasValue())
        {
            m_logger.LogVerbose() << "RPort_SOADBG_MoodLamp::SubscribesoaMlmStatus::Subscribed";
        }
        else
        {
            m_logger.LogError() << "RPort_SOADBG_MoodLamp::SubscribesoaMlmStatus::" << subscribe.Error().Message();
        }
    }
}
 
void RPort_SOADBG_MoodLamp::StopSubscribesoaMlmStatus()
{
    if (m_found)
    {
        // request stop subscribe
        m_interface->soaMlmStatus.Unsubscribe();
        m_logger.LogVerbose() << "RPort_SOADBG_MoodLamp::StopSubscribesoaMlmStatus::Unsubscribed";
    }
}
 
void RPort_SOADBG_MoodLamp::RegistReceiversoaMlmStatus()
{
    if (m_found)
    {
        // set callback
        auto receiver = [this]() -> void {
            return ReceiveFieldsoaMlmStatusTriggered();
        };
        
        // regist callback
        auto callback = m_interface->soaMlmStatus.SetReceiveHandler(receiver);
        if (callback.HasValue())
        {
            m_logger.LogVerbose() << "RPort_SOADBG_MoodLamp::RegistReceiversoaMlmStatus::SetReceiveHandler";
        }
        else
        {
            m_logger.LogError() << "RPort_SOADBG_MoodLamp::RegistReceiversoaMlmStatus::SetReceiveHandler::" << callback.Error().Message();
        }
    }
}
 
void RPort_SOADBG_MoodLamp::ReceiveFieldsoaMlmStatusTriggered()
{
    if (m_found)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_interface->soaMlmStatus.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
        {
            auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaMlmStatus.GetNewSamples([&](auto samplePtr) {
                RPort_SOADBG_MoodLamp::ReadValuesoaMlmStatus(std::move(samplePtr));
            }));
            if (recv->HasValue())
            {
                m_logger.LogVerbose() << "RPort_SOADBG_MoodLamp::ReceiveFieldsoaMlmStatus::GetNewSamples::" << recv->Value();
            }
            else
            {
                m_logger.LogError() << "RPort_SOADBG_MoodLamp::ReceiveFieldsoaMlmStatus::GetNewSamples::" << recv->Error().Message();
            }
        }
    }
}
 
void RPort_SOADBG_MoodLamp::ReceiveFieldsoaMlmStatusCyclic()
{
    while (m_running)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_found)
        {
            if (m_interface->soaMlmStatus.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
            {
                auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaMlmStatus.GetNewSamples([&](auto samplePtr) {
                    RPort_SOADBG_MoodLamp::ReadValuesoaMlmStatus(std::move(samplePtr));
                }));
                if (recv->HasValue())
                {
                    m_logger.LogVerbose() << "RPort_SOADBG_MoodLamp::ReceiveFieldsoaMlmStatus::GetNewSamples::" << recv->Value();
                }
                else
                {
                    m_logger.LogError() << "RPort_SOADBG_MoodLamp::ReceiveFieldsoaMlmStatus::GetNewSamples::" << recv->Error().Message();
                }
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void RPort_SOADBG_MoodLamp::ReadValuesoaMlmStatus(ara::com::SamplePtr<eevp::control::proxy::fields::soaMlmStatus::FieldType const> samplePtr)
{
    auto value = *samplePtr.Get();
    if (m_receiversoaMlmStatus)
    {
        m_receiversoaMlmStatus(value);
    }
}
 
void RPort_SOADBG_MoodLamp::RegistFieldHandlersoaMlmStatus(std::function<void(const eevp::control::proxy::fields::soaMlmStatus::FieldType&)> handler)
{
    m_receiversoaMlmStatus = handler;
}
 
void RPort_SOADBG_MoodLamp::GetsoaMlmStatus()
{
    if (m_found)
    {
        auto request = m_interface->soaMlmStatus.Get();
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "RPort_SOADBG_MoodLamp::GetsoaMlmStatus::Responded";
            
            auto result = response.Value();
            if (m_receiversoaMlmStatus)
            {
                m_receiversoaMlmStatus(result);
            }
        }
        else
        {
            m_logger.LogError() << "RPort_SOADBG_MoodLamp::GetsoaMlmStatus::" << response.Error().Message();
        }
    }
}
 
void RPort_SOADBG_MoodLamp::SubscribesoaMlmSwVersion()
{
    if (m_found)
    {
        // regist receiver handler
        // if you want to enable it, please uncomment below code
        // RegistReceiversoaMlmSwVersion();
        
        // request subscribe
        auto subscribe = m_interface->soaMlmSwVersion.Subscribe(1);
        if (subscribe.HasValue())
        {
            m_logger.LogVerbose() << "RPort_SOADBG_MoodLamp::SubscribesoaMlmSwVersion::Subscribed";
        }
        else
        {
            m_logger.LogError() << "RPort_SOADBG_MoodLamp::SubscribesoaMlmSwVersion::" << subscribe.Error().Message();
        }
    }
}
 
void RPort_SOADBG_MoodLamp::StopSubscribesoaMlmSwVersion()
{
    if (m_found)
    {
        // request stop subscribe
        m_interface->soaMlmSwVersion.Unsubscribe();
        m_logger.LogVerbose() << "RPort_SOADBG_MoodLamp::StopSubscribesoaMlmSwVersion::Unsubscribed";
    }
}
 
void RPort_SOADBG_MoodLamp::RegistReceiversoaMlmSwVersion()
{
    if (m_found)
    {
        // set callback
        auto receiver = [this]() -> void {
            return ReceiveFieldsoaMlmSwVersionTriggered();
        };
        
        // regist callback
        auto callback = m_interface->soaMlmSwVersion.SetReceiveHandler(receiver);
        if (callback.HasValue())
        {
            m_logger.LogVerbose() << "RPort_SOADBG_MoodLamp::RegistReceiversoaMlmSwVersion::SetReceiveHandler";
        }
        else
        {
            m_logger.LogError() << "RPort_SOADBG_MoodLamp::RegistReceiversoaMlmSwVersion::SetReceiveHandler::" << callback.Error().Message();
        }
    }
}
 
void RPort_SOADBG_MoodLamp::ReceiveFieldsoaMlmSwVersionTriggered()
{
    if (m_found)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_interface->soaMlmSwVersion.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
        {
            auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaMlmSwVersion.GetNewSamples([&](auto samplePtr) {
                RPort_SOADBG_MoodLamp::ReadValuesoaMlmSwVersion(std::move(samplePtr));
            }));
            if (recv->HasValue())
            {
                m_logger.LogVerbose() << "RPort_SOADBG_MoodLamp::ReceiveFieldsoaMlmSwVersion::GetNewSamples::" << recv->Value();
            }
            else
            {
                m_logger.LogError() << "RPort_SOADBG_MoodLamp::ReceiveFieldsoaMlmSwVersion::GetNewSamples::" << recv->Error().Message();
            }
        }
    }
}
 
void RPort_SOADBG_MoodLamp::ReceiveFieldsoaMlmSwVersionCyclic()
{
    while (m_running)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_found)
        {
            if (m_interface->soaMlmSwVersion.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
            {
                auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaMlmSwVersion.GetNewSamples([&](auto samplePtr) {
                    RPort_SOADBG_MoodLamp::ReadValuesoaMlmSwVersion(std::move(samplePtr));
                }));
                if (recv->HasValue())
                {
                    m_logger.LogVerbose() << "RPort_SOADBG_MoodLamp::ReceiveFieldsoaMlmSwVersion::GetNewSamples::" << recv->Value();
                }
                else
                {
                    m_logger.LogError() << "RPort_SOADBG_MoodLamp::ReceiveFieldsoaMlmSwVersion::GetNewSamples::" << recv->Error().Message();
                }
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void RPort_SOADBG_MoodLamp::ReadValuesoaMlmSwVersion(ara::com::SamplePtr<eevp::control::proxy::fields::soaMlmSwVersion::FieldType const> samplePtr)
{
    auto value = *samplePtr.Get();
    if (m_receiversoaMlmSwVersion)
    {
        m_receiversoaMlmSwVersion(value);
    }
}
 
void RPort_SOADBG_MoodLamp::RegistFieldHandlersoaMlmSwVersion(std::function<void(const eevp::control::proxy::fields::soaMlmSwVersion::FieldType&)> handler)
{
    m_receiversoaMlmSwVersion = handler;
}
 
void RPort_SOADBG_MoodLamp::GetsoaMlmSwVersion()
{
    if (m_found)
    {
        auto request = m_interface->soaMlmSwVersion.Get();
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "RPort_SOADBG_MoodLamp::GetsoaMlmSwVersion::Responded";
            
            auto result = response.Value();
            if (m_receiversoaMlmSwVersion)
            {
                m_receiversoaMlmSwVersion(result);
            }
        }
        else
        {
            m_logger.LogError() << "RPort_SOADBG_MoodLamp::GetsoaMlmSwVersion::" << response.Error().Message();
        }
    }
}
 
void RPort_SOADBG_MoodLamp::RequestRequestMlmSetBrightness(const std::uint16_t& brightness)
{
    if (m_found)
    {
        m_interface->RequestMlmSetBrightness(brightness);
    }
}
 
void RPort_SOADBG_MoodLamp::RequestRequestMlmSetMode(const eevp::control::SoaMlmMoodMode& mood)
{
    if (m_found)
    {
        m_interface->RequestMlmSetMode(mood);
    }
}
 
void RPort_SOADBG_MoodLamp::RequestRequestMlmSetRgbColor(const std::uint8_t& colorTableIndex)
{
    if (m_found)
    {
        m_interface->RequestMlmSetRgbColor(colorTableIndex);
    }
}
 
} /// namespace port
} /// namespace aa
} /// namespace soa_debugger
 
/// EOF