///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : rport_soadbg_roa.cpp
/// SOFTWARE COMPONENT NAME           : RPort_SOADBG_ROA
/// GENERATED DATE                    : 2025-08-30 10:53:35
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "soa_debugger/aa/port/rport_soadbg_roa.h"
 
namespace soa_debugger
{
namespace aa
{
namespace port
{
 
RPort_SOADBG_ROA::RPort_SOADBG_ROA()
    : m_logger(ara::log::CreateLogger("SDBG", "PORT", ara::log::LogLevel::kVerbose))
    , m_running{false}
    , m_found{false}
    , m_receiversoaRoaDetectCount{nullptr}
    , m_receiversoaRoaDetectState{nullptr}
    , m_receiversoaRoaDeviceNormal{nullptr}
    , m_receiversoaRoaMode{nullptr}
    , m_receiversoaRoaRunningState{nullptr}
    , m_receiversoaRoaSensorError{nullptr}
    , m_receiversoaRoaSwVersion{nullptr}
{
}
 
RPort_SOADBG_ROA::~RPort_SOADBG_ROA()
{
}
 
void RPort_SOADBG_ROA::Start()
{
    m_logger.LogVerbose() << "RPort_SOADBG_ROA::Start";
    
    // regist callback
    ara::core::InstanceSpecifier specifier{"SOA_Debugger/AA/RPort_SOADBG_ROA"};
    auto handler = [this](ara::com::ServiceHandleContainer<eevp::control::proxy::SoaRoaProxy::HandleType> handles,
                          ara::com::FindServiceHandle findHandle) {
        this->Find(handles, findHandle);
    };
    
    // find service
    auto find = eevp::control::proxy::SoaRoaProxy::StartFindService(handler, specifier);
    if (find.HasValue())
    {
        m_logger.LogVerbose() << "RPort_SOADBG_ROA::Start::StartFindService";
    }
    else
    {
        m_logger.LogError() << "RPort_SOADBG_ROA::Start::StartFindService::" << find.Error().Message();
    }
    
    // run port
    m_running = true;
}
 
void RPort_SOADBG_ROA::Terminate()
{
    m_logger.LogVerbose() << "RPort_SOADBG_ROA::Terminate";
    
    // stop port
    m_running = false;
    
    // clear service proxy
    if (m_interface)
    {
        StopSubscribesoaRoaDetectCount();
        StopSubscribesoaRoaDetectState();
        StopSubscribesoaRoaDeviceNormal();
        StopSubscribesoaRoaMode();
        StopSubscribesoaRoaRunningState();
        StopSubscribesoaRoaSensorError();
        StopSubscribesoaRoaSwVersion();
        
        // stop find service
        m_interface->StopFindService(*m_findHandle);
        m_found = false;
        
        m_logger.LogVerbose() << "RPort_SOADBG_ROA::Terminate::StopFindService";
    }
}
 
void RPort_SOADBG_ROA::Find(ara::com::ServiceHandleContainer<eevp::control::proxy::SoaRoaProxy::HandleType> handles, ara::com::FindServiceHandle findHandle)
{
    // check finding handles
    if (handles.empty())
    {
        m_logger.LogVerbose() << "RPort_SOADBG_ROA::Find::Service Instances not found";
        return;
    }
    else
    {
        for (auto& handle : handles)
        {
            m_logger.LogVerbose() << "RPort_SOADBG_ROA::Find::Searched Instance::ServiceId =" << 
                                     handle.GetServiceHandle().serviceId << 
                                     ", InstanceId =" << 
                                     handle.GetServiceHandle().instanceId;
        }
    }
    
    // create proxy
    if (m_interface)
    {
        m_logger.LogVerbose() << "RPort_SOADBG_ROA::Find::Proxy is already running";
    }
    else
    {
        m_logger.LogVerbose() << "RPort_SOADBG_ROA::Find::Using Instance::ServiceId =" << 
                                 handles[0].GetServiceHandle().serviceId << 
                                 ", InstanceId =" << 
                                 handles[0].GetServiceHandle().instanceId;
        m_interface = std::make_unique<eevp::control::proxy::SoaRoaProxy>(handles[0]);
        m_findHandle = std::make_unique<ara::com::FindServiceHandle>(findHandle);
        m_found = true;
        
        // subscribe field notifications
        SubscribesoaRoaDetectCount();
        SubscribesoaRoaDetectState();
        SubscribesoaRoaDeviceNormal();
        SubscribesoaRoaMode();
        SubscribesoaRoaRunningState();
        SubscribesoaRoaSensorError();
        SubscribesoaRoaSwVersion();
    }
}
 
void RPort_SOADBG_ROA::SubscribesoaRoaDetectCount()
{
    if (m_found)
    {
        // regist receiver handler
        // if you want to enable it, please uncomment below code
        // RegistReceiversoaRoaDetectCount();
        
        // request subscribe
        auto subscribe = m_interface->soaRoaDetectCount.Subscribe(1);
        if (subscribe.HasValue())
        {
            m_logger.LogVerbose() << "RPort_SOADBG_ROA::SubscribesoaRoaDetectCount::Subscribed";
        }
        else
        {
            m_logger.LogError() << "RPort_SOADBG_ROA::SubscribesoaRoaDetectCount::" << subscribe.Error().Message();
        }
    }
}
 
void RPort_SOADBG_ROA::StopSubscribesoaRoaDetectCount()
{
    if (m_found)
    {
        // request stop subscribe
        m_interface->soaRoaDetectCount.Unsubscribe();
        m_logger.LogVerbose() << "RPort_SOADBG_ROA::StopSubscribesoaRoaDetectCount::Unsubscribed";
    }
}
 
void RPort_SOADBG_ROA::RegistReceiversoaRoaDetectCount()
{
    if (m_found)
    {
        // set callback
        auto receiver = [this]() -> void {
            return ReceiveFieldsoaRoaDetectCountTriggered();
        };
        
        // regist callback
        auto callback = m_interface->soaRoaDetectCount.SetReceiveHandler(receiver);
        if (callback.HasValue())
        {
            m_logger.LogVerbose() << "RPort_SOADBG_ROA::RegistReceiversoaRoaDetectCount::SetReceiveHandler";
        }
        else
        {
            m_logger.LogError() << "RPort_SOADBG_ROA::RegistReceiversoaRoaDetectCount::SetReceiveHandler::" << callback.Error().Message();
        }
    }
}
 
void RPort_SOADBG_ROA::ReceiveFieldsoaRoaDetectCountTriggered()
{
    if (m_found)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_interface->soaRoaDetectCount.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
        {
            auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaRoaDetectCount.GetNewSamples([&](auto samplePtr) {
                RPort_SOADBG_ROA::ReadValuesoaRoaDetectCount(std::move(samplePtr));
            }));
            if (recv->HasValue())
            {
                m_logger.LogVerbose() << "RPort_SOADBG_ROA::ReceiveFieldsoaRoaDetectCount::GetNewSamples::" << recv->Value();
            }
            else
            {
                m_logger.LogError() << "RPort_SOADBG_ROA::ReceiveFieldsoaRoaDetectCount::GetNewSamples::" << recv->Error().Message();
            }
        }
    }
}
 
void RPort_SOADBG_ROA::ReceiveFieldsoaRoaDetectCountCyclic()
{
    while (m_running)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_found)
        {
            if (m_interface->soaRoaDetectCount.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
            {
                auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaRoaDetectCount.GetNewSamples([&](auto samplePtr) {
                    RPort_SOADBG_ROA::ReadValuesoaRoaDetectCount(std::move(samplePtr));
                }));
                if (recv->HasValue())
                {
                    m_logger.LogVerbose() << "RPort_SOADBG_ROA::ReceiveFieldsoaRoaDetectCount::GetNewSamples::" << recv->Value();
                }
                else
                {
                    m_logger.LogError() << "RPort_SOADBG_ROA::ReceiveFieldsoaRoaDetectCount::GetNewSamples::" << recv->Error().Message();
                }
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void RPort_SOADBG_ROA::ReadValuesoaRoaDetectCount(ara::com::SamplePtr<eevp::control::proxy::fields::soaRoaDetectCount::FieldType const> samplePtr)
{
    auto value = *samplePtr.Get();
    if (m_receiversoaRoaDetectCount)
    {
        m_receiversoaRoaDetectCount(value);
    }
}
 
void RPort_SOADBG_ROA::RegistFieldHandlersoaRoaDetectCount(std::function<void(const eevp::control::proxy::fields::soaRoaDetectCount::FieldType&)> handler)
{
    m_receiversoaRoaDetectCount = handler;
}
 
void RPort_SOADBG_ROA::GetsoaRoaDetectCount()
{
    if (m_found)
    {
        auto request = m_interface->soaRoaDetectCount.Get();
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "RPort_SOADBG_ROA::GetsoaRoaDetectCount::Responded";
            
            auto result = response.Value();
            if (m_receiversoaRoaDetectCount)
            {
                m_receiversoaRoaDetectCount(result);
            }
        }
        else
        {
            m_logger.LogError() << "RPort_SOADBG_ROA::GetsoaRoaDetectCount::" << response.Error().Message();
        }
    }
}
 
void RPort_SOADBG_ROA::SubscribesoaRoaDetectState()
{
    if (m_found)
    {
        // regist receiver handler
        // if you want to enable it, please uncomment below code
        // RegistReceiversoaRoaDetectState();
        
        // request subscribe
        auto subscribe = m_interface->soaRoaDetectState.Subscribe(1);
        if (subscribe.HasValue())
        {
            m_logger.LogVerbose() << "RPort_SOADBG_ROA::SubscribesoaRoaDetectState::Subscribed";
        }
        else
        {
            m_logger.LogError() << "RPort_SOADBG_ROA::SubscribesoaRoaDetectState::" << subscribe.Error().Message();
        }
    }
}
 
void RPort_SOADBG_ROA::StopSubscribesoaRoaDetectState()
{
    if (m_found)
    {
        // request stop subscribe
        m_interface->soaRoaDetectState.Unsubscribe();
        m_logger.LogVerbose() << "RPort_SOADBG_ROA::StopSubscribesoaRoaDetectState::Unsubscribed";
    }
}
 
void RPort_SOADBG_ROA::RegistReceiversoaRoaDetectState()
{
    if (m_found)
    {
        // set callback
        auto receiver = [this]() -> void {
            return ReceiveFieldsoaRoaDetectStateTriggered();
        };
        
        // regist callback
        auto callback = m_interface->soaRoaDetectState.SetReceiveHandler(receiver);
        if (callback.HasValue())
        {
            m_logger.LogVerbose() << "RPort_SOADBG_ROA::RegistReceiversoaRoaDetectState::SetReceiveHandler";
        }
        else
        {
            m_logger.LogError() << "RPort_SOADBG_ROA::RegistReceiversoaRoaDetectState::SetReceiveHandler::" << callback.Error().Message();
        }
    }
}
 
void RPort_SOADBG_ROA::ReceiveFieldsoaRoaDetectStateTriggered()
{
    if (m_found)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_interface->soaRoaDetectState.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
        {
            auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaRoaDetectState.GetNewSamples([&](auto samplePtr) {
                RPort_SOADBG_ROA::ReadValuesoaRoaDetectState(std::move(samplePtr));
            }));
            if (recv->HasValue())
            {
                m_logger.LogVerbose() << "RPort_SOADBG_ROA::ReceiveFieldsoaRoaDetectState::GetNewSamples::" << recv->Value();
            }
            else
            {
                m_logger.LogError() << "RPort_SOADBG_ROA::ReceiveFieldsoaRoaDetectState::GetNewSamples::" << recv->Error().Message();
            }
        }
    }
}
 
void RPort_SOADBG_ROA::ReceiveFieldsoaRoaDetectStateCyclic()
{
    while (m_running)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_found)
        {
            if (m_interface->soaRoaDetectState.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
            {
                auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaRoaDetectState.GetNewSamples([&](auto samplePtr) {
                    RPort_SOADBG_ROA::ReadValuesoaRoaDetectState(std::move(samplePtr));
                }));
                if (recv->HasValue())
                {
                    m_logger.LogVerbose() << "RPort_SOADBG_ROA::ReceiveFieldsoaRoaDetectState::GetNewSamples::" << recv->Value();
                }
                else
                {
                    m_logger.LogError() << "RPort_SOADBG_ROA::ReceiveFieldsoaRoaDetectState::GetNewSamples::" << recv->Error().Message();
                }
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void RPort_SOADBG_ROA::ReadValuesoaRoaDetectState(ara::com::SamplePtr<eevp::control::proxy::fields::soaRoaDetectState::FieldType const> samplePtr)
{
    auto value = *samplePtr.Get();
    if (m_receiversoaRoaDetectState)
    {
        m_receiversoaRoaDetectState(value);
    }
}
 
void RPort_SOADBG_ROA::RegistFieldHandlersoaRoaDetectState(std::function<void(const eevp::control::proxy::fields::soaRoaDetectState::FieldType&)> handler)
{
    m_receiversoaRoaDetectState = handler;
}
 
void RPort_SOADBG_ROA::GetsoaRoaDetectState()
{
    if (m_found)
    {
        auto request = m_interface->soaRoaDetectState.Get();
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "RPort_SOADBG_ROA::GetsoaRoaDetectState::Responded";
            
            auto result = response.Value();
            if (m_receiversoaRoaDetectState)
            {
                m_receiversoaRoaDetectState(result);
            }
        }
        else
        {
            m_logger.LogError() << "RPort_SOADBG_ROA::GetsoaRoaDetectState::" << response.Error().Message();
        }
    }
}
 
void RPort_SOADBG_ROA::SubscribesoaRoaDeviceNormal()
{
    if (m_found)
    {
        // regist receiver handler
        // if you want to enable it, please uncomment below code
        // RegistReceiversoaRoaDeviceNormal();
        
        // request subscribe
        auto subscribe = m_interface->soaRoaDeviceNormal.Subscribe(1);
        if (subscribe.HasValue())
        {
            m_logger.LogVerbose() << "RPort_SOADBG_ROA::SubscribesoaRoaDeviceNormal::Subscribed";
        }
        else
        {
            m_logger.LogError() << "RPort_SOADBG_ROA::SubscribesoaRoaDeviceNormal::" << subscribe.Error().Message();
        }
    }
}
 
void RPort_SOADBG_ROA::StopSubscribesoaRoaDeviceNormal()
{
    if (m_found)
    {
        // request stop subscribe
        m_interface->soaRoaDeviceNormal.Unsubscribe();
        m_logger.LogVerbose() << "RPort_SOADBG_ROA::StopSubscribesoaRoaDeviceNormal::Unsubscribed";
    }
}
 
void RPort_SOADBG_ROA::RegistReceiversoaRoaDeviceNormal()
{
    if (m_found)
    {
        // set callback
        auto receiver = [this]() -> void {
            return ReceiveFieldsoaRoaDeviceNormalTriggered();
        };
        
        // regist callback
        auto callback = m_interface->soaRoaDeviceNormal.SetReceiveHandler(receiver);
        if (callback.HasValue())
        {
            m_logger.LogVerbose() << "RPort_SOADBG_ROA::RegistReceiversoaRoaDeviceNormal::SetReceiveHandler";
        }
        else
        {
            m_logger.LogError() << "RPort_SOADBG_ROA::RegistReceiversoaRoaDeviceNormal::SetReceiveHandler::" << callback.Error().Message();
        }
    }
}
 
void RPort_SOADBG_ROA::ReceiveFieldsoaRoaDeviceNormalTriggered()
{
    if (m_found)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_interface->soaRoaDeviceNormal.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
        {
            auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaRoaDeviceNormal.GetNewSamples([&](auto samplePtr) {
                RPort_SOADBG_ROA::ReadValuesoaRoaDeviceNormal(std::move(samplePtr));
            }));
            if (recv->HasValue())
            {
                m_logger.LogVerbose() << "RPort_SOADBG_ROA::ReceiveFieldsoaRoaDeviceNormal::GetNewSamples::" << recv->Value();
            }
            else
            {
                m_logger.LogError() << "RPort_SOADBG_ROA::ReceiveFieldsoaRoaDeviceNormal::GetNewSamples::" << recv->Error().Message();
            }
        }
    }
}
 
void RPort_SOADBG_ROA::ReceiveFieldsoaRoaDeviceNormalCyclic()
{
    while (m_running)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_found)
        {
            if (m_interface->soaRoaDeviceNormal.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
            {
                auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaRoaDeviceNormal.GetNewSamples([&](auto samplePtr) {
                    RPort_SOADBG_ROA::ReadValuesoaRoaDeviceNormal(std::move(samplePtr));
                }));
                if (recv->HasValue())
                {
                    m_logger.LogVerbose() << "RPort_SOADBG_ROA::ReceiveFieldsoaRoaDeviceNormal::GetNewSamples::" << recv->Value();
                }
                else
                {
                    m_logger.LogError() << "RPort_SOADBG_ROA::ReceiveFieldsoaRoaDeviceNormal::GetNewSamples::" << recv->Error().Message();
                }
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void RPort_SOADBG_ROA::ReadValuesoaRoaDeviceNormal(ara::com::SamplePtr<eevp::control::proxy::fields::soaRoaDeviceNormal::FieldType const> samplePtr)
{
    auto value = *samplePtr.Get();
    if (m_receiversoaRoaDeviceNormal)
    {
        m_receiversoaRoaDeviceNormal(value);
    }
}
 
void RPort_SOADBG_ROA::RegistFieldHandlersoaRoaDeviceNormal(std::function<void(const eevp::control::proxy::fields::soaRoaDeviceNormal::FieldType&)> handler)
{
    m_receiversoaRoaDeviceNormal = handler;
}
 
void RPort_SOADBG_ROA::GetsoaRoaDeviceNormal()
{
    if (m_found)
    {
        auto request = m_interface->soaRoaDeviceNormal.Get();
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "RPort_SOADBG_ROA::GetsoaRoaDeviceNormal::Responded";
            
            auto result = response.Value();
            if (m_receiversoaRoaDeviceNormal)
            {
                m_receiversoaRoaDeviceNormal(result);
            }
        }
        else
        {
            m_logger.LogError() << "RPort_SOADBG_ROA::GetsoaRoaDeviceNormal::" << response.Error().Message();
        }
    }
}
 
void RPort_SOADBG_ROA::SubscribesoaRoaMode()
{
    if (m_found)
    {
        // regist receiver handler
        // if you want to enable it, please uncomment below code
        // RegistReceiversoaRoaMode();
        
        // request subscribe
        auto subscribe = m_interface->soaRoaMode.Subscribe(1);
        if (subscribe.HasValue())
        {
            m_logger.LogVerbose() << "RPort_SOADBG_ROA::SubscribesoaRoaMode::Subscribed";
        }
        else
        {
            m_logger.LogError() << "RPort_SOADBG_ROA::SubscribesoaRoaMode::" << subscribe.Error().Message();
        }
    }
}
 
void RPort_SOADBG_ROA::StopSubscribesoaRoaMode()
{
    if (m_found)
    {
        // request stop subscribe
        m_interface->soaRoaMode.Unsubscribe();
        m_logger.LogVerbose() << "RPort_SOADBG_ROA::StopSubscribesoaRoaMode::Unsubscribed";
    }
}
 
void RPort_SOADBG_ROA::RegistReceiversoaRoaMode()
{
    if (m_found)
    {
        // set callback
        auto receiver = [this]() -> void {
            return ReceiveFieldsoaRoaModeTriggered();
        };
        
        // regist callback
        auto callback = m_interface->soaRoaMode.SetReceiveHandler(receiver);
        if (callback.HasValue())
        {
            m_logger.LogVerbose() << "RPort_SOADBG_ROA::RegistReceiversoaRoaMode::SetReceiveHandler";
        }
        else
        {
            m_logger.LogError() << "RPort_SOADBG_ROA::RegistReceiversoaRoaMode::SetReceiveHandler::" << callback.Error().Message();
        }
    }
}
 
void RPort_SOADBG_ROA::ReceiveFieldsoaRoaModeTriggered()
{
    if (m_found)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_interface->soaRoaMode.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
        {
            auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaRoaMode.GetNewSamples([&](auto samplePtr) {
                RPort_SOADBG_ROA::ReadValuesoaRoaMode(std::move(samplePtr));
            }));
            if (recv->HasValue())
            {
                m_logger.LogVerbose() << "RPort_SOADBG_ROA::ReceiveFieldsoaRoaMode::GetNewSamples::" << recv->Value();
            }
            else
            {
                m_logger.LogError() << "RPort_SOADBG_ROA::ReceiveFieldsoaRoaMode::GetNewSamples::" << recv->Error().Message();
            }
        }
    }
}
 
void RPort_SOADBG_ROA::ReceiveFieldsoaRoaModeCyclic()
{
    while (m_running)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_found)
        {
            if (m_interface->soaRoaMode.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
            {
                auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaRoaMode.GetNewSamples([&](auto samplePtr) {
                    RPort_SOADBG_ROA::ReadValuesoaRoaMode(std::move(samplePtr));
                }));
                if (recv->HasValue())
                {
                    m_logger.LogVerbose() << "RPort_SOADBG_ROA::ReceiveFieldsoaRoaMode::GetNewSamples::" << recv->Value();
                }
                else
                {
                    m_logger.LogError() << "RPort_SOADBG_ROA::ReceiveFieldsoaRoaMode::GetNewSamples::" << recv->Error().Message();
                }
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void RPort_SOADBG_ROA::ReadValuesoaRoaMode(ara::com::SamplePtr<eevp::control::proxy::fields::soaRoaMode::FieldType const> samplePtr)
{
    auto value = *samplePtr.Get();
    if (m_receiversoaRoaMode)
    {
        m_receiversoaRoaMode(value);
    }
}
 
void RPort_SOADBG_ROA::RegistFieldHandlersoaRoaMode(std::function<void(const eevp::control::proxy::fields::soaRoaMode::FieldType&)> handler)
{
    m_receiversoaRoaMode = handler;
}
 
void RPort_SOADBG_ROA::GetsoaRoaMode()
{
    if (m_found)
    {
        auto request = m_interface->soaRoaMode.Get();
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "RPort_SOADBG_ROA::GetsoaRoaMode::Responded";
            
            auto result = response.Value();
            if (m_receiversoaRoaMode)
            {
                m_receiversoaRoaMode(result);
            }
        }
        else
        {
            m_logger.LogError() << "RPort_SOADBG_ROA::GetsoaRoaMode::" << response.Error().Message();
        }
    }
}
 
void RPort_SOADBG_ROA::SubscribesoaRoaRunningState()
{
    if (m_found)
    {
        // regist receiver handler
        // if you want to enable it, please uncomment below code
        // RegistReceiversoaRoaRunningState();
        
        // request subscribe
        auto subscribe = m_interface->soaRoaRunningState.Subscribe(1);
        if (subscribe.HasValue())
        {
            m_logger.LogVerbose() << "RPort_SOADBG_ROA::SubscribesoaRoaRunningState::Subscribed";
        }
        else
        {
            m_logger.LogError() << "RPort_SOADBG_ROA::SubscribesoaRoaRunningState::" << subscribe.Error().Message();
        }
    }
}
 
void RPort_SOADBG_ROA::StopSubscribesoaRoaRunningState()
{
    if (m_found)
    {
        // request stop subscribe
        m_interface->soaRoaRunningState.Unsubscribe();
        m_logger.LogVerbose() << "RPort_SOADBG_ROA::StopSubscribesoaRoaRunningState::Unsubscribed";
    }
}
 
void RPort_SOADBG_ROA::RegistReceiversoaRoaRunningState()
{
    if (m_found)
    {
        // set callback
        auto receiver = [this]() -> void {
            return ReceiveFieldsoaRoaRunningStateTriggered();
        };
        
        // regist callback
        auto callback = m_interface->soaRoaRunningState.SetReceiveHandler(receiver);
        if (callback.HasValue())
        {
            m_logger.LogVerbose() << "RPort_SOADBG_ROA::RegistReceiversoaRoaRunningState::SetReceiveHandler";
        }
        else
        {
            m_logger.LogError() << "RPort_SOADBG_ROA::RegistReceiversoaRoaRunningState::SetReceiveHandler::" << callback.Error().Message();
        }
    }
}
 
void RPort_SOADBG_ROA::ReceiveFieldsoaRoaRunningStateTriggered()
{
    if (m_found)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_interface->soaRoaRunningState.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
        {
            auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaRoaRunningState.GetNewSamples([&](auto samplePtr) {
                RPort_SOADBG_ROA::ReadValuesoaRoaRunningState(std::move(samplePtr));
            }));
            if (recv->HasValue())
            {
                m_logger.LogVerbose() << "RPort_SOADBG_ROA::ReceiveFieldsoaRoaRunningState::GetNewSamples::" << recv->Value();
            }
            else
            {
                m_logger.LogError() << "RPort_SOADBG_ROA::ReceiveFieldsoaRoaRunningState::GetNewSamples::" << recv->Error().Message();
            }
        }
    }
}
 
void RPort_SOADBG_ROA::ReceiveFieldsoaRoaRunningStateCyclic()
{
    while (m_running)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_found)
        {
            if (m_interface->soaRoaRunningState.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
            {
                auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaRoaRunningState.GetNewSamples([&](auto samplePtr) {
                    RPort_SOADBG_ROA::ReadValuesoaRoaRunningState(std::move(samplePtr));
                }));
                if (recv->HasValue())
                {
                    m_logger.LogVerbose() << "RPort_SOADBG_ROA::ReceiveFieldsoaRoaRunningState::GetNewSamples::" << recv->Value();
                }
                else
                {
                    m_logger.LogError() << "RPort_SOADBG_ROA::ReceiveFieldsoaRoaRunningState::GetNewSamples::" << recv->Error().Message();
                }
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void RPort_SOADBG_ROA::ReadValuesoaRoaRunningState(ara::com::SamplePtr<eevp::control::proxy::fields::soaRoaRunningState::FieldType const> samplePtr)
{
    auto value = *samplePtr.Get();
    if (m_receiversoaRoaRunningState)
    {
        m_receiversoaRoaRunningState(value);
    }
}
 
void RPort_SOADBG_ROA::RegistFieldHandlersoaRoaRunningState(std::function<void(const eevp::control::proxy::fields::soaRoaRunningState::FieldType&)> handler)
{
    m_receiversoaRoaRunningState = handler;
}
 
void RPort_SOADBG_ROA::GetsoaRoaRunningState()
{
    if (m_found)
    {
        auto request = m_interface->soaRoaRunningState.Get();
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "RPort_SOADBG_ROA::GetsoaRoaRunningState::Responded";
            
            auto result = response.Value();
            if (m_receiversoaRoaRunningState)
            {
                m_receiversoaRoaRunningState(result);
            }
        }
        else
        {
            m_logger.LogError() << "RPort_SOADBG_ROA::GetsoaRoaRunningState::" << response.Error().Message();
        }
    }
}
 
void RPort_SOADBG_ROA::SubscribesoaRoaSensorError()
{
    if (m_found)
    {
        // regist receiver handler
        // if you want to enable it, please uncomment below code
        // RegistReceiversoaRoaSensorError();
        
        // request subscribe
        auto subscribe = m_interface->soaRoaSensorError.Subscribe(1);
        if (subscribe.HasValue())
        {
            m_logger.LogVerbose() << "RPort_SOADBG_ROA::SubscribesoaRoaSensorError::Subscribed";
        }
        else
        {
            m_logger.LogError() << "RPort_SOADBG_ROA::SubscribesoaRoaSensorError::" << subscribe.Error().Message();
        }
    }
}
 
void RPort_SOADBG_ROA::StopSubscribesoaRoaSensorError()
{
    if (m_found)
    {
        // request stop subscribe
        m_interface->soaRoaSensorError.Unsubscribe();
        m_logger.LogVerbose() << "RPort_SOADBG_ROA::StopSubscribesoaRoaSensorError::Unsubscribed";
    }
}
 
void RPort_SOADBG_ROA::RegistReceiversoaRoaSensorError()
{
    if (m_found)
    {
        // set callback
        auto receiver = [this]() -> void {
            return ReceiveFieldsoaRoaSensorErrorTriggered();
        };
        
        // regist callback
        auto callback = m_interface->soaRoaSensorError.SetReceiveHandler(receiver);
        if (callback.HasValue())
        {
            m_logger.LogVerbose() << "RPort_SOADBG_ROA::RegistReceiversoaRoaSensorError::SetReceiveHandler";
        }
        else
        {
            m_logger.LogError() << "RPort_SOADBG_ROA::RegistReceiversoaRoaSensorError::SetReceiveHandler::" << callback.Error().Message();
        }
    }
}
 
void RPort_SOADBG_ROA::ReceiveFieldsoaRoaSensorErrorTriggered()
{
    if (m_found)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_interface->soaRoaSensorError.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
        {
            auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaRoaSensorError.GetNewSamples([&](auto samplePtr) {
                RPort_SOADBG_ROA::ReadValuesoaRoaSensorError(std::move(samplePtr));
            }));
            if (recv->HasValue())
            {
                m_logger.LogVerbose() << "RPort_SOADBG_ROA::ReceiveFieldsoaRoaSensorError::GetNewSamples::" << recv->Value();
            }
            else
            {
                m_logger.LogError() << "RPort_SOADBG_ROA::ReceiveFieldsoaRoaSensorError::GetNewSamples::" << recv->Error().Message();
            }
        }
    }
}
 
void RPort_SOADBG_ROA::ReceiveFieldsoaRoaSensorErrorCyclic()
{
    while (m_running)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_found)
        {
            if (m_interface->soaRoaSensorError.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
            {
                auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaRoaSensorError.GetNewSamples([&](auto samplePtr) {
                    RPort_SOADBG_ROA::ReadValuesoaRoaSensorError(std::move(samplePtr));
                }));
                if (recv->HasValue())
                {
                    m_logger.LogVerbose() << "RPort_SOADBG_ROA::ReceiveFieldsoaRoaSensorError::GetNewSamples::" << recv->Value();
                }
                else
                {
                    m_logger.LogError() << "RPort_SOADBG_ROA::ReceiveFieldsoaRoaSensorError::GetNewSamples::" << recv->Error().Message();
                }
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void RPort_SOADBG_ROA::ReadValuesoaRoaSensorError(ara::com::SamplePtr<eevp::control::proxy::fields::soaRoaSensorError::FieldType const> samplePtr)
{
    auto value = *samplePtr.Get();
    if (m_receiversoaRoaSensorError)
    {
        m_receiversoaRoaSensorError(value);
    }
}
 
void RPort_SOADBG_ROA::RegistFieldHandlersoaRoaSensorError(std::function<void(const eevp::control::proxy::fields::soaRoaSensorError::FieldType&)> handler)
{
    m_receiversoaRoaSensorError = handler;
}
 
void RPort_SOADBG_ROA::GetsoaRoaSensorError()
{
    if (m_found)
    {
        auto request = m_interface->soaRoaSensorError.Get();
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "RPort_SOADBG_ROA::GetsoaRoaSensorError::Responded";
            
            auto result = response.Value();
            if (m_receiversoaRoaSensorError)
            {
                m_receiversoaRoaSensorError(result);
            }
        }
        else
        {
            m_logger.LogError() << "RPort_SOADBG_ROA::GetsoaRoaSensorError::" << response.Error().Message();
        }
    }
}
 
void RPort_SOADBG_ROA::SubscribesoaRoaSwVersion()
{
    if (m_found)
    {
        // regist receiver handler
        // if you want to enable it, please uncomment below code
        // RegistReceiversoaRoaSwVersion();
        
        // request subscribe
        auto subscribe = m_interface->soaRoaSwVersion.Subscribe(1);
        if (subscribe.HasValue())
        {
            m_logger.LogVerbose() << "RPort_SOADBG_ROA::SubscribesoaRoaSwVersion::Subscribed";
        }
        else
        {
            m_logger.LogError() << "RPort_SOADBG_ROA::SubscribesoaRoaSwVersion::" << subscribe.Error().Message();
        }
    }
}
 
void RPort_SOADBG_ROA::StopSubscribesoaRoaSwVersion()
{
    if (m_found)
    {
        // request stop subscribe
        m_interface->soaRoaSwVersion.Unsubscribe();
        m_logger.LogVerbose() << "RPort_SOADBG_ROA::StopSubscribesoaRoaSwVersion::Unsubscribed";
    }
}
 
void RPort_SOADBG_ROA::RegistReceiversoaRoaSwVersion()
{
    if (m_found)
    {
        // set callback
        auto receiver = [this]() -> void {
            return ReceiveFieldsoaRoaSwVersionTriggered();
        };
        
        // regist callback
        auto callback = m_interface->soaRoaSwVersion.SetReceiveHandler(receiver);
        if (callback.HasValue())
        {
            m_logger.LogVerbose() << "RPort_SOADBG_ROA::RegistReceiversoaRoaSwVersion::SetReceiveHandler";
        }
        else
        {
            m_logger.LogError() << "RPort_SOADBG_ROA::RegistReceiversoaRoaSwVersion::SetReceiveHandler::" << callback.Error().Message();
        }
    }
}
 
void RPort_SOADBG_ROA::ReceiveFieldsoaRoaSwVersionTriggered()
{
    if (m_found)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_interface->soaRoaSwVersion.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
        {
            auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaRoaSwVersion.GetNewSamples([&](auto samplePtr) {
                RPort_SOADBG_ROA::ReadValuesoaRoaSwVersion(std::move(samplePtr));
            }));
            if (recv->HasValue())
            {
                m_logger.LogVerbose() << "RPort_SOADBG_ROA::ReceiveFieldsoaRoaSwVersion::GetNewSamples::" << recv->Value();
            }
            else
            {
                m_logger.LogError() << "RPort_SOADBG_ROA::ReceiveFieldsoaRoaSwVersion::GetNewSamples::" << recv->Error().Message();
            }
        }
    }
}
 
void RPort_SOADBG_ROA::ReceiveFieldsoaRoaSwVersionCyclic()
{
    while (m_running)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_found)
        {
            if (m_interface->soaRoaSwVersion.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
            {
                auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaRoaSwVersion.GetNewSamples([&](auto samplePtr) {
                    RPort_SOADBG_ROA::ReadValuesoaRoaSwVersion(std::move(samplePtr));
                }));
                if (recv->HasValue())
                {
                    m_logger.LogVerbose() << "RPort_SOADBG_ROA::ReceiveFieldsoaRoaSwVersion::GetNewSamples::" << recv->Value();
                }
                else
                {
                    m_logger.LogError() << "RPort_SOADBG_ROA::ReceiveFieldsoaRoaSwVersion::GetNewSamples::" << recv->Error().Message();
                }
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void RPort_SOADBG_ROA::ReadValuesoaRoaSwVersion(ara::com::SamplePtr<eevp::control::proxy::fields::soaRoaSwVersion::FieldType const> samplePtr)
{
    auto value = *samplePtr.Get();
    if (m_receiversoaRoaSwVersion)
    {
        m_receiversoaRoaSwVersion(value);
    }
}
 
void RPort_SOADBG_ROA::RegistFieldHandlersoaRoaSwVersion(std::function<void(const eevp::control::proxy::fields::soaRoaSwVersion::FieldType&)> handler)
{
    m_receiversoaRoaSwVersion = handler;
}
 
void RPort_SOADBG_ROA::GetsoaRoaSwVersion()
{
    if (m_found)
    {
        auto request = m_interface->soaRoaSwVersion.Get();
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "RPort_SOADBG_ROA::GetsoaRoaSwVersion::Responded";
            
            auto result = response.Value();
            if (m_receiversoaRoaSwVersion)
            {
                m_receiversoaRoaSwVersion(result);
            }
        }
        else
        {
            m_logger.LogError() << "RPort_SOADBG_ROA::GetsoaRoaSwVersion::" << response.Error().Message();
        }
    }
}
 
void RPort_SOADBG_ROA::RequestResetRoaDetectInfo()
{
    if (m_found)
    {
        m_interface->ResetRoaDetectInfo();
    }
}
 
void RPort_SOADBG_ROA::RequestSetRoaMode(const eevp::control::SoaRoaMode& mode)
{
    if (m_found)
    {
        m_interface->SetRoaMode(mode);
    }
}
 
void RPort_SOADBG_ROA::RequestStartRoa()
{
    if (m_found)
    {
        m_interface->StartRoa();
    }
}
 
void RPort_SOADBG_ROA::RequestStopRoa()
{
    if (m_found)
    {
        m_interface->StopRoa();
    }
}
 
} /// namespace port
} /// namespace aa
} /// namespace soa_debugger
 
/// EOF