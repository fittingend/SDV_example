///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : rport_soadbg_power.h
/// SOFTWARE COMPONENT NAME           : RPort_SOADBG_Power
/// GENERATED DATE                    : 2025-08-30 10:53:34
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef PARA_AA_GEN_SOFTWARE_COMPONENT_RPORT_SOA_DEBUGGER_AA_RPORT_SOADBG_POWER_H
#define PARA_AA_GEN_SOFTWARE_COMPONENT_RPORT_SOA_DEBUGGER_AA_RPORT_SOADBG_POWER_H
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// INCLUSION HEADER FILES
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "eevp/control/soapower_proxy.h"
 
#include "ara/log/logger.h"
 
#include <mutex>
#include <thread>
 
namespace soa_debugger
{
namespace aa
{
namespace port
{
 
class RPort_SOADBG_Power
{
public:
    /// @brief Constructor
    RPort_SOADBG_Power();
    
    /// @brief Destructor
    ~RPort_SOADBG_Power();
    
    /// @brief Start port
    void Start();
    
    /// @brief Terminate port
    void Terminate();

    /// @brief Subscribe field notification, soaPowerDeviceNormal
    void SubscribesoaPowerDeviceNormal();
     
    /// @brief Stop field subscription, soaPowerDeviceNormal
    void StopSubscribesoaPowerDeviceNormal();
     
    /// @brief Field notification receive handler, soaPowerDeviceNormal
    void ReceiveFieldsoaPowerDeviceNormalTriggered();
     
    /// @brief Field notification receive handler, soaPowerDeviceNormal
    void ReceiveFieldsoaPowerDeviceNormalCyclic();
     
    /// @brief Read field notification value, soaPowerDeviceNormal
    void ReadValuesoaPowerDeviceNormal(ara::com::SamplePtr<eevp::control::proxy::fields::soaPowerDeviceNormal::FieldType const> samplePtr);
     
    /// @brief Regist callback from software component
    void RegistFieldHandlersoaPowerDeviceNormal(std::function<void(const eevp::control::proxy::fields::soaPowerDeviceNormal::FieldType&)> handler);
    
    /// @brief Getter method using by software component, soaPowerDeviceNormal
    void GetsoaPowerDeviceNormal();
    
    /// @brief Subscribe field notification, soaPowerSwVersion
    void SubscribesoaPowerSwVersion();
     
    /// @brief Stop field subscription, soaPowerSwVersion
    void StopSubscribesoaPowerSwVersion();
     
    /// @brief Field notification receive handler, soaPowerSwVersion
    void ReceiveFieldsoaPowerSwVersionTriggered();
     
    /// @brief Field notification receive handler, soaPowerSwVersion
    void ReceiveFieldsoaPowerSwVersionCyclic();
     
    /// @brief Read field notification value, soaPowerSwVersion
    void ReadValuesoaPowerSwVersion(ara::com::SamplePtr<eevp::control::proxy::fields::soaPowerSwVersion::FieldType const> samplePtr);
     
    /// @brief Regist callback from software component
    void RegistFieldHandlersoaPowerSwVersion(std::function<void(const eevp::control::proxy::fields::soaPowerSwVersion::FieldType&)> handler);
    
    /// @brief Getter method using by software component, soaPowerSwVersion
    void GetsoaPowerSwVersion();

private:
    /// @brief Callback for find service
    void Find(ara::com::ServiceHandleContainer<eevp::control::proxy::SoaPowerProxy::HandleType> handles,
              ara::com::FindServiceHandle findHandle);

    /// @brief Callback for field notification receiver, soaPowerDeviceNormal
    void RegistReceiversoaPowerDeviceNormal();
    
    /// @brief Callback for field notification receiver, soaPowerSwVersion
    void RegistReceiversoaPowerSwVersion();
    
private:
    /// @brief Logger for this port
    ara::log::Logger& m_logger;
    
    /// @brief Flag of port status
    bool m_running;
    
    /// @brief Flag of find service status
    bool m_found;
    
    /// @brief Mutex for this port
    std::mutex m_mutex; 
    
    /// @brief AUTOSAR Port Interface
    std::unique_ptr<eevp::control::proxy::SoaPowerProxy> m_interface;
    
    /// @brief Find service handle
    std::unique_ptr<ara::com::FindServiceHandle> m_findHandle;

    /// @brief Callback from software component, soaPowerDeviceNormal
    std::function<void(const eevp::control::proxy::fields::soaPowerDeviceNormal::FieldType&)> m_receiversoaPowerDeviceNormal;
    
    /// @brief Callback from software component, soaPowerSwVersion
    std::function<void(const eevp::control::proxy::fields::soaPowerSwVersion::FieldType&)> m_receiversoaPowerSwVersion;
    
};
 
} /// namespace port
} /// namespace aa
} /// namespace soa_debugger
 
#endif /// PARA_AA_GEN_SOFTWARE_COMPONENT_RPORT_SOA_DEBUGGER_AA_RPORT_SOADBG_POWER_H