///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : rport_subscriptionmanagement.cpp
/// SOFTWARE COMPONENT NAME           : RPort_SubscriptionManagement
/// GENERATED DATE                    : 2025-09-05 11:31:31
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "batterymonitor/aa/port/rport_subscriptionmanagement.h"
 
namespace batterymonitor
{
namespace aa
{
namespace port
{
 
RPort_SubscriptionManagement::RPort_SubscriptionManagement()
    : m_logger(ara::log::CreateLogger("BTMN", "PORT", ara::log::LogLevel::kVerbose))
    , m_running{false}
    , m_found{false}
    , m_receivernotifySubscriptionInfo{nullptr}
    , m_respondergetSubscriptionInfo{nullptr}
{
}
 
RPort_SubscriptionManagement::~RPort_SubscriptionManagement()
{
}
 
void RPort_SubscriptionManagement::Start()
{
    m_logger.LogVerbose() << "RPort_SubscriptionManagement::Start";
    
    // regist callback
    ara::core::InstanceSpecifier specifier{"BatteryMonitor/AA/RPort_SubscriptionManagement"};
    auto handler = [this](ara::com::ServiceHandleContainer<eevp::subscription::service::proxy::SubscriptionManagementProxy::HandleType> handles,
                          ara::com::FindServiceHandle findHandle) {
        this->Find(handles, findHandle);
    };
    
    // find service
    auto find = eevp::subscription::service::proxy::SubscriptionManagementProxy::StartFindService(handler, specifier);
    if (find.HasValue())
    {
        m_logger.LogVerbose() << "RPort_SubscriptionManagement::Start::StartFindService";
    }
    else
    {
        m_logger.LogError() << "RPort_SubscriptionManagement::Start::StartFindService::" << find.Error().Message();
    }
    
    // run port
    m_running = true;
}
 
void RPort_SubscriptionManagement::Terminate()
{
    m_logger.LogVerbose() << "RPort_SubscriptionManagement::Terminate";
    
    // stop port
    m_running = false;
    
    // clear service proxy
    if (m_interface)
    {
        // stop subscribe
        StopSubscribenotifySubscriptionInfo();
        
        // stop find service
        m_interface->StopFindService(*m_findHandle);
        m_found = false;
        
        m_logger.LogVerbose() << "RPort_SubscriptionManagement::Terminate::StopFindService";
    }
}
 
void RPort_SubscriptionManagement::Find(ara::com::ServiceHandleContainer<eevp::subscription::service::proxy::SubscriptionManagementProxy::HandleType> handles, ara::com::FindServiceHandle findHandle)
{
    // check finding handles
    if (handles.empty())
    {
        m_logger.LogVerbose() << "RPort_SubscriptionManagement::Find::Service Instances not found";
        return;
    }
    else
    {
        for (auto& handle : handles)
        {
            m_logger.LogVerbose() << "RPort_SubscriptionManagement::Find::Searched Instance::ServiceId =" << 
                                     handle.GetServiceHandle().serviceId << 
                                     ", InstanceId =" << 
                                     handle.GetServiceHandle().instanceId;
        }
    }
    
    // create proxy
    if (m_interface)
    {
        m_logger.LogVerbose() << "RPort_SubscriptionManagement::Find::Proxy is already running";
    }
    else
    {
        m_logger.LogVerbose() << "RPort_SubscriptionManagement::Find::Using Instance::ServiceId =" << 
                                 handles[0].GetServiceHandle().serviceId << 
                                 ", InstanceId =" << 
                                 handles[0].GetServiceHandle().instanceId;
        m_interface = std::make_unique<eevp::subscription::service::proxy::SubscriptionManagementProxy>(handles[0]);
        m_findHandle = std::make_unique<ara::com::FindServiceHandle>(findHandle);
        m_found = true;
        
        // subscribe events
        SubscribenotifySubscriptionInfo();
    }
}
 
void RPort_SubscriptionManagement::SubscribenotifySubscriptionInfo()
{
    if (m_found)
    {
        // regist receiver handler
        // if you want to enable it, please uncomment below code
        // RegistReceivernotifySubscriptionInfo();
        
        // request subscribe
        auto subscribe = m_interface->notifySubscriptionInfo.Subscribe(1);
        if (subscribe.HasValue())
        {
            m_logger.LogVerbose() << "RPort_SubscriptionManagement::SubscribenotifySubscriptionInfo::Subscribed";
        }
        else
        {
            m_logger.LogError() << "RPort_SubscriptionManagement::SubscribenotifySubscriptionInfo::" << subscribe.Error().Message();
        }
    }
}
 
void RPort_SubscriptionManagement::StopSubscribenotifySubscriptionInfo()
{
    if (m_found)
    {
        // request stop subscribe
        m_interface->notifySubscriptionInfo.Unsubscribe();
        m_logger.LogVerbose() << "RPort_SubscriptionManagement::StopSubscribenotifySubscriptionInfo::Unsubscribed";
    }
}
 
void RPort_SubscriptionManagement::RegistReceivernotifySubscriptionInfo()
{
    if (m_found)
    {
        // set callback
        auto receiver = [this]() -> void {
            return ReceiveEventnotifySubscriptionInfoTriggered();
        };
        
        // regist callback
        auto callback = m_interface->notifySubscriptionInfo.SetReceiveHandler(receiver);
        if (callback.HasValue())
        {
            m_logger.LogVerbose() << "RPort_SubscriptionManagement::RegistReceivernotifySubscriptionInfo::SetReceiveHandler";
        }
        else
        {
            m_logger.LogError() << "RPort_SubscriptionManagement::RegistReceivernotifySubscriptionInfo::SetReceiveHandler::" << callback.Error().Message();
        }
    }
}
 
void RPort_SubscriptionManagement::ReceiveEventnotifySubscriptionInfoTriggered()
{
    if (m_found)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_interface->notifySubscriptionInfo.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
        {
            auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->notifySubscriptionInfo.GetNewSamples([&](auto samplePtr) {
                RPort_SubscriptionManagement::ReadDatanotifySubscriptionInfo(std::move(samplePtr));
            }));
            if (recv->HasValue())
            {
                m_logger.LogVerbose() << "RPort_SubscriptionManagement::ReceiveEventnotifySubscriptionInfo::GetNewSamples::" << recv->Value();
            }
            else
            {
                m_logger.LogError() << "RPort_SubscriptionManagement::ReceiveEventnotifySubscriptionInfo::GetNewSamples::" << recv->Error().Message();
            }
        }
    }
}
 
void RPort_SubscriptionManagement::ReceiveEventnotifySubscriptionInfoCyclic()
{
    while (m_running)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_found)
        {
            if (m_interface->notifySubscriptionInfo.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
            {
                auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->notifySubscriptionInfo.GetNewSamples([&](auto samplePtr) {
                    RPort_SubscriptionManagement::ReadDatanotifySubscriptionInfo(std::move(samplePtr));
                }));
                if (recv->HasValue())
                {
                    m_logger.LogVerbose() << "RPort_SubscriptionManagement::ReceiveEventnotifySubscriptionInfo::GetNewSamples::" << recv->Value();
                }
                else
                {
                    m_logger.LogError() << "RPort_SubscriptionManagement::ReceiveEventnotifySubscriptionInfo::GetNewSamples::" << recv->Error().Message();
                }
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void RPort_SubscriptionManagement::ReadDatanotifySubscriptionInfo(ara::com::SamplePtr<eevp::subscription::service::proxy::events::notifySubscriptionInfo::SampleType const> samplePtr)
{
    auto data = *samplePtr.Get();
    if (m_receivernotifySubscriptionInfo)
    {
        m_receivernotifySubscriptionInfo(data);
    }
}
 
void RPort_SubscriptionManagement::RegistEventHandlernotifySubscriptionInfo(std::function<void(const eevp::subscription::service::proxy::events::notifySubscriptionInfo::SampleType&)> handler)
{
    m_receivernotifySubscriptionInfo = handler;
}
 
void RPort_SubscriptionManagement::RequestgetSubscriptionInfo(const eevp::type::String& appName)
{
    if (m_found)
    {
        auto request = m_interface->getSubscriptionInfo(appName);
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "RPort_SubscriptionManagement::RequestgetSubscriptionInfo::Responded";
            
            auto result = response.Value();
            if (m_respondergetSubscriptionInfo)
            {
                m_respondergetSubscriptionInfo(result);
            }
        }
        else
        {
            m_logger.LogError() << "RPort_SubscriptionManagement::RequestgetSubscriptionInfo::" << response.Error().Message();
        }
    }
}
 
void RPort_SubscriptionManagement::RegistResponseHandlergetSubscriptionInfo(std::function<void(const eevp::subscription::service::proxy::methods::getSubscriptionInfo::Output&)> handler)
{
    m_respondergetSubscriptionInfo = handler;
}
 
} /// namespace port
} /// namespace aa
} /// namespace batterymonitor
 
/// EOF