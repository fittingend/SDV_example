///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : batterymonitor.cpp
/// SOFTWARE COMPONENT NAME           : BatteryMonitor
/// GENERATED DATE                    : 2025-09-05 11:31:31
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// INCLUSION HEADER FILES
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "batterymonitor/aa/batterymonitor.h"
 
namespace batterymonitor
{
namespace aa
{
 
BatteryMonitor::BatteryMonitor()
    : m_logger(ara::log::CreateLogger("BTMN", "SWC", ara::log::LogLevel::kVerbose))
    , m_running{false}
    , m_workers(4)
{
}
 
BatteryMonitor::~BatteryMonitor()
{
}
 
bool BatteryMonitor::Initialize()
{
    m_logger.LogVerbose() << "BatteryMonitor::Initialize";
    
    bool init = true;
    
    m_RPort_BmsInfo = std::make_unique<batterymonitor::aa::port::RPort_BmsInfo>();
    m_RPort_SOA_Mlm = std::make_unique<batterymonitor::aa::port::RPort_SOA_Mlm>();
    m_RPort_SubscriptionManagement = std::make_unique<batterymonitor::aa::port::RPort_SubscriptionManagement>();
    
    // put your code for initialization
    
    return init;
}
 
void BatteryMonitor::Start()
{
    m_logger.LogVerbose() << "BatteryMonitor::Start";
    
    m_RPort_BmsInfo->Start();
    m_RPort_SOA_Mlm->Start();
    m_RPort_SubscriptionManagement->Start();
}
 
void BatteryMonitor::Terminate()
{
    m_logger.LogVerbose() << "BatteryMonitor::Terminate";
    
    // stop running
    m_running = false;
    
    m_RPort_BmsInfo->Terminate();
    m_RPort_SOA_Mlm->Terminate();
    m_RPort_SubscriptionManagement->Terminate();
}
 
void BatteryMonitor::Run()
{
    m_logger.LogVerbose() << "BatteryMonitor::Run";
    
    // start running
    m_running = true;
    
    m_workers.Async([this] { m_RPort_BmsInfo->ReceiveEventems_BmsInfoCyclic(); });
    m_workers.Async([this] { m_RPort_SOA_Mlm->ReceiveFieldsoaMlmStatusCyclic(); });
    m_workers.Async([this] { m_RPort_SOA_Mlm->ReceiveFieldsoaMlmSwVersionCyclic(); });
    m_workers.Async([this] { m_RPort_SubscriptionManagement->ReceiveEventnotifySubscriptionInfoCyclic(); });
    
    m_workers.Wait();
}
 
} /// namespace aa
} /// namespace batterymonitor
