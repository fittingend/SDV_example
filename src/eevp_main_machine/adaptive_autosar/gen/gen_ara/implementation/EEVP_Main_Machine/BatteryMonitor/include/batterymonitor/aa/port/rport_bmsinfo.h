///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : rport_bmsinfo.h
/// SOFTWARE COMPONENT NAME           : RPort_BmsInfo
/// GENERATED DATE                    : 2025-09-05 11:31:31
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef PARA_AA_GEN_SOFTWARE_COMPONENT_RPORT_BATTERYMONITOR_AA_RPORT_BMSINFO_H
#define PARA_AA_GEN_SOFTWARE_COMPONENT_RPORT_BATTERYMONITOR_AA_RPORT_BMSINFO_H
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// INCLUSION HEADER FILES
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "eevp/bmsinfosrv/bmsinfosrv_proxy.h"
 
#include "ara/log/logger.h"
 
#include <mutex>
#include <thread>
 
namespace batterymonitor
{
namespace aa
{
namespace port
{
 
class RPort_BmsInfo
{
public:
    /// @brief Constructor
    RPort_BmsInfo();
    
    /// @brief Destructor
    ~RPort_BmsInfo();
    
    /// @brief Start port
    void Start();
    
    /// @brief Terminate port
    void Terminate();
    
    /// @brief Subscribe event, ems_BmsInfo
    void Subscribeems_BmsInfo();
     
    /// @brief Stop event subscription, ems_BmsInfo
    void StopSubscribeems_BmsInfo();
     
    /// @brief Event receive handler, ems_BmsInfo
    void ReceiveEventems_BmsInfoTriggered();
     
    /// @brief Event receive handler, ems_BmsInfo
    void ReceiveEventems_BmsInfoCyclic();
     
    /// @brief Read event data, ems_BmsInfo
    void ReadDataems_BmsInfo(ara::com::SamplePtr<eevp::bmsinfosrv::proxy::events::ems_BmsInfo::SampleType const> samplePtr);
     
    /// @brief Regist callback from software component
    void RegistEventHandlerems_BmsInfo(std::function<void(const eevp::bmsinfosrv::proxy::events::ems_BmsInfo::SampleType&)> handler);

private:
    /// @brief Callback for find service
    void Find(ara::com::ServiceHandleContainer<eevp::bmsinfosrv::proxy::BmsInfoSrvProxy::HandleType> handles,
              ara::com::FindServiceHandle findHandle);
    
    /// @brief Callback for event receiver, ems_BmsInfo
    void RegistReceiverems_BmsInfo();

private:
    /// @brief Logger for this port
    ara::log::Logger& m_logger;
    
    /// @brief Flag of port status
    bool m_running;
    
    /// @brief Flag of find service status
    bool m_found;
    
    /// @brief Mutex for this port
    std::mutex m_mutex; 
    
    /// @brief AUTOSAR Port Interface
    std::unique_ptr<eevp::bmsinfosrv::proxy::BmsInfoSrvProxy> m_interface;
    
    /// @brief Find service handle
    std::unique_ptr<ara::com::FindServiceHandle> m_findHandle;
    
    /// @brief Callback from software component, ems_BmsInfo
    std::function<void(const eevp::bmsinfosrv::proxy::events::ems_BmsInfo::SampleType&)> m_receiverems_BmsInfo;

};
 
} /// namespace port
} /// namespace aa
} /// namespace batterymonitor
 
#endif /// PARA_AA_GEN_SOFTWARE_COMPONENT_RPORT_BATTERYMONITOR_AA_RPORT_BMSINFO_H