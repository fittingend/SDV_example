///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : otatestr.h
/// SOFTWARE COMPONENT NAME           : OTATestR
/// GENERATED DATE                    : 2025-08-30 10:53:27
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef PARA_AA_GEN_SOFTWARE_COMPONENT_RPORT_OTATESTR_ROOTSWCOMPONENT_OTATESTR_H
#define PARA_AA_GEN_SOFTWARE_COMPONENT_RPORT_OTATESTR_ROOTSWCOMPONENT_OTATESTR_H
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// INCLUSION HEADER FILES
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "eevp/otatest/service/main_ota_test_proxy.h"
 
#include "ara/log/logger.h"
 
#include <mutex>
#include <thread>
 
namespace otatestr
{
namespace rootswcomponent
{
namespace port
{
 
class OTATestR
{
public:
    /// @brief Constructor
    OTATestR();
    
    /// @brief Destructor
    ~OTATestR();
    
    /// @brief Start port
    void Start();
    
    /// @brief Terminate port
    void Terminate();
    
    /// @brief Subscribe event, Event0
    void SubscribeEvent0();
     
    /// @brief Stop event subscription, Event0
    void StopSubscribeEvent0();
     
    /// @brief Event receive handler, Event0
    void ReceiveEventEvent0Triggered();
     
    /// @brief Event receive handler, Event0
    void ReceiveEventEvent0Cyclic();
     
    /// @brief Read event data, Event0
    void ReadDataEvent0(ara::com::SamplePtr<eevp::otatest::service::proxy::events::Event0::SampleType const> samplePtr);
     
    /// @brief Regist callback from software component
    void RegistEventHandlerEvent0(std::function<void(const eevp::otatest::service::proxy::events::Event0::SampleType&)> handler);
    
    /// @brief Subscribe field notification, Field0
    void SubscribeField0();
     
    /// @brief Stop field subscription, Field0
    void StopSubscribeField0();
     
    /// @brief Field notification receive handler, Field0
    void ReceiveFieldField0Triggered();
     
    /// @brief Field notification receive handler, Field0
    void ReceiveFieldField0Cyclic();
     
    /// @brief Read field notification value, Field0
    void ReadValueField0(ara::com::SamplePtr<eevp::otatest::service::proxy::fields::Field0::FieldType const> samplePtr);
     
    /// @brief Regist callback from software component
    void RegistFieldHandlerField0(std::function<void(const eevp::otatest::service::proxy::fields::Field0::FieldType&)> handler);
    
    /// @brief Getter method using by software component, Field0
    void GetField0();
    
    /// @brief Setter method using by software component, Field0
    void SetField0(const eevp::otatest::service::proxy::fields::Field0::FieldType& value);
    
    /// @brief Request with Response method using by software component, Method0
    void RequestMethod0(const std::int32_t& Arg0);
     
    /// @brief Regist callback from software component
    void RegistResponseHandlerMethod0(std::function<void(const eevp::otatest::service::proxy::methods::Method0::Output&)> handler);
    
private:
    /// @brief Callback for find service
    void Find(ara::com::ServiceHandleContainer<eevp::otatest::service::proxy::Main_OTA_TestProxy::HandleType> handles,
              ara::com::FindServiceHandle findHandle);
    
    /// @brief Callback for event receiver, Event0
    void RegistReceiverEvent0();
    
    /// @brief Callback for field notification receiver, Field0
    void RegistReceiverField0();
    
private:
    /// @brief Logger for this port
    ara::log::Logger& m_logger;
    
    /// @brief Flag of port status
    bool m_running;
    
    /// @brief Flag of find service status
    bool m_found;
    
    /// @brief Mutex for this port
    std::mutex m_mutex; 
    
    /// @brief AUTOSAR Port Interface
    std::unique_ptr<eevp::otatest::service::proxy::Main_OTA_TestProxy> m_interface;
    
    /// @brief Find service handle
    std::unique_ptr<ara::com::FindServiceHandle> m_findHandle;
    
    /// @brief Callback from software component, Event0
    std::function<void(const eevp::otatest::service::proxy::events::Event0::SampleType&)> m_receiverEvent0;
    
    /// @brief Callback from software component, Field0
    std::function<void(const eevp::otatest::service::proxy::fields::Field0::FieldType&)> m_receiverField0;
    
    /// @brief Callback from software component, Method0
    std::function<void(const eevp::otatest::service::proxy::methods::Method0::Output&)> m_responderMethod0;
};
 
} /// namespace port
} /// namespace rootswcomponent
} /// namespace otatestr
 
#endif /// PARA_AA_GEN_SOFTWARE_COMPONENT_RPORT_OTATESTR_ROOTSWCOMPONENT_OTATESTR_H