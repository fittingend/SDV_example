///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : otatestr.cpp
/// SOFTWARE COMPONENT NAME           : OTATestR
/// GENERATED DATE                    : 2025-08-30 10:53:28
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "otatestr/rootswcomponent/port/otatestr.h"
 
namespace otatestr
{
namespace rootswcomponent
{
namespace port
{
 
OTATestR::OTATestR()
    : m_logger(ara::log::CreateLogger("OTAR", "PORT", ara::log::LogLevel::kVerbose))
    , m_running{false}
    , m_found{false}
    , m_receiverEvent0{nullptr}
    , m_receiverField0{nullptr}
    , m_responderMethod0{nullptr}
{
}
 
OTATestR::~OTATestR()
{
}
 
void OTATestR::Start()
{
    m_logger.LogVerbose() << "OTATestR::Start";
    
    // regist callback
    ara::core::InstanceSpecifier specifier{"OTATestR/RootSwComponent/OTATestR"};
    auto handler = [this](ara::com::ServiceHandleContainer<eevp::otatest::service::proxy::Main_OTA_TestProxy::HandleType> handles,
                          ara::com::FindServiceHandle findHandle) {
        this->Find(handles, findHandle);
    };
    
    // find service
    auto find = eevp::otatest::service::proxy::Main_OTA_TestProxy::StartFindService(handler, specifier);
    if (find.HasValue())
    {
        m_logger.LogVerbose() << "OTATestR::Start::StartFindService";
    }
    else
    {
        m_logger.LogError() << "OTATestR::Start::StartFindService::" << find.Error().Message();
    }
    
    // run port
    m_running = true;
}
 
void OTATestR::Terminate()
{
    m_logger.LogVerbose() << "OTATestR::Terminate";
    
    // stop port
    m_running = false;
    
    // clear service proxy
    if (m_interface)
    {
        // stop subscribe
        StopSubscribeEvent0();
        StopSubscribeField0();
        
        // stop find service
        m_interface->StopFindService(*m_findHandle);
        m_found = false;
        
        m_logger.LogVerbose() << "OTATestR::Terminate::StopFindService";
    }
}
 
void OTATestR::Find(ara::com::ServiceHandleContainer<eevp::otatest::service::proxy::Main_OTA_TestProxy::HandleType> handles, ara::com::FindServiceHandle findHandle)
{
    // check finding handles
    if (handles.empty())
    {
        m_logger.LogVerbose() << "OTATestR::Find::Service Instances not found";
        return;
    }
    else
    {
        for (auto& handle : handles)
        {
            m_logger.LogVerbose() << "OTATestR::Find::Searched Instance::ServiceId =" << 
                                     handle.GetServiceHandle().serviceId << 
                                     ", InstanceId =" << 
                                     handle.GetServiceHandle().instanceId;
        }
    }
    
    // create proxy
    if (m_interface)
    {
        m_logger.LogVerbose() << "OTATestR::Find::Proxy is already running";
    }
    else
    {
        m_logger.LogVerbose() << "OTATestR::Find::Using Instance::ServiceId =" << 
                                 handles[0].GetServiceHandle().serviceId << 
                                 ", InstanceId =" << 
                                 handles[0].GetServiceHandle().instanceId;
        m_interface = std::make_unique<eevp::otatest::service::proxy::Main_OTA_TestProxy>(handles[0]);
        m_findHandle = std::make_unique<ara::com::FindServiceHandle>(findHandle);
        m_found = true;
        
        // subscribe events
        SubscribeEvent0();
        // subscribe field notifications
        SubscribeField0();
    }
}
 
void OTATestR::SubscribeEvent0()
{
    if (m_found)
    {
        // regist receiver handler
        // if you want to enable it, please uncomment below code
        // RegistReceiverEvent0();
        
        // request subscribe
        auto subscribe = m_interface->Event0.Subscribe(1);
        if (subscribe.HasValue())
        {
            m_logger.LogVerbose() << "OTATestR::SubscribeEvent0::Subscribed";
        }
        else
        {
            m_logger.LogError() << "OTATestR::SubscribeEvent0::" << subscribe.Error().Message();
        }
    }
}
 
void OTATestR::StopSubscribeEvent0()
{
    if (m_found)
    {
        // request stop subscribe
        m_interface->Event0.Unsubscribe();
        m_logger.LogVerbose() << "OTATestR::StopSubscribeEvent0::Unsubscribed";
    }
}
 
void OTATestR::RegistReceiverEvent0()
{
    if (m_found)
    {
        // set callback
        auto receiver = [this]() -> void {
            return ReceiveEventEvent0Triggered();
        };
        
        // regist callback
        auto callback = m_interface->Event0.SetReceiveHandler(receiver);
        if (callback.HasValue())
        {
            m_logger.LogVerbose() << "OTATestR::RegistReceiverEvent0::SetReceiveHandler";
        }
        else
        {
            m_logger.LogError() << "OTATestR::RegistReceiverEvent0::SetReceiveHandler::" << callback.Error().Message();
        }
    }
}
 
void OTATestR::ReceiveEventEvent0Triggered()
{
    if (m_found)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_interface->Event0.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
        {
            auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->Event0.GetNewSamples([&](auto samplePtr) {
                OTATestR::ReadDataEvent0(std::move(samplePtr));
            }));
            if (recv->HasValue())
            {
                m_logger.LogVerbose() << "OTATestR::ReceiveEventEvent0::GetNewSamples::" << recv->Value();
            }
            else
            {
                m_logger.LogError() << "OTATestR::ReceiveEventEvent0::GetNewSamples::" << recv->Error().Message();
            }
        }
    }
}
 
void OTATestR::ReceiveEventEvent0Cyclic()
{
    while (m_running)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_found)
        {
            if (m_interface->Event0.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
            {
                auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->Event0.GetNewSamples([&](auto samplePtr) {
                    OTATestR::ReadDataEvent0(std::move(samplePtr));
                }));
                if (recv->HasValue())
                {
                    m_logger.LogVerbose() << "OTATestR::ReceiveEventEvent0::GetNewSamples::" << recv->Value();
                }
                else
                {
                    m_logger.LogError() << "OTATestR::ReceiveEventEvent0::GetNewSamples::" << recv->Error().Message();
                }
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void OTATestR::ReadDataEvent0(ara::com::SamplePtr<eevp::otatest::service::proxy::events::Event0::SampleType const> samplePtr)
{
    auto data = *samplePtr.Get();
    if (m_receiverEvent0)
    {
        m_receiverEvent0(data);
    }
}
 
void OTATestR::RegistEventHandlerEvent0(std::function<void(const eevp::otatest::service::proxy::events::Event0::SampleType&)> handler)
{
    m_receiverEvent0 = handler;
}
 
void OTATestR::SubscribeField0()
{
    if (m_found)
    {
        // regist receiver handler
        // if you want to enable it, please uncomment below code
        // RegistReceiverField0();
        
        // request subscribe
        auto subscribe = m_interface->Field0.Subscribe(1);
        if (subscribe.HasValue())
        {
            m_logger.LogVerbose() << "OTATestR::SubscribeField0::Subscribed";
        }
        else
        {
            m_logger.LogError() << "OTATestR::SubscribeField0::" << subscribe.Error().Message();
        }
    }
}
 
void OTATestR::StopSubscribeField0()
{
    if (m_found)
    {
        // request stop subscribe
        m_interface->Field0.Unsubscribe();
        m_logger.LogVerbose() << "OTATestR::StopSubscribeField0::Unsubscribed";
    }
}
 
void OTATestR::RegistReceiverField0()
{
    if (m_found)
    {
        // set callback
        auto receiver = [this]() -> void {
            return ReceiveFieldField0Triggered();
        };
        
        // regist callback
        auto callback = m_interface->Field0.SetReceiveHandler(receiver);
        if (callback.HasValue())
        {
            m_logger.LogVerbose() << "OTATestR::RegistReceiverField0::SetReceiveHandler";
        }
        else
        {
            m_logger.LogError() << "OTATestR::RegistReceiverField0::SetReceiveHandler::" << callback.Error().Message();
        }
    }
}
 
void OTATestR::ReceiveFieldField0Triggered()
{
    if (m_found)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_interface->Field0.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
        {
            auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->Field0.GetNewSamples([&](auto samplePtr) {
                OTATestR::ReadValueField0(std::move(samplePtr));
            }));
            if (recv->HasValue())
            {
                m_logger.LogVerbose() << "OTATestR::ReceiveFieldField0::GetNewSamples::" << recv->Value();
            }
            else
            {
                m_logger.LogError() << "OTATestR::ReceiveFieldField0::GetNewSamples::" << recv->Error().Message();
            }
        }
    }
}
 
void OTATestR::ReceiveFieldField0Cyclic()
{
    while (m_running)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_found)
        {
            if (m_interface->Field0.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
            {
                auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->Field0.GetNewSamples([&](auto samplePtr) {
                    OTATestR::ReadValueField0(std::move(samplePtr));
                }));
                if (recv->HasValue())
                {
                    m_logger.LogVerbose() << "OTATestR::ReceiveFieldField0::GetNewSamples::" << recv->Value();
                }
                else
                {
                    m_logger.LogError() << "OTATestR::ReceiveFieldField0::GetNewSamples::" << recv->Error().Message();
                }
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void OTATestR::ReadValueField0(ara::com::SamplePtr<eevp::otatest::service::proxy::fields::Field0::FieldType const> samplePtr)
{
    auto value = *samplePtr.Get();
    if (m_receiverField0)
    {
        m_receiverField0(value);
    }
}
 
void OTATestR::RegistFieldHandlerField0(std::function<void(const eevp::otatest::service::proxy::fields::Field0::FieldType&)> handler)
{
    m_receiverField0 = handler;
}
 
void OTATestR::GetField0()
{
    if (m_found)
    {
        auto request = m_interface->Field0.Get();
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "OTATestR::GetField0::Responded";
            
            auto result = response.Value();
            if (m_receiverField0)
            {
                m_receiverField0(result);
            }
        }
        else
        {
            m_logger.LogError() << "OTATestR::GetField0::" << response.Error().Message();
        }
    }
}
 
void OTATestR::SetField0(const eevp::otatest::service::proxy::fields::Field0::FieldType& value)
{
    if (m_found)
    {
        auto request = m_interface->Field0.Set(value);
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "OTATestR::SetField0::Responded";
            
            auto result = response.Value();
            if (m_receiverField0)
            {
                m_receiverField0(result);
            }
        }
        else
        {
            m_logger.LogError() << "OTATestR::GetField0::" << response.Error().Message();
        }
    }
}
 
void OTATestR::RequestMethod0(const std::int32_t& Arg0)
{
    if (m_found)
    {
        auto request = m_interface->Method0(Arg0);
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "OTATestR::RequestMethod0::Responded";
            
            auto result = response.Value();
            if (m_responderMethod0)
            {
                m_responderMethod0(result);
            }
        }
        else
        {
            m_logger.LogError() << "OTATestR::RequestMethod0::" << response.Error().Message();
        }
    }
}
 
void OTATestR::RegistResponseHandlerMethod0(std::function<void(const eevp::otatest::service::proxy::methods::Method0::Output&)> handler)
{
    m_responderMethod0 = handler;
}
 
} /// namespace port
} /// namespace rootswcomponent
} /// namespace otatestr
 
/// EOF