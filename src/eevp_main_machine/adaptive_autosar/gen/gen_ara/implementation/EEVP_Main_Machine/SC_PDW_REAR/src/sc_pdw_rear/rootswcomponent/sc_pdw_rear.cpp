///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : sc_pdw_rear.cpp
/// SOFTWARE COMPONENT NAME           : SC_PDW_REAR
/// GENERATED DATE                    : 2025-08-30 10:53:31
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// INCLUSION HEADER FILES
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "sc_pdw_rear/rootswcomponent/sc_pdw_rear.h"
 
namespace sc_pdw_rear
{
namespace rootswcomponent
{
 
SC_PDW_REAR::SC_PDW_REAR()
    : m_logger(ara::log::CreateLogger("PDWR", "SWC", ara::log::LogLevel::kVerbose))
    , m_running{false}
    , m_workers(4)
{
}
 
SC_PDW_REAR::~SC_PDW_REAR()
{
}
 
bool SC_PDW_REAR::Initialize()
{
    m_logger.LogVerbose() << "SC_PDW_REAR::Initialize";
    
    bool init = true;
    
    m_PdwRear = std::make_unique<sc_pdw_rear::rootswcomponent::port::PdwRear>();
    m_UssRear = std::make_unique<sc_pdw_rear::rootswcomponent::port::UssRear>();
    m_VehicleInfo = std::make_unique<sc_pdw_rear::rootswcomponent::port::VehicleInfo>();
    
    // put your code for initialization
    
    return init;
}
 
void SC_PDW_REAR::Start()
{
    m_logger.LogVerbose() << "SC_PDW_REAR::Start";
    
    m_PdwRear->Start();
    m_UssRear->Start();
    m_VehicleInfo->Start();
}
 
void SC_PDW_REAR::Terminate()
{
    m_logger.LogVerbose() << "SC_PDW_REAR::Terminate";
    
    // stop running
    m_running = false;
    
    m_PdwRear->Terminate();
    m_UssRear->Terminate();
    m_VehicleInfo->Terminate();
}
 
void SC_PDW_REAR::Run()
{
    m_logger.LogVerbose() << "SC_PDW_REAR::Run";
    
    // start running
    m_running = true;
    
    m_workers.Async([this] { m_PdwRear->SendEventDistanceLevelCyclic(); });
    m_workers.Async([this] { m_PdwRear->NotifyFieldUssStatusCyclic(); });
    m_workers.Async([this] { m_UssRear->ReceiveEventUssRearCyclic(); });
    m_workers.Async([this] { m_VehicleInfo->ReceiveEventVehicleInfoCyclic(); });
    
    m_workers.Wait();
}
 
} /// namespace rootswcomponent
} /// namespace sc_pdw_rear
