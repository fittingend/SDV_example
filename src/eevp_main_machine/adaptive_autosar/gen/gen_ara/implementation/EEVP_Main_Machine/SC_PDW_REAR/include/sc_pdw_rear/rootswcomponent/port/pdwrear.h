///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : pdwrear.h
/// SOFTWARE COMPONENT NAME           : PdwRear
/// GENERATED DATE                    : 2025-08-30 10:53:31
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef PARA_AA_GEN_SOFTWARE_COMPONENT_PPORT_SC_PDW_REAR_ROOTSWCOMPONENT_PDWREAR_H
#define PARA_AA_GEN_SOFTWARE_COMPONENT_PPORT_SC_PDW_REAR_ROOTSWCOMPONENT_PDWREAR_H
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// INCLUSION HEADER FILES
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "eevp/pdw/service/main_pdw_service_skeleton.h"
 
#include "ara/log/logger.h"
 
#include <mutex>
#include <thread>
 
namespace eevp
{
namespace pdw
{
namespace service
{
namespace skeleton
{
 
class Main_PDW_ServiceSkeletonImpl : public Main_PDW_ServiceSkeleton
{
public:
    /// @brief Constructor
    Main_PDW_ServiceSkeletonImpl(ara::core::InstanceSpecifier instanceSpec, ara::com::MethodCallProcessingMode mode = ara::com::MethodCallProcessingMode::kEvent);

    /// @brief Getter for field, UssStatus
    ara::core::Future<fields::UssStatus::FieldType> GetUssStatus();
    
    /// @brief Notifier for field, UssStatus
    void NotifyUssStatus();
    
    /// @brief Update field value by software component, UssStatus
    void UpdateUssStatus(const fields::UssStatus::FieldType& value);
    
private:
    /// @brief Logger for this port
    ara::log::Logger& m_logger;
    
    /// @brief Field, UssStatus
    fields::UssStatus::FieldType m_UssStatus;
    
};
 
} /// namespace skeleton
} /// namespace service
} /// namespace pdw
} /// namespace eevp

namespace sc_pdw_rear
{
namespace rootswcomponent
{
namespace port
{
 
class PdwRear
{
public:
    /// @brief Constructor
    PdwRear();
    
    /// @brief Destructor
    ~PdwRear();
    
    /// @brief Start port
    void Start();
    
    /// @brief Terminate port
    void Terminate();
    
    /// @brief Write event data to buffer, DistanceLevel
    void WriteDataDistanceLevel(const eevp::pdw::service::skeleton::events::DistanceLevel::SampleType& data);
     
    /// @brief Send event cyclic from buffer data, DistanceLevel
    void SendEventDistanceLevelCyclic();
     
    /// @brief Send event directly from buffer data, DistanceLevel
    void SendEventDistanceLevelTriggered();
     
    /// @brief Send event directly with argument, DistanceLevel
    void SendEventDistanceLevelTriggered(const eevp::pdw::service::skeleton::events::DistanceLevel::SampleType& data);
     
    /// @brief Write field value to buffer, UssStatus
    void WriteValueUssStatus(const eevp::pdw::service::skeleton::fields::UssStatus::FieldType& value);
     
    /// @brief Notify field cyclic from buffer, UssStatus
    void NotifyFieldUssStatusCyclic();
     
    /// @brief Notify field directly from buffer data, UssStatus
    void NotifyFieldUssStatusTriggered();
     
    /// @brief Notify field directly with argument, UssStatus
    void NotifyFieldUssStatusTriggered(const eevp::pdw::service::skeleton::fields::UssStatus::FieldType& value);
     
private:
    /// @brief Logger for this port
    ara::log::Logger& m_logger;
    
    /// @brief Flag of port status
    bool m_running;
    
    /// @brief Mutex for this port
    std::mutex m_mutex;
    
    /// @brief AUTOSAR Port Interface
    std::unique_ptr<eevp::pdw::service::skeleton::Main_PDW_ServiceSkeletonImpl> m_interface;
    
    /// @brief Data for event, DistanceLevel
    eevp::pdw::service::skeleton::events::DistanceLevel::SampleType m_DistanceLevelData;
};
 
} /// namespace port
} /// namespace rootswcomponent
} /// namespace sc_pdw_rear
 
#endif /// PARA_AA_GEN_SOFTWARE_COMPONENT_PPORT_SC_PDW_REAR_ROOTSWCOMPONENT_PDWREAR_H