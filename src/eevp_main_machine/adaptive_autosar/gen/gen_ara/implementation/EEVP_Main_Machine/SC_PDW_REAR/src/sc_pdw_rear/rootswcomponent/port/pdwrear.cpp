///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : pdwrear.cpp
/// SOFTWARE COMPONENT NAME           : PdwRear
/// GENERATED DATE                    : 2025-08-30 10:53:31
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "sc_pdw_rear/rootswcomponent/port/pdwrear.h"
 
namespace eevp
{
namespace pdw
{
namespace service
{
namespace skeleton
{
 
Main_PDW_ServiceSkeletonImpl::Main_PDW_ServiceSkeletonImpl(ara::core::InstanceSpecifier instanceSpec, ara::com::MethodCallProcessingMode mode)
    : Main_PDW_ServiceSkeleton(instanceSpec, mode)
    , m_logger(ara::log::CreateLogger("PDWR", "PORT", ara::log::LogLevel::kVerbose))
    , m_UssStatus{eevp::pdw::type::Direction::kFront, eevp::pdw::type::State::NORMAL}
{
    // regist get handler, UssStatus
    auto ussstatus_get_handler = [this]() {
        return GetUssStatus();
    };
    UssStatus.RegisterGetHandler(ussstatus_get_handler);
}
 
ara::core::Future<fields::UssStatus::FieldType> Main_PDW_ServiceSkeletonImpl::GetUssStatus()
{
    m_logger.LogVerbose() << "PdwRear::GetUssStatus::Requested";
    
    ara::core::Promise<fields::UssStatus::FieldType> promise;
    
    promise.set_value(m_UssStatus);
    return promise.get_future();
}
 
void Main_PDW_ServiceSkeletonImpl::NotifyUssStatus()
{
    auto notify = UssStatus.Update(m_UssStatus);
    if (notify.HasValue())
    {
        m_logger.LogVerbose() << "PdwRear::NotifyUssStatus::Update";
    }
    else
    {
        m_logger.LogError() << "PdwRear::NotifyUssStatus::Update::" << notify.Error().Message();
    }
}
 
void Main_PDW_ServiceSkeletonImpl::UpdateUssStatus(const fields::UssStatus::FieldType& value)
{
    m_UssStatus = value;
}
 
} /// namespace skeleton
} /// namespace service
} /// namespace pdw
} /// namespace eevp

namespace sc_pdw_rear
{
namespace rootswcomponent
{
namespace port
{
 
PdwRear::PdwRear()
    : m_logger(ara::log::CreateLogger("PDWR", "PORT", ara::log::LogLevel::kVerbose))
    , m_running{false}
    , m_DistanceLevelData{0U, 0U, 0U, eevp::pdw::type::Direction::kFront}
{
}
 
PdwRear::~PdwRear()
{
}
 
void PdwRear::Start()
{
    m_logger.LogVerbose() << "PdwRear::Start";
    
    // construct skeleton
    ara::core::InstanceSpecifier specifier{"SC_PDW_REAR/RootSwComponent/PdwRear"};
    m_interface = std::make_unique<eevp::pdw::service::skeleton::Main_PDW_ServiceSkeletonImpl>(specifier);
    
    // offer service
    auto offer = m_interface->OfferService();
    if (offer.HasValue())
    {
        m_running = true;
        m_logger.LogVerbose() << "PdwRear::Start::OfferService";
    }
    else
    {
        m_running = false;
        m_logger.LogError() << "PdwRear::Start::OfferService::" << offer.Error().Message();
    }
}
 
void PdwRear::Terminate()
{
    m_logger.LogVerbose() << "PdwRear::Terminate";
    
    // stop port
    m_running = false;
    
    // stop offer service
    m_interface->StopOfferService();
    m_logger.LogVerbose() << "PdwRear::Terminate::StopOfferService";
}
 
void PdwRear::WriteDataDistanceLevel(const eevp::pdw::service::skeleton::events::DistanceLevel::SampleType& data)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_DistanceLevelData = data;
}
 
void PdwRear::SendEventDistanceLevelCyclic()
{
    while (m_running)
    {
        {
            std::lock_guard<std::mutex> lock(m_mutex);
            
            auto send = m_interface->DistanceLevel.Send(m_DistanceLevelData);
            if (send.HasValue())
            {
                m_logger.LogVerbose() << "PdwRear::SendEventDistanceLevelCyclic::Send";
            }
            else
            {
                m_logger.LogError() << "PdwRear::SendEventDistanceLevelCyclic::Send::" << send.Error().Message();
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void PdwRear::SendEventDistanceLevelTriggered()
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    auto send = m_interface->DistanceLevel.Send(m_DistanceLevelData);
    if (send.HasValue())
    {
        m_logger.LogVerbose() << "PdwRear::SendEventDistanceLevelTriggered::Send";
    }
    else
    {
        m_logger.LogError() << "PdwRear::SendEventDistanceLevelTriggered::Send::" << send.Error().Message();
    }
}
 
void PdwRear::SendEventDistanceLevelTriggered(const eevp::pdw::service::skeleton::events::DistanceLevel::SampleType& data)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_DistanceLevelData = data;
    auto send = m_interface->DistanceLevel.Send(m_DistanceLevelData);
    if (send.HasValue())
    {
        m_logger.LogVerbose() << "PdwRear::SendEventDistanceLevelTriggered::Send";
    }
    else
    {
        m_logger.LogError() << "PdwRear::SendEventDistanceLevelTriggered::Send::" << send.Error().Message();
    }
}
 
void PdwRear::WriteValueUssStatus(const eevp::pdw::service::skeleton::fields::UssStatus::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdateUssStatus(value);
}
 
void PdwRear::NotifyFieldUssStatusCyclic()
{
    while (m_running)
    {
        {
            std::lock_guard<std::mutex> lock(m_mutex);
            
            m_interface->NotifyUssStatus();
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void PdwRear::NotifyFieldUssStatusTriggered()
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->NotifyUssStatus();
}
 
void PdwRear::NotifyFieldUssStatusTriggered(const eevp::pdw::service::skeleton::fields::UssStatus::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdateUssStatus(value);
    m_interface->NotifyUssStatus();
}
 
} /// namespace port
} /// namespace rootswcomponent
} /// namespace sc_pdw_rear
 
/// EOF