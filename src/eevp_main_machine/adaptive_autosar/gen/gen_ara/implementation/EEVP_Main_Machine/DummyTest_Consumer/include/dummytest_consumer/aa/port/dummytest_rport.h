///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : dummytest_rport.h
/// SOFTWARE COMPONENT NAME           : DummyTest_RPort
/// GENERATED DATE                    : 2025-08-30 10:53:18
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef PARA_AA_GEN_SOFTWARE_COMPONENT_RPORT_DUMMYTEST_CONSUMER_AA_DUMMYTEST_RPORT_H
#define PARA_AA_GEN_SOFTWARE_COMPONENT_RPORT_DUMMYTEST_CONSUMER_AA_DUMMYTEST_RPORT_H
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// INCLUSION HEADER FILES
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "test/dummy/dummytest_proxy.h"
 
#include "ara/log/logger.h"
 
#include <mutex>
#include <thread>
 
namespace dummytest_consumer
{
namespace aa
{
namespace port
{
 
class DummyTest_RPort
{
public:
    /// @brief Constructor
    DummyTest_RPort();
    
    /// @brief Destructor
    ~DummyTest_RPort();
    
    /// @brief Start port
    void Start();
    
    /// @brief Terminate port
    void Terminate();
    
    /// @brief Subscribe event, DeviceEvent
    void SubscribeDeviceEvent();
     
    /// @brief Stop event subscription, DeviceEvent
    void StopSubscribeDeviceEvent();
     
    /// @brief Event receive handler, DeviceEvent
    void ReceiveEventDeviceEventTriggered();
     
    /// @brief Event receive handler, DeviceEvent
    void ReceiveEventDeviceEventCyclic();
     
    /// @brief Read event data, DeviceEvent
    void ReadDataDeviceEvent(ara::com::SamplePtr<test::dummy::proxy::events::DeviceEvent::SampleType const> samplePtr);
     
    /// @brief Regist callback from software component
    void RegistEventHandlerDeviceEvent(std::function<void(const test::dummy::proxy::events::DeviceEvent::SampleType&)> handler);
    
    /// @brief Subscribe field notification, DeviceField
    void SubscribeDeviceField();
     
    /// @brief Stop field subscription, DeviceField
    void StopSubscribeDeviceField();
     
    /// @brief Field notification receive handler, DeviceField
    void ReceiveFieldDeviceFieldTriggered();
     
    /// @brief Field notification receive handler, DeviceField
    void ReceiveFieldDeviceFieldCyclic();
     
    /// @brief Read field notification value, DeviceField
    void ReadValueDeviceField(ara::com::SamplePtr<test::dummy::proxy::fields::DeviceField::FieldType const> samplePtr);
     
    /// @brief Regist callback from software component
    void RegistFieldHandlerDeviceField(std::function<void(const test::dummy::proxy::fields::DeviceField::FieldType&)> handler);
    
    /// @brief Getter method using by software component, DeviceField
    void GetDeviceField();
    
    /// @brief Setter method using by software component, DeviceField
    void SetDeviceField(const test::dummy::proxy::fields::DeviceField::FieldType& value);
    
    /// @brief Request with Response method using by software component, DeviceMethod
    void RequestDeviceMethod(const std::int16_t& DeviceNumber);
     
    /// @brief Regist callback from software component
    void RegistResponseHandlerDeviceMethod(std::function<void(const test::dummy::proxy::methods::DeviceMethod::Output&)> handler);
    
private:
    /// @brief Callback for find service
    void Find(ara::com::ServiceHandleContainer<test::dummy::proxy::DummyTestProxy::HandleType> handles,
              ara::com::FindServiceHandle findHandle);
    
    /// @brief Callback for event receiver, DeviceEvent
    void RegistReceiverDeviceEvent();
    
    /// @brief Callback for field notification receiver, DeviceField
    void RegistReceiverDeviceField();
    
private:
    /// @brief Logger for this port
    ara::log::Logger& m_logger;
    
    /// @brief Flag of port status
    bool m_running;
    
    /// @brief Flag of find service status
    bool m_found;
    
    /// @brief Mutex for this port
    std::mutex m_mutex; 
    
    /// @brief AUTOSAR Port Interface
    std::unique_ptr<test::dummy::proxy::DummyTestProxy> m_interface;
    
    /// @brief Find service handle
    std::unique_ptr<ara::com::FindServiceHandle> m_findHandle;
    
    /// @brief Callback from software component, DeviceEvent
    std::function<void(const test::dummy::proxy::events::DeviceEvent::SampleType&)> m_receiverDeviceEvent;
    
    /// @brief Callback from software component, DeviceField
    std::function<void(const test::dummy::proxy::fields::DeviceField::FieldType&)> m_receiverDeviceField;
    
    /// @brief Callback from software component, DeviceMethod
    std::function<void(const test::dummy::proxy::methods::DeviceMethod::Output&)> m_responderDeviceMethod;
};
 
} /// namespace port
} /// namespace aa
} /// namespace dummytest_consumer
 
#endif /// PARA_AA_GEN_SOFTWARE_COMPONENT_RPORT_DUMMYTEST_CONSUMER_AA_DUMMYTEST_RPORT_H