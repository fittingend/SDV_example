///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : pport_soa_wiper.cpp
/// SOFTWARE COMPONENT NAME           : PPort_SOA_Wiper
/// GENERATED DATE                    : 2025-08-30 10:53:44
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "soa_wiper/aa/port/pport_soa_wiper.h"
 
namespace eevp
{
namespace control
{
namespace skeleton
{
 
SoaWiperSkeletonImpl::SoaWiperSkeletonImpl(ara::core::InstanceSpecifier instanceSpec, ara::com::MethodCallProcessingMode mode)
    : SoaWiperSkeleton(instanceSpec, mode)
    , m_logger(ara::log::CreateLogger("SWIP", "PORT", ara::log::LogLevel::kVerbose))
    , m_soaWiperDeviceNormal{eevp::control::SoaDeviceIsNormal::kNORMAL}
    , m_soaWiperStatus{false, eevp::control::SoaWiperMode::kOFF}
    , m_soaWiperSwVersion{0U}
{
    // regist get handler, soaWiperDeviceNormal
    auto soawiperdevicenormal_get_handler = [this]() {
        return GetsoaWiperDeviceNormal();
    };
    soaWiperDeviceNormal.RegisterGetHandler(soawiperdevicenormal_get_handler);
    
    // regist get handler, soaWiperStatus
    auto soawiperstatus_get_handler = [this]() {
        return GetsoaWiperStatus();
    };
    soaWiperStatus.RegisterGetHandler(soawiperstatus_get_handler);
    
    // regist get handler, soaWiperSwVersion
    auto soawiperswversion_get_handler = [this]() {
        return GetsoaWiperSwVersion();
    };
    soaWiperSwVersion.RegisterGetHandler(soawiperswversion_get_handler);
}
 
void SoaWiperSkeletonImpl::RequestWiperOperation(const eevp::control::SoaWiperMode& mode)
{
    m_logger.LogVerbose() << "PPort_SOA_Wiper::RequestWiperOperation::Triggered";
    
    // put your logic
}
 
void SoaWiperSkeletonImpl::SetWiperAutoSpeed(const bool& isAutoSpeed)
{
    m_logger.LogVerbose() << "PPort_SOA_Wiper::SetWiperAutoSpeed::Triggered";
    
    // put your logic
}
 
ara::core::Future<fields::soaWiperDeviceNormal::FieldType> SoaWiperSkeletonImpl::GetsoaWiperDeviceNormal()
{
    m_logger.LogVerbose() << "PPort_SOA_Wiper::GetsoaWiperDeviceNormal::Requested";
    
    ara::core::Promise<fields::soaWiperDeviceNormal::FieldType> promise;
    
    promise.set_value(m_soaWiperDeviceNormal);
    return promise.get_future();
}
 
void SoaWiperSkeletonImpl::NotifysoaWiperDeviceNormal()
{
    auto notify = soaWiperDeviceNormal.Update(m_soaWiperDeviceNormal);
    if (notify.HasValue())
    {
        m_logger.LogVerbose() << "PPort_SOA_Wiper::NotifysoaWiperDeviceNormal::Update";
    }
    else
    {
        m_logger.LogError() << "PPort_SOA_Wiper::NotifysoaWiperDeviceNormal::Update::" << notify.Error().Message();
    }
}
 
void SoaWiperSkeletonImpl::UpdatesoaWiperDeviceNormal(const fields::soaWiperDeviceNormal::FieldType& value)
{
    m_soaWiperDeviceNormal = value;
}
 
ara::core::Future<fields::soaWiperStatus::FieldType> SoaWiperSkeletonImpl::GetsoaWiperStatus()
{
    m_logger.LogVerbose() << "PPort_SOA_Wiper::GetsoaWiperStatus::Requested";
    
    ara::core::Promise<fields::soaWiperStatus::FieldType> promise;
    
    promise.set_value(m_soaWiperStatus);
    return promise.get_future();
}
 
void SoaWiperSkeletonImpl::NotifysoaWiperStatus()
{
    auto notify = soaWiperStatus.Update(m_soaWiperStatus);
    if (notify.HasValue())
    {
        m_logger.LogVerbose() << "PPort_SOA_Wiper::NotifysoaWiperStatus::Update";
    }
    else
    {
        m_logger.LogError() << "PPort_SOA_Wiper::NotifysoaWiperStatus::Update::" << notify.Error().Message();
    }
}
 
void SoaWiperSkeletonImpl::UpdatesoaWiperStatus(const fields::soaWiperStatus::FieldType& value)
{
    m_soaWiperStatus = value;
}
 
ara::core::Future<fields::soaWiperSwVersion::FieldType> SoaWiperSkeletonImpl::GetsoaWiperSwVersion()
{
    m_logger.LogVerbose() << "PPort_SOA_Wiper::GetsoaWiperSwVersion::Requested";
    
    ara::core::Promise<fields::soaWiperSwVersion::FieldType> promise;
    
    promise.set_value(m_soaWiperSwVersion);
    return promise.get_future();
}
 
void SoaWiperSkeletonImpl::NotifysoaWiperSwVersion()
{
    auto notify = soaWiperSwVersion.Update(m_soaWiperSwVersion);
    if (notify.HasValue())
    {
        m_logger.LogVerbose() << "PPort_SOA_Wiper::NotifysoaWiperSwVersion::Update";
    }
    else
    {
        m_logger.LogError() << "PPort_SOA_Wiper::NotifysoaWiperSwVersion::Update::" << notify.Error().Message();
    }
}
 
void SoaWiperSkeletonImpl::UpdatesoaWiperSwVersion(const fields::soaWiperSwVersion::FieldType& value)
{
    m_soaWiperSwVersion = value;
}
 
} /// namespace skeleton
} /// namespace control
} /// namespace eevp

namespace soa_wiper
{
namespace aa
{
namespace port
{
 
PPort_SOA_Wiper::PPort_SOA_Wiper()
    : m_logger(ara::log::CreateLogger("SWIP", "PORT", ara::log::LogLevel::kVerbose))
    , m_running{false}
{
}
 
PPort_SOA_Wiper::~PPort_SOA_Wiper()
{
}
 
void PPort_SOA_Wiper::Start()
{
    m_logger.LogVerbose() << "PPort_SOA_Wiper::Start";
    
    // construct skeleton
    ara::core::InstanceSpecifier specifier{"SOA_Wiper/AA/PPort_SOA_Wiper"};
    m_interface = std::make_unique<eevp::control::skeleton::SoaWiperSkeletonImpl>(specifier);
    
    // offer service
    auto offer = m_interface->OfferService();
    if (offer.HasValue())
    {
        m_running = true;
        m_logger.LogVerbose() << "PPort_SOA_Wiper::Start::OfferService";
    }
    else
    {
        m_running = false;
        m_logger.LogError() << "PPort_SOA_Wiper::Start::OfferService::" << offer.Error().Message();
    }
}
 
void PPort_SOA_Wiper::Terminate()
{
    m_logger.LogVerbose() << "PPort_SOA_Wiper::Terminate";
    
    // stop port
    m_running = false;
    
    // stop offer service
    m_interface->StopOfferService();
    m_logger.LogVerbose() << "PPort_SOA_Wiper::Terminate::StopOfferService";
}
 
void PPort_SOA_Wiper::WriteValuesoaWiperDeviceNormal(const eevp::control::skeleton::fields::soaWiperDeviceNormal::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdatesoaWiperDeviceNormal(value);
}
 
void PPort_SOA_Wiper::NotifyFieldsoaWiperDeviceNormalCyclic()
{
    while (m_running)
    {
        {
            std::lock_guard<std::mutex> lock(m_mutex);
            
            m_interface->NotifysoaWiperDeviceNormal();
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void PPort_SOA_Wiper::NotifyFieldsoaWiperDeviceNormalTriggered()
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->NotifysoaWiperDeviceNormal();
}
 
void PPort_SOA_Wiper::NotifyFieldsoaWiperDeviceNormalTriggered(const eevp::control::skeleton::fields::soaWiperDeviceNormal::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdatesoaWiperDeviceNormal(value);
    m_interface->NotifysoaWiperDeviceNormal();
}
 
void PPort_SOA_Wiper::WriteValuesoaWiperStatus(const eevp::control::skeleton::fields::soaWiperStatus::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdatesoaWiperStatus(value);
}
 
void PPort_SOA_Wiper::NotifyFieldsoaWiperStatusCyclic()
{
    while (m_running)
    {
        {
            std::lock_guard<std::mutex> lock(m_mutex);
            
            m_interface->NotifysoaWiperStatus();
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void PPort_SOA_Wiper::NotifyFieldsoaWiperStatusTriggered()
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->NotifysoaWiperStatus();
}
 
void PPort_SOA_Wiper::NotifyFieldsoaWiperStatusTriggered(const eevp::control::skeleton::fields::soaWiperStatus::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdatesoaWiperStatus(value);
    m_interface->NotifysoaWiperStatus();
}
 
void PPort_SOA_Wiper::WriteValuesoaWiperSwVersion(const eevp::control::skeleton::fields::soaWiperSwVersion::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdatesoaWiperSwVersion(value);
}
 
void PPort_SOA_Wiper::NotifyFieldsoaWiperSwVersionCyclic()
{
    while (m_running)
    {
        {
            std::lock_guard<std::mutex> lock(m_mutex);
            
            m_interface->NotifysoaWiperSwVersion();
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void PPort_SOA_Wiper::NotifyFieldsoaWiperSwVersionTriggered()
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->NotifysoaWiperSwVersion();
}
 
void PPort_SOA_Wiper::NotifyFieldsoaWiperSwVersionTriggered(const eevp::control::skeleton::fields::soaWiperSwVersion::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdatesoaWiperSwVersion(value);
    m_interface->NotifysoaWiperSwVersion();
}
 
} /// namespace port
} /// namespace aa
} /// namespace soa_wiper
 
/// EOF