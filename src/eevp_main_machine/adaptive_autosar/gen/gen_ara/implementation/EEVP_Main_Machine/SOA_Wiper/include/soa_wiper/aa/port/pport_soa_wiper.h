///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : pport_soa_wiper.h
/// SOFTWARE COMPONENT NAME           : PPort_SOA_Wiper
/// GENERATED DATE                    : 2025-08-30 10:53:43
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef PARA_AA_GEN_SOFTWARE_COMPONENT_PPORT_SOA_WIPER_AA_PPORT_SOA_WIPER_H
#define PARA_AA_GEN_SOFTWARE_COMPONENT_PPORT_SOA_WIPER_AA_PPORT_SOA_WIPER_H
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// INCLUSION HEADER FILES
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "eevp/control/soawiper_skeleton.h"
 
#include "ara/log/logger.h"
 
#include <mutex>
#include <thread>
 
namespace eevp
{
namespace control
{
namespace skeleton
{
 
class SoaWiperSkeletonImpl : public SoaWiperSkeleton
{
public:
    /// @brief Constructor
    SoaWiperSkeletonImpl(ara::core::InstanceSpecifier instanceSpec, ara::com::MethodCallProcessingMode mode = ara::com::MethodCallProcessingMode::kEvent);
    
    /// @brief Fire & Forget method, RequestWiperOperation
    void RequestWiperOperation(const eevp::control::SoaWiperMode& mode) override;
    
    /// @brief Fire & Forget method, SetWiperAutoSpeed
    void SetWiperAutoSpeed(const bool& isAutoSpeed) override;
    
    /// @brief Getter for field, soaWiperDeviceNormal
    ara::core::Future<fields::soaWiperDeviceNormal::FieldType> GetsoaWiperDeviceNormal();
    
    /// @brief Notifier for field, soaWiperDeviceNormal
    void NotifysoaWiperDeviceNormal();
    
    /// @brief Update field value by software component, soaWiperDeviceNormal
    void UpdatesoaWiperDeviceNormal(const fields::soaWiperDeviceNormal::FieldType& value);
    
    /// @brief Getter for field, soaWiperStatus
    ara::core::Future<fields::soaWiperStatus::FieldType> GetsoaWiperStatus();
    
    /// @brief Notifier for field, soaWiperStatus
    void NotifysoaWiperStatus();
    
    /// @brief Update field value by software component, soaWiperStatus
    void UpdatesoaWiperStatus(const fields::soaWiperStatus::FieldType& value);
    
    /// @brief Getter for field, soaWiperSwVersion
    ara::core::Future<fields::soaWiperSwVersion::FieldType> GetsoaWiperSwVersion();
    
    /// @brief Notifier for field, soaWiperSwVersion
    void NotifysoaWiperSwVersion();
    
    /// @brief Update field value by software component, soaWiperSwVersion
    void UpdatesoaWiperSwVersion(const fields::soaWiperSwVersion::FieldType& value);
    
private:
    /// @brief Logger for this port
    ara::log::Logger& m_logger;
    
    /// @brief Field, soaWiperDeviceNormal
    fields::soaWiperDeviceNormal::FieldType m_soaWiperDeviceNormal;
    
    /// @brief Field, soaWiperStatus
    fields::soaWiperStatus::FieldType m_soaWiperStatus;
    
    /// @brief Field, soaWiperSwVersion
    fields::soaWiperSwVersion::FieldType m_soaWiperSwVersion;
    
};
 
} /// namespace skeleton
} /// namespace control
} /// namespace eevp

namespace soa_wiper
{
namespace aa
{
namespace port
{
 
class PPort_SOA_Wiper
{
public:
    /// @brief Constructor
    PPort_SOA_Wiper();
    
    /// @brief Destructor
    ~PPort_SOA_Wiper();
    
    /// @brief Start port
    void Start();
    
    /// @brief Terminate port
    void Terminate();
    
    /// @brief Write field value to buffer, soaWiperDeviceNormal
    void WriteValuesoaWiperDeviceNormal(const eevp::control::skeleton::fields::soaWiperDeviceNormal::FieldType& value);
     
    /// @brief Notify field cyclic from buffer, soaWiperDeviceNormal
    void NotifyFieldsoaWiperDeviceNormalCyclic();
     
    /// @brief Notify field directly from buffer data, soaWiperDeviceNormal
    void NotifyFieldsoaWiperDeviceNormalTriggered();
     
    /// @brief Notify field directly with argument, soaWiperDeviceNormal
    void NotifyFieldsoaWiperDeviceNormalTriggered(const eevp::control::skeleton::fields::soaWiperDeviceNormal::FieldType& value);

    /// @brief Write field value to buffer, soaWiperStatus
    void WriteValuesoaWiperStatus(const eevp::control::skeleton::fields::soaWiperStatus::FieldType& value);
     
    /// @brief Notify field cyclic from buffer, soaWiperStatus
    void NotifyFieldsoaWiperStatusCyclic();
     
    /// @brief Notify field directly from buffer data, soaWiperStatus
    void NotifyFieldsoaWiperStatusTriggered();
     
    /// @brief Notify field directly with argument, soaWiperStatus
    void NotifyFieldsoaWiperStatusTriggered(const eevp::control::skeleton::fields::soaWiperStatus::FieldType& value);

    /// @brief Write field value to buffer, soaWiperSwVersion
    void WriteValuesoaWiperSwVersion(const eevp::control::skeleton::fields::soaWiperSwVersion::FieldType& value);
     
    /// @brief Notify field cyclic from buffer, soaWiperSwVersion
    void NotifyFieldsoaWiperSwVersionCyclic();
     
    /// @brief Notify field directly from buffer data, soaWiperSwVersion
    void NotifyFieldsoaWiperSwVersionTriggered();
     
    /// @brief Notify field directly with argument, soaWiperSwVersion
    void NotifyFieldsoaWiperSwVersionTriggered(const eevp::control::skeleton::fields::soaWiperSwVersion::FieldType& value);
     
private:
    /// @brief Logger for this port
    ara::log::Logger& m_logger;
    
    /// @brief Flag of port status
    bool m_running;
    
    /// @brief Mutex for this port
    std::mutex m_mutex;
    
    /// @brief AUTOSAR Port Interface
    std::unique_ptr<eevp::control::skeleton::SoaWiperSkeletonImpl> m_interface;
    
};
 
} /// namespace port
} /// namespace aa
} /// namespace soa_wiper
 
#endif /// PARA_AA_GEN_SOFTWARE_COMPONENT_PPORT_SOA_WIPER_AA_PPORT_SOA_WIPER_H