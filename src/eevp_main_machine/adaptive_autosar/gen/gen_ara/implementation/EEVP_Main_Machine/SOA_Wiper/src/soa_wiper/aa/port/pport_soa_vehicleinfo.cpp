///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : pport_soa_vehicleinfo.cpp
/// SOFTWARE COMPONENT NAME           : PPort_SOA_VehicleInfo
/// GENERATED DATE                    : 2025-08-30 10:53:44
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "soa_wiper/aa/port/pport_soa_vehicleinfo.h"
 
namespace eevp
{
namespace control
{
namespace skeleton
{
 
SoaVehicleInfoSkeletonImpl::SoaVehicleInfoSkeletonImpl(ara::core::InstanceSpecifier instanceSpec, ara::com::MethodCallProcessingMode mode)
    : SoaVehicleInfoSkeleton(instanceSpec, mode)
    , m_logger(ara::log::CreateLogger("SWIP", "PORT", ara::log::LogLevel::kVerbose))
    , m_soaVehicleInfo{0U, 0U, 0U, 0U, 0U}
{
    // regist get handler, soaVehicleInfo
    auto soavehicleinfo_get_handler = [this]() {
        return GetsoaVehicleInfo();
    };
    soaVehicleInfo.RegisterGetHandler(soavehicleinfo_get_handler);
}
 
ara::core::Future<fields::soaVehicleInfo::FieldType> SoaVehicleInfoSkeletonImpl::GetsoaVehicleInfo()
{
    m_logger.LogVerbose() << "PPort_SOA_VehicleInfo::GetsoaVehicleInfo::Requested";
    
    ara::core::Promise<fields::soaVehicleInfo::FieldType> promise;
    
    promise.set_value(m_soaVehicleInfo);
    return promise.get_future();
}
 
void SoaVehicleInfoSkeletonImpl::NotifysoaVehicleInfo()
{
    auto notify = soaVehicleInfo.Update(m_soaVehicleInfo);
    if (notify.HasValue())
    {
        m_logger.LogVerbose() << "PPort_SOA_VehicleInfo::NotifysoaVehicleInfo::Update";
    }
    else
    {
        m_logger.LogError() << "PPort_SOA_VehicleInfo::NotifysoaVehicleInfo::Update::" << notify.Error().Message();
    }
}
 
void SoaVehicleInfoSkeletonImpl::UpdatesoaVehicleInfo(const fields::soaVehicleInfo::FieldType& value)
{
    m_soaVehicleInfo = value;
}
 
} /// namespace skeleton
} /// namespace control
} /// namespace eevp

namespace soa_wiper
{
namespace aa
{
namespace port
{
 
PPort_SOA_VehicleInfo::PPort_SOA_VehicleInfo()
    : m_logger(ara::log::CreateLogger("SWIP", "PORT", ara::log::LogLevel::kVerbose))
    , m_running{false}
{
}
 
PPort_SOA_VehicleInfo::~PPort_SOA_VehicleInfo()
{
}
 
void PPort_SOA_VehicleInfo::Start()
{
    m_logger.LogVerbose() << "PPort_SOA_VehicleInfo::Start";
    
    // construct skeleton
    ara::core::InstanceSpecifier specifier{"SOA_Wiper/AA/PPort_SOA_VehicleInfo"};
    m_interface = std::make_unique<eevp::control::skeleton::SoaVehicleInfoSkeletonImpl>(specifier);
    
    // offer service
    auto offer = m_interface->OfferService();
    if (offer.HasValue())
    {
        m_running = true;
        m_logger.LogVerbose() << "PPort_SOA_VehicleInfo::Start::OfferService";
    }
    else
    {
        m_running = false;
        m_logger.LogError() << "PPort_SOA_VehicleInfo::Start::OfferService::" << offer.Error().Message();
    }
}
 
void PPort_SOA_VehicleInfo::Terminate()
{
    m_logger.LogVerbose() << "PPort_SOA_VehicleInfo::Terminate";
    
    // stop port
    m_running = false;
    
    // stop offer service
    m_interface->StopOfferService();
    m_logger.LogVerbose() << "PPort_SOA_VehicleInfo::Terminate::StopOfferService";
}
 
void PPort_SOA_VehicleInfo::WriteValuesoaVehicleInfo(const eevp::control::skeleton::fields::soaVehicleInfo::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdatesoaVehicleInfo(value);
}
 
void PPort_SOA_VehicleInfo::NotifyFieldsoaVehicleInfoCyclic()
{
    while (m_running)
    {
        {
            std::lock_guard<std::mutex> lock(m_mutex);
            
            m_interface->NotifysoaVehicleInfo();
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void PPort_SOA_VehicleInfo::NotifyFieldsoaVehicleInfoTriggered()
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->NotifysoaVehicleInfo();
}
 
void PPort_SOA_VehicleInfo::NotifyFieldsoaVehicleInfoTriggered(const eevp::control::skeleton::fields::soaVehicleInfo::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdatesoaVehicleInfo(value);
    m_interface->NotifysoaVehicleInfo();
}
 
} /// namespace port
} /// namespace aa
} /// namespace soa_wiper
 
/// EOF