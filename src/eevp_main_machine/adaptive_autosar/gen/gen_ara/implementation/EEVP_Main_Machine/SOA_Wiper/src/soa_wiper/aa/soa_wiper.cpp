///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : soa_wiper.cpp
/// SOFTWARE COMPONENT NAME           : SOA_Wiper
/// GENERATED DATE                    : 2025-08-30 10:53:44
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// INCLUSION HEADER FILES
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "soa_wiper/aa/soa_wiper.h"
 
namespace soa_wiper
{
namespace aa
{
 
SOA_Wiper::SOA_Wiper()
    : m_logger(ara::log::CreateLogger("SWIP", "SWC", ara::log::LogLevel::kVerbose))
    , m_running{false}
    , m_workers(7)
{
}
 
SOA_Wiper::~SOA_Wiper()
{
}
 
bool SOA_Wiper::Initialize()
{
    m_logger.LogVerbose() << "SOA_Wiper::Initialize";
    
    bool init = true;
    
    m_PPort_SOA_VehicleInfo = std::make_unique<soa_wiper::aa::port::PPort_SOA_VehicleInfo>();
    m_PPort_SOA_Wiper = std::make_unique<soa_wiper::aa::port::PPort_SOA_Wiper>();
    m_RPort_Zone1Mfsw = std::make_unique<soa_wiper::aa::port::RPort_Zone1Mfsw>();
    m_RPort_Zone1VehicleInfo = std::make_unique<soa_wiper::aa::port::RPort_Zone1VehicleInfo>();
    m_RPort_Zone4Wiper = std::make_unique<soa_wiper::aa::port::RPort_Zone4Wiper>();
    
    // put your code for initialization
    
    return init;
}
 
void SOA_Wiper::Start()
{
    m_logger.LogVerbose() << "SOA_Wiper::Start";
    
    m_PPort_SOA_VehicleInfo->Start();
    m_PPort_SOA_Wiper->Start();
    m_RPort_Zone1Mfsw->Start();
    m_RPort_Zone1VehicleInfo->Start();
    m_RPort_Zone4Wiper->Start();
}
 
void SOA_Wiper::Terminate()
{
    m_logger.LogVerbose() << "SOA_Wiper::Terminate";
    
    // stop running
    m_running = false;
    
    m_PPort_SOA_VehicleInfo->Terminate();
    m_PPort_SOA_Wiper->Terminate();
    m_RPort_Zone1Mfsw->Terminate();
    m_RPort_Zone1VehicleInfo->Terminate();
    m_RPort_Zone4Wiper->Terminate();
}
 
void SOA_Wiper::Run()
{
    m_logger.LogVerbose() << "SOA_Wiper::Run";
    
    // start running
    m_running = true;
    
    m_workers.Async([this] { m_PPort_SOA_VehicleInfo->NotifyFieldsoaVehicleInfoCyclic(); });
    m_workers.Async([this] { m_PPort_SOA_Wiper->NotifyFieldsoaWiperDeviceNormalCyclic(); });
    m_workers.Async([this] { m_PPort_SOA_Wiper->NotifyFieldsoaWiperStatusCyclic(); });
    m_workers.Async([this] { m_PPort_SOA_Wiper->NotifyFieldsoaWiperSwVersionCyclic(); });
    m_workers.Async([this] { m_RPort_Zone1Mfsw->ReceiveEventonMfswInputCyclic(); });
    m_workers.Async([this] { m_RPort_Zone1VehicleInfo->ReceiveEventVehicleInfoCyclic(); });
    m_workers.Async([this] { m_RPort_Zone4Wiper->ReceiveFieldzone4WiperOpStatusCyclic(); });
    
    m_workers.Wait();
}
 
} /// namespace aa
} /// namespace soa_wiper
