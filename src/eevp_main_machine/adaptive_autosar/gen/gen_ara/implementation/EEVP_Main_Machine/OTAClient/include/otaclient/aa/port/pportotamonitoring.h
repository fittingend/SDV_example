///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : pportotamonitoring.h
/// SOFTWARE COMPONENT NAME           : PPortOtaMonitoring
/// GENERATED DATE                    : 2025-08-30 10:53:26
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef PARA_AA_GEN_SOFTWARE_COMPONENT_PPORT_OTACLIENT_AA_PPORTOTAMONITORING_H
#define PARA_AA_GEN_SOFTWARE_COMPONENT_PPORT_OTACLIENT_AA_PPORTOTAMONITORING_H
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// INCLUSION HEADER FILES
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "eevp/ota/monitoring/service/otamonitoring_skeleton.h"
 
#include "ara/log/logger.h"
 
#include <mutex>
#include <thread>
 
namespace eevp
{
namespace ota
{
namespace monitoring
{
namespace service
{
namespace skeleton
{
 
class OtaMonitoringSkeletonImpl : public OtaMonitoringSkeleton
{
public:
    /// @brief Constructor
    OtaMonitoringSkeletonImpl(ara::core::InstanceSpecifier instanceSpec, ara::com::MethodCallProcessingMode mode = ara::com::MethodCallProcessingMode::kEvent);
    
    /// @brief Request with Response method, requestServiceInstall
    ara::core::Future<OtaMonitoringSkeleton::requestServiceInstallOutput> requestServiceInstall(const eevp::type::String& serviceName) override;
    
    /// @brief Request with Response method, requestServiceUpdate
    ara::core::Future<OtaMonitoringSkeleton::requestServiceUpdateOutput> requestServiceUpdate(const eevp::type::String& serviceName) override;
    
    /// @brief Request with Response method, requestVersionInfo
    ara::core::Future<OtaMonitoringSkeleton::requestVersionInfoOutput> requestVersionInfo() override;
    
    /// @brief Request with Response method, resetUcmTest
    ara::core::Future<OtaMonitoringSkeleton::resetUcmTestOutput> resetUcmTest() override;

private:
    /// @brief Logger for this port
    ara::log::Logger& m_logger;

};
 
} /// namespace skeleton
} /// namespace service
} /// namespace monitoring
} /// namespace ota
} /// namespace eevp

namespace otaclient
{
namespace aa
{
namespace port
{
 
class PPortOtaMonitoring
{
public:
    /// @brief Constructor
    PPortOtaMonitoring();
    
    /// @brief Destructor
    ~PPortOtaMonitoring();
    
    /// @brief Start port
    void Start();
    
    /// @brief Terminate port
    void Terminate();
    
    /// @brief Write event data to buffer, notifyServiceEvent
    void WriteDatanotifyServiceEvent(const eevp::ota::monitoring::service::skeleton::events::notifyServiceEvent::SampleType& data);
     
    /// @brief Send event cyclic from buffer data, notifyServiceEvent
    void SendEventnotifyServiceEventCyclic();
     
    /// @brief Send event directly from buffer data, notifyServiceEvent
    void SendEventnotifyServiceEventTriggered();
     
    /// @brief Send event directly with argument, notifyServiceEvent
    void SendEventnotifyServiceEventTriggered(const eevp::ota::monitoring::service::skeleton::events::notifyServiceEvent::SampleType& data);

    /// @brief Write event data to buffer, notifyUpdatableService
    void WriteDatanotifyUpdatableService(const eevp::ota::monitoring::service::skeleton::events::notifyUpdatableService::SampleType& data);
     
    /// @brief Send event cyclic from buffer data, notifyUpdatableService
    void SendEventnotifyUpdatableServiceCyclic();
     
    /// @brief Send event directly from buffer data, notifyUpdatableService
    void SendEventnotifyUpdatableServiceTriggered();
     
    /// @brief Send event directly with argument, notifyUpdatableService
    void SendEventnotifyUpdatableServiceTriggered(const eevp::ota::monitoring::service::skeleton::events::notifyUpdatableService::SampleType& data);

    /// @brief Write event data to buffer, resetUcmCompleted
    void WriteDataresetUcmCompleted(const eevp::ota::monitoring::service::skeleton::events::resetUcmCompleted::SampleType& data);
     
    /// @brief Send event cyclic from buffer data, resetUcmCompleted
    void SendEventresetUcmCompletedCyclic();
     
    /// @brief Send event directly from buffer data, resetUcmCompleted
    void SendEventresetUcmCompletedTriggered();
     
    /// @brief Send event directly with argument, resetUcmCompleted
    void SendEventresetUcmCompletedTriggered(const eevp::ota::monitoring::service::skeleton::events::resetUcmCompleted::SampleType& data);
     
private:
    /// @brief Logger for this port
    ara::log::Logger& m_logger;
    
    /// @brief Flag of port status
    bool m_running;
    
    /// @brief Mutex for this port
    std::mutex m_mutex;
    
    /// @brief AUTOSAR Port Interface
    std::unique_ptr<eevp::ota::monitoring::service::skeleton::OtaMonitoringSkeletonImpl> m_interface;
    
    /// @brief Data for event, notifyServiceEvent
    eevp::ota::monitoring::service::skeleton::events::notifyServiceEvent::SampleType m_notifyServiceEventData;
    
    /// @brief Data for event, notifyUpdatableService
    eevp::ota::monitoring::service::skeleton::events::notifyUpdatableService::SampleType m_notifyUpdatableServiceData;
    
    /// @brief Data for event, resetUcmCompleted
    eevp::ota::monitoring::service::skeleton::events::resetUcmCompleted::SampleType m_resetUcmCompletedData;
};
 
} /// namespace port
} /// namespace aa
} /// namespace otaclient
 
#endif /// PARA_AA_GEN_SOFTWARE_COMPONENT_PPORT_OTACLIENT_AA_PPORTOTAMONITORING_H