///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : vehiclepackagemanagement.h
/// SOFTWARE COMPONENT NAME           : VehiclePackageManagement
/// GENERATED DATE                    : 2025-08-30 10:53:26
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef PARA_AA_GEN_SOFTWARE_COMPONENT_RPORT_OTACLIENT_AA_VEHICLEPACKAGEMANAGEMENT_H
#define PARA_AA_GEN_SOFTWARE_COMPONENT_RPORT_OTACLIENT_AA_VEHICLEPACKAGEMANAGEMENT_H
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// INCLUSION HEADER FILES
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "ara/vucm/pkgmgr/vehiclepackagemanagement_proxy.h"
 
#include "ara/log/logger.h"
 
#include <mutex>
#include <thread>
 
namespace otaclient
{
namespace aa
{
namespace port
{
 
class VehiclePackageManagement
{
public:
    /// @brief Constructor
    VehiclePackageManagement();
    
    /// @brief Destructor
    ~VehiclePackageManagement();
    
    /// @brief Start port
    void Start();
    
    /// @brief Terminate port
    void Terminate();

    /// @brief Subscribe field notification, RequestedPackage
    void SubscribeRequestedPackage();
     
    /// @brief Stop field subscription, RequestedPackage
    void StopSubscribeRequestedPackage();
     
    /// @brief Field notification receive handler, RequestedPackage
    void ReceiveFieldRequestedPackageTriggered();
     
    /// @brief Field notification receive handler, RequestedPackage
    void ReceiveFieldRequestedPackageCyclic();
     
    /// @brief Read field notification value, RequestedPackage
    void ReadValueRequestedPackage(ara::com::SamplePtr<ara::vucm::pkgmgr::proxy::fields::RequestedPackage::FieldType const> samplePtr);
     
    /// @brief Regist callback from software component
    void RegistFieldHandlerRequestedPackage(std::function<void(const ara::vucm::pkgmgr::proxy::fields::RequestedPackage::FieldType&)> handler);
    
    /// @brief Getter method using by software component, RequestedPackage
    void GetRequestedPackage();
    
    /// @brief Subscribe field notification, SafetyState
    void SubscribeSafetyState();
     
    /// @brief Stop field subscription, SafetyState
    void StopSubscribeSafetyState();
     
    /// @brief Field notification receive handler, SafetyState
    void ReceiveFieldSafetyStateTriggered();
     
    /// @brief Field notification receive handler, SafetyState
    void ReceiveFieldSafetyStateCyclic();
     
    /// @brief Read field notification value, SafetyState
    void ReadValueSafetyState(ara::com::SamplePtr<ara::vucm::pkgmgr::proxy::fields::SafetyState::FieldType const> samplePtr);
     
    /// @brief Regist callback from software component
    void RegistFieldHandlerSafetyState(std::function<void(const ara::vucm::pkgmgr::proxy::fields::SafetyState::FieldType&)> handler);
    
    /// @brief Getter method using by software component, SafetyState
    void GetSafetyState();
    
    /// @brief Subscribe field notification, TransferState
    void SubscribeTransferState();
     
    /// @brief Stop field subscription, TransferState
    void StopSubscribeTransferState();
     
    /// @brief Field notification receive handler, TransferState
    void ReceiveFieldTransferStateTriggered();
     
    /// @brief Field notification receive handler, TransferState
    void ReceiveFieldTransferStateCyclic();
     
    /// @brief Read field notification value, TransferState
    void ReadValueTransferState(ara::com::SamplePtr<ara::vucm::pkgmgr::proxy::fields::TransferState::FieldType const> samplePtr);
     
    /// @brief Regist callback from software component
    void RegistFieldHandlerTransferState(std::function<void(const ara::vucm::pkgmgr::proxy::fields::TransferState::FieldType&)> handler);
    
    /// @brief Getter method using by software component, TransferState
    void GetTransferState();
    
    /// @brief Request with Response method using by software component, AllowCampaign
    void RequestAllowCampaign();
     
    /// @brief Regist callback from software component
    void RegistResponseHandlerAllowCampaign(std::function<void(const ara::vucm::pkgmgr::proxy::methods::AllowCampaign::Output&)> handler);
    
    /// @brief Request with Response method using by software component, CancelCampaign
    void RequestCancelCampaign(const bool& DisableCampaign);
     
    /// @brief Regist callback from software component
    void RegistResponseHandlerCancelCampaign(std::function<void(const ara::vucm::pkgmgr::proxy::methods::CancelCampaign::Output&)> handler);
    
    /// @brief Request with Response method using by software component, DeleteTransfer
    void RequestDeleteTransfer(const ara::ucm::TransferIdType& id);
     
    /// @brief Regist callback from software component
    void RegistResponseHandlerDeleteTransfer(std::function<void(const ara::vucm::pkgmgr::proxy::methods::DeleteTransfer::Output&)> handler);
    
    /// @brief Request with Response method using by software component, GetCampaignHistory
    void RequestGetCampaignHistory(const std::uint64_t& timestampGE, const std::uint64_t& timestampLT);
     
    /// @brief Regist callback from software component
    void RegistResponseHandlerGetCampaignHistory(std::function<void(const ara::vucm::pkgmgr::proxy::methods::GetCampaignHistory::Output&)> handler);
    
    /// @brief Request with Response method using by software component, GetSwClusterInfo
    void RequestGetSwClusterInfo();
     
    /// @brief Regist callback from software component
    void RegistResponseHandlerGetSwClusterInfo(std::function<void(const ara::vucm::pkgmgr::proxy::methods::GetSwClusterInfo::Output&)> handler);
    
    /// @brief Request with Response method using by software component, GetSwPackages
    void RequestGetSwPackages();
     
    /// @brief Regist callback from software component
    void RegistResponseHandlerGetSwPackages(std::function<void(const ara::vucm::pkgmgr::proxy::methods::GetSwPackages::Output&)> handler);
    
    /// @brief Request with Response method using by software component, SwPackageInventory
    void RequestSwPackageInventory(const ara::ucm::SwNameVersionVectorType& AvailableSoftwarePackages);
     
    /// @brief Regist callback from software component
    void RegistResponseHandlerSwPackageInventory(std::function<void(const ara::vucm::pkgmgr::proxy::methods::SwPackageInventory::Output&)> handler);
    
    /// @brief Request with Response method using by software component, TransferData
    void RequestTransferData(const ara::ucm::TransferIdType& id, const ara::ucm::ByteVectorType& data, const std::uint64_t& blockCounter);
     
    /// @brief Regist callback from software component
    void RegistResponseHandlerTransferData(std::function<void(const ara::vucm::pkgmgr::proxy::methods::TransferData::Output&)> handler);
    
    /// @brief Request with Response method using by software component, TransferExit
    void RequestTransferExit(const ara::ucm::TransferIdType& id);
     
    /// @brief Regist callback from software component
    void RegistResponseHandlerTransferExit(std::function<void(const ara::vucm::pkgmgr::proxy::methods::TransferExit::Output&)> handler);
    
    /// @brief Request with Response method using by software component, TransferStart
    void RequestTransferStart(const ara::ucm::SwNameType& SoftwarePackageName, const std::uint64_t& size);
     
    /// @brief Regist callback from software component
    void RegistResponseHandlerTransferStart(std::function<void(const ara::vucm::pkgmgr::proxy::methods::TransferStart::Output&)> handler);
    
    /// @brief Request with Response method using by software component, TransferVehiclePackage
    void RequestTransferVehiclePackage(const std::uint64_t& size);
     
    /// @brief Regist callback from software component
    void RegistResponseHandlerTransferVehiclePackage(std::function<void(const ara::vucm::pkgmgr::proxy::methods::TransferVehiclePackage::Output&)> handler);
    
private:
    /// @brief Callback for find service
    void Find(ara::com::ServiceHandleContainer<ara::vucm::pkgmgr::proxy::VehiclePackageManagementProxy::HandleType> handles,
              ara::com::FindServiceHandle findHandle);

    /// @brief Callback for field notification receiver, RequestedPackage
    void RegistReceiverRequestedPackage();
    
    /// @brief Callback for field notification receiver, SafetyState
    void RegistReceiverSafetyState();
    
    /// @brief Callback for field notification receiver, TransferState
    void RegistReceiverTransferState();
    
private:
    /// @brief Logger for this port
    ara::log::Logger& m_logger;
    
    /// @brief Flag of port status
    bool m_running;
    
    /// @brief Flag of find service status
    bool m_found;
    
    /// @brief Mutex for this port
    std::mutex m_mutex; 
    
    /// @brief AUTOSAR Port Interface
    std::unique_ptr<ara::vucm::pkgmgr::proxy::VehiclePackageManagementProxy> m_interface;
    
    /// @brief Find service handle
    std::unique_ptr<ara::com::FindServiceHandle> m_findHandle;

    /// @brief Callback from software component, RequestedPackage
    std::function<void(const ara::vucm::pkgmgr::proxy::fields::RequestedPackage::FieldType&)> m_receiverRequestedPackage;
    
    /// @brief Callback from software component, SafetyState
    std::function<void(const ara::vucm::pkgmgr::proxy::fields::SafetyState::FieldType&)> m_receiverSafetyState;
    
    /// @brief Callback from software component, TransferState
    std::function<void(const ara::vucm::pkgmgr::proxy::fields::TransferState::FieldType&)> m_receiverTransferState;
    
    /// @brief Callback from software component, AllowCampaign
    std::function<void(const ara::vucm::pkgmgr::proxy::methods::AllowCampaign::Output&)> m_responderAllowCampaign;
    
    /// @brief Callback from software component, CancelCampaign
    std::function<void(const ara::vucm::pkgmgr::proxy::methods::CancelCampaign::Output&)> m_responderCancelCampaign;
    
    /// @brief Callback from software component, DeleteTransfer
    std::function<void(const ara::vucm::pkgmgr::proxy::methods::DeleteTransfer::Output&)> m_responderDeleteTransfer;
    
    /// @brief Callback from software component, GetCampaignHistory
    std::function<void(const ara::vucm::pkgmgr::proxy::methods::GetCampaignHistory::Output&)> m_responderGetCampaignHistory;
    
    /// @brief Callback from software component, GetSwClusterInfo
    std::function<void(const ara::vucm::pkgmgr::proxy::methods::GetSwClusterInfo::Output&)> m_responderGetSwClusterInfo;
    
    /// @brief Callback from software component, GetSwPackages
    std::function<void(const ara::vucm::pkgmgr::proxy::methods::GetSwPackages::Output&)> m_responderGetSwPackages;
    
    /// @brief Callback from software component, SwPackageInventory
    std::function<void(const ara::vucm::pkgmgr::proxy::methods::SwPackageInventory::Output&)> m_responderSwPackageInventory;
    
    /// @brief Callback from software component, TransferData
    std::function<void(const ara::vucm::pkgmgr::proxy::methods::TransferData::Output&)> m_responderTransferData;
    
    /// @brief Callback from software component, TransferExit
    std::function<void(const ara::vucm::pkgmgr::proxy::methods::TransferExit::Output&)> m_responderTransferExit;
    
    /// @brief Callback from software component, TransferStart
    std::function<void(const ara::vucm::pkgmgr::proxy::methods::TransferStart::Output&)> m_responderTransferStart;
    
    /// @brief Callback from software component, TransferVehiclePackage
    std::function<void(const ara::vucm::pkgmgr::proxy::methods::TransferVehiclePackage::Output&)> m_responderTransferVehiclePackage;
};
 
} /// namespace port
} /// namespace aa
} /// namespace otaclient
 
#endif /// PARA_AA_GEN_SOFTWARE_COMPONENT_RPORT_OTACLIENT_AA_VEHICLEPACKAGEMANAGEMENT_H