///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : pportotasubscription.cpp
/// SOFTWARE COMPONENT NAME           : PPortOtaSubscription
/// GENERATED DATE                    : 2025-08-30 10:53:26
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "otaclient/aa/port/pportotasubscription.h"
 
namespace eevp
{
namespace ota
{
namespace subscription
{
namespace service
{
namespace skeleton
{
 
OtaSubscriptionSkeletonImpl::OtaSubscriptionSkeletonImpl(ara::core::InstanceSpecifier instanceSpec, ara::com::MethodCallProcessingMode mode)
    : OtaSubscriptionSkeleton(instanceSpec, mode)
    , m_logger(ara::log::CreateLogger("OTAC", "PORT", ara::log::LogLevel::kVerbose))
{
}
 
ara::core::Future<OtaSubscriptionSkeleton::requestAppInstallOutput> OtaSubscriptionSkeletonImpl::requestAppInstall(const eevp::type::String& appName)
{
    m_logger.LogVerbose() << "PPortOtaSubscription::requestAppInstall::Requested";
    
    requestAppInstallOutput response;
    ara::core::Promise<requestAppInstallOutput> promise;
    
    // put your logic
    
    promise.set_value(response);
    return promise.get_future();
}
 
ara::core::Future<OtaSubscriptionSkeleton::requestAppRollbackOutput> OtaSubscriptionSkeletonImpl::requestAppRollback()
{
    m_logger.LogVerbose() << "PPortOtaSubscription::requestAppRollback::Requested";
    
    requestAppRollbackOutput response;
    ara::core::Promise<requestAppRollbackOutput> promise;
    
    // put your logic
    
    promise.set_value(response);
    return promise.get_future();
}
 
ara::core::Future<OtaSubscriptionSkeleton::requestAppUpdateOutput> OtaSubscriptionSkeletonImpl::requestAppUpdate(const eevp::type::String& appName)
{
    m_logger.LogVerbose() << "PPortOtaSubscription::requestAppUpdate::Requested";
    
    requestAppUpdateOutput response;
    ara::core::Promise<requestAppUpdateOutput> promise;
    
    // put your logic
    
    promise.set_value(response);
    return promise.get_future();
}
 
ara::core::Future<OtaSubscriptionSkeleton::requestOtaProcessOutput> OtaSubscriptionSkeletonImpl::requestOtaProcess(const eevp::type::String& accessToken, const eevp::type::String& refreshToken, const eevp::ota::subscription::type::downloadPackageInfoList& downloadPackageInfo)
{
    m_logger.LogVerbose() << "PPortOtaSubscription::requestOtaProcess::Requested";
    
    requestOtaProcessOutput response;
    ara::core::Promise<requestOtaProcessOutput> promise;
    
    // put your logic
    
    promise.set_value(response);
    return promise.get_future();
}
 
ara::core::Future<OtaSubscriptionSkeleton::requestVersionInfoOutput> OtaSubscriptionSkeletonImpl::requestVersionInfo()
{
    m_logger.LogVerbose() << "PPortOtaSubscription::requestVersionInfo::Requested";
    
    requestVersionInfoOutput response;
    ara::core::Promise<requestVersionInfoOutput> promise;
    
    // put your logic
    
    promise.set_value(response);
    return promise.get_future();
}
 
} /// namespace skeleton
} /// namespace service
} /// namespace subscription
} /// namespace ota
} /// namespace eevp

namespace otaclient
{
namespace aa
{
namespace port
{
 
PPortOtaSubscription::PPortOtaSubscription()
    : m_logger(ara::log::CreateLogger("OTAC", "PORT", ara::log::LogLevel::kVerbose))
    , m_running{false}
    , m_notifyAppEventData{"str_string", "str_string", 0ULL, "str_string"}
    , m_notifyResultInfoData{{"str_string", "str_string", false}, {"str_string", "str_string", false}, {"str_string", "str_string", false}}
    , m_notifyRollbackCompleteData{false}
    , m_notifySwClusterInfoData{{"str_string", "str_string"}, {"str_string", "str_string"}, {"str_string", "str_string"}}
    , m_notifyUpdatableAppData{"str_string", "str_string", "str_string"}
    , m_notifyUpdateCompleteData{false}
{
}
 
PPortOtaSubscription::~PPortOtaSubscription()
{
}
 
void PPortOtaSubscription::Start()
{
    m_logger.LogVerbose() << "PPortOtaSubscription::Start";
    
    // construct skeleton
    ara::core::InstanceSpecifier specifier{"OTAClient/AA/PPortOtaSubscription"};
    m_interface = std::make_unique<eevp::ota::subscription::service::skeleton::OtaSubscriptionSkeletonImpl>(specifier);
    
    // offer service
    auto offer = m_interface->OfferService();
    if (offer.HasValue())
    {
        m_running = true;
        m_logger.LogVerbose() << "PPortOtaSubscription::Start::OfferService";
    }
    else
    {
        m_running = false;
        m_logger.LogError() << "PPortOtaSubscription::Start::OfferService::" << offer.Error().Message();
    }
}
 
void PPortOtaSubscription::Terminate()
{
    m_logger.LogVerbose() << "PPortOtaSubscription::Terminate";
    
    // stop port
    m_running = false;
    
    // stop offer service
    m_interface->StopOfferService();
    m_logger.LogVerbose() << "PPortOtaSubscription::Terminate::StopOfferService";
}
 
void PPortOtaSubscription::WriteDatanotifyAppEvent(const eevp::ota::subscription::service::skeleton::events::notifyAppEvent::SampleType& data)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_notifyAppEventData = data;
}
 
void PPortOtaSubscription::SendEventnotifyAppEventCyclic()
{
    while (m_running)
    {
        {
            std::lock_guard<std::mutex> lock(m_mutex);
            
            auto send = m_interface->notifyAppEvent.Send(m_notifyAppEventData);
            if (send.HasValue())
            {
                m_logger.LogVerbose() << "PPortOtaSubscription::SendEventnotifyAppEventCyclic::Send";
            }
            else
            {
                m_logger.LogError() << "PPortOtaSubscription::SendEventnotifyAppEventCyclic::Send::" << send.Error().Message();
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void PPortOtaSubscription::SendEventnotifyAppEventTriggered()
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    auto send = m_interface->notifyAppEvent.Send(m_notifyAppEventData);
    if (send.HasValue())
    {
        m_logger.LogVerbose() << "PPortOtaSubscription::SendEventnotifyAppEventTriggered::Send";
    }
    else
    {
        m_logger.LogError() << "PPortOtaSubscription::SendEventnotifyAppEventTriggered::Send::" << send.Error().Message();
    }
}
 
void PPortOtaSubscription::SendEventnotifyAppEventTriggered(const eevp::ota::subscription::service::skeleton::events::notifyAppEvent::SampleType& data)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_notifyAppEventData = data;
    auto send = m_interface->notifyAppEvent.Send(m_notifyAppEventData);
    if (send.HasValue())
    {
        m_logger.LogVerbose() << "PPortOtaSubscription::SendEventnotifyAppEventTriggered::Send";
    }
    else
    {
        m_logger.LogError() << "PPortOtaSubscription::SendEventnotifyAppEventTriggered::Send::" << send.Error().Message();
    }
}
 
void PPortOtaSubscription::WriteDatanotifyResultInfo(const eevp::ota::subscription::service::skeleton::events::notifyResultInfo::SampleType& data)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_notifyResultInfoData = data;
}
 
void PPortOtaSubscription::SendEventnotifyResultInfoCyclic()
{
    while (m_running)
    {
        {
            std::lock_guard<std::mutex> lock(m_mutex);
            
            auto send = m_interface->notifyResultInfo.Send(m_notifyResultInfoData);
            if (send.HasValue())
            {
                m_logger.LogVerbose() << "PPortOtaSubscription::SendEventnotifyResultInfoCyclic::Send";
            }
            else
            {
                m_logger.LogError() << "PPortOtaSubscription::SendEventnotifyResultInfoCyclic::Send::" << send.Error().Message();
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void PPortOtaSubscription::SendEventnotifyResultInfoTriggered()
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    auto send = m_interface->notifyResultInfo.Send(m_notifyResultInfoData);
    if (send.HasValue())
    {
        m_logger.LogVerbose() << "PPortOtaSubscription::SendEventnotifyResultInfoTriggered::Send";
    }
    else
    {
        m_logger.LogError() << "PPortOtaSubscription::SendEventnotifyResultInfoTriggered::Send::" << send.Error().Message();
    }
}
 
void PPortOtaSubscription::SendEventnotifyResultInfoTriggered(const eevp::ota::subscription::service::skeleton::events::notifyResultInfo::SampleType& data)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_notifyResultInfoData = data;
    auto send = m_interface->notifyResultInfo.Send(m_notifyResultInfoData);
    if (send.HasValue())
    {
        m_logger.LogVerbose() << "PPortOtaSubscription::SendEventnotifyResultInfoTriggered::Send";
    }
    else
    {
        m_logger.LogError() << "PPortOtaSubscription::SendEventnotifyResultInfoTriggered::Send::" << send.Error().Message();
    }
}
 
void PPortOtaSubscription::WriteDatanotifyRollbackComplete(const eevp::ota::subscription::service::skeleton::events::notifyRollbackComplete::SampleType& data)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_notifyRollbackCompleteData = data;
}
 
void PPortOtaSubscription::SendEventnotifyRollbackCompleteCyclic()
{
    while (m_running)
    {
        {
            std::lock_guard<std::mutex> lock(m_mutex);
            
            auto send = m_interface->notifyRollbackComplete.Send(m_notifyRollbackCompleteData);
            if (send.HasValue())
            {
                m_logger.LogVerbose() << "PPortOtaSubscription::SendEventnotifyRollbackCompleteCyclic::Send";
            }
            else
            {
                m_logger.LogError() << "PPortOtaSubscription::SendEventnotifyRollbackCompleteCyclic::Send::" << send.Error().Message();
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void PPortOtaSubscription::SendEventnotifyRollbackCompleteTriggered()
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    auto send = m_interface->notifyRollbackComplete.Send(m_notifyRollbackCompleteData);
    if (send.HasValue())
    {
        m_logger.LogVerbose() << "PPortOtaSubscription::SendEventnotifyRollbackCompleteTriggered::Send";
    }
    else
    {
        m_logger.LogError() << "PPortOtaSubscription::SendEventnotifyRollbackCompleteTriggered::Send::" << send.Error().Message();
    }
}
 
void PPortOtaSubscription::SendEventnotifyRollbackCompleteTriggered(const eevp::ota::subscription::service::skeleton::events::notifyRollbackComplete::SampleType& data)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_notifyRollbackCompleteData = data;
    auto send = m_interface->notifyRollbackComplete.Send(m_notifyRollbackCompleteData);
    if (send.HasValue())
    {
        m_logger.LogVerbose() << "PPortOtaSubscription::SendEventnotifyRollbackCompleteTriggered::Send";
    }
    else
    {
        m_logger.LogError() << "PPortOtaSubscription::SendEventnotifyRollbackCompleteTriggered::Send::" << send.Error().Message();
    }
}
 
void PPortOtaSubscription::WriteDatanotifySwClusterInfo(const eevp::ota::subscription::service::skeleton::events::notifySwClusterInfo::SampleType& data)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_notifySwClusterInfoData = data;
}
 
void PPortOtaSubscription::SendEventnotifySwClusterInfoCyclic()
{
    while (m_running)
    {
        {
            std::lock_guard<std::mutex> lock(m_mutex);
            
            auto send = m_interface->notifySwClusterInfo.Send(m_notifySwClusterInfoData);
            if (send.HasValue())
            {
                m_logger.LogVerbose() << "PPortOtaSubscription::SendEventnotifySwClusterInfoCyclic::Send";
            }
            else
            {
                m_logger.LogError() << "PPortOtaSubscription::SendEventnotifySwClusterInfoCyclic::Send::" << send.Error().Message();
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void PPortOtaSubscription::SendEventnotifySwClusterInfoTriggered()
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    auto send = m_interface->notifySwClusterInfo.Send(m_notifySwClusterInfoData);
    if (send.HasValue())
    {
        m_logger.LogVerbose() << "PPortOtaSubscription::SendEventnotifySwClusterInfoTriggered::Send";
    }
    else
    {
        m_logger.LogError() << "PPortOtaSubscription::SendEventnotifySwClusterInfoTriggered::Send::" << send.Error().Message();
    }
}
 
void PPortOtaSubscription::SendEventnotifySwClusterInfoTriggered(const eevp::ota::subscription::service::skeleton::events::notifySwClusterInfo::SampleType& data)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_notifySwClusterInfoData = data;
    auto send = m_interface->notifySwClusterInfo.Send(m_notifySwClusterInfoData);
    if (send.HasValue())
    {
        m_logger.LogVerbose() << "PPortOtaSubscription::SendEventnotifySwClusterInfoTriggered::Send";
    }
    else
    {
        m_logger.LogError() << "PPortOtaSubscription::SendEventnotifySwClusterInfoTriggered::Send::" << send.Error().Message();
    }
}
 
void PPortOtaSubscription::WriteDatanotifyUpdatableApp(const eevp::ota::subscription::service::skeleton::events::notifyUpdatableApp::SampleType& data)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_notifyUpdatableAppData = data;
}
 
void PPortOtaSubscription::SendEventnotifyUpdatableAppCyclic()
{
    while (m_running)
    {
        {
            std::lock_guard<std::mutex> lock(m_mutex);
            
            auto send = m_interface->notifyUpdatableApp.Send(m_notifyUpdatableAppData);
            if (send.HasValue())
            {
                m_logger.LogVerbose() << "PPortOtaSubscription::SendEventnotifyUpdatableAppCyclic::Send";
            }
            else
            {
                m_logger.LogError() << "PPortOtaSubscription::SendEventnotifyUpdatableAppCyclic::Send::" << send.Error().Message();
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void PPortOtaSubscription::SendEventnotifyUpdatableAppTriggered()
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    auto send = m_interface->notifyUpdatableApp.Send(m_notifyUpdatableAppData);
    if (send.HasValue())
    {
        m_logger.LogVerbose() << "PPortOtaSubscription::SendEventnotifyUpdatableAppTriggered::Send";
    }
    else
    {
        m_logger.LogError() << "PPortOtaSubscription::SendEventnotifyUpdatableAppTriggered::Send::" << send.Error().Message();
    }
}
 
void PPortOtaSubscription::SendEventnotifyUpdatableAppTriggered(const eevp::ota::subscription::service::skeleton::events::notifyUpdatableApp::SampleType& data)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_notifyUpdatableAppData = data;
    auto send = m_interface->notifyUpdatableApp.Send(m_notifyUpdatableAppData);
    if (send.HasValue())
    {
        m_logger.LogVerbose() << "PPortOtaSubscription::SendEventnotifyUpdatableAppTriggered::Send";
    }
    else
    {
        m_logger.LogError() << "PPortOtaSubscription::SendEventnotifyUpdatableAppTriggered::Send::" << send.Error().Message();
    }
}
 
void PPortOtaSubscription::WriteDatanotifyUpdateComplete(const eevp::ota::subscription::service::skeleton::events::notifyUpdateComplete::SampleType& data)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_notifyUpdateCompleteData = data;
}
 
void PPortOtaSubscription::SendEventnotifyUpdateCompleteCyclic()
{
    while (m_running)
    {
        {
            std::lock_guard<std::mutex> lock(m_mutex);
            
            auto send = m_interface->notifyUpdateComplete.Send(m_notifyUpdateCompleteData);
            if (send.HasValue())
            {
                m_logger.LogVerbose() << "PPortOtaSubscription::SendEventnotifyUpdateCompleteCyclic::Send";
            }
            else
            {
                m_logger.LogError() << "PPortOtaSubscription::SendEventnotifyUpdateCompleteCyclic::Send::" << send.Error().Message();
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void PPortOtaSubscription::SendEventnotifyUpdateCompleteTriggered()
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    auto send = m_interface->notifyUpdateComplete.Send(m_notifyUpdateCompleteData);
    if (send.HasValue())
    {
        m_logger.LogVerbose() << "PPortOtaSubscription::SendEventnotifyUpdateCompleteTriggered::Send";
    }
    else
    {
        m_logger.LogError() << "PPortOtaSubscription::SendEventnotifyUpdateCompleteTriggered::Send::" << send.Error().Message();
    }
}
 
void PPortOtaSubscription::SendEventnotifyUpdateCompleteTriggered(const eevp::ota::subscription::service::skeleton::events::notifyUpdateComplete::SampleType& data)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_notifyUpdateCompleteData = data;
    auto send = m_interface->notifyUpdateComplete.Send(m_notifyUpdateCompleteData);
    if (send.HasValue())
    {
        m_logger.LogVerbose() << "PPortOtaSubscription::SendEventnotifyUpdateCompleteTriggered::Send";
    }
    else
    {
        m_logger.LogError() << "PPortOtaSubscription::SendEventnotifyUpdateCompleteTriggered::Send::" << send.Error().Message();
    }
}
 
} /// namespace port
} /// namespace aa
} /// namespace otaclient
 
/// EOF