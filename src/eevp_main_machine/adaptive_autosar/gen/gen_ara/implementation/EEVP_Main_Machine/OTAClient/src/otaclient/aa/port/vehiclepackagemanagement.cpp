///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : vehiclepackagemanagement.cpp
/// SOFTWARE COMPONENT NAME           : VehiclePackageManagement
/// GENERATED DATE                    : 2025-08-30 10:53:26
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "otaclient/aa/port/vehiclepackagemanagement.h"
 
namespace otaclient
{
namespace aa
{
namespace port
{
 
VehiclePackageManagement::VehiclePackageManagement()
    : m_logger(ara::log::CreateLogger("OTAC", "PORT", ara::log::LogLevel::kVerbose))
    , m_running{false}
    , m_found{false}
    , m_receiverRequestedPackage{nullptr}
    , m_receiverSafetyState{nullptr}
    , m_receiverTransferState{nullptr}
    , m_responderAllowCampaign{nullptr}
    , m_responderCancelCampaign{nullptr}
    , m_responderDeleteTransfer{nullptr}
    , m_responderGetCampaignHistory{nullptr}
    , m_responderGetSwClusterInfo{nullptr}
    , m_responderGetSwPackages{nullptr}
    , m_responderSwPackageInventory{nullptr}
    , m_responderTransferData{nullptr}
    , m_responderTransferExit{nullptr}
    , m_responderTransferStart{nullptr}
    , m_responderTransferVehiclePackage{nullptr}
{
}
 
VehiclePackageManagement::~VehiclePackageManagement()
{
}
 
void VehiclePackageManagement::Start()
{
    m_logger.LogVerbose() << "VehiclePackageManagement::Start";
    
    // regist callback
    ara::core::InstanceSpecifier specifier{"OTAClient/AA/VehiclePackageManagement"};
    auto handler = [this](ara::com::ServiceHandleContainer<ara::vucm::pkgmgr::proxy::VehiclePackageManagementProxy::HandleType> handles,
                          ara::com::FindServiceHandle findHandle) {
        this->Find(handles, findHandle);
    };
    
    // find service
    auto find = ara::vucm::pkgmgr::proxy::VehiclePackageManagementProxy::StartFindService(handler, specifier);
    if (find.HasValue())
    {
        m_logger.LogVerbose() << "VehiclePackageManagement::Start::StartFindService";
    }
    else
    {
        m_logger.LogError() << "VehiclePackageManagement::Start::StartFindService::" << find.Error().Message();
    }
    
    // run port
    m_running = true;
}
 
void VehiclePackageManagement::Terminate()
{
    m_logger.LogVerbose() << "VehiclePackageManagement::Terminate";
    
    // stop port
    m_running = false;
    
    // clear service proxy
    if (m_interface)
    {
        StopSubscribeRequestedPackage();
        StopSubscribeSafetyState();
        StopSubscribeTransferState();
        
        // stop find service
        m_interface->StopFindService(*m_findHandle);
        m_found = false;
        
        m_logger.LogVerbose() << "VehiclePackageManagement::Terminate::StopFindService";
    }
}
 
void VehiclePackageManagement::Find(ara::com::ServiceHandleContainer<ara::vucm::pkgmgr::proxy::VehiclePackageManagementProxy::HandleType> handles, ara::com::FindServiceHandle findHandle)
{
    // check finding handles
    if (handles.empty())
    {
        m_logger.LogVerbose() << "VehiclePackageManagement::Find::Service Instances not found";
        return;
    }
    else
    {
        for (auto& handle : handles)
        {
            m_logger.LogVerbose() << "VehiclePackageManagement::Find::Searched Instance::ServiceId =" << 
                                     handle.GetServiceHandle().serviceId << 
                                     ", InstanceId =" << 
                                     handle.GetServiceHandle().instanceId;
        }
    }
    
    // create proxy
    if (m_interface)
    {
        m_logger.LogVerbose() << "VehiclePackageManagement::Find::Proxy is already running";
    }
    else
    {
        m_logger.LogVerbose() << "VehiclePackageManagement::Find::Using Instance::ServiceId =" << 
                                 handles[0].GetServiceHandle().serviceId << 
                                 ", InstanceId =" << 
                                 handles[0].GetServiceHandle().instanceId;
        m_interface = std::make_unique<ara::vucm::pkgmgr::proxy::VehiclePackageManagementProxy>(handles[0]);
        m_findHandle = std::make_unique<ara::com::FindServiceHandle>(findHandle);
        m_found = true;
        
        // subscribe field notifications
        SubscribeRequestedPackage();
        SubscribeSafetyState();
        SubscribeTransferState();
    }
}
 
void VehiclePackageManagement::SubscribeRequestedPackage()
{
    if (m_found)
    {
        // regist receiver handler
        // if you want to enable it, please uncomment below code
        // RegistReceiverRequestedPackage();
        
        // request subscribe
        auto subscribe = m_interface->RequestedPackage.Subscribe(1);
        if (subscribe.HasValue())
        {
            m_logger.LogVerbose() << "VehiclePackageManagement::SubscribeRequestedPackage::Subscribed";
        }
        else
        {
            m_logger.LogError() << "VehiclePackageManagement::SubscribeRequestedPackage::" << subscribe.Error().Message();
        }
    }
}
 
void VehiclePackageManagement::StopSubscribeRequestedPackage()
{
    if (m_found)
    {
        // request stop subscribe
        m_interface->RequestedPackage.Unsubscribe();
        m_logger.LogVerbose() << "VehiclePackageManagement::StopSubscribeRequestedPackage::Unsubscribed";
    }
}
 
void VehiclePackageManagement::RegistReceiverRequestedPackage()
{
    if (m_found)
    {
        // set callback
        auto receiver = [this]() -> void {
            return ReceiveFieldRequestedPackageTriggered();
        };
        
        // regist callback
        auto callback = m_interface->RequestedPackage.SetReceiveHandler(receiver);
        if (callback.HasValue())
        {
            m_logger.LogVerbose() << "VehiclePackageManagement::RegistReceiverRequestedPackage::SetReceiveHandler";
        }
        else
        {
            m_logger.LogError() << "VehiclePackageManagement::RegistReceiverRequestedPackage::SetReceiveHandler::" << callback.Error().Message();
        }
    }
}
 
void VehiclePackageManagement::ReceiveFieldRequestedPackageTriggered()
{
    if (m_found)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_interface->RequestedPackage.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
        {
            auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->RequestedPackage.GetNewSamples([&](auto samplePtr) {
                VehiclePackageManagement::ReadValueRequestedPackage(std::move(samplePtr));
            }));
            if (recv->HasValue())
            {
                m_logger.LogVerbose() << "VehiclePackageManagement::ReceiveFieldRequestedPackage::GetNewSamples::" << recv->Value();
            }
            else
            {
                m_logger.LogError() << "VehiclePackageManagement::ReceiveFieldRequestedPackage::GetNewSamples::" << recv->Error().Message();
            }
        }
    }
}
 
void VehiclePackageManagement::ReceiveFieldRequestedPackageCyclic()
{
    while (m_running)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_found)
        {
            if (m_interface->RequestedPackage.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
            {
                auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->RequestedPackage.GetNewSamples([&](auto samplePtr) {
                    VehiclePackageManagement::ReadValueRequestedPackage(std::move(samplePtr));
                }));
                if (recv->HasValue())
                {
                    m_logger.LogVerbose() << "VehiclePackageManagement::ReceiveFieldRequestedPackage::GetNewSamples::" << recv->Value();
                }
                else
                {
                    m_logger.LogError() << "VehiclePackageManagement::ReceiveFieldRequestedPackage::GetNewSamples::" << recv->Error().Message();
                }
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void VehiclePackageManagement::ReadValueRequestedPackage(ara::com::SamplePtr<ara::vucm::pkgmgr::proxy::fields::RequestedPackage::FieldType const> samplePtr)
{
    auto value = *samplePtr.Get();
    if (m_receiverRequestedPackage)
    {
        m_receiverRequestedPackage(value);
    }
}
 
void VehiclePackageManagement::RegistFieldHandlerRequestedPackage(std::function<void(const ara::vucm::pkgmgr::proxy::fields::RequestedPackage::FieldType&)> handler)
{
    m_receiverRequestedPackage = handler;
}
 
void VehiclePackageManagement::GetRequestedPackage()
{
    if (m_found)
    {
        auto request = m_interface->RequestedPackage.Get();
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "VehiclePackageManagement::GetRequestedPackage::Responded";
            
            auto result = response.Value();
            if (m_receiverRequestedPackage)
            {
                m_receiverRequestedPackage(result);
            }
        }
        else
        {
            m_logger.LogError() << "VehiclePackageManagement::GetRequestedPackage::" << response.Error().Message();
        }
    }
}
 
void VehiclePackageManagement::SubscribeSafetyState()
{
    if (m_found)
    {
        // regist receiver handler
        // if you want to enable it, please uncomment below code
        // RegistReceiverSafetyState();
        
        // request subscribe
        auto subscribe = m_interface->SafetyState.Subscribe(1);
        if (subscribe.HasValue())
        {
            m_logger.LogVerbose() << "VehiclePackageManagement::SubscribeSafetyState::Subscribed";
        }
        else
        {
            m_logger.LogError() << "VehiclePackageManagement::SubscribeSafetyState::" << subscribe.Error().Message();
        }
    }
}
 
void VehiclePackageManagement::StopSubscribeSafetyState()
{
    if (m_found)
    {
        // request stop subscribe
        m_interface->SafetyState.Unsubscribe();
        m_logger.LogVerbose() << "VehiclePackageManagement::StopSubscribeSafetyState::Unsubscribed";
    }
}
 
void VehiclePackageManagement::RegistReceiverSafetyState()
{
    if (m_found)
    {
        // set callback
        auto receiver = [this]() -> void {
            return ReceiveFieldSafetyStateTriggered();
        };
        
        // regist callback
        auto callback = m_interface->SafetyState.SetReceiveHandler(receiver);
        if (callback.HasValue())
        {
            m_logger.LogVerbose() << "VehiclePackageManagement::RegistReceiverSafetyState::SetReceiveHandler";
        }
        else
        {
            m_logger.LogError() << "VehiclePackageManagement::RegistReceiverSafetyState::SetReceiveHandler::" << callback.Error().Message();
        }
    }
}
 
void VehiclePackageManagement::ReceiveFieldSafetyStateTriggered()
{
    if (m_found)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_interface->SafetyState.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
        {
            auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->SafetyState.GetNewSamples([&](auto samplePtr) {
                VehiclePackageManagement::ReadValueSafetyState(std::move(samplePtr));
            }));
            if (recv->HasValue())
            {
                m_logger.LogVerbose() << "VehiclePackageManagement::ReceiveFieldSafetyState::GetNewSamples::" << recv->Value();
            }
            else
            {
                m_logger.LogError() << "VehiclePackageManagement::ReceiveFieldSafetyState::GetNewSamples::" << recv->Error().Message();
            }
        }
    }
}
 
void VehiclePackageManagement::ReceiveFieldSafetyStateCyclic()
{
    while (m_running)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_found)
        {
            if (m_interface->SafetyState.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
            {
                auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->SafetyState.GetNewSamples([&](auto samplePtr) {
                    VehiclePackageManagement::ReadValueSafetyState(std::move(samplePtr));
                }));
                if (recv->HasValue())
                {
                    m_logger.LogVerbose() << "VehiclePackageManagement::ReceiveFieldSafetyState::GetNewSamples::" << recv->Value();
                }
                else
                {
                    m_logger.LogError() << "VehiclePackageManagement::ReceiveFieldSafetyState::GetNewSamples::" << recv->Error().Message();
                }
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void VehiclePackageManagement::ReadValueSafetyState(ara::com::SamplePtr<ara::vucm::pkgmgr::proxy::fields::SafetyState::FieldType const> samplePtr)
{
    auto value = *samplePtr.Get();
    if (m_receiverSafetyState)
    {
        m_receiverSafetyState(value);
    }
}
 
void VehiclePackageManagement::RegistFieldHandlerSafetyState(std::function<void(const ara::vucm::pkgmgr::proxy::fields::SafetyState::FieldType&)> handler)
{
    m_receiverSafetyState = handler;
}
 
void VehiclePackageManagement::GetSafetyState()
{
    if (m_found)
    {
        auto request = m_interface->SafetyState.Get();
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "VehiclePackageManagement::GetSafetyState::Responded";
            
            auto result = response.Value();
            if (m_receiverSafetyState)
            {
                m_receiverSafetyState(result);
            }
        }
        else
        {
            m_logger.LogError() << "VehiclePackageManagement::GetSafetyState::" << response.Error().Message();
        }
    }
}
 
void VehiclePackageManagement::SubscribeTransferState()
{
    if (m_found)
    {
        // regist receiver handler
        // if you want to enable it, please uncomment below code
        // RegistReceiverTransferState();
        
        // request subscribe
        auto subscribe = m_interface->TransferState.Subscribe(1);
        if (subscribe.HasValue())
        {
            m_logger.LogVerbose() << "VehiclePackageManagement::SubscribeTransferState::Subscribed";
        }
        else
        {
            m_logger.LogError() << "VehiclePackageManagement::SubscribeTransferState::" << subscribe.Error().Message();
        }
    }
}
 
void VehiclePackageManagement::StopSubscribeTransferState()
{
    if (m_found)
    {
        // request stop subscribe
        m_interface->TransferState.Unsubscribe();
        m_logger.LogVerbose() << "VehiclePackageManagement::StopSubscribeTransferState::Unsubscribed";
    }
}
 
void VehiclePackageManagement::RegistReceiverTransferState()
{
    if (m_found)
    {
        // set callback
        auto receiver = [this]() -> void {
            return ReceiveFieldTransferStateTriggered();
        };
        
        // regist callback
        auto callback = m_interface->TransferState.SetReceiveHandler(receiver);
        if (callback.HasValue())
        {
            m_logger.LogVerbose() << "VehiclePackageManagement::RegistReceiverTransferState::SetReceiveHandler";
        }
        else
        {
            m_logger.LogError() << "VehiclePackageManagement::RegistReceiverTransferState::SetReceiveHandler::" << callback.Error().Message();
        }
    }
}
 
void VehiclePackageManagement::ReceiveFieldTransferStateTriggered()
{
    if (m_found)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_interface->TransferState.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
        {
            auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->TransferState.GetNewSamples([&](auto samplePtr) {
                VehiclePackageManagement::ReadValueTransferState(std::move(samplePtr));
            }));
            if (recv->HasValue())
            {
                m_logger.LogVerbose() << "VehiclePackageManagement::ReceiveFieldTransferState::GetNewSamples::" << recv->Value();
            }
            else
            {
                m_logger.LogError() << "VehiclePackageManagement::ReceiveFieldTransferState::GetNewSamples::" << recv->Error().Message();
            }
        }
    }
}
 
void VehiclePackageManagement::ReceiveFieldTransferStateCyclic()
{
    while (m_running)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_found)
        {
            if (m_interface->TransferState.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
            {
                auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->TransferState.GetNewSamples([&](auto samplePtr) {
                    VehiclePackageManagement::ReadValueTransferState(std::move(samplePtr));
                }));
                if (recv->HasValue())
                {
                    m_logger.LogVerbose() << "VehiclePackageManagement::ReceiveFieldTransferState::GetNewSamples::" << recv->Value();
                }
                else
                {
                    m_logger.LogError() << "VehiclePackageManagement::ReceiveFieldTransferState::GetNewSamples::" << recv->Error().Message();
                }
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void VehiclePackageManagement::ReadValueTransferState(ara::com::SamplePtr<ara::vucm::pkgmgr::proxy::fields::TransferState::FieldType const> samplePtr)
{
    auto value = *samplePtr.Get();
    if (m_receiverTransferState)
    {
        m_receiverTransferState(value);
    }
}
 
void VehiclePackageManagement::RegistFieldHandlerTransferState(std::function<void(const ara::vucm::pkgmgr::proxy::fields::TransferState::FieldType&)> handler)
{
    m_receiverTransferState = handler;
}
 
void VehiclePackageManagement::GetTransferState()
{
    if (m_found)
    {
        auto request = m_interface->TransferState.Get();
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "VehiclePackageManagement::GetTransferState::Responded";
            
            auto result = response.Value();
            if (m_receiverTransferState)
            {
                m_receiverTransferState(result);
            }
        }
        else
        {
            m_logger.LogError() << "VehiclePackageManagement::GetTransferState::" << response.Error().Message();
        }
    }
}
 
void VehiclePackageManagement::RequestAllowCampaign()
{
    if (m_found)
    {
        auto request = m_interface->AllowCampaign();
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "VehiclePackageManagement::RequestAllowCampaign::Responded";
            
            auto result = response.Value();
            if (m_responderAllowCampaign)
            {
                m_responderAllowCampaign(result);
            }
        }
        else
        {
            m_logger.LogError() << "VehiclePackageManagement::RequestAllowCampaign::" << response.Error().Message();
        }
    }
}
 
void VehiclePackageManagement::RegistResponseHandlerAllowCampaign(std::function<void(const ara::vucm::pkgmgr::proxy::methods::AllowCampaign::Output&)> handler)
{
    m_responderAllowCampaign = handler;
}
 
void VehiclePackageManagement::RequestCancelCampaign(const bool& DisableCampaign)
{
    if (m_found)
    {
        auto request = m_interface->CancelCampaign(DisableCampaign);
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "VehiclePackageManagement::RequestCancelCampaign::Responded";
            
            auto result = response.Value();
            if (m_responderCancelCampaign)
            {
                m_responderCancelCampaign(result);
            }
        }
        else
        {
            m_logger.LogError() << "VehiclePackageManagement::RequestCancelCampaign::" << response.Error().Message();
        }
    }
}
 
void VehiclePackageManagement::RegistResponseHandlerCancelCampaign(std::function<void(const ara::vucm::pkgmgr::proxy::methods::CancelCampaign::Output&)> handler)
{
    m_responderCancelCampaign = handler;
}
 
void VehiclePackageManagement::RequestDeleteTransfer(const ara::ucm::TransferIdType& id)
{
    if (m_found)
    {
        auto request = m_interface->DeleteTransfer(id);
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "VehiclePackageManagement::RequestDeleteTransfer::Responded";
            
            auto result = response.Value();
            if (m_responderDeleteTransfer)
            {
                m_responderDeleteTransfer(result);
            }
        }
        else
        {
            m_logger.LogError() << "VehiclePackageManagement::RequestDeleteTransfer::" << response.Error().Message();
        }
    }
}
 
void VehiclePackageManagement::RegistResponseHandlerDeleteTransfer(std::function<void(const ara::vucm::pkgmgr::proxy::methods::DeleteTransfer::Output&)> handler)
{
    m_responderDeleteTransfer = handler;
}
 
void VehiclePackageManagement::RequestGetCampaignHistory(const std::uint64_t& timestampGE, const std::uint64_t& timestampLT)
{
    if (m_found)
    {
        auto request = m_interface->GetCampaignHistory(timestampGE, timestampLT);
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "VehiclePackageManagement::RequestGetCampaignHistory::Responded";
            
            auto result = response.Value();
            if (m_responderGetCampaignHistory)
            {
                m_responderGetCampaignHistory(result);
            }
        }
        else
        {
            m_logger.LogError() << "VehiclePackageManagement::RequestGetCampaignHistory::" << response.Error().Message();
        }
    }
}
 
void VehiclePackageManagement::RegistResponseHandlerGetCampaignHistory(std::function<void(const ara::vucm::pkgmgr::proxy::methods::GetCampaignHistory::Output&)> handler)
{
    m_responderGetCampaignHistory = handler;
}
 
void VehiclePackageManagement::RequestGetSwClusterInfo()
{
    if (m_found)
    {
        auto request = m_interface->GetSwClusterInfo();
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "VehiclePackageManagement::RequestGetSwClusterInfo::Responded";
            
            auto result = response.Value();
            if (m_responderGetSwClusterInfo)
            {
                m_responderGetSwClusterInfo(result);
            }
        }
        else
        {
            m_logger.LogError() << "VehiclePackageManagement::RequestGetSwClusterInfo::" << response.Error().Message();
        }
    }
}
 
void VehiclePackageManagement::RegistResponseHandlerGetSwClusterInfo(std::function<void(const ara::vucm::pkgmgr::proxy::methods::GetSwClusterInfo::Output&)> handler)
{
    m_responderGetSwClusterInfo = handler;
}
 
void VehiclePackageManagement::RequestGetSwPackages()
{
    if (m_found)
    {
        auto request = m_interface->GetSwPackages();
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "VehiclePackageManagement::RequestGetSwPackages::Responded";
            
            auto result = response.Value();
            if (m_responderGetSwPackages)
            {
                m_responderGetSwPackages(result);
            }
        }
        else
        {
            m_logger.LogError() << "VehiclePackageManagement::RequestGetSwPackages::" << response.Error().Message();
        }
    }
}
 
void VehiclePackageManagement::RegistResponseHandlerGetSwPackages(std::function<void(const ara::vucm::pkgmgr::proxy::methods::GetSwPackages::Output&)> handler)
{
    m_responderGetSwPackages = handler;
}
 
void VehiclePackageManagement::RequestSwPackageInventory(const ara::ucm::SwNameVersionVectorType& AvailableSoftwarePackages)
{
    if (m_found)
    {
        auto request = m_interface->SwPackageInventory(AvailableSoftwarePackages);
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "VehiclePackageManagement::RequestSwPackageInventory::Responded";
            
            auto result = response.Value();
            if (m_responderSwPackageInventory)
            {
                m_responderSwPackageInventory(result);
            }
        }
        else
        {
            m_logger.LogError() << "VehiclePackageManagement::RequestSwPackageInventory::" << response.Error().Message();
        }
    }
}
 
void VehiclePackageManagement::RegistResponseHandlerSwPackageInventory(std::function<void(const ara::vucm::pkgmgr::proxy::methods::SwPackageInventory::Output&)> handler)
{
    m_responderSwPackageInventory = handler;
}
 
void VehiclePackageManagement::RequestTransferData(const ara::ucm::TransferIdType& id, const ara::ucm::ByteVectorType& data, const std::uint64_t& blockCounter)
{
    if (m_found)
    {
        auto request = m_interface->TransferData(id, data, blockCounter);
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "VehiclePackageManagement::RequestTransferData::Responded";
            
            auto result = response.Value();
            if (m_responderTransferData)
            {
                m_responderTransferData(result);
            }
        }
        else
        {
            m_logger.LogError() << "VehiclePackageManagement::RequestTransferData::" << response.Error().Message();
        }
    }
}
 
void VehiclePackageManagement::RegistResponseHandlerTransferData(std::function<void(const ara::vucm::pkgmgr::proxy::methods::TransferData::Output&)> handler)
{
    m_responderTransferData = handler;
}
 
void VehiclePackageManagement::RequestTransferExit(const ara::ucm::TransferIdType& id)
{
    if (m_found)
    {
        auto request = m_interface->TransferExit(id);
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "VehiclePackageManagement::RequestTransferExit::Responded";
            
            auto result = response.Value();
            if (m_responderTransferExit)
            {
                m_responderTransferExit(result);
            }
        }
        else
        {
            m_logger.LogError() << "VehiclePackageManagement::RequestTransferExit::" << response.Error().Message();
        }
    }
}
 
void VehiclePackageManagement::RegistResponseHandlerTransferExit(std::function<void(const ara::vucm::pkgmgr::proxy::methods::TransferExit::Output&)> handler)
{
    m_responderTransferExit = handler;
}
 
void VehiclePackageManagement::RequestTransferStart(const ara::ucm::SwNameType& SoftwarePackageName, const std::uint64_t& size)
{
    if (m_found)
    {
        auto request = m_interface->TransferStart(SoftwarePackageName, size);
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "VehiclePackageManagement::RequestTransferStart::Responded";
            
            auto result = response.Value();
            if (m_responderTransferStart)
            {
                m_responderTransferStart(result);
            }
        }
        else
        {
            m_logger.LogError() << "VehiclePackageManagement::RequestTransferStart::" << response.Error().Message();
        }
    }
}
 
void VehiclePackageManagement::RegistResponseHandlerTransferStart(std::function<void(const ara::vucm::pkgmgr::proxy::methods::TransferStart::Output&)> handler)
{
    m_responderTransferStart = handler;
}
 
void VehiclePackageManagement::RequestTransferVehiclePackage(const std::uint64_t& size)
{
    if (m_found)
    {
        auto request = m_interface->TransferVehiclePackage(size);
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "VehiclePackageManagement::RequestTransferVehiclePackage::Responded";
            
            auto result = response.Value();
            if (m_responderTransferVehiclePackage)
            {
                m_responderTransferVehiclePackage(result);
            }
        }
        else
        {
            m_logger.LogError() << "VehiclePackageManagement::RequestTransferVehiclePackage::" << response.Error().Message();
        }
    }
}
 
void VehiclePackageManagement::RegistResponseHandlerTransferVehiclePackage(std::function<void(const ara::vucm::pkgmgr::proxy::methods::TransferVehiclePackage::Output&)> handler)
{
    m_responderTransferVehiclePackage = handler;
}
 
} /// namespace port
} /// namespace aa
} /// namespace otaclient
 
/// EOF