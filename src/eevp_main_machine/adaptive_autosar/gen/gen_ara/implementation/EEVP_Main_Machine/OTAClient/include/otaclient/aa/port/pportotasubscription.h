///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : pportotasubscription.h
/// SOFTWARE COMPONENT NAME           : PPortOtaSubscription
/// GENERATED DATE                    : 2025-08-30 10:53:26
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef PARA_AA_GEN_SOFTWARE_COMPONENT_PPORT_OTACLIENT_AA_PPORTOTASUBSCRIPTION_H
#define PARA_AA_GEN_SOFTWARE_COMPONENT_PPORT_OTACLIENT_AA_PPORTOTASUBSCRIPTION_H
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// INCLUSION HEADER FILES
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "eevp/ota/subscription/service/otasubscription_skeleton.h"
 
#include "ara/log/logger.h"
 
#include <mutex>
#include <thread>
 
namespace eevp
{
namespace ota
{
namespace subscription
{
namespace service
{
namespace skeleton
{
 
class OtaSubscriptionSkeletonImpl : public OtaSubscriptionSkeleton
{
public:
    /// @brief Constructor
    OtaSubscriptionSkeletonImpl(ara::core::InstanceSpecifier instanceSpec, ara::com::MethodCallProcessingMode mode = ara::com::MethodCallProcessingMode::kEvent);
    
    /// @brief Request with Response method, requestAppInstall
    ara::core::Future<OtaSubscriptionSkeleton::requestAppInstallOutput> requestAppInstall(const eevp::type::String& appName) override;
    
    /// @brief Request with Response method, requestAppRollback
    ara::core::Future<OtaSubscriptionSkeleton::requestAppRollbackOutput> requestAppRollback() override;
    
    /// @brief Request with Response method, requestAppUpdate
    ara::core::Future<OtaSubscriptionSkeleton::requestAppUpdateOutput> requestAppUpdate(const eevp::type::String& appName) override;
    
    /// @brief Request with Response method, requestOtaProcess
    ara::core::Future<OtaSubscriptionSkeleton::requestOtaProcessOutput> requestOtaProcess(const eevp::type::String& accessToken, const eevp::type::String& refreshToken, const eevp::ota::subscription::type::downloadPackageInfoList& downloadPackageInfo) override;
    
    /// @brief Request with Response method, requestVersionInfo
    ara::core::Future<OtaSubscriptionSkeleton::requestVersionInfoOutput> requestVersionInfo() override;

private:
    /// @brief Logger for this port
    ara::log::Logger& m_logger;

};
 
} /// namespace skeleton
} /// namespace service
} /// namespace subscription
} /// namespace ota
} /// namespace eevp

namespace otaclient
{
namespace aa
{
namespace port
{
 
class PPortOtaSubscription
{
public:
    /// @brief Constructor
    PPortOtaSubscription();
    
    /// @brief Destructor
    ~PPortOtaSubscription();
    
    /// @brief Start port
    void Start();
    
    /// @brief Terminate port
    void Terminate();
    
    /// @brief Write event data to buffer, notifyAppEvent
    void WriteDatanotifyAppEvent(const eevp::ota::subscription::service::skeleton::events::notifyAppEvent::SampleType& data);
     
    /// @brief Send event cyclic from buffer data, notifyAppEvent
    void SendEventnotifyAppEventCyclic();
     
    /// @brief Send event directly from buffer data, notifyAppEvent
    void SendEventnotifyAppEventTriggered();
     
    /// @brief Send event directly with argument, notifyAppEvent
    void SendEventnotifyAppEventTriggered(const eevp::ota::subscription::service::skeleton::events::notifyAppEvent::SampleType& data);

    /// @brief Write event data to buffer, notifyResultInfo
    void WriteDatanotifyResultInfo(const eevp::ota::subscription::service::skeleton::events::notifyResultInfo::SampleType& data);
     
    /// @brief Send event cyclic from buffer data, notifyResultInfo
    void SendEventnotifyResultInfoCyclic();
     
    /// @brief Send event directly from buffer data, notifyResultInfo
    void SendEventnotifyResultInfoTriggered();
     
    /// @brief Send event directly with argument, notifyResultInfo
    void SendEventnotifyResultInfoTriggered(const eevp::ota::subscription::service::skeleton::events::notifyResultInfo::SampleType& data);

    /// @brief Write event data to buffer, notifyRollbackComplete
    void WriteDatanotifyRollbackComplete(const eevp::ota::subscription::service::skeleton::events::notifyRollbackComplete::SampleType& data);
     
    /// @brief Send event cyclic from buffer data, notifyRollbackComplete
    void SendEventnotifyRollbackCompleteCyclic();
     
    /// @brief Send event directly from buffer data, notifyRollbackComplete
    void SendEventnotifyRollbackCompleteTriggered();
     
    /// @brief Send event directly with argument, notifyRollbackComplete
    void SendEventnotifyRollbackCompleteTriggered(const eevp::ota::subscription::service::skeleton::events::notifyRollbackComplete::SampleType& data);

    /// @brief Write event data to buffer, notifySwClusterInfo
    void WriteDatanotifySwClusterInfo(const eevp::ota::subscription::service::skeleton::events::notifySwClusterInfo::SampleType& data);
     
    /// @brief Send event cyclic from buffer data, notifySwClusterInfo
    void SendEventnotifySwClusterInfoCyclic();
     
    /// @brief Send event directly from buffer data, notifySwClusterInfo
    void SendEventnotifySwClusterInfoTriggered();
     
    /// @brief Send event directly with argument, notifySwClusterInfo
    void SendEventnotifySwClusterInfoTriggered(const eevp::ota::subscription::service::skeleton::events::notifySwClusterInfo::SampleType& data);

    /// @brief Write event data to buffer, notifyUpdatableApp
    void WriteDatanotifyUpdatableApp(const eevp::ota::subscription::service::skeleton::events::notifyUpdatableApp::SampleType& data);
     
    /// @brief Send event cyclic from buffer data, notifyUpdatableApp
    void SendEventnotifyUpdatableAppCyclic();
     
    /// @brief Send event directly from buffer data, notifyUpdatableApp
    void SendEventnotifyUpdatableAppTriggered();
     
    /// @brief Send event directly with argument, notifyUpdatableApp
    void SendEventnotifyUpdatableAppTriggered(const eevp::ota::subscription::service::skeleton::events::notifyUpdatableApp::SampleType& data);

    /// @brief Write event data to buffer, notifyUpdateComplete
    void WriteDatanotifyUpdateComplete(const eevp::ota::subscription::service::skeleton::events::notifyUpdateComplete::SampleType& data);
     
    /// @brief Send event cyclic from buffer data, notifyUpdateComplete
    void SendEventnotifyUpdateCompleteCyclic();
     
    /// @brief Send event directly from buffer data, notifyUpdateComplete
    void SendEventnotifyUpdateCompleteTriggered();
     
    /// @brief Send event directly with argument, notifyUpdateComplete
    void SendEventnotifyUpdateCompleteTriggered(const eevp::ota::subscription::service::skeleton::events::notifyUpdateComplete::SampleType& data);
     
private:
    /// @brief Logger for this port
    ara::log::Logger& m_logger;
    
    /// @brief Flag of port status
    bool m_running;
    
    /// @brief Mutex for this port
    std::mutex m_mutex;
    
    /// @brief AUTOSAR Port Interface
    std::unique_ptr<eevp::ota::subscription::service::skeleton::OtaSubscriptionSkeletonImpl> m_interface;
    
    /// @brief Data for event, notifyAppEvent
    eevp::ota::subscription::service::skeleton::events::notifyAppEvent::SampleType m_notifyAppEventData;
    
    /// @brief Data for event, notifyResultInfo
    eevp::ota::subscription::service::skeleton::events::notifyResultInfo::SampleType m_notifyResultInfoData;
    
    /// @brief Data for event, notifyRollbackComplete
    eevp::ota::subscription::service::skeleton::events::notifyRollbackComplete::SampleType m_notifyRollbackCompleteData;
    
    /// @brief Data for event, notifySwClusterInfo
    eevp::ota::subscription::service::skeleton::events::notifySwClusterInfo::SampleType m_notifySwClusterInfoData;
    
    /// @brief Data for event, notifyUpdatableApp
    eevp::ota::subscription::service::skeleton::events::notifyUpdatableApp::SampleType m_notifyUpdatableAppData;
    
    /// @brief Data for event, notifyUpdateComplete
    eevp::ota::subscription::service::skeleton::events::notifyUpdateComplete::SampleType m_notifyUpdateCompleteData;
};
 
} /// namespace port
} /// namespace aa
} /// namespace otaclient
 
#endif /// PARA_AA_GEN_SOFTWARE_COMPONENT_PPORT_OTACLIENT_AA_PPORTOTASUBSCRIPTION_H