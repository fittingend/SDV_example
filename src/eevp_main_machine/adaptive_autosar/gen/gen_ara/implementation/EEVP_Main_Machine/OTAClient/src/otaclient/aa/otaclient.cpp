///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : otaclient.cpp
/// SOFTWARE COMPONENT NAME           : OTAClient
/// GENERATED DATE                    : 2025-08-30 10:53:26
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// INCLUSION HEADER FILES
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "otaclient/aa/otaclient.h"
 
namespace otaclient
{
namespace aa
{
 
OTAClient::OTAClient()
    : m_logger(ara::log::CreateLogger("OTAC", "SWC", ara::log::LogLevel::kVerbose))
    , m_running{false}
    , m_workers(12)
{
}
 
OTAClient::~OTAClient()
{
}
 
bool OTAClient::Initialize()
{
    m_logger.LogVerbose() << "OTAClient::Initialize";
    
    bool init = true;
    
    m_PPortOtaMonitoring = std::make_unique<otaclient::aa::port::PPortOtaMonitoring>();
    m_PPortOtaSubscription = std::make_unique<otaclient::aa::port::PPortOtaSubscription>();
    m_VehiclePackageManagement = std::make_unique<otaclient::aa::port::VehiclePackageManagement>();
    
    // put your code for initialization
    
    return init;
}
 
void OTAClient::Start()
{
    m_logger.LogVerbose() << "OTAClient::Start";
    
    m_PPortOtaMonitoring->Start();
    m_PPortOtaSubscription->Start();
    m_VehiclePackageManagement->Start();
}
 
void OTAClient::Terminate()
{
    m_logger.LogVerbose() << "OTAClient::Terminate";
    
    // stop running
    m_running = false;
    
    m_PPortOtaMonitoring->Terminate();
    m_PPortOtaSubscription->Terminate();
    m_VehiclePackageManagement->Terminate();
}
 
void OTAClient::Run()
{
    m_logger.LogVerbose() << "OTAClient::Run";
    
    // start running
    m_running = true;
    
    m_workers.Async([this] { m_PPortOtaMonitoring->SendEventnotifyServiceEventCyclic(); });
    m_workers.Async([this] { m_PPortOtaMonitoring->SendEventnotifyUpdatableServiceCyclic(); });
    m_workers.Async([this] { m_PPortOtaMonitoring->SendEventresetUcmCompletedCyclic(); });
    m_workers.Async([this] { m_PPortOtaSubscription->SendEventnotifyAppEventCyclic(); });
    m_workers.Async([this] { m_PPortOtaSubscription->SendEventnotifyResultInfoCyclic(); });
    m_workers.Async([this] { m_PPortOtaSubscription->SendEventnotifyRollbackCompleteCyclic(); });
    m_workers.Async([this] { m_PPortOtaSubscription->SendEventnotifySwClusterInfoCyclic(); });
    m_workers.Async([this] { m_PPortOtaSubscription->SendEventnotifyUpdatableAppCyclic(); });
    m_workers.Async([this] { m_PPortOtaSubscription->SendEventnotifyUpdateCompleteCyclic(); });
    m_workers.Async([this] { m_VehiclePackageManagement->ReceiveFieldRequestedPackageCyclic(); });
    m_workers.Async([this] { m_VehiclePackageManagement->ReceiveFieldSafetyStateCyclic(); });
    m_workers.Async([this] { m_VehiclePackageManagement->ReceiveFieldTransferStateCyclic(); });
    
    m_workers.Wait();
}
 
} /// namespace aa
} /// namespace otaclient
