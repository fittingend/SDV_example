///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : pportotamonitoring.cpp
/// SOFTWARE COMPONENT NAME           : PPortOtaMonitoring
/// GENERATED DATE                    : 2025-08-30 10:53:26
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "otaclient/aa/port/pportotamonitoring.h"
 
namespace eevp
{
namespace ota
{
namespace monitoring
{
namespace service
{
namespace skeleton
{
 
OtaMonitoringSkeletonImpl::OtaMonitoringSkeletonImpl(ara::core::InstanceSpecifier instanceSpec, ara::com::MethodCallProcessingMode mode)
    : OtaMonitoringSkeleton(instanceSpec, mode)
    , m_logger(ara::log::CreateLogger("OTAC", "PORT", ara::log::LogLevel::kVerbose))
{
}
 
ara::core::Future<OtaMonitoringSkeleton::requestServiceInstallOutput> OtaMonitoringSkeletonImpl::requestServiceInstall(const eevp::type::String& serviceName)
{
    m_logger.LogVerbose() << "PPortOtaMonitoring::requestServiceInstall::Requested";
    
    requestServiceInstallOutput response;
    ara::core::Promise<requestServiceInstallOutput> promise;
    
    // put your logic
    
    promise.set_value(response);
    return promise.get_future();
}
 
ara::core::Future<OtaMonitoringSkeleton::requestServiceUpdateOutput> OtaMonitoringSkeletonImpl::requestServiceUpdate(const eevp::type::String& serviceName)
{
    m_logger.LogVerbose() << "PPortOtaMonitoring::requestServiceUpdate::Requested";
    
    requestServiceUpdateOutput response;
    ara::core::Promise<requestServiceUpdateOutput> promise;
    
    // put your logic
    
    promise.set_value(response);
    return promise.get_future();
}
 
ara::core::Future<OtaMonitoringSkeleton::requestVersionInfoOutput> OtaMonitoringSkeletonImpl::requestVersionInfo()
{
    m_logger.LogVerbose() << "PPortOtaMonitoring::requestVersionInfo::Requested";
    
    requestVersionInfoOutput response;
    ara::core::Promise<requestVersionInfoOutput> promise;
    
    // put your logic
    
    promise.set_value(response);
    return promise.get_future();
}
 
ara::core::Future<OtaMonitoringSkeleton::resetUcmTestOutput> OtaMonitoringSkeletonImpl::resetUcmTest()
{
    m_logger.LogVerbose() << "PPortOtaMonitoring::resetUcmTest::Requested";
    
    resetUcmTestOutput response;
    ara::core::Promise<resetUcmTestOutput> promise;
    
    // put your logic
    
    promise.set_value(response);
    return promise.get_future();
}
 
} /// namespace skeleton
} /// namespace service
} /// namespace monitoring
} /// namespace ota
} /// namespace eevp

namespace otaclient
{
namespace aa
{
namespace port
{
 
PPortOtaMonitoring::PPortOtaMonitoring()
    : m_logger(ara::log::CreateLogger("OTAC", "PORT", ara::log::LogLevel::kVerbose))
    , m_running{false}
    , m_notifyServiceEventData{"str_string", "str_string", 0ULL, "str_string"}
    , m_notifyUpdatableServiceData{"str_string", "str_string", "str_string"}
    , m_resetUcmCompletedData{false}
{
}
 
PPortOtaMonitoring::~PPortOtaMonitoring()
{
}
 
void PPortOtaMonitoring::Start()
{
    m_logger.LogVerbose() << "PPortOtaMonitoring::Start";
    
    // construct skeleton
    ara::core::InstanceSpecifier specifier{"OTAClient/AA/PPortOtaMonitoring"};
    m_interface = std::make_unique<eevp::ota::monitoring::service::skeleton::OtaMonitoringSkeletonImpl>(specifier);
    
    // offer service
    auto offer = m_interface->OfferService();
    if (offer.HasValue())
    {
        m_running = true;
        m_logger.LogVerbose() << "PPortOtaMonitoring::Start::OfferService";
    }
    else
    {
        m_running = false;
        m_logger.LogError() << "PPortOtaMonitoring::Start::OfferService::" << offer.Error().Message();
    }
}
 
void PPortOtaMonitoring::Terminate()
{
    m_logger.LogVerbose() << "PPortOtaMonitoring::Terminate";
    
    // stop port
    m_running = false;
    
    // stop offer service
    m_interface->StopOfferService();
    m_logger.LogVerbose() << "PPortOtaMonitoring::Terminate::StopOfferService";
}
 
void PPortOtaMonitoring::WriteDatanotifyServiceEvent(const eevp::ota::monitoring::service::skeleton::events::notifyServiceEvent::SampleType& data)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_notifyServiceEventData = data;
}
 
void PPortOtaMonitoring::SendEventnotifyServiceEventCyclic()
{
    while (m_running)
    {
        {
            std::lock_guard<std::mutex> lock(m_mutex);
            
            auto send = m_interface->notifyServiceEvent.Send(m_notifyServiceEventData);
            if (send.HasValue())
            {
                m_logger.LogVerbose() << "PPortOtaMonitoring::SendEventnotifyServiceEventCyclic::Send";
            }
            else
            {
                m_logger.LogError() << "PPortOtaMonitoring::SendEventnotifyServiceEventCyclic::Send::" << send.Error().Message();
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void PPortOtaMonitoring::SendEventnotifyServiceEventTriggered()
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    auto send = m_interface->notifyServiceEvent.Send(m_notifyServiceEventData);
    if (send.HasValue())
    {
        m_logger.LogVerbose() << "PPortOtaMonitoring::SendEventnotifyServiceEventTriggered::Send";
    }
    else
    {
        m_logger.LogError() << "PPortOtaMonitoring::SendEventnotifyServiceEventTriggered::Send::" << send.Error().Message();
    }
}
 
void PPortOtaMonitoring::SendEventnotifyServiceEventTriggered(const eevp::ota::monitoring::service::skeleton::events::notifyServiceEvent::SampleType& data)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_notifyServiceEventData = data;
    auto send = m_interface->notifyServiceEvent.Send(m_notifyServiceEventData);
    if (send.HasValue())
    {
        m_logger.LogVerbose() << "PPortOtaMonitoring::SendEventnotifyServiceEventTriggered::Send";
    }
    else
    {
        m_logger.LogError() << "PPortOtaMonitoring::SendEventnotifyServiceEventTriggered::Send::" << send.Error().Message();
    }
}
 
void PPortOtaMonitoring::WriteDatanotifyUpdatableService(const eevp::ota::monitoring::service::skeleton::events::notifyUpdatableService::SampleType& data)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_notifyUpdatableServiceData = data;
}
 
void PPortOtaMonitoring::SendEventnotifyUpdatableServiceCyclic()
{
    while (m_running)
    {
        {
            std::lock_guard<std::mutex> lock(m_mutex);
            
            auto send = m_interface->notifyUpdatableService.Send(m_notifyUpdatableServiceData);
            if (send.HasValue())
            {
                m_logger.LogVerbose() << "PPortOtaMonitoring::SendEventnotifyUpdatableServiceCyclic::Send";
            }
            else
            {
                m_logger.LogError() << "PPortOtaMonitoring::SendEventnotifyUpdatableServiceCyclic::Send::" << send.Error().Message();
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void PPortOtaMonitoring::SendEventnotifyUpdatableServiceTriggered()
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    auto send = m_interface->notifyUpdatableService.Send(m_notifyUpdatableServiceData);
    if (send.HasValue())
    {
        m_logger.LogVerbose() << "PPortOtaMonitoring::SendEventnotifyUpdatableServiceTriggered::Send";
    }
    else
    {
        m_logger.LogError() << "PPortOtaMonitoring::SendEventnotifyUpdatableServiceTriggered::Send::" << send.Error().Message();
    }
}
 
void PPortOtaMonitoring::SendEventnotifyUpdatableServiceTriggered(const eevp::ota::monitoring::service::skeleton::events::notifyUpdatableService::SampleType& data)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_notifyUpdatableServiceData = data;
    auto send = m_interface->notifyUpdatableService.Send(m_notifyUpdatableServiceData);
    if (send.HasValue())
    {
        m_logger.LogVerbose() << "PPortOtaMonitoring::SendEventnotifyUpdatableServiceTriggered::Send";
    }
    else
    {
        m_logger.LogError() << "PPortOtaMonitoring::SendEventnotifyUpdatableServiceTriggered::Send::" << send.Error().Message();
    }
}
 
void PPortOtaMonitoring::WriteDataresetUcmCompleted(const eevp::ota::monitoring::service::skeleton::events::resetUcmCompleted::SampleType& data)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_resetUcmCompletedData = data;
}
 
void PPortOtaMonitoring::SendEventresetUcmCompletedCyclic()
{
    while (m_running)
    {
        {
            std::lock_guard<std::mutex> lock(m_mutex);
            
            auto send = m_interface->resetUcmCompleted.Send(m_resetUcmCompletedData);
            if (send.HasValue())
            {
                m_logger.LogVerbose() << "PPortOtaMonitoring::SendEventresetUcmCompletedCyclic::Send";
            }
            else
            {
                m_logger.LogError() << "PPortOtaMonitoring::SendEventresetUcmCompletedCyclic::Send::" << send.Error().Message();
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void PPortOtaMonitoring::SendEventresetUcmCompletedTriggered()
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    auto send = m_interface->resetUcmCompleted.Send(m_resetUcmCompletedData);
    if (send.HasValue())
    {
        m_logger.LogVerbose() << "PPortOtaMonitoring::SendEventresetUcmCompletedTriggered::Send";
    }
    else
    {
        m_logger.LogError() << "PPortOtaMonitoring::SendEventresetUcmCompletedTriggered::Send::" << send.Error().Message();
    }
}
 
void PPortOtaMonitoring::SendEventresetUcmCompletedTriggered(const eevp::ota::monitoring::service::skeleton::events::resetUcmCompleted::SampleType& data)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_resetUcmCompletedData = data;
    auto send = m_interface->resetUcmCompleted.Send(m_resetUcmCompletedData);
    if (send.HasValue())
    {
        m_logger.LogVerbose() << "PPortOtaMonitoring::SendEventresetUcmCompletedTriggered::Send";
    }
    else
    {
        m_logger.LogError() << "PPortOtaMonitoring::SendEventresetUcmCompletedTriggered::Send::" << send.Error().Message();
    }
}
 
} /// namespace port
} /// namespace aa
} /// namespace otaclient
 
/// EOF