///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : packagemanagement.h
/// SOFTWARE COMPONENT NAME           : PackageManagement
/// GENERATED DATE                    : 2025-08-30 10:53:49
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef PARA_AA_GEN_SOFTWARE_COMPONENT_PPORT_UCM_PARA_PACKAGEMANAGEMENT_H
#define PARA_AA_GEN_SOFTWARE_COMPONENT_PPORT_UCM_PARA_PACKAGEMANAGEMENT_H
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// INCLUSION HEADER FILES
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "ara/ucm/pkgmgr/packagemanagement_skeleton.h"
 
#include "ara/log/logger.h"
 
#include <mutex>
#include <thread>
 
namespace ara
{
namespace ucm
{
namespace pkgmgr
{
namespace skeleton
{
 
class PackageManagementSkeletonImpl : public PackageManagementSkeleton
{
public:
    /// @brief Constructor
    PackageManagementSkeletonImpl(ara::core::InstanceSpecifier instanceSpec, ara::com::MethodCallProcessingMode mode = ara::com::MethodCallProcessingMode::kEvent);
    
    /// @brief Request with Response method, Activate
    ara::core::Future<PackageManagementSkeleton::ActivateOutput> Activate() override;
    
    /// @brief Request with Response method, Cancel
    ara::core::Future<PackageManagementSkeleton::CancelOutput> Cancel(const ara::ucm::TransferIdType& id) override;
    
    /// @brief Request with Response method, DeleteTransfer
    ara::core::Future<PackageManagementSkeleton::DeleteTransferOutput> DeleteTransfer(const ara::ucm::TransferIdType& id) override;
    
    /// @brief Request with Response method, Finish
    ara::core::Future<PackageManagementSkeleton::FinishOutput> Finish() override;
    
    /// @brief Request with Response method, GetHistory
    ara::core::Future<PackageManagementSkeleton::GetHistoryOutput> GetHistory(const std::uint64_t& timestampGE, const std::uint64_t& timestampLT) override;
    
    /// @brief Request with Response method, GetId
    ara::core::Future<PackageManagementSkeleton::GetIdOutput> GetId() override;
    
    /// @brief Request with Response method, GetSwClusterChangeInfo
    ara::core::Future<PackageManagementSkeleton::GetSwClusterChangeInfoOutput> GetSwClusterChangeInfo() override;
    
    /// @brief Request with Response method, GetSwClusterDescription
    ara::core::Future<PackageManagementSkeleton::GetSwClusterDescriptionOutput> GetSwClusterDescription() override;
    
    /// @brief Request with Response method, GetSwClusterInfo
    ara::core::Future<PackageManagementSkeleton::GetSwClusterInfoOutput> GetSwClusterInfo() override;
    
    /// @brief Request with Response method, GetSwPackages
    ara::core::Future<PackageManagementSkeleton::GetSwPackagesOutput> GetSwPackages() override;
    
    /// @brief Request with Response method, GetSwProcessProgress
    ara::core::Future<PackageManagementSkeleton::GetSwProcessProgressOutput> GetSwProcessProgress(const ara::ucm::TransferIdType& id) override;
    
    /// @brief Request with Response method, ProcessSwPackage
    ara::core::Future<PackageManagementSkeleton::ProcessSwPackageOutput> ProcessSwPackage(const ara::ucm::TransferIdType& id) override;
    
    /// @brief Request with Response method, RevertProcessedSwPackages
    ara::core::Future<PackageManagementSkeleton::RevertProcessedSwPackagesOutput> RevertProcessedSwPackages() override;
    
    /// @brief Request with Response method, Rollback
    ara::core::Future<PackageManagementSkeleton::RollbackOutput> Rollback() override;
    
    /// @brief Request with Response method, TransferData
    ara::core::Future<PackageManagementSkeleton::TransferDataOutput> TransferData(const ara::ucm::TransferIdType& id, const ara::ucm::ByteVectorType& data, const std::uint64_t& blockCounter) override;
    
    /// @brief Request with Response method, TransferExit
    ara::core::Future<PackageManagementSkeleton::TransferExitOutput> TransferExit(const ara::ucm::TransferIdType& id) override;
    
    /// @brief Request with Response method, TransferStart
    ara::core::Future<PackageManagementSkeleton::TransferStartOutput> TransferStart(const std::uint64_t& size) override;
    
    /// @brief Getter for field, CurrentStatus
    ara::core::Future<fields::CurrentStatus::FieldType> GetCurrentStatus();
    
    /// @brief Notifier for field, CurrentStatus
    void NotifyCurrentStatus();
    
    /// @brief Update field value by software component, CurrentStatus
    void UpdateCurrentStatus(const fields::CurrentStatus::FieldType& value);
    
private:
    /// @brief Logger for this port
    ara::log::Logger& m_logger;
    
    /// @brief Field, CurrentStatus
    fields::CurrentStatus::FieldType m_CurrentStatus;
    
};
 
} /// namespace skeleton
} /// namespace pkgmgr
} /// namespace ucm
} /// namespace ara

namespace ucm
{
namespace para
{
namespace port
{
 
class PackageManagement
{
public:
    /// @brief Constructor
    PackageManagement();
    
    /// @brief Destructor
    ~PackageManagement();
    
    /// @brief Start port
    void Start();
    
    /// @brief Terminate port
    void Terminate();
    
    /// @brief Write field value to buffer, CurrentStatus
    void WriteValueCurrentStatus(const ara::ucm::pkgmgr::skeleton::fields::CurrentStatus::FieldType& value);
     
    /// @brief Notify field cyclic from buffer, CurrentStatus
    void NotifyFieldCurrentStatusCyclic();
     
    /// @brief Notify field directly from buffer data, CurrentStatus
    void NotifyFieldCurrentStatusTriggered();
     
    /// @brief Notify field directly with argument, CurrentStatus
    void NotifyFieldCurrentStatusTriggered(const ara::ucm::pkgmgr::skeleton::fields::CurrentStatus::FieldType& value);
     
private:
    /// @brief Logger for this port
    ara::log::Logger& m_logger;
    
    /// @brief Flag of port status
    bool m_running;
    
    /// @brief Mutex for this port
    std::mutex m_mutex;
    
    /// @brief AUTOSAR Port Interface
    std::unique_ptr<ara::ucm::pkgmgr::skeleton::PackageManagementSkeletonImpl> m_interface;
    
};
 
} /// namespace port
} /// namespace para
} /// namespace ucm
 
#endif /// PARA_AA_GEN_SOFTWARE_COMPONENT_PPORT_UCM_PARA_PACKAGEMANAGEMENT_H