///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : updaterequest.h
/// SOFTWARE COMPONENT NAME           : UpdateRequest
/// GENERATED DATE                    : 2025-08-30 10:53:49
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef PARA_AA_GEN_SOFTWARE_COMPONENT_RPORT_UCM_PARA_UPDATEREQUEST_H
#define PARA_AA_GEN_SOFTWARE_COMPONENT_RPORT_UCM_PARA_UPDATEREQUEST_H
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// INCLUSION HEADER FILES
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "ara/sm/updaterequest_proxy.h"
 
#include "ara/log/logger.h"
 
#include <mutex>
#include <thread>
 
namespace ucm
{
namespace para
{
namespace port
{
 
class UpdateRequest
{
public:
    /// @brief Constructor
    UpdateRequest();
    
    /// @brief Destructor
    ~UpdateRequest();
    
    /// @brief Start port
    void Start();
    
    /// @brief Terminate port
    void Terminate();

    /// @brief Request with Response method using by software component, PrepareRollback
    void RequestPrepareRollback(const ara::sm::FunctionGroupList& FunctionGroupList);
     
    /// @brief Regist callback from software component
    void RegistResponseHandlerPrepareRollback(std::function<void(const ara::sm::proxy::methods::PrepareRollback::Output&)> handler);
    
    /// @brief Request with Response method using by software component, PrepareUpdate
    void RequestPrepareUpdate(const ara::sm::FunctionGroupList& FunctionGroupList);
     
    /// @brief Regist callback from software component
    void RegistResponseHandlerPrepareUpdate(std::function<void(const ara::sm::proxy::methods::PrepareUpdate::Output&)> handler);
    
    /// @brief Request with Response method using by software component, ResetMachine
    void RequestResetMachine();
     
    /// @brief Regist callback from software component
    void RegistResponseHandlerResetMachine(std::function<void(const ara::sm::proxy::methods::ResetMachine::Output&)> handler);
    
    /// @brief Request with Response method using by software component, StartUpdateSession
    void RequestStartUpdateSession();
     
    /// @brief Regist callback from software component
    void RegistResponseHandlerStartUpdateSession(std::function<void(const ara::sm::proxy::methods::StartUpdateSession::Output&)> handler);
    
    /// @brief Fire and Forget method using by software component, StopUpdateSession
    void RequestStopUpdateSession();
    
    /// @brief Request with Response method using by software component, VerifyUpdate
    void RequestVerifyUpdate(const ara::sm::FunctionGroupList& FunctionGroupList);
     
    /// @brief Regist callback from software component
    void RegistResponseHandlerVerifyUpdate(std::function<void(const ara::sm::proxy::methods::VerifyUpdate::Output&)> handler);
    
private:
    /// @brief Callback for find service
    void Find(ara::com::ServiceHandleContainer<ara::sm::proxy::UpdateRequestProxy::HandleType> handles,
              ara::com::FindServiceHandle findHandle);

private:
    /// @brief Logger for this port
    ara::log::Logger& m_logger;
    
    /// @brief Flag of port status
    bool m_running;
    
    /// @brief Flag of find service status
    bool m_found;
    
    /// @brief Mutex for this port
    std::mutex m_mutex; 
    
    /// @brief AUTOSAR Port Interface
    std::unique_ptr<ara::sm::proxy::UpdateRequestProxy> m_interface;
    
    /// @brief Find service handle
    std::unique_ptr<ara::com::FindServiceHandle> m_findHandle;

    /// @brief Callback from software component, PrepareRollback
    std::function<void(const ara::sm::proxy::methods::PrepareRollback::Output&)> m_responderPrepareRollback;
    
    /// @brief Callback from software component, PrepareUpdate
    std::function<void(const ara::sm::proxy::methods::PrepareUpdate::Output&)> m_responderPrepareUpdate;
    
    /// @brief Callback from software component, ResetMachine
    std::function<void(const ara::sm::proxy::methods::ResetMachine::Output&)> m_responderResetMachine;
    
    /// @brief Callback from software component, StartUpdateSession
    std::function<void(const ara::sm::proxy::methods::StartUpdateSession::Output&)> m_responderStartUpdateSession;
    
    /// @brief Callback from software component, VerifyUpdate
    std::function<void(const ara::sm::proxy::methods::VerifyUpdate::Output&)> m_responderVerifyUpdate;
};
 
} /// namespace port
} /// namespace para
} /// namespace ucm
 
#endif /// PARA_AA_GEN_SOFTWARE_COMPONENT_RPORT_UCM_PARA_UPDATEREQUEST_H