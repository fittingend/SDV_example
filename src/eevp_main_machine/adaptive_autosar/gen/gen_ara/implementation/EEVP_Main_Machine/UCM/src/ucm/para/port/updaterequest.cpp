///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : updaterequest.cpp
/// SOFTWARE COMPONENT NAME           : UpdateRequest
/// GENERATED DATE                    : 2025-08-30 10:53:50
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "ucm/para/port/updaterequest.h"
 
namespace ucm
{
namespace para
{
namespace port
{
 
UpdateRequest::UpdateRequest()
    : m_logger(ara::log::CreateLogger("UCM", "PORT", ara::log::LogLevel::kVerbose))
    , m_running{false}
    , m_found{false}
    , m_responderPrepareRollback{nullptr}
    , m_responderPrepareUpdate{nullptr}
    , m_responderResetMachine{nullptr}
    , m_responderStartUpdateSession{nullptr}
    , m_responderVerifyUpdate{nullptr}
{
}
 
UpdateRequest::~UpdateRequest()
{
}
 
void UpdateRequest::Start()
{
    m_logger.LogVerbose() << "UpdateRequest::Start";
    
    // regist callback
    ara::core::InstanceSpecifier specifier{"UCM/PARA/UpdateRequest"};
    auto handler = [this](ara::com::ServiceHandleContainer<ara::sm::proxy::UpdateRequestProxy::HandleType> handles,
                          ara::com::FindServiceHandle findHandle) {
        this->Find(handles, findHandle);
    };
    
    // find service
    auto find = ara::sm::proxy::UpdateRequestProxy::StartFindService(handler, specifier);
    if (find.HasValue())
    {
        m_logger.LogVerbose() << "UpdateRequest::Start::StartFindService";
    }
    else
    {
        m_logger.LogError() << "UpdateRequest::Start::StartFindService::" << find.Error().Message();
    }
    
    // run port
    m_running = true;
}
 
void UpdateRequest::Terminate()
{
    m_logger.LogVerbose() << "UpdateRequest::Terminate";
    
    // stop port
    m_running = false;
    
    // clear service proxy
    if (m_interface)
    {
        
        // stop find service
        m_interface->StopFindService(*m_findHandle);
        m_found = false;
        
        m_logger.LogVerbose() << "UpdateRequest::Terminate::StopFindService";
    }
}
 
void UpdateRequest::Find(ara::com::ServiceHandleContainer<ara::sm::proxy::UpdateRequestProxy::HandleType> handles, ara::com::FindServiceHandle findHandle)
{
    // check finding handles
    if (handles.empty())
    {
        m_logger.LogVerbose() << "UpdateRequest::Find::Service Instances not found";
        return;
    }
    else
    {
        for (auto& handle : handles)
        {
            m_logger.LogVerbose() << "UpdateRequest::Find::Searched Instance::ServiceId =" << 
                                     handle.GetServiceHandle().serviceId << 
                                     ", InstanceId =" << 
                                     handle.GetServiceHandle().instanceId;
        }
    }
    
    // create proxy
    if (m_interface)
    {
        m_logger.LogVerbose() << "UpdateRequest::Find::Proxy is already running";
    }
    else
    {
        m_logger.LogVerbose() << "UpdateRequest::Find::Using Instance::ServiceId =" << 
                                 handles[0].GetServiceHandle().serviceId << 
                                 ", InstanceId =" << 
                                 handles[0].GetServiceHandle().instanceId;
        m_interface = std::make_unique<ara::sm::proxy::UpdateRequestProxy>(handles[0]);
        m_findHandle = std::make_unique<ara::com::FindServiceHandle>(findHandle);
        m_found = true;
        
    }
}
 
void UpdateRequest::RequestPrepareRollback(const ara::sm::FunctionGroupList& FunctionGroupList)
{
    if (m_found)
    {
        auto request = m_interface->PrepareRollback(FunctionGroupList);
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "UpdateRequest::RequestPrepareRollback::Responded";
            
            auto result = response.Value();
            if (m_responderPrepareRollback)
            {
                m_responderPrepareRollback(result);
            }
        }
        else
        {
            m_logger.LogError() << "UpdateRequest::RequestPrepareRollback::" << response.Error().Message();
        }
    }
}
 
void UpdateRequest::RegistResponseHandlerPrepareRollback(std::function<void(const ara::sm::proxy::methods::PrepareRollback::Output&)> handler)
{
    m_responderPrepareRollback = handler;
}
 
void UpdateRequest::RequestPrepareUpdate(const ara::sm::FunctionGroupList& FunctionGroupList)
{
    if (m_found)
    {
        auto request = m_interface->PrepareUpdate(FunctionGroupList);
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "UpdateRequest::RequestPrepareUpdate::Responded";
            
            auto result = response.Value();
            if (m_responderPrepareUpdate)
            {
                m_responderPrepareUpdate(result);
            }
        }
        else
        {
            m_logger.LogError() << "UpdateRequest::RequestPrepareUpdate::" << response.Error().Message();
        }
    }
}
 
void UpdateRequest::RegistResponseHandlerPrepareUpdate(std::function<void(const ara::sm::proxy::methods::PrepareUpdate::Output&)> handler)
{
    m_responderPrepareUpdate = handler;
}
 
void UpdateRequest::RequestResetMachine()
{
    if (m_found)
    {
        auto request = m_interface->ResetMachine();
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "UpdateRequest::RequestResetMachine::Responded";
            
            auto result = response.Value();
            if (m_responderResetMachine)
            {
                m_responderResetMachine(result);
            }
        }
        else
        {
            m_logger.LogError() << "UpdateRequest::RequestResetMachine::" << response.Error().Message();
        }
    }
}
 
void UpdateRequest::RegistResponseHandlerResetMachine(std::function<void(const ara::sm::proxy::methods::ResetMachine::Output&)> handler)
{
    m_responderResetMachine = handler;
}
 
void UpdateRequest::RequestStartUpdateSession()
{
    if (m_found)
    {
        auto request = m_interface->StartUpdateSession();
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "UpdateRequest::RequestStartUpdateSession::Responded";
            
            auto result = response.Value();
            if (m_responderStartUpdateSession)
            {
                m_responderStartUpdateSession(result);
            }
        }
        else
        {
            m_logger.LogError() << "UpdateRequest::RequestStartUpdateSession::" << response.Error().Message();
        }
    }
}
 
void UpdateRequest::RegistResponseHandlerStartUpdateSession(std::function<void(const ara::sm::proxy::methods::StartUpdateSession::Output&)> handler)
{
    m_responderStartUpdateSession = handler;
}
 
void UpdateRequest::RequestStopUpdateSession()
{
    if (m_found)
    {
        m_interface->StopUpdateSession();
    }
}
 
void UpdateRequest::RequestVerifyUpdate(const ara::sm::FunctionGroupList& FunctionGroupList)
{
    if (m_found)
    {
        auto request = m_interface->VerifyUpdate(FunctionGroupList);
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "UpdateRequest::RequestVerifyUpdate::Responded";
            
            auto result = response.Value();
            if (m_responderVerifyUpdate)
            {
                m_responderVerifyUpdate(result);
            }
        }
        else
        {
            m_logger.LogError() << "UpdateRequest::RequestVerifyUpdate::" << response.Error().Message();
        }
    }
}
 
void UpdateRequest::RegistResponseHandlerVerifyUpdate(std::function<void(const ara::sm::proxy::methods::VerifyUpdate::Output&)> handler)
{
    m_responderVerifyUpdate = handler;
}
 
} /// namespace port
} /// namespace para
} /// namespace ucm
 
/// EOF