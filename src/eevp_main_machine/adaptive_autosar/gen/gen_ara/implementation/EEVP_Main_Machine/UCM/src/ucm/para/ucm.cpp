///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : ucm.cpp
/// SOFTWARE COMPONENT NAME           : UCM
/// GENERATED DATE                    : 2025-08-30 10:53:49
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// INCLUSION HEADER FILES
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "ucm/para/ucm.h"
 
namespace ucm
{
namespace para
{
 
UCM::UCM()
    : m_logger(ara::log::CreateLogger("UCM", "SWC", ara::log::LogLevel::kVerbose))
    , m_running{false}
    , m_workers(1)
{
}
 
UCM::~UCM()
{
}
 
bool UCM::Initialize()
{
    m_logger.LogVerbose() << "UCM::Initialize";
    
    bool init = true;
    
    m_PackageManagement = std::make_unique<ucm::para::port::PackageManagement>();
    m_UpdateRequest = std::make_unique<ucm::para::port::UpdateRequest>();
    
    // put your code for initialization
    
    return init;
}
 
void UCM::Start()
{
    m_logger.LogVerbose() << "UCM::Start";
    
    m_PackageManagement->Start();
    m_UpdateRequest->Start();
}
 
void UCM::Terminate()
{
    m_logger.LogVerbose() << "UCM::Terminate";
    
    // stop running
    m_running = false;
    
    m_PackageManagement->Terminate();
    m_UpdateRequest->Terminate();
}
 
void UCM::Run()
{
    m_logger.LogVerbose() << "UCM::Run";
    
    // start running
    m_running = true;
    
    m_workers.Async([this] { m_PackageManagement->NotifyFieldCurrentStatusCyclic(); });
    
    m_workers.Wait();
}
 
} /// namespace para
} /// namespace ucm
