///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : pport_soa_smartfilm.cpp
/// SOFTWARE COMPONENT NAME           : PPort_SOA_SmartFilm
/// GENERATED DATE                    : 2025-08-30 10:53:43
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "soa_smartfilm/aa/port/pport_soa_smartfilm.h"
 
namespace eevp
{
namespace control
{
namespace skeleton
{
 
SoaSmartFilmSkeletonImpl::SoaSmartFilmSkeletonImpl(ara::core::InstanceSpecifier instanceSpec, ara::com::MethodCallProcessingMode mode)
    : SoaSmartFilmSkeleton(instanceSpec, mode)
    , m_logger(ara::log::CreateLogger("SSFM", "PORT", ara::log::LogLevel::kVerbose))
    , m_soaFilmAuto{false}
    , m_soaFilmDeviceNormal{eevp::control::SoaDeviceIsNormal::kNORMAL}
    , m_soaFilmOpacities{{0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U}}
    , m_soaFilmSwVersion{0U}
{
    // regist get handler, soaFilmAuto
    auto soafilmauto_get_handler = [this]() {
        return GetsoaFilmAuto();
    };
    soaFilmAuto.RegisterGetHandler(soafilmauto_get_handler);
    
    // regist get handler, soaFilmDeviceNormal
    auto soafilmdevicenormal_get_handler = [this]() {
        return GetsoaFilmDeviceNormal();
    };
    soaFilmDeviceNormal.RegisterGetHandler(soafilmdevicenormal_get_handler);
    
    // regist get handler, soaFilmOpacities
    auto soafilmopacities_get_handler = [this]() {
        return GetsoaFilmOpacities();
    };
    soaFilmOpacities.RegisterGetHandler(soafilmopacities_get_handler);
    
    // regist get handler, soaFilmSwVersion
    auto soafilmswversion_get_handler = [this]() {
        return GetsoaFilmSwVersion();
    };
    soaFilmSwVersion.RegisterGetHandler(soafilmswversion_get_handler);
}
 
void SoaSmartFilmSkeletonImpl::SetAllOpacities(const std::uint8_t& opacity)
{
    m_logger.LogVerbose() << "PPort_SOA_SmartFilm::SetAllOpacities::Triggered";
    
    // put your logic
}
 
void SoaSmartFilmSkeletonImpl::SetAuto(const bool& on)
{
    m_logger.LogVerbose() << "PPort_SOA_SmartFilm::SetAuto::Triggered";
    
    // put your logic
}
 
void SoaSmartFilmSkeletonImpl::SetOpacity(const eevp::control::SoaFilmPos& pos, const std::uint8_t& opacity)
{
    m_logger.LogVerbose() << "PPort_SOA_SmartFilm::SetOpacity::Triggered";
    
    // put your logic
}
 
ara::core::Future<fields::soaFilmAuto::FieldType> SoaSmartFilmSkeletonImpl::GetsoaFilmAuto()
{
    m_logger.LogVerbose() << "PPort_SOA_SmartFilm::GetsoaFilmAuto::Requested";
    
    ara::core::Promise<fields::soaFilmAuto::FieldType> promise;
    
    promise.set_value(m_soaFilmAuto);
    return promise.get_future();
}
 
void SoaSmartFilmSkeletonImpl::NotifysoaFilmAuto()
{
    auto notify = soaFilmAuto.Update(m_soaFilmAuto);
    if (notify.HasValue())
    {
        m_logger.LogVerbose() << "PPort_SOA_SmartFilm::NotifysoaFilmAuto::Update";
    }
    else
    {
        m_logger.LogError() << "PPort_SOA_SmartFilm::NotifysoaFilmAuto::Update::" << notify.Error().Message();
    }
}
 
void SoaSmartFilmSkeletonImpl::UpdatesoaFilmAuto(const fields::soaFilmAuto::FieldType& value)
{
    m_soaFilmAuto = value;
}
 
ara::core::Future<fields::soaFilmDeviceNormal::FieldType> SoaSmartFilmSkeletonImpl::GetsoaFilmDeviceNormal()
{
    m_logger.LogVerbose() << "PPort_SOA_SmartFilm::GetsoaFilmDeviceNormal::Requested";
    
    ara::core::Promise<fields::soaFilmDeviceNormal::FieldType> promise;
    
    promise.set_value(m_soaFilmDeviceNormal);
    return promise.get_future();
}
 
void SoaSmartFilmSkeletonImpl::NotifysoaFilmDeviceNormal()
{
    auto notify = soaFilmDeviceNormal.Update(m_soaFilmDeviceNormal);
    if (notify.HasValue())
    {
        m_logger.LogVerbose() << "PPort_SOA_SmartFilm::NotifysoaFilmDeviceNormal::Update";
    }
    else
    {
        m_logger.LogError() << "PPort_SOA_SmartFilm::NotifysoaFilmDeviceNormal::Update::" << notify.Error().Message();
    }
}
 
void SoaSmartFilmSkeletonImpl::UpdatesoaFilmDeviceNormal(const fields::soaFilmDeviceNormal::FieldType& value)
{
    m_soaFilmDeviceNormal = value;
}
 
ara::core::Future<fields::soaFilmOpacities::FieldType> SoaSmartFilmSkeletonImpl::GetsoaFilmOpacities()
{
    m_logger.LogVerbose() << "PPort_SOA_SmartFilm::GetsoaFilmOpacities::Requested";
    
    ara::core::Promise<fields::soaFilmOpacities::FieldType> promise;
    
    promise.set_value(m_soaFilmOpacities);
    return promise.get_future();
}
 
void SoaSmartFilmSkeletonImpl::NotifysoaFilmOpacities()
{
    auto notify = soaFilmOpacities.Update(m_soaFilmOpacities);
    if (notify.HasValue())
    {
        m_logger.LogVerbose() << "PPort_SOA_SmartFilm::NotifysoaFilmOpacities::Update";
    }
    else
    {
        m_logger.LogError() << "PPort_SOA_SmartFilm::NotifysoaFilmOpacities::Update::" << notify.Error().Message();
    }
}
 
void SoaSmartFilmSkeletonImpl::UpdatesoaFilmOpacities(const fields::soaFilmOpacities::FieldType& value)
{
    m_soaFilmOpacities = value;
}
 
ara::core::Future<fields::soaFilmSwVersion::FieldType> SoaSmartFilmSkeletonImpl::GetsoaFilmSwVersion()
{
    m_logger.LogVerbose() << "PPort_SOA_SmartFilm::GetsoaFilmSwVersion::Requested";
    
    ara::core::Promise<fields::soaFilmSwVersion::FieldType> promise;
    
    promise.set_value(m_soaFilmSwVersion);
    return promise.get_future();
}
 
void SoaSmartFilmSkeletonImpl::NotifysoaFilmSwVersion()
{
    auto notify = soaFilmSwVersion.Update(m_soaFilmSwVersion);
    if (notify.HasValue())
    {
        m_logger.LogVerbose() << "PPort_SOA_SmartFilm::NotifysoaFilmSwVersion::Update";
    }
    else
    {
        m_logger.LogError() << "PPort_SOA_SmartFilm::NotifysoaFilmSwVersion::Update::" << notify.Error().Message();
    }
}
 
void SoaSmartFilmSkeletonImpl::UpdatesoaFilmSwVersion(const fields::soaFilmSwVersion::FieldType& value)
{
    m_soaFilmSwVersion = value;
}
 
} /// namespace skeleton
} /// namespace control
} /// namespace eevp

namespace soa_smartfilm
{
namespace aa
{
namespace port
{
 
PPort_SOA_SmartFilm::PPort_SOA_SmartFilm()
    : m_logger(ara::log::CreateLogger("SSFM", "PORT", ara::log::LogLevel::kVerbose))
    , m_running{false}
{
}
 
PPort_SOA_SmartFilm::~PPort_SOA_SmartFilm()
{
}
 
void PPort_SOA_SmartFilm::Start()
{
    m_logger.LogVerbose() << "PPort_SOA_SmartFilm::Start";
    
    // construct skeleton
    ara::core::InstanceSpecifier specifier{"SOA_SmartFilm/AA/PPort_SOA_SmartFilm"};
    m_interface = std::make_unique<eevp::control::skeleton::SoaSmartFilmSkeletonImpl>(specifier);
    
    // offer service
    auto offer = m_interface->OfferService();
    if (offer.HasValue())
    {
        m_running = true;
        m_logger.LogVerbose() << "PPort_SOA_SmartFilm::Start::OfferService";
    }
    else
    {
        m_running = false;
        m_logger.LogError() << "PPort_SOA_SmartFilm::Start::OfferService::" << offer.Error().Message();
    }
}
 
void PPort_SOA_SmartFilm::Terminate()
{
    m_logger.LogVerbose() << "PPort_SOA_SmartFilm::Terminate";
    
    // stop port
    m_running = false;
    
    // stop offer service
    m_interface->StopOfferService();
    m_logger.LogVerbose() << "PPort_SOA_SmartFilm::Terminate::StopOfferService";
}
 
void PPort_SOA_SmartFilm::WriteValuesoaFilmAuto(const eevp::control::skeleton::fields::soaFilmAuto::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdatesoaFilmAuto(value);
}
 
void PPort_SOA_SmartFilm::NotifyFieldsoaFilmAutoCyclic()
{
    while (m_running)
    {
        {
            std::lock_guard<std::mutex> lock(m_mutex);
            
            m_interface->NotifysoaFilmAuto();
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void PPort_SOA_SmartFilm::NotifyFieldsoaFilmAutoTriggered()
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->NotifysoaFilmAuto();
}
 
void PPort_SOA_SmartFilm::NotifyFieldsoaFilmAutoTriggered(const eevp::control::skeleton::fields::soaFilmAuto::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdatesoaFilmAuto(value);
    m_interface->NotifysoaFilmAuto();
}
 
void PPort_SOA_SmartFilm::WriteValuesoaFilmDeviceNormal(const eevp::control::skeleton::fields::soaFilmDeviceNormal::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdatesoaFilmDeviceNormal(value);
}
 
void PPort_SOA_SmartFilm::NotifyFieldsoaFilmDeviceNormalCyclic()
{
    while (m_running)
    {
        {
            std::lock_guard<std::mutex> lock(m_mutex);
            
            m_interface->NotifysoaFilmDeviceNormal();
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void PPort_SOA_SmartFilm::NotifyFieldsoaFilmDeviceNormalTriggered()
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->NotifysoaFilmDeviceNormal();
}
 
void PPort_SOA_SmartFilm::NotifyFieldsoaFilmDeviceNormalTriggered(const eevp::control::skeleton::fields::soaFilmDeviceNormal::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdatesoaFilmDeviceNormal(value);
    m_interface->NotifysoaFilmDeviceNormal();
}
 
void PPort_SOA_SmartFilm::WriteValuesoaFilmOpacities(const eevp::control::skeleton::fields::soaFilmOpacities::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdatesoaFilmOpacities(value);
}
 
void PPort_SOA_SmartFilm::NotifyFieldsoaFilmOpacitiesCyclic()
{
    while (m_running)
    {
        {
            std::lock_guard<std::mutex> lock(m_mutex);
            
            m_interface->NotifysoaFilmOpacities();
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void PPort_SOA_SmartFilm::NotifyFieldsoaFilmOpacitiesTriggered()
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->NotifysoaFilmOpacities();
}
 
void PPort_SOA_SmartFilm::NotifyFieldsoaFilmOpacitiesTriggered(const eevp::control::skeleton::fields::soaFilmOpacities::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdatesoaFilmOpacities(value);
    m_interface->NotifysoaFilmOpacities();
}
 
void PPort_SOA_SmartFilm::WriteValuesoaFilmSwVersion(const eevp::control::skeleton::fields::soaFilmSwVersion::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdatesoaFilmSwVersion(value);
}
 
void PPort_SOA_SmartFilm::NotifyFieldsoaFilmSwVersionCyclic()
{
    while (m_running)
    {
        {
            std::lock_guard<std::mutex> lock(m_mutex);
            
            m_interface->NotifysoaFilmSwVersion();
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void PPort_SOA_SmartFilm::NotifyFieldsoaFilmSwVersionTriggered()
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->NotifysoaFilmSwVersion();
}
 
void PPort_SOA_SmartFilm::NotifyFieldsoaFilmSwVersionTriggered(const eevp::control::skeleton::fields::soaFilmSwVersion::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdatesoaFilmSwVersion(value);
    m_interface->NotifysoaFilmSwVersion();
}
 
} /// namespace port
} /// namespace aa
} /// namespace soa_smartfilm
 
/// EOF