///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : pport_soa_smartfilm.h
/// SOFTWARE COMPONENT NAME           : PPort_SOA_SmartFilm
/// GENERATED DATE                    : 2025-08-30 10:53:42
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef PARA_AA_GEN_SOFTWARE_COMPONENT_PPORT_SOA_SMARTFILM_AA_PPORT_SOA_SMARTFILM_H
#define PARA_AA_GEN_SOFTWARE_COMPONENT_PPORT_SOA_SMARTFILM_AA_PPORT_SOA_SMARTFILM_H
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// INCLUSION HEADER FILES
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "eevp/control/soasmartfilm_skeleton.h"
 
#include "ara/log/logger.h"
 
#include <mutex>
#include <thread>
 
namespace eevp
{
namespace control
{
namespace skeleton
{
 
class SoaSmartFilmSkeletonImpl : public SoaSmartFilmSkeleton
{
public:
    /// @brief Constructor
    SoaSmartFilmSkeletonImpl(ara::core::InstanceSpecifier instanceSpec, ara::com::MethodCallProcessingMode mode = ara::com::MethodCallProcessingMode::kEvent);
    
    /// @brief Fire & Forget method, SetAllOpacities
    void SetAllOpacities(const std::uint8_t& opacity) override;
    
    /// @brief Fire & Forget method, SetAuto
    void SetAuto(const bool& on) override;
    
    /// @brief Fire & Forget method, SetOpacity
    void SetOpacity(const eevp::control::SoaFilmPos& pos, const std::uint8_t& opacity) override;
    
    /// @brief Getter for field, soaFilmAuto
    ara::core::Future<fields::soaFilmAuto::FieldType> GetsoaFilmAuto();
    
    /// @brief Notifier for field, soaFilmAuto
    void NotifysoaFilmAuto();
    
    /// @brief Update field value by software component, soaFilmAuto
    void UpdatesoaFilmAuto(const fields::soaFilmAuto::FieldType& value);
    
    /// @brief Getter for field, soaFilmDeviceNormal
    ara::core::Future<fields::soaFilmDeviceNormal::FieldType> GetsoaFilmDeviceNormal();
    
    /// @brief Notifier for field, soaFilmDeviceNormal
    void NotifysoaFilmDeviceNormal();
    
    /// @brief Update field value by software component, soaFilmDeviceNormal
    void UpdatesoaFilmDeviceNormal(const fields::soaFilmDeviceNormal::FieldType& value);
    
    /// @brief Getter for field, soaFilmOpacities
    ara::core::Future<fields::soaFilmOpacities::FieldType> GetsoaFilmOpacities();
    
    /// @brief Notifier for field, soaFilmOpacities
    void NotifysoaFilmOpacities();
    
    /// @brief Update field value by software component, soaFilmOpacities
    void UpdatesoaFilmOpacities(const fields::soaFilmOpacities::FieldType& value);
    
    /// @brief Getter for field, soaFilmSwVersion
    ara::core::Future<fields::soaFilmSwVersion::FieldType> GetsoaFilmSwVersion();
    
    /// @brief Notifier for field, soaFilmSwVersion
    void NotifysoaFilmSwVersion();
    
    /// @brief Update field value by software component, soaFilmSwVersion
    void UpdatesoaFilmSwVersion(const fields::soaFilmSwVersion::FieldType& value);
    
private:
    /// @brief Logger for this port
    ara::log::Logger& m_logger;
    
    /// @brief Field, soaFilmAuto
    fields::soaFilmAuto::FieldType m_soaFilmAuto;
    
    /// @brief Field, soaFilmDeviceNormal
    fields::soaFilmDeviceNormal::FieldType m_soaFilmDeviceNormal;
    
    /// @brief Field, soaFilmOpacities
    fields::soaFilmOpacities::FieldType m_soaFilmOpacities;
    
    /// @brief Field, soaFilmSwVersion
    fields::soaFilmSwVersion::FieldType m_soaFilmSwVersion;
    
};
 
} /// namespace skeleton
} /// namespace control
} /// namespace eevp

namespace soa_smartfilm
{
namespace aa
{
namespace port
{
 
class PPort_SOA_SmartFilm
{
public:
    /// @brief Constructor
    PPort_SOA_SmartFilm();
    
    /// @brief Destructor
    ~PPort_SOA_SmartFilm();
    
    /// @brief Start port
    void Start();
    
    /// @brief Terminate port
    void Terminate();
    
    /// @brief Write field value to buffer, soaFilmAuto
    void WriteValuesoaFilmAuto(const eevp::control::skeleton::fields::soaFilmAuto::FieldType& value);
     
    /// @brief Notify field cyclic from buffer, soaFilmAuto
    void NotifyFieldsoaFilmAutoCyclic();
     
    /// @brief Notify field directly from buffer data, soaFilmAuto
    void NotifyFieldsoaFilmAutoTriggered();
     
    /// @brief Notify field directly with argument, soaFilmAuto
    void NotifyFieldsoaFilmAutoTriggered(const eevp::control::skeleton::fields::soaFilmAuto::FieldType& value);

    /// @brief Write field value to buffer, soaFilmDeviceNormal
    void WriteValuesoaFilmDeviceNormal(const eevp::control::skeleton::fields::soaFilmDeviceNormal::FieldType& value);
     
    /// @brief Notify field cyclic from buffer, soaFilmDeviceNormal
    void NotifyFieldsoaFilmDeviceNormalCyclic();
     
    /// @brief Notify field directly from buffer data, soaFilmDeviceNormal
    void NotifyFieldsoaFilmDeviceNormalTriggered();
     
    /// @brief Notify field directly with argument, soaFilmDeviceNormal
    void NotifyFieldsoaFilmDeviceNormalTriggered(const eevp::control::skeleton::fields::soaFilmDeviceNormal::FieldType& value);

    /// @brief Write field value to buffer, soaFilmOpacities
    void WriteValuesoaFilmOpacities(const eevp::control::skeleton::fields::soaFilmOpacities::FieldType& value);
     
    /// @brief Notify field cyclic from buffer, soaFilmOpacities
    void NotifyFieldsoaFilmOpacitiesCyclic();
     
    /// @brief Notify field directly from buffer data, soaFilmOpacities
    void NotifyFieldsoaFilmOpacitiesTriggered();
     
    /// @brief Notify field directly with argument, soaFilmOpacities
    void NotifyFieldsoaFilmOpacitiesTriggered(const eevp::control::skeleton::fields::soaFilmOpacities::FieldType& value);

    /// @brief Write field value to buffer, soaFilmSwVersion
    void WriteValuesoaFilmSwVersion(const eevp::control::skeleton::fields::soaFilmSwVersion::FieldType& value);
     
    /// @brief Notify field cyclic from buffer, soaFilmSwVersion
    void NotifyFieldsoaFilmSwVersionCyclic();
     
    /// @brief Notify field directly from buffer data, soaFilmSwVersion
    void NotifyFieldsoaFilmSwVersionTriggered();
     
    /// @brief Notify field directly with argument, soaFilmSwVersion
    void NotifyFieldsoaFilmSwVersionTriggered(const eevp::control::skeleton::fields::soaFilmSwVersion::FieldType& value);
     
private:
    /// @brief Logger for this port
    ara::log::Logger& m_logger;
    
    /// @brief Flag of port status
    bool m_running;
    
    /// @brief Mutex for this port
    std::mutex m_mutex;
    
    /// @brief AUTOSAR Port Interface
    std::unique_ptr<eevp::control::skeleton::SoaSmartFilmSkeletonImpl> m_interface;
    
};
 
} /// namespace port
} /// namespace aa
} /// namespace soa_smartfilm
 
#endif /// PARA_AA_GEN_SOFTWARE_COMPONENT_PPORT_SOA_SMARTFILM_AA_PPORT_SOA_SMARTFILM_H