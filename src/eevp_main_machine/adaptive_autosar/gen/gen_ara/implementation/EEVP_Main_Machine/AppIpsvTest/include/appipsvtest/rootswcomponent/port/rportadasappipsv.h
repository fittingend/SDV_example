///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : rportadasappipsv.h
/// SOFTWARE COMPONENT NAME           : RPortAdasAppIpsv
/// GENERATED DATE                    : 2025-08-30 10:53:18
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef PARA_AA_GEN_SOFTWARE_COMPONENT_RPORT_APPIPSVTEST_ROOTSWCOMPONENT_RPORTADASAPPIPSV_H
#define PARA_AA_GEN_SOFTWARE_COMPONENT_RPORT_APPIPSVTEST_ROOTSWCOMPONENT_RPORTADASAPPIPSV_H
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// INCLUSION HEADER FILES
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "adas/app/ipsv/adasappipsv_proxy.h"
 
#include "ara/log/logger.h"
 
#include <mutex>
#include <thread>
 
namespace appipsvtest
{
namespace rootswcomponent
{
namespace port
{
 
class RPortAdasAppIpsv
{
public:
    /// @brief Constructor
    RPortAdasAppIpsv();
    
    /// @brief Destructor
    ~RPortAdasAppIpsv();
    
    /// @brief Start port
    void Start();
    
    /// @brief Terminate port
    void Terminate();

    /// @brief Subscribe field notification, viewMode
    void SubscribeviewMode();
     
    /// @brief Stop field subscription, viewMode
    void StopSubscribeviewMode();
     
    /// @brief Field notification receive handler, viewMode
    void ReceiveFieldviewModeTriggered();
     
    /// @brief Field notification receive handler, viewMode
    void ReceiveFieldviewModeCyclic();
     
    /// @brief Read field notification value, viewMode
    void ReadValueviewMode(ara::com::SamplePtr<adas::app::ipsv::proxy::fields::viewMode::FieldType const> samplePtr);
     
    /// @brief Regist callback from software component
    void RegistFieldHandlerviewMode(std::function<void(const adas::app::ipsv::proxy::fields::viewMode::FieldType&)> handler);
    
    /// @brief Getter method using by software component, viewMode
    void GetviewMode();
    
    /// @brief Request with Response method using by software component, requestViewMode
    void RequestrequestViewMode(const adas::app::ipsv::ViewMode& viewMode);
     
    /// @brief Regist callback from software component
    void RegistResponseHandlerrequestViewMode(std::function<void(const adas::app::ipsv::proxy::methods::requestViewMode::Output&)> handler);
    
private:
    /// @brief Callback for find service
    void Find(ara::com::ServiceHandleContainer<adas::app::ipsv::proxy::AdasAppIpsvProxy::HandleType> handles,
              ara::com::FindServiceHandle findHandle);

    /// @brief Callback for field notification receiver, viewMode
    void RegistReceiverviewMode();
    
private:
    /// @brief Logger for this port
    ara::log::Logger& m_logger;
    
    /// @brief Flag of port status
    bool m_running;
    
    /// @brief Flag of find service status
    bool m_found;
    
    /// @brief Mutex for this port
    std::mutex m_mutex; 
    
    /// @brief AUTOSAR Port Interface
    std::unique_ptr<adas::app::ipsv::proxy::AdasAppIpsvProxy> m_interface;
    
    /// @brief Find service handle
    std::unique_ptr<ara::com::FindServiceHandle> m_findHandle;

    /// @brief Callback from software component, viewMode
    std::function<void(const adas::app::ipsv::proxy::fields::viewMode::FieldType&)> m_receiverviewMode;
    
    /// @brief Callback from software component, requestViewMode
    std::function<void(const adas::app::ipsv::proxy::methods::requestViewMode::Output&)> m_responderrequestViewMode;
};
 
} /// namespace port
} /// namespace rootswcomponent
} /// namespace appipsvtest
 
#endif /// PARA_AA_GEN_SOFTWARE_COMPONENT_RPORT_APPIPSVTEST_ROOTSWCOMPONENT_RPORTADASAPPIPSV_H