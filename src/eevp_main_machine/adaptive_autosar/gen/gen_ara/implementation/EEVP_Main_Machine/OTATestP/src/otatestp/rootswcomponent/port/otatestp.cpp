///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : otatestp.cpp
/// SOFTWARE COMPONENT NAME           : OTATestP
/// GENERATED DATE                    : 2025-08-30 10:53:27
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "otatestp/rootswcomponent/port/otatestp.h"
 
namespace eevp
{
namespace otatest
{
namespace service
{
namespace skeleton
{
 
Main_OTA_TestSkeletonImpl::Main_OTA_TestSkeletonImpl(ara::core::InstanceSpecifier instanceSpec, ara::com::MethodCallProcessingMode mode)
    : Main_OTA_TestSkeleton(instanceSpec, mode)
    , m_logger(ara::log::CreateLogger("OTAP", "PORT", ara::log::LogLevel::kVerbose))
    , m_Field0{0}
{
    // regist get handler, Field0
    auto field0_get_handler = [this]() {
        return GetField0();
    };
    Field0.RegisterGetHandler(field0_get_handler);
    
    // regist set handler, Field0
    auto field0_set_handler = [this](const fields::Field0::FieldType& value) {
        return SetField0(value);
    };
    Field0.RegisterSetHandler(field0_set_handler);
}
 
ara::core::Future<Main_OTA_TestSkeleton::Method0Output> Main_OTA_TestSkeletonImpl::Method0(const std::int32_t& Arg0)
{
    m_logger.LogVerbose() << "OTATestP::Method0::Requested";
    
    Method0Output response;
    ara::core::Promise<Method0Output> promise;
    
    // put your logic
    
    promise.set_value(response);
    return promise.get_future();
}
 
ara::core::Future<fields::Field0::FieldType> Main_OTA_TestSkeletonImpl::GetField0()
{
    m_logger.LogVerbose() << "OTATestP::GetField0::Requested";
    
    ara::core::Promise<fields::Field0::FieldType> promise;
    
    promise.set_value(m_Field0);
    return promise.get_future();
}
 
ara::core::Future<fields::Field0::FieldType> Main_OTA_TestSkeletonImpl::SetField0(const fields::Field0::FieldType& value)
{
    m_logger.LogVerbose() << "OTATestP::SetField0::Requested";
    
    ara::core::Promise<fields::Field0::FieldType> promise;
    
    // set field value
    m_Field0 = value;
    
    promise.set_value(m_Field0);
    return promise.get_future();
}
 
void Main_OTA_TestSkeletonImpl::NotifyField0()
{
    auto notify = Field0.Update(m_Field0);
    if (notify.HasValue())
    {
        m_logger.LogVerbose() << "OTATestP::NotifyField0::Update";
    }
    else
    {
        m_logger.LogError() << "OTATestP::NotifyField0::Update::" << notify.Error().Message();
    }
}
 
void Main_OTA_TestSkeletonImpl::UpdateField0(const fields::Field0::FieldType& value)
{
    m_Field0 = value;
}
 
} /// namespace skeleton
} /// namespace service
} /// namespace otatest
} /// namespace eevp

namespace otatestp
{
namespace rootswcomponent
{
namespace port
{
 
OTATestP::OTATestP()
    : m_logger(ara::log::CreateLogger("OTAP", "PORT", ara::log::LogLevel::kVerbose))
    , m_running{false}
    , m_Event0Data{0}
{
}
 
OTATestP::~OTATestP()
{
}
 
void OTATestP::Start()
{
    m_logger.LogVerbose() << "OTATestP::Start";
    
    // construct skeleton
    ara::core::InstanceSpecifier specifier{"OTATestP/RootSwComponent/OTATestP"};
    m_interface = std::make_unique<eevp::otatest::service::skeleton::Main_OTA_TestSkeletonImpl>(specifier);
    
    // offer service
    auto offer = m_interface->OfferService();
    if (offer.HasValue())
    {
        m_running = true;
        m_logger.LogVerbose() << "OTATestP::Start::OfferService";
    }
    else
    {
        m_running = false;
        m_logger.LogError() << "OTATestP::Start::OfferService::" << offer.Error().Message();
    }
}
 
void OTATestP::Terminate()
{
    m_logger.LogVerbose() << "OTATestP::Terminate";
    
    // stop port
    m_running = false;
    
    // stop offer service
    m_interface->StopOfferService();
    m_logger.LogVerbose() << "OTATestP::Terminate::StopOfferService";
}
 
void OTATestP::WriteDataEvent0(const eevp::otatest::service::skeleton::events::Event0::SampleType& data)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_Event0Data = data;
}
 
void OTATestP::SendEventEvent0Cyclic()
{
    while (m_running)
    {
        {
            std::lock_guard<std::mutex> lock(m_mutex);
            
            auto send = m_interface->Event0.Send(m_Event0Data);
            if (send.HasValue())
            {
                m_logger.LogVerbose() << "OTATestP::SendEventEvent0Cyclic::Send";
            }
            else
            {
                m_logger.LogError() << "OTATestP::SendEventEvent0Cyclic::Send::" << send.Error().Message();
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void OTATestP::SendEventEvent0Triggered()
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    auto send = m_interface->Event0.Send(m_Event0Data);
    if (send.HasValue())
    {
        m_logger.LogVerbose() << "OTATestP::SendEventEvent0Triggered::Send";
    }
    else
    {
        m_logger.LogError() << "OTATestP::SendEventEvent0Triggered::Send::" << send.Error().Message();
    }
}
 
void OTATestP::SendEventEvent0Triggered(const eevp::otatest::service::skeleton::events::Event0::SampleType& data)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_Event0Data = data;
    auto send = m_interface->Event0.Send(m_Event0Data);
    if (send.HasValue())
    {
        m_logger.LogVerbose() << "OTATestP::SendEventEvent0Triggered::Send";
    }
    else
    {
        m_logger.LogError() << "OTATestP::SendEventEvent0Triggered::Send::" << send.Error().Message();
    }
}
 
void OTATestP::WriteValueField0(const eevp::otatest::service::skeleton::fields::Field0::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdateField0(value);
}
 
void OTATestP::NotifyFieldField0Cyclic()
{
    while (m_running)
    {
        {
            std::lock_guard<std::mutex> lock(m_mutex);
            
            m_interface->NotifyField0();
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void OTATestP::NotifyFieldField0Triggered()
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->NotifyField0();
}
 
void OTATestP::NotifyFieldField0Triggered(const eevp::otatest::service::skeleton::fields::Field0::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdateField0(value);
    m_interface->NotifyField0();
}
 
} /// namespace port
} /// namespace rootswcomponent
} /// namespace otatestp
 
/// EOF