///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : otatestp.h
/// SOFTWARE COMPONENT NAME           : OTATestP
/// GENERATED DATE                    : 2025-08-30 10:53:27
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef PARA_AA_GEN_SOFTWARE_COMPONENT_PPORT_OTATESTP_ROOTSWCOMPONENT_OTATESTP_H
#define PARA_AA_GEN_SOFTWARE_COMPONENT_PPORT_OTATESTP_ROOTSWCOMPONENT_OTATESTP_H
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// INCLUSION HEADER FILES
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "eevp/otatest/service/main_ota_test_skeleton.h"
 
#include "ara/log/logger.h"
 
#include <mutex>
#include <thread>
 
namespace eevp
{
namespace otatest
{
namespace service
{
namespace skeleton
{
 
class Main_OTA_TestSkeletonImpl : public Main_OTA_TestSkeleton
{
public:
    /// @brief Constructor
    Main_OTA_TestSkeletonImpl(ara::core::InstanceSpecifier instanceSpec, ara::com::MethodCallProcessingMode mode = ara::com::MethodCallProcessingMode::kEvent);
    
    /// @brief Request with Response method, Method0
    ara::core::Future<Main_OTA_TestSkeleton::Method0Output> Method0(const std::int32_t& Arg0) override;
    
    /// @brief Getter for field, Field0
    ara::core::Future<fields::Field0::FieldType> GetField0();
    
    /// @brief Setter for field, Field0
    ara::core::Future<fields::Field0::FieldType> SetField0(const fields::Field0::FieldType& value);
    
    /// @brief Notifier for field, Field0
    void NotifyField0();
    
    /// @brief Update field value by software component, Field0
    void UpdateField0(const fields::Field0::FieldType& value);
    
private:
    /// @brief Logger for this port
    ara::log::Logger& m_logger;
    
    /// @brief Field, Field0
    fields::Field0::FieldType m_Field0;
    
};
 
} /// namespace skeleton
} /// namespace service
} /// namespace otatest
} /// namespace eevp

namespace otatestp
{
namespace rootswcomponent
{
namespace port
{
 
class OTATestP
{
public:
    /// @brief Constructor
    OTATestP();
    
    /// @brief Destructor
    ~OTATestP();
    
    /// @brief Start port
    void Start();
    
    /// @brief Terminate port
    void Terminate();
    
    /// @brief Write event data to buffer, Event0
    void WriteDataEvent0(const eevp::otatest::service::skeleton::events::Event0::SampleType& data);
     
    /// @brief Send event cyclic from buffer data, Event0
    void SendEventEvent0Cyclic();
     
    /// @brief Send event directly from buffer data, Event0
    void SendEventEvent0Triggered();
     
    /// @brief Send event directly with argument, Event0
    void SendEventEvent0Triggered(const eevp::otatest::service::skeleton::events::Event0::SampleType& data);
     
    /// @brief Write field value to buffer, Field0
    void WriteValueField0(const eevp::otatest::service::skeleton::fields::Field0::FieldType& value);
     
    /// @brief Notify field cyclic from buffer, Field0
    void NotifyFieldField0Cyclic();
     
    /// @brief Notify field directly from buffer data, Field0
    void NotifyFieldField0Triggered();
     
    /// @brief Notify field directly with argument, Field0
    void NotifyFieldField0Triggered(const eevp::otatest::service::skeleton::fields::Field0::FieldType& value);
     
private:
    /// @brief Logger for this port
    ara::log::Logger& m_logger;
    
    /// @brief Flag of port status
    bool m_running;
    
    /// @brief Mutex for this port
    std::mutex m_mutex;
    
    /// @brief AUTOSAR Port Interface
    std::unique_ptr<eevp::otatest::service::skeleton::Main_OTA_TestSkeletonImpl> m_interface;
    
    /// @brief Data for event, Event0
    eevp::otatest::service::skeleton::events::Event0::SampleType m_Event0Data;
};
 
} /// namespace port
} /// namespace rootswcomponent
} /// namespace otatestp
 
#endif /// PARA_AA_GEN_SOFTWARE_COMPONENT_PPORT_OTATESTP_ROOTSWCOMPONENT_OTATESTP_H