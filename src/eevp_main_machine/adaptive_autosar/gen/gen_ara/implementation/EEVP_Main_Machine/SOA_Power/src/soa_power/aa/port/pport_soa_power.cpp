///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : pport_soa_power.cpp
/// SOFTWARE COMPONENT NAME           : PPort_SOA_Power
/// GENERATED DATE                    : 2025-08-30 10:53:39
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "soa_power/aa/port/pport_soa_power.h"
 
namespace eevp
{
namespace control
{
namespace skeleton
{
 
SoaPowerSkeletonImpl::SoaPowerSkeletonImpl(ara::core::InstanceSpecifier instanceSpec, ara::com::MethodCallProcessingMode mode)
    : SoaPowerSkeleton(instanceSpec, mode)
    , m_logger(ara::log::CreateLogger("SPWR", "PORT", ara::log::LogLevel::kVerbose))
    , m_soaPowerDeviceNormal{eevp::control::SoaDeviceIsNormal::kNORMAL}
    , m_soaPowerSwVersion{0U}
{
    // regist get handler, soaPowerDeviceNormal
    auto soapowerdevicenormal_get_handler = [this]() {
        return GetsoaPowerDeviceNormal();
    };
    soaPowerDeviceNormal.RegisterGetHandler(soapowerdevicenormal_get_handler);
    
    // regist get handler, soaPowerSwVersion
    auto soapowerswversion_get_handler = [this]() {
        return GetsoaPowerSwVersion();
    };
    soaPowerSwVersion.RegisterGetHandler(soapowerswversion_get_handler);
}
 
ara::core::Future<fields::soaPowerDeviceNormal::FieldType> SoaPowerSkeletonImpl::GetsoaPowerDeviceNormal()
{
    m_logger.LogVerbose() << "PPort_SOA_Power::GetsoaPowerDeviceNormal::Requested";
    
    ara::core::Promise<fields::soaPowerDeviceNormal::FieldType> promise;
    
    promise.set_value(m_soaPowerDeviceNormal);
    return promise.get_future();
}
 
void SoaPowerSkeletonImpl::NotifysoaPowerDeviceNormal()
{
    auto notify = soaPowerDeviceNormal.Update(m_soaPowerDeviceNormal);
    if (notify.HasValue())
    {
        m_logger.LogVerbose() << "PPort_SOA_Power::NotifysoaPowerDeviceNormal::Update";
    }
    else
    {
        m_logger.LogError() << "PPort_SOA_Power::NotifysoaPowerDeviceNormal::Update::" << notify.Error().Message();
    }
}
 
void SoaPowerSkeletonImpl::UpdatesoaPowerDeviceNormal(const fields::soaPowerDeviceNormal::FieldType& value)
{
    m_soaPowerDeviceNormal = value;
}
 
ara::core::Future<fields::soaPowerSwVersion::FieldType> SoaPowerSkeletonImpl::GetsoaPowerSwVersion()
{
    m_logger.LogVerbose() << "PPort_SOA_Power::GetsoaPowerSwVersion::Requested";
    
    ara::core::Promise<fields::soaPowerSwVersion::FieldType> promise;
    
    promise.set_value(m_soaPowerSwVersion);
    return promise.get_future();
}
 
void SoaPowerSkeletonImpl::NotifysoaPowerSwVersion()
{
    auto notify = soaPowerSwVersion.Update(m_soaPowerSwVersion);
    if (notify.HasValue())
    {
        m_logger.LogVerbose() << "PPort_SOA_Power::NotifysoaPowerSwVersion::Update";
    }
    else
    {
        m_logger.LogError() << "PPort_SOA_Power::NotifysoaPowerSwVersion::Update::" << notify.Error().Message();
    }
}
 
void SoaPowerSkeletonImpl::UpdatesoaPowerSwVersion(const fields::soaPowerSwVersion::FieldType& value)
{
    m_soaPowerSwVersion = value;
}
 
} /// namespace skeleton
} /// namespace control
} /// namespace eevp

namespace soa_power
{
namespace aa
{
namespace port
{
 
PPort_SOA_Power::PPort_SOA_Power()
    : m_logger(ara::log::CreateLogger("SPWR", "PORT", ara::log::LogLevel::kVerbose))
    , m_running{false}
{
}
 
PPort_SOA_Power::~PPort_SOA_Power()
{
}
 
void PPort_SOA_Power::Start()
{
    m_logger.LogVerbose() << "PPort_SOA_Power::Start";
    
    // construct skeleton
    ara::core::InstanceSpecifier specifier{"SOA_Power/AA/PPort_SOA_Power"};
    m_interface = std::make_unique<eevp::control::skeleton::SoaPowerSkeletonImpl>(specifier);
    
    // offer service
    auto offer = m_interface->OfferService();
    if (offer.HasValue())
    {
        m_running = true;
        m_logger.LogVerbose() << "PPort_SOA_Power::Start::OfferService";
    }
    else
    {
        m_running = false;
        m_logger.LogError() << "PPort_SOA_Power::Start::OfferService::" << offer.Error().Message();
    }
}
 
void PPort_SOA_Power::Terminate()
{
    m_logger.LogVerbose() << "PPort_SOA_Power::Terminate";
    
    // stop port
    m_running = false;
    
    // stop offer service
    m_interface->StopOfferService();
    m_logger.LogVerbose() << "PPort_SOA_Power::Terminate::StopOfferService";
}
 
void PPort_SOA_Power::WriteValuesoaPowerDeviceNormal(const eevp::control::skeleton::fields::soaPowerDeviceNormal::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdatesoaPowerDeviceNormal(value);
}
 
void PPort_SOA_Power::NotifyFieldsoaPowerDeviceNormalCyclic()
{
    while (m_running)
    {
        {
            std::lock_guard<std::mutex> lock(m_mutex);
            
            m_interface->NotifysoaPowerDeviceNormal();
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void PPort_SOA_Power::NotifyFieldsoaPowerDeviceNormalTriggered()
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->NotifysoaPowerDeviceNormal();
}
 
void PPort_SOA_Power::NotifyFieldsoaPowerDeviceNormalTriggered(const eevp::control::skeleton::fields::soaPowerDeviceNormal::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdatesoaPowerDeviceNormal(value);
    m_interface->NotifysoaPowerDeviceNormal();
}
 
void PPort_SOA_Power::WriteValuesoaPowerSwVersion(const eevp::control::skeleton::fields::soaPowerSwVersion::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdatesoaPowerSwVersion(value);
}
 
void PPort_SOA_Power::NotifyFieldsoaPowerSwVersionCyclic()
{
    while (m_running)
    {
        {
            std::lock_guard<std::mutex> lock(m_mutex);
            
            m_interface->NotifysoaPowerSwVersion();
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void PPort_SOA_Power::NotifyFieldsoaPowerSwVersionTriggered()
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->NotifysoaPowerSwVersion();
}
 
void PPort_SOA_Power::NotifyFieldsoaPowerSwVersionTriggered(const eevp::control::skeleton::fields::soaPowerSwVersion::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdatesoaPowerSwVersion(value);
    m_interface->NotifysoaPowerSwVersion();
}
 
} /// namespace port
} /// namespace aa
} /// namespace soa_power
 
/// EOF