///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : soa_power.cpp
/// SOFTWARE COMPONENT NAME           : SOA_Power
/// GENERATED DATE                    : 2025-08-30 10:53:39
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// INCLUSION HEADER FILES
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "soa_power/aa/soa_power.h"
 
namespace soa_power
{
namespace aa
{
 
SOA_Power::SOA_Power()
    : m_logger(ara::log::CreateLogger("SPWR", "SWC", ara::log::LogLevel::kVerbose))
    , m_running{false}
    , m_workers(7)
{
}
 
SOA_Power::~SOA_Power()
{
}
 
bool SOA_Power::Initialize()
{
    m_logger.LogVerbose() << "SOA_Power::Initialize";
    
    bool init = true;
    
    m_PPort_SOA_Power = std::make_unique<soa_power::aa::port::PPort_SOA_Power>();
    m_RPort_Zone1RsvA = std::make_unique<soa_power::aa::port::RPort_Zone1RsvA>();
    m_RPort_Zone2RsvA = std::make_unique<soa_power::aa::port::RPort_Zone2RsvA>();
    m_RPort_Zone3RsvA = std::make_unique<soa_power::aa::port::RPort_Zone3RsvA>();
    m_RPort_Zone4RsvA = std::make_unique<soa_power::aa::port::RPort_Zone4RsvA>();
    m_RPort_Zone5Power = std::make_unique<soa_power::aa::port::RPort_Zone5Power>();
    
    // put your code for initialization
    
    return init;
}
 
void SOA_Power::Start()
{
    m_logger.LogVerbose() << "SOA_Power::Start";
    
    m_PPort_SOA_Power->Start();
    m_RPort_Zone1RsvA->Start();
    m_RPort_Zone2RsvA->Start();
    m_RPort_Zone3RsvA->Start();
    m_RPort_Zone4RsvA->Start();
    m_RPort_Zone5Power->Start();
}
 
void SOA_Power::Terminate()
{
    m_logger.LogVerbose() << "SOA_Power::Terminate";
    
    // stop running
    m_running = false;
    
    m_PPort_SOA_Power->Terminate();
    m_RPort_Zone1RsvA->Terminate();
    m_RPort_Zone2RsvA->Terminate();
    m_RPort_Zone3RsvA->Terminate();
    m_RPort_Zone4RsvA->Terminate();
    m_RPort_Zone5Power->Terminate();
}
 
void SOA_Power::Run()
{
    m_logger.LogVerbose() << "SOA_Power::Run";
    
    // start running
    m_running = true;
    
    m_workers.Async([this] { m_PPort_SOA_Power->NotifyFieldsoaPowerDeviceNormalCyclic(); });
    m_workers.Async([this] { m_PPort_SOA_Power->NotifyFieldsoaPowerSwVersionCyclic(); });
    m_workers.Async([this] { m_RPort_Zone1RsvA->ReceiveFieldzone1DeviceNormalCyclic(); });
    m_workers.Async([this] { m_RPort_Zone2RsvA->ReceiveFieldzone2DeviceNormalCyclic(); });
    m_workers.Async([this] { m_RPort_Zone3RsvA->ReceiveFieldzone3DeviceNormalCyclic(); });
    m_workers.Async([this] { m_RPort_Zone4RsvA->ReceiveFieldzone4DeviceNormalCyclic(); });
    m_workers.Async([this] { m_RPort_Zone5Power->ReceiveFieldzone5PowerDeviceNormalCyclic(); });
    
    m_workers.Wait();
}
 
} /// namespace aa
} /// namespace soa_power
