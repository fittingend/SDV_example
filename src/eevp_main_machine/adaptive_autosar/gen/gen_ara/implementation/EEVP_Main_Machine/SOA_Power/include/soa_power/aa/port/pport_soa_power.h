///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : pport_soa_power.h
/// SOFTWARE COMPONENT NAME           : PPort_SOA_Power
/// GENERATED DATE                    : 2025-08-30 10:53:39
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef PARA_AA_GEN_SOFTWARE_COMPONENT_PPORT_SOA_POWER_AA_PPORT_SOA_POWER_H
#define PARA_AA_GEN_SOFTWARE_COMPONENT_PPORT_SOA_POWER_AA_PPORT_SOA_POWER_H
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// INCLUSION HEADER FILES
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "eevp/control/soapower_skeleton.h"
 
#include "ara/log/logger.h"
 
#include <mutex>
#include <thread>
 
namespace eevp
{
namespace control
{
namespace skeleton
{
 
class SoaPowerSkeletonImpl : public SoaPowerSkeleton
{
public:
    /// @brief Constructor
    SoaPowerSkeletonImpl(ara::core::InstanceSpecifier instanceSpec, ara::com::MethodCallProcessingMode mode = ara::com::MethodCallProcessingMode::kEvent);

    /// @brief Getter for field, soaPowerDeviceNormal
    ara::core::Future<fields::soaPowerDeviceNormal::FieldType> GetsoaPowerDeviceNormal();
    
    /// @brief Notifier for field, soaPowerDeviceNormal
    void NotifysoaPowerDeviceNormal();
    
    /// @brief Update field value by software component, soaPowerDeviceNormal
    void UpdatesoaPowerDeviceNormal(const fields::soaPowerDeviceNormal::FieldType& value);
    
    /// @brief Getter for field, soaPowerSwVersion
    ara::core::Future<fields::soaPowerSwVersion::FieldType> GetsoaPowerSwVersion();
    
    /// @brief Notifier for field, soaPowerSwVersion
    void NotifysoaPowerSwVersion();
    
    /// @brief Update field value by software component, soaPowerSwVersion
    void UpdatesoaPowerSwVersion(const fields::soaPowerSwVersion::FieldType& value);
    
private:
    /// @brief Logger for this port
    ara::log::Logger& m_logger;
    
    /// @brief Field, soaPowerDeviceNormal
    fields::soaPowerDeviceNormal::FieldType m_soaPowerDeviceNormal;
    
    /// @brief Field, soaPowerSwVersion
    fields::soaPowerSwVersion::FieldType m_soaPowerSwVersion;
    
};
 
} /// namespace skeleton
} /// namespace control
} /// namespace eevp

namespace soa_power
{
namespace aa
{
namespace port
{
 
class PPort_SOA_Power
{
public:
    /// @brief Constructor
    PPort_SOA_Power();
    
    /// @brief Destructor
    ~PPort_SOA_Power();
    
    /// @brief Start port
    void Start();
    
    /// @brief Terminate port
    void Terminate();
    
    /// @brief Write field value to buffer, soaPowerDeviceNormal
    void WriteValuesoaPowerDeviceNormal(const eevp::control::skeleton::fields::soaPowerDeviceNormal::FieldType& value);
     
    /// @brief Notify field cyclic from buffer, soaPowerDeviceNormal
    void NotifyFieldsoaPowerDeviceNormalCyclic();
     
    /// @brief Notify field directly from buffer data, soaPowerDeviceNormal
    void NotifyFieldsoaPowerDeviceNormalTriggered();
     
    /// @brief Notify field directly with argument, soaPowerDeviceNormal
    void NotifyFieldsoaPowerDeviceNormalTriggered(const eevp::control::skeleton::fields::soaPowerDeviceNormal::FieldType& value);

    /// @brief Write field value to buffer, soaPowerSwVersion
    void WriteValuesoaPowerSwVersion(const eevp::control::skeleton::fields::soaPowerSwVersion::FieldType& value);
     
    /// @brief Notify field cyclic from buffer, soaPowerSwVersion
    void NotifyFieldsoaPowerSwVersionCyclic();
     
    /// @brief Notify field directly from buffer data, soaPowerSwVersion
    void NotifyFieldsoaPowerSwVersionTriggered();
     
    /// @brief Notify field directly with argument, soaPowerSwVersion
    void NotifyFieldsoaPowerSwVersionTriggered(const eevp::control::skeleton::fields::soaPowerSwVersion::FieldType& value);
     
private:
    /// @brief Logger for this port
    ara::log::Logger& m_logger;
    
    /// @brief Flag of port status
    bool m_running;
    
    /// @brief Mutex for this port
    std::mutex m_mutex;
    
    /// @brief AUTOSAR Port Interface
    std::unique_ptr<eevp::control::skeleton::SoaPowerSkeletonImpl> m_interface;
    
};
 
} /// namespace port
} /// namespace aa
} /// namespace soa_power
 
#endif /// PARA_AA_GEN_SOFTWARE_COMPONENT_PPORT_SOA_POWER_AA_PPORT_SOA_POWER_H