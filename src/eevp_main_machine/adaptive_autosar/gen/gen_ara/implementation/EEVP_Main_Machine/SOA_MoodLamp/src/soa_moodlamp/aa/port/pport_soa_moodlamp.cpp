///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : pport_soa_moodlamp.cpp
/// SOFTWARE COMPONENT NAME           : PPort_SOA_MoodLamp
/// GENERATED DATE                    : 2025-08-30 10:53:38
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "soa_moodlamp/aa/port/pport_soa_moodlamp.h"
 
namespace eevp
{
namespace control
{
namespace skeleton
{
 
SoaMlmSkeletonImpl::SoaMlmSkeletonImpl(ara::core::InstanceSpecifier instanceSpec, ara::com::MethodCallProcessingMode mode)
    : SoaMlmSkeleton(instanceSpec, mode)
    , m_logger(ara::log::CreateLogger("SMLM", "PORT", ara::log::LogLevel::kVerbose))
    , m_soaMlmStatus{0U, 0U, eevp::control::SoaDeviceIsNormal::kNORMAL}
    , m_soaMlmSwVersion{0U}
{
    // regist get handler, soaMlmStatus
    auto soamlmstatus_get_handler = [this]() {
        return GetsoaMlmStatus();
    };
    soaMlmStatus.RegisterGetHandler(soamlmstatus_get_handler);
    
    // regist get handler, soaMlmSwVersion
    auto soamlmswversion_get_handler = [this]() {
        return GetsoaMlmSwVersion();
    };
    soaMlmSwVersion.RegisterGetHandler(soamlmswversion_get_handler);
}
 
void SoaMlmSkeletonImpl::RequestMlmSetBrightness(const std::uint16_t& brightness)
{
    m_logger.LogVerbose() << "PPort_SOA_MoodLamp::RequestMlmSetBrightness::Triggered";
    
    // put your logic
}
 
void SoaMlmSkeletonImpl::RequestMlmSetMode(const eevp::control::SoaMlmMoodMode& mood)
{
    m_logger.LogVerbose() << "PPort_SOA_MoodLamp::RequestMlmSetMode::Triggered";
    
    // put your logic
}
 
void SoaMlmSkeletonImpl::RequestMlmSetRgbColor(const std::uint8_t& colorTableIndex)
{
    m_logger.LogVerbose() << "PPort_SOA_MoodLamp::RequestMlmSetRgbColor::Triggered";
    
    // put your logic
}
 
ara::core::Future<fields::soaMlmStatus::FieldType> SoaMlmSkeletonImpl::GetsoaMlmStatus()
{
    m_logger.LogVerbose() << "PPort_SOA_MoodLamp::GetsoaMlmStatus::Requested";
    
    ara::core::Promise<fields::soaMlmStatus::FieldType> promise;
    
    promise.set_value(m_soaMlmStatus);
    return promise.get_future();
}
 
void SoaMlmSkeletonImpl::NotifysoaMlmStatus()
{
    auto notify = soaMlmStatus.Update(m_soaMlmStatus);
    if (notify.HasValue())
    {
        m_logger.LogVerbose() << "PPort_SOA_MoodLamp::NotifysoaMlmStatus::Update";
    }
    else
    {
        m_logger.LogError() << "PPort_SOA_MoodLamp::NotifysoaMlmStatus::Update::" << notify.Error().Message();
    }
}
 
void SoaMlmSkeletonImpl::UpdatesoaMlmStatus(const fields::soaMlmStatus::FieldType& value)
{
    m_soaMlmStatus = value;
}
 
ara::core::Future<fields::soaMlmSwVersion::FieldType> SoaMlmSkeletonImpl::GetsoaMlmSwVersion()
{
    m_logger.LogVerbose() << "PPort_SOA_MoodLamp::GetsoaMlmSwVersion::Requested";
    
    ara::core::Promise<fields::soaMlmSwVersion::FieldType> promise;
    
    promise.set_value(m_soaMlmSwVersion);
    return promise.get_future();
}
 
void SoaMlmSkeletonImpl::NotifysoaMlmSwVersion()
{
    auto notify = soaMlmSwVersion.Update(m_soaMlmSwVersion);
    if (notify.HasValue())
    {
        m_logger.LogVerbose() << "PPort_SOA_MoodLamp::NotifysoaMlmSwVersion::Update";
    }
    else
    {
        m_logger.LogError() << "PPort_SOA_MoodLamp::NotifysoaMlmSwVersion::Update::" << notify.Error().Message();
    }
}
 
void SoaMlmSkeletonImpl::UpdatesoaMlmSwVersion(const fields::soaMlmSwVersion::FieldType& value)
{
    m_soaMlmSwVersion = value;
}
 
} /// namespace skeleton
} /// namespace control
} /// namespace eevp

namespace soa_moodlamp
{
namespace aa
{
namespace port
{
 
PPort_SOA_MoodLamp::PPort_SOA_MoodLamp()
    : m_logger(ara::log::CreateLogger("SMLM", "PORT", ara::log::LogLevel::kVerbose))
    , m_running{false}
{
}
 
PPort_SOA_MoodLamp::~PPort_SOA_MoodLamp()
{
}
 
void PPort_SOA_MoodLamp::Start()
{
    m_logger.LogVerbose() << "PPort_SOA_MoodLamp::Start";
    
    // construct skeleton
    ara::core::InstanceSpecifier specifier{"SOA_MoodLamp/AA/PPort_SOA_MoodLamp"};
    m_interface = std::make_unique<eevp::control::skeleton::SoaMlmSkeletonImpl>(specifier);
    
    // offer service
    auto offer = m_interface->OfferService();
    if (offer.HasValue())
    {
        m_running = true;
        m_logger.LogVerbose() << "PPort_SOA_MoodLamp::Start::OfferService";
    }
    else
    {
        m_running = false;
        m_logger.LogError() << "PPort_SOA_MoodLamp::Start::OfferService::" << offer.Error().Message();
    }
}
 
void PPort_SOA_MoodLamp::Terminate()
{
    m_logger.LogVerbose() << "PPort_SOA_MoodLamp::Terminate";
    
    // stop port
    m_running = false;
    
    // stop offer service
    m_interface->StopOfferService();
    m_logger.LogVerbose() << "PPort_SOA_MoodLamp::Terminate::StopOfferService";
}
 
void PPort_SOA_MoodLamp::WriteValuesoaMlmStatus(const eevp::control::skeleton::fields::soaMlmStatus::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdatesoaMlmStatus(value);
}
 
void PPort_SOA_MoodLamp::NotifyFieldsoaMlmStatusCyclic()
{
    while (m_running)
    {
        {
            std::lock_guard<std::mutex> lock(m_mutex);
            
            m_interface->NotifysoaMlmStatus();
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void PPort_SOA_MoodLamp::NotifyFieldsoaMlmStatusTriggered()
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->NotifysoaMlmStatus();
}
 
void PPort_SOA_MoodLamp::NotifyFieldsoaMlmStatusTriggered(const eevp::control::skeleton::fields::soaMlmStatus::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdatesoaMlmStatus(value);
    m_interface->NotifysoaMlmStatus();
}
 
void PPort_SOA_MoodLamp::WriteValuesoaMlmSwVersion(const eevp::control::skeleton::fields::soaMlmSwVersion::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdatesoaMlmSwVersion(value);
}
 
void PPort_SOA_MoodLamp::NotifyFieldsoaMlmSwVersionCyclic()
{
    while (m_running)
    {
        {
            std::lock_guard<std::mutex> lock(m_mutex);
            
            m_interface->NotifysoaMlmSwVersion();
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void PPort_SOA_MoodLamp::NotifyFieldsoaMlmSwVersionTriggered()
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->NotifysoaMlmSwVersion();
}
 
void PPort_SOA_MoodLamp::NotifyFieldsoaMlmSwVersionTriggered(const eevp::control::skeleton::fields::soaMlmSwVersion::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdatesoaMlmSwVersion(value);
    m_interface->NotifysoaMlmSwVersion();
}
 
} /// namespace port
} /// namespace aa
} /// namespace soa_moodlamp
 
/// EOF