///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : pport_soa_moodlamp.h
/// SOFTWARE COMPONENT NAME           : PPort_SOA_MoodLamp
/// GENERATED DATE                    : 2025-08-30 10:53:38
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef PARA_AA_GEN_SOFTWARE_COMPONENT_PPORT_SOA_MOODLAMP_AA_PPORT_SOA_MOODLAMP_H
#define PARA_AA_GEN_SOFTWARE_COMPONENT_PPORT_SOA_MOODLAMP_AA_PPORT_SOA_MOODLAMP_H
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// INCLUSION HEADER FILES
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "eevp/control/soamlm_skeleton.h"
 
#include "ara/log/logger.h"
 
#include <mutex>
#include <thread>
 
namespace eevp
{
namespace control
{
namespace skeleton
{
 
class SoaMlmSkeletonImpl : public SoaMlmSkeleton
{
public:
    /// @brief Constructor
    SoaMlmSkeletonImpl(ara::core::InstanceSpecifier instanceSpec, ara::com::MethodCallProcessingMode mode = ara::com::MethodCallProcessingMode::kEvent);
    
    /// @brief Fire & Forget method, RequestMlmSetBrightness
    void RequestMlmSetBrightness(const std::uint16_t& brightness) override;
    
    /// @brief Fire & Forget method, RequestMlmSetMode
    void RequestMlmSetMode(const eevp::control::SoaMlmMoodMode& mood) override;
    
    /// @brief Fire & Forget method, RequestMlmSetRgbColor
    void RequestMlmSetRgbColor(const std::uint8_t& colorTableIndex) override;
    
    /// @brief Getter for field, soaMlmStatus
    ara::core::Future<fields::soaMlmStatus::FieldType> GetsoaMlmStatus();
    
    /// @brief Notifier for field, soaMlmStatus
    void NotifysoaMlmStatus();
    
    /// @brief Update field value by software component, soaMlmStatus
    void UpdatesoaMlmStatus(const fields::soaMlmStatus::FieldType& value);
    
    /// @brief Getter for field, soaMlmSwVersion
    ara::core::Future<fields::soaMlmSwVersion::FieldType> GetsoaMlmSwVersion();
    
    /// @brief Notifier for field, soaMlmSwVersion
    void NotifysoaMlmSwVersion();
    
    /// @brief Update field value by software component, soaMlmSwVersion
    void UpdatesoaMlmSwVersion(const fields::soaMlmSwVersion::FieldType& value);
    
private:
    /// @brief Logger for this port
    ara::log::Logger& m_logger;
    
    /// @brief Field, soaMlmStatus
    fields::soaMlmStatus::FieldType m_soaMlmStatus;
    
    /// @brief Field, soaMlmSwVersion
    fields::soaMlmSwVersion::FieldType m_soaMlmSwVersion;
    
};
 
} /// namespace skeleton
} /// namespace control
} /// namespace eevp

namespace soa_moodlamp
{
namespace aa
{
namespace port
{
 
class PPort_SOA_MoodLamp
{
public:
    /// @brief Constructor
    PPort_SOA_MoodLamp();
    
    /// @brief Destructor
    ~PPort_SOA_MoodLamp();
    
    /// @brief Start port
    void Start();
    
    /// @brief Terminate port
    void Terminate();
    
    /// @brief Write field value to buffer, soaMlmStatus
    void WriteValuesoaMlmStatus(const eevp::control::skeleton::fields::soaMlmStatus::FieldType& value);
     
    /// @brief Notify field cyclic from buffer, soaMlmStatus
    void NotifyFieldsoaMlmStatusCyclic();
     
    /// @brief Notify field directly from buffer data, soaMlmStatus
    void NotifyFieldsoaMlmStatusTriggered();
     
    /// @brief Notify field directly with argument, soaMlmStatus
    void NotifyFieldsoaMlmStatusTriggered(const eevp::control::skeleton::fields::soaMlmStatus::FieldType& value);

    /// @brief Write field value to buffer, soaMlmSwVersion
    void WriteValuesoaMlmSwVersion(const eevp::control::skeleton::fields::soaMlmSwVersion::FieldType& value);
     
    /// @brief Notify field cyclic from buffer, soaMlmSwVersion
    void NotifyFieldsoaMlmSwVersionCyclic();
     
    /// @brief Notify field directly from buffer data, soaMlmSwVersion
    void NotifyFieldsoaMlmSwVersionTriggered();
     
    /// @brief Notify field directly with argument, soaMlmSwVersion
    void NotifyFieldsoaMlmSwVersionTriggered(const eevp::control::skeleton::fields::soaMlmSwVersion::FieldType& value);
     
private:
    /// @brief Logger for this port
    ara::log::Logger& m_logger;
    
    /// @brief Flag of port status
    bool m_running;
    
    /// @brief Mutex for this port
    std::mutex m_mutex;
    
    /// @brief AUTOSAR Port Interface
    std::unique_ptr<eevp::control::skeleton::SoaMlmSkeletonImpl> m_interface;
    
};
 
} /// namespace port
} /// namespace aa
} /// namespace soa_moodlamp
 
#endif /// PARA_AA_GEN_SOFTWARE_COMPONENT_PPORT_SOA_MOODLAMP_AA_PPORT_SOA_MOODLAMP_H