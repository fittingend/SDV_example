///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : pport_soa_dms.h
/// SOFTWARE COMPONENT NAME           : PPort_SOA_DMS
/// GENERATED DATE                    : 2025-08-30 10:53:33
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef PARA_AA_GEN_SOFTWARE_COMPONENT_PPORT_SOA_DMS_AA_PPORT_SOA_DMS_H
#define PARA_AA_GEN_SOFTWARE_COMPONENT_PPORT_SOA_DMS_AA_PPORT_SOA_DMS_H
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// INCLUSION HEADER FILES
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "eevp/control/soadms_skeleton.h"
 
#include "ara/log/logger.h"
 
#include <mutex>
#include <thread>
 
namespace eevp
{
namespace control
{
namespace skeleton
{
 
class SoaDmsSkeletonImpl : public SoaDmsSkeleton
{
public:
    /// @brief Constructor
    SoaDmsSkeletonImpl(ara::core::InstanceSpecifier instanceSpec, ara::com::MethodCallProcessingMode mode = ara::com::MethodCallProcessingMode::kEvent);
    
    /// @brief Fire & Forget method, SetDmsPower
    void SetDmsPower(const bool& on) override;
    
    /// @brief Getter for field, soaDmsDeviceNormal
    ara::core::Future<fields::soaDmsDeviceNormal::FieldType> GetsoaDmsDeviceNormal();
    
    /// @brief Notifier for field, soaDmsDeviceNormal
    void NotifysoaDmsDeviceNormal();
    
    /// @brief Update field value by software component, soaDmsDeviceNormal
    void UpdatesoaDmsDeviceNormal(const fields::soaDmsDeviceNormal::FieldType& value);
    
    /// @brief Getter for field, soaDmsDriverStatus
    ara::core::Future<fields::soaDmsDriverStatus::FieldType> GetsoaDmsDriverStatus();
    
    /// @brief Notifier for field, soaDmsDriverStatus
    void NotifysoaDmsDriverStatus();
    
    /// @brief Update field value by software component, soaDmsDriverStatus
    void UpdatesoaDmsDriverStatus(const fields::soaDmsDriverStatus::FieldType& value);
    
    /// @brief Getter for field, soaDmsStatus
    ara::core::Future<fields::soaDmsStatus::FieldType> GetsoaDmsStatus();
    
    /// @brief Notifier for field, soaDmsStatus
    void NotifysoaDmsStatus();
    
    /// @brief Update field value by software component, soaDmsStatus
    void UpdatesoaDmsStatus(const fields::soaDmsStatus::FieldType& value);
    
    /// @brief Getter for field, soaDmsSwVersion
    ara::core::Future<fields::soaDmsSwVersion::FieldType> GetsoaDmsSwVersion();
    
    /// @brief Notifier for field, soaDmsSwVersion
    void NotifysoaDmsSwVersion();
    
    /// @brief Update field value by software component, soaDmsSwVersion
    void UpdatesoaDmsSwVersion(const fields::soaDmsSwVersion::FieldType& value);
    
private:
    /// @brief Logger for this port
    ara::log::Logger& m_logger;
    
    /// @brief Field, soaDmsDeviceNormal
    fields::soaDmsDeviceNormal::FieldType m_soaDmsDeviceNormal;
    
    /// @brief Field, soaDmsDriverStatus
    fields::soaDmsDriverStatus::FieldType m_soaDmsDriverStatus;
    
    /// @brief Field, soaDmsStatus
    fields::soaDmsStatus::FieldType m_soaDmsStatus;
    
    /// @brief Field, soaDmsSwVersion
    fields::soaDmsSwVersion::FieldType m_soaDmsSwVersion;
    
};
 
} /// namespace skeleton
} /// namespace control
} /// namespace eevp

namespace soa_dms
{
namespace aa
{
namespace port
{
 
class PPort_SOA_DMS
{
public:
    /// @brief Constructor
    PPort_SOA_DMS();
    
    /// @brief Destructor
    ~PPort_SOA_DMS();
    
    /// @brief Start port
    void Start();
    
    /// @brief Terminate port
    void Terminate();
    
    /// @brief Write event data to buffer, onDriverNotFocusing
    void WriteDataonDriverNotFocusing(const eevp::control::skeleton::events::onDriverNotFocusing::SampleType& data);
     
    /// @brief Send event cyclic from buffer data, onDriverNotFocusing
    void SendEventonDriverNotFocusingCyclic();
     
    /// @brief Send event directly from buffer data, onDriverNotFocusing
    void SendEventonDriverNotFocusingTriggered();
     
    /// @brief Send event directly with argument, onDriverNotFocusing
    void SendEventonDriverNotFocusingTriggered(const eevp::control::skeleton::events::onDriverNotFocusing::SampleType& data);

    /// @brief Write event data to buffer, onDriverNotWaken
    void WriteDataonDriverNotWaken(const eevp::control::skeleton::events::onDriverNotWaken::SampleType& data);
     
    /// @brief Send event cyclic from buffer data, onDriverNotWaken
    void SendEventonDriverNotWakenCyclic();
     
    /// @brief Send event directly from buffer data, onDriverNotWaken
    void SendEventonDriverNotWakenTriggered();
     
    /// @brief Send event directly with argument, onDriverNotWaken
    void SendEventonDriverNotWakenTriggered(const eevp::control::skeleton::events::onDriverNotWaken::SampleType& data);

    /// @brief Write event data to buffer, onDriverNotWatchingFront
    void WriteDataonDriverNotWatchingFront(const eevp::control::skeleton::events::onDriverNotWatchingFront::SampleType& data);
     
    /// @brief Send event cyclic from buffer data, onDriverNotWatchingFront
    void SendEventonDriverNotWatchingFrontCyclic();
     
    /// @brief Send event directly from buffer data, onDriverNotWatchingFront
    void SendEventonDriverNotWatchingFrontTriggered();
     
    /// @brief Send event directly with argument, onDriverNotWatchingFront
    void SendEventonDriverNotWatchingFrontTriggered(const eevp::control::skeleton::events::onDriverNotWatchingFront::SampleType& data);
     
    /// @brief Write field value to buffer, soaDmsDeviceNormal
    void WriteValuesoaDmsDeviceNormal(const eevp::control::skeleton::fields::soaDmsDeviceNormal::FieldType& value);
     
    /// @brief Notify field cyclic from buffer, soaDmsDeviceNormal
    void NotifyFieldsoaDmsDeviceNormalCyclic();
     
    /// @brief Notify field directly from buffer data, soaDmsDeviceNormal
    void NotifyFieldsoaDmsDeviceNormalTriggered();
     
    /// @brief Notify field directly with argument, soaDmsDeviceNormal
    void NotifyFieldsoaDmsDeviceNormalTriggered(const eevp::control::skeleton::fields::soaDmsDeviceNormal::FieldType& value);

    /// @brief Write field value to buffer, soaDmsDriverStatus
    void WriteValuesoaDmsDriverStatus(const eevp::control::skeleton::fields::soaDmsDriverStatus::FieldType& value);
     
    /// @brief Notify field cyclic from buffer, soaDmsDriverStatus
    void NotifyFieldsoaDmsDriverStatusCyclic();
     
    /// @brief Notify field directly from buffer data, soaDmsDriverStatus
    void NotifyFieldsoaDmsDriverStatusTriggered();
     
    /// @brief Notify field directly with argument, soaDmsDriverStatus
    void NotifyFieldsoaDmsDriverStatusTriggered(const eevp::control::skeleton::fields::soaDmsDriverStatus::FieldType& value);

    /// @brief Write field value to buffer, soaDmsStatus
    void WriteValuesoaDmsStatus(const eevp::control::skeleton::fields::soaDmsStatus::FieldType& value);
     
    /// @brief Notify field cyclic from buffer, soaDmsStatus
    void NotifyFieldsoaDmsStatusCyclic();
     
    /// @brief Notify field directly from buffer data, soaDmsStatus
    void NotifyFieldsoaDmsStatusTriggered();
     
    /// @brief Notify field directly with argument, soaDmsStatus
    void NotifyFieldsoaDmsStatusTriggered(const eevp::control::skeleton::fields::soaDmsStatus::FieldType& value);

    /// @brief Write field value to buffer, soaDmsSwVersion
    void WriteValuesoaDmsSwVersion(const eevp::control::skeleton::fields::soaDmsSwVersion::FieldType& value);
     
    /// @brief Notify field cyclic from buffer, soaDmsSwVersion
    void NotifyFieldsoaDmsSwVersionCyclic();
     
    /// @brief Notify field directly from buffer data, soaDmsSwVersion
    void NotifyFieldsoaDmsSwVersionTriggered();
     
    /// @brief Notify field directly with argument, soaDmsSwVersion
    void NotifyFieldsoaDmsSwVersionTriggered(const eevp::control::skeleton::fields::soaDmsSwVersion::FieldType& value);
     
private:
    /// @brief Logger for this port
    ara::log::Logger& m_logger;
    
    /// @brief Flag of port status
    bool m_running;
    
    /// @brief Mutex for this port
    std::mutex m_mutex;
    
    /// @brief AUTOSAR Port Interface
    std::unique_ptr<eevp::control::skeleton::SoaDmsSkeletonImpl> m_interface;
    
    /// @brief Data for event, onDriverNotFocusing
    eevp::control::skeleton::events::onDriverNotFocusing::SampleType m_onDriverNotFocusingData;
    
    /// @brief Data for event, onDriverNotWaken
    eevp::control::skeleton::events::onDriverNotWaken::SampleType m_onDriverNotWakenData;
    
    /// @brief Data for event, onDriverNotWatchingFront
    eevp::control::skeleton::events::onDriverNotWatchingFront::SampleType m_onDriverNotWatchingFrontData;
};
 
} /// namespace port
} /// namespace aa
} /// namespace soa_dms
 
#endif /// PARA_AA_GEN_SOFTWARE_COMPONENT_PPORT_SOA_DMS_AA_PPORT_SOA_DMS_H