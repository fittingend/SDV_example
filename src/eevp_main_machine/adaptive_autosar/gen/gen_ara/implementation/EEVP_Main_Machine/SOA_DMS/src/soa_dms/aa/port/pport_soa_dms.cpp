///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : pport_soa_dms.cpp
/// SOFTWARE COMPONENT NAME           : PPort_SOA_DMS
/// GENERATED DATE                    : 2025-08-30 10:53:33
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "soa_dms/aa/port/pport_soa_dms.h"
 
namespace eevp
{
namespace control
{
namespace skeleton
{
 
SoaDmsSkeletonImpl::SoaDmsSkeletonImpl(ara::core::InstanceSpecifier instanceSpec, ara::com::MethodCallProcessingMode mode)
    : SoaDmsSkeleton(instanceSpec, mode)
    , m_logger(ara::log::CreateLogger("SDMS", "PORT", ara::log::LogLevel::kVerbose))
    , m_soaDmsDeviceNormal{eevp::control::SoaDeviceIsNormal::kNORMAL}
    , m_soaDmsDriverStatus{eevp::control::SoaDmsGazingDir::kUNKNOWN, eevp::control::SoaDmsFatigue::kUNKNOWN, eevp::control::SoaDmsSmoking::kUNKNOWN, eevp::control::SoaDmsOnPhone::kUNKNOWN}
    , m_soaDmsStatus{false, eevp::control::SoaDmsDriverInside::kUNKNOWN}
    , m_soaDmsSwVersion{0U}
{
    // regist get handler, soaDmsDeviceNormal
    auto soadmsdevicenormal_get_handler = [this]() {
        return GetsoaDmsDeviceNormal();
    };
    soaDmsDeviceNormal.RegisterGetHandler(soadmsdevicenormal_get_handler);
    
    // regist get handler, soaDmsDriverStatus
    auto soadmsdriverstatus_get_handler = [this]() {
        return GetsoaDmsDriverStatus();
    };
    soaDmsDriverStatus.RegisterGetHandler(soadmsdriverstatus_get_handler);
    
    // regist get handler, soaDmsStatus
    auto soadmsstatus_get_handler = [this]() {
        return GetsoaDmsStatus();
    };
    soaDmsStatus.RegisterGetHandler(soadmsstatus_get_handler);
    
    // regist get handler, soaDmsSwVersion
    auto soadmsswversion_get_handler = [this]() {
        return GetsoaDmsSwVersion();
    };
    soaDmsSwVersion.RegisterGetHandler(soadmsswversion_get_handler);
}
 
void SoaDmsSkeletonImpl::SetDmsPower(const bool& on)
{
    m_logger.LogVerbose() << "PPort_SOA_DMS::SetDmsPower::Triggered";
    
    // put your logic
}
 
ara::core::Future<fields::soaDmsDeviceNormal::FieldType> SoaDmsSkeletonImpl::GetsoaDmsDeviceNormal()
{
    m_logger.LogVerbose() << "PPort_SOA_DMS::GetsoaDmsDeviceNormal::Requested";
    
    ara::core::Promise<fields::soaDmsDeviceNormal::FieldType> promise;
    
    promise.set_value(m_soaDmsDeviceNormal);
    return promise.get_future();
}
 
void SoaDmsSkeletonImpl::NotifysoaDmsDeviceNormal()
{
    auto notify = soaDmsDeviceNormal.Update(m_soaDmsDeviceNormal);
    if (notify.HasValue())
    {
        m_logger.LogVerbose() << "PPort_SOA_DMS::NotifysoaDmsDeviceNormal::Update";
    }
    else
    {
        m_logger.LogError() << "PPort_SOA_DMS::NotifysoaDmsDeviceNormal::Update::" << notify.Error().Message();
    }
}
 
void SoaDmsSkeletonImpl::UpdatesoaDmsDeviceNormal(const fields::soaDmsDeviceNormal::FieldType& value)
{
    m_soaDmsDeviceNormal = value;
}
 
ara::core::Future<fields::soaDmsDriverStatus::FieldType> SoaDmsSkeletonImpl::GetsoaDmsDriverStatus()
{
    m_logger.LogVerbose() << "PPort_SOA_DMS::GetsoaDmsDriverStatus::Requested";
    
    ara::core::Promise<fields::soaDmsDriverStatus::FieldType> promise;
    
    promise.set_value(m_soaDmsDriverStatus);
    return promise.get_future();
}
 
void SoaDmsSkeletonImpl::NotifysoaDmsDriverStatus()
{
    auto notify = soaDmsDriverStatus.Update(m_soaDmsDriverStatus);
    if (notify.HasValue())
    {
        m_logger.LogVerbose() << "PPort_SOA_DMS::NotifysoaDmsDriverStatus::Update";
    }
    else
    {
        m_logger.LogError() << "PPort_SOA_DMS::NotifysoaDmsDriverStatus::Update::" << notify.Error().Message();
    }
}
 
void SoaDmsSkeletonImpl::UpdatesoaDmsDriverStatus(const fields::soaDmsDriverStatus::FieldType& value)
{
    m_soaDmsDriverStatus = value;
}
 
ara::core::Future<fields::soaDmsStatus::FieldType> SoaDmsSkeletonImpl::GetsoaDmsStatus()
{
    m_logger.LogVerbose() << "PPort_SOA_DMS::GetsoaDmsStatus::Requested";
    
    ara::core::Promise<fields::soaDmsStatus::FieldType> promise;
    
    promise.set_value(m_soaDmsStatus);
    return promise.get_future();
}
 
void SoaDmsSkeletonImpl::NotifysoaDmsStatus()
{
    auto notify = soaDmsStatus.Update(m_soaDmsStatus);
    if (notify.HasValue())
    {
        m_logger.LogVerbose() << "PPort_SOA_DMS::NotifysoaDmsStatus::Update";
    }
    else
    {
        m_logger.LogError() << "PPort_SOA_DMS::NotifysoaDmsStatus::Update::" << notify.Error().Message();
    }
}
 
void SoaDmsSkeletonImpl::UpdatesoaDmsStatus(const fields::soaDmsStatus::FieldType& value)
{
    m_soaDmsStatus = value;
}
 
ara::core::Future<fields::soaDmsSwVersion::FieldType> SoaDmsSkeletonImpl::GetsoaDmsSwVersion()
{
    m_logger.LogVerbose() << "PPort_SOA_DMS::GetsoaDmsSwVersion::Requested";
    
    ara::core::Promise<fields::soaDmsSwVersion::FieldType> promise;
    
    promise.set_value(m_soaDmsSwVersion);
    return promise.get_future();
}
 
void SoaDmsSkeletonImpl::NotifysoaDmsSwVersion()
{
    auto notify = soaDmsSwVersion.Update(m_soaDmsSwVersion);
    if (notify.HasValue())
    {
        m_logger.LogVerbose() << "PPort_SOA_DMS::NotifysoaDmsSwVersion::Update";
    }
    else
    {
        m_logger.LogError() << "PPort_SOA_DMS::NotifysoaDmsSwVersion::Update::" << notify.Error().Message();
    }
}
 
void SoaDmsSkeletonImpl::UpdatesoaDmsSwVersion(const fields::soaDmsSwVersion::FieldType& value)
{
    m_soaDmsSwVersion = value;
}
 
} /// namespace skeleton
} /// namespace control
} /// namespace eevp

namespace soa_dms
{
namespace aa
{
namespace port
{
 
PPort_SOA_DMS::PPort_SOA_DMS()
    : m_logger(ara::log::CreateLogger("SDMS", "PORT", ara::log::LogLevel::kVerbose))
    , m_running{false}
    , m_onDriverNotFocusingData{false}
    , m_onDriverNotWakenData{false}
    , m_onDriverNotWatchingFrontData{false}
{
}
 
PPort_SOA_DMS::~PPort_SOA_DMS()
{
}
 
void PPort_SOA_DMS::Start()
{
    m_logger.LogVerbose() << "PPort_SOA_DMS::Start";
    
    // construct skeleton
    ara::core::InstanceSpecifier specifier{"SOA_DMS/AA/PPort_SOA_DMS"};
    m_interface = std::make_unique<eevp::control::skeleton::SoaDmsSkeletonImpl>(specifier);
    
    // offer service
    auto offer = m_interface->OfferService();
    if (offer.HasValue())
    {
        m_running = true;
        m_logger.LogVerbose() << "PPort_SOA_DMS::Start::OfferService";
    }
    else
    {
        m_running = false;
        m_logger.LogError() << "PPort_SOA_DMS::Start::OfferService::" << offer.Error().Message();
    }
}
 
void PPort_SOA_DMS::Terminate()
{
    m_logger.LogVerbose() << "PPort_SOA_DMS::Terminate";
    
    // stop port
    m_running = false;
    
    // stop offer service
    m_interface->StopOfferService();
    m_logger.LogVerbose() << "PPort_SOA_DMS::Terminate::StopOfferService";
}
 
void PPort_SOA_DMS::WriteDataonDriverNotFocusing(const eevp::control::skeleton::events::onDriverNotFocusing::SampleType& data)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_onDriverNotFocusingData = data;
}
 
void PPort_SOA_DMS::SendEventonDriverNotFocusingCyclic()
{
    while (m_running)
    {
        {
            std::lock_guard<std::mutex> lock(m_mutex);
            
            auto send = m_interface->onDriverNotFocusing.Send(m_onDriverNotFocusingData);
            if (send.HasValue())
            {
                m_logger.LogVerbose() << "PPort_SOA_DMS::SendEventonDriverNotFocusingCyclic::Send";
            }
            else
            {
                m_logger.LogError() << "PPort_SOA_DMS::SendEventonDriverNotFocusingCyclic::Send::" << send.Error().Message();
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void PPort_SOA_DMS::SendEventonDriverNotFocusingTriggered()
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    auto send = m_interface->onDriverNotFocusing.Send(m_onDriverNotFocusingData);
    if (send.HasValue())
    {
        m_logger.LogVerbose() << "PPort_SOA_DMS::SendEventonDriverNotFocusingTriggered::Send";
    }
    else
    {
        m_logger.LogError() << "PPort_SOA_DMS::SendEventonDriverNotFocusingTriggered::Send::" << send.Error().Message();
    }
}
 
void PPort_SOA_DMS::SendEventonDriverNotFocusingTriggered(const eevp::control::skeleton::events::onDriverNotFocusing::SampleType& data)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_onDriverNotFocusingData = data;
    auto send = m_interface->onDriverNotFocusing.Send(m_onDriverNotFocusingData);
    if (send.HasValue())
    {
        m_logger.LogVerbose() << "PPort_SOA_DMS::SendEventonDriverNotFocusingTriggered::Send";
    }
    else
    {
        m_logger.LogError() << "PPort_SOA_DMS::SendEventonDriverNotFocusingTriggered::Send::" << send.Error().Message();
    }
}
 
void PPort_SOA_DMS::WriteDataonDriverNotWaken(const eevp::control::skeleton::events::onDriverNotWaken::SampleType& data)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_onDriverNotWakenData = data;
}
 
void PPort_SOA_DMS::SendEventonDriverNotWakenCyclic()
{
    while (m_running)
    {
        {
            std::lock_guard<std::mutex> lock(m_mutex);
            
            auto send = m_interface->onDriverNotWaken.Send(m_onDriverNotWakenData);
            if (send.HasValue())
            {
                m_logger.LogVerbose() << "PPort_SOA_DMS::SendEventonDriverNotWakenCyclic::Send";
            }
            else
            {
                m_logger.LogError() << "PPort_SOA_DMS::SendEventonDriverNotWakenCyclic::Send::" << send.Error().Message();
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void PPort_SOA_DMS::SendEventonDriverNotWakenTriggered()
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    auto send = m_interface->onDriverNotWaken.Send(m_onDriverNotWakenData);
    if (send.HasValue())
    {
        m_logger.LogVerbose() << "PPort_SOA_DMS::SendEventonDriverNotWakenTriggered::Send";
    }
    else
    {
        m_logger.LogError() << "PPort_SOA_DMS::SendEventonDriverNotWakenTriggered::Send::" << send.Error().Message();
    }
}
 
void PPort_SOA_DMS::SendEventonDriverNotWakenTriggered(const eevp::control::skeleton::events::onDriverNotWaken::SampleType& data)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_onDriverNotWakenData = data;
    auto send = m_interface->onDriverNotWaken.Send(m_onDriverNotWakenData);
    if (send.HasValue())
    {
        m_logger.LogVerbose() << "PPort_SOA_DMS::SendEventonDriverNotWakenTriggered::Send";
    }
    else
    {
        m_logger.LogError() << "PPort_SOA_DMS::SendEventonDriverNotWakenTriggered::Send::" << send.Error().Message();
    }
}
 
void PPort_SOA_DMS::WriteDataonDriverNotWatchingFront(const eevp::control::skeleton::events::onDriverNotWatchingFront::SampleType& data)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_onDriverNotWatchingFrontData = data;
}
 
void PPort_SOA_DMS::SendEventonDriverNotWatchingFrontCyclic()
{
    while (m_running)
    {
        {
            std::lock_guard<std::mutex> lock(m_mutex);
            
            auto send = m_interface->onDriverNotWatchingFront.Send(m_onDriverNotWatchingFrontData);
            if (send.HasValue())
            {
                m_logger.LogVerbose() << "PPort_SOA_DMS::SendEventonDriverNotWatchingFrontCyclic::Send";
            }
            else
            {
                m_logger.LogError() << "PPort_SOA_DMS::SendEventonDriverNotWatchingFrontCyclic::Send::" << send.Error().Message();
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void PPort_SOA_DMS::SendEventonDriverNotWatchingFrontTriggered()
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    auto send = m_interface->onDriverNotWatchingFront.Send(m_onDriverNotWatchingFrontData);
    if (send.HasValue())
    {
        m_logger.LogVerbose() << "PPort_SOA_DMS::SendEventonDriverNotWatchingFrontTriggered::Send";
    }
    else
    {
        m_logger.LogError() << "PPort_SOA_DMS::SendEventonDriverNotWatchingFrontTriggered::Send::" << send.Error().Message();
    }
}
 
void PPort_SOA_DMS::SendEventonDriverNotWatchingFrontTriggered(const eevp::control::skeleton::events::onDriverNotWatchingFront::SampleType& data)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_onDriverNotWatchingFrontData = data;
    auto send = m_interface->onDriverNotWatchingFront.Send(m_onDriverNotWatchingFrontData);
    if (send.HasValue())
    {
        m_logger.LogVerbose() << "PPort_SOA_DMS::SendEventonDriverNotWatchingFrontTriggered::Send";
    }
    else
    {
        m_logger.LogError() << "PPort_SOA_DMS::SendEventonDriverNotWatchingFrontTriggered::Send::" << send.Error().Message();
    }
}
 
void PPort_SOA_DMS::WriteValuesoaDmsDeviceNormal(const eevp::control::skeleton::fields::soaDmsDeviceNormal::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdatesoaDmsDeviceNormal(value);
}
 
void PPort_SOA_DMS::NotifyFieldsoaDmsDeviceNormalCyclic()
{
    while (m_running)
    {
        {
            std::lock_guard<std::mutex> lock(m_mutex);
            
            m_interface->NotifysoaDmsDeviceNormal();
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void PPort_SOA_DMS::NotifyFieldsoaDmsDeviceNormalTriggered()
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->NotifysoaDmsDeviceNormal();
}
 
void PPort_SOA_DMS::NotifyFieldsoaDmsDeviceNormalTriggered(const eevp::control::skeleton::fields::soaDmsDeviceNormal::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdatesoaDmsDeviceNormal(value);
    m_interface->NotifysoaDmsDeviceNormal();
}
 
void PPort_SOA_DMS::WriteValuesoaDmsDriverStatus(const eevp::control::skeleton::fields::soaDmsDriverStatus::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdatesoaDmsDriverStatus(value);
}
 
void PPort_SOA_DMS::NotifyFieldsoaDmsDriverStatusCyclic()
{
    while (m_running)
    {
        {
            std::lock_guard<std::mutex> lock(m_mutex);
            
            m_interface->NotifysoaDmsDriverStatus();
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void PPort_SOA_DMS::NotifyFieldsoaDmsDriverStatusTriggered()
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->NotifysoaDmsDriverStatus();
}
 
void PPort_SOA_DMS::NotifyFieldsoaDmsDriverStatusTriggered(const eevp::control::skeleton::fields::soaDmsDriverStatus::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdatesoaDmsDriverStatus(value);
    m_interface->NotifysoaDmsDriverStatus();
}
 
void PPort_SOA_DMS::WriteValuesoaDmsStatus(const eevp::control::skeleton::fields::soaDmsStatus::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdatesoaDmsStatus(value);
}
 
void PPort_SOA_DMS::NotifyFieldsoaDmsStatusCyclic()
{
    while (m_running)
    {
        {
            std::lock_guard<std::mutex> lock(m_mutex);
            
            m_interface->NotifysoaDmsStatus();
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void PPort_SOA_DMS::NotifyFieldsoaDmsStatusTriggered()
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->NotifysoaDmsStatus();
}
 
void PPort_SOA_DMS::NotifyFieldsoaDmsStatusTriggered(const eevp::control::skeleton::fields::soaDmsStatus::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdatesoaDmsStatus(value);
    m_interface->NotifysoaDmsStatus();
}
 
void PPort_SOA_DMS::WriteValuesoaDmsSwVersion(const eevp::control::skeleton::fields::soaDmsSwVersion::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdatesoaDmsSwVersion(value);
}
 
void PPort_SOA_DMS::NotifyFieldsoaDmsSwVersionCyclic()
{
    while (m_running)
    {
        {
            std::lock_guard<std::mutex> lock(m_mutex);
            
            m_interface->NotifysoaDmsSwVersion();
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void PPort_SOA_DMS::NotifyFieldsoaDmsSwVersionTriggered()
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->NotifysoaDmsSwVersion();
}
 
void PPort_SOA_DMS::NotifyFieldsoaDmsSwVersionTriggered(const eevp::control::skeleton::fields::soaDmsSwVersion::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdatesoaDmsSwVersion(value);
    m_interface->NotifysoaDmsSwVersion();
}
 
} /// namespace port
} /// namespace aa
} /// namespace soa_dms
 
/// EOF