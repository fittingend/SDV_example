///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : rport_zone5dms.h
/// SOFTWARE COMPONENT NAME           : RPort_Zone5Dms
/// GENERATED DATE                    : 2025-08-30 10:53:33
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef PARA_AA_GEN_SOFTWARE_COMPONENT_RPORT_SOA_DMS_AA_RPORT_ZONE5DMS_H
#define PARA_AA_GEN_SOFTWARE_COMPONENT_RPORT_SOA_DMS_AA_RPORT_ZONE5DMS_H
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// INCLUSION HEADER FILES
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "zone5/dms/control/zone5dms_proxy.h"
 
#include "ara/log/logger.h"
 
#include <mutex>
#include <thread>
 
namespace soa_dms
{
namespace aa
{
namespace port
{
 
class RPort_Zone5Dms
{
public:
    /// @brief Constructor
    RPort_Zone5Dms();
    
    /// @brief Destructor
    ~RPort_Zone5Dms();
    
    /// @brief Start port
    void Start();
    
    /// @brief Terminate port
    void Terminate();

    /// @brief Subscribe field notification, zone5DmsDeviceNormal
    void Subscribezone5DmsDeviceNormal();
     
    /// @brief Stop field subscription, zone5DmsDeviceNormal
    void StopSubscribezone5DmsDeviceNormal();
     
    /// @brief Field notification receive handler, zone5DmsDeviceNormal
    void ReceiveFieldzone5DmsDeviceNormalTriggered();
     
    /// @brief Field notification receive handler, zone5DmsDeviceNormal
    void ReceiveFieldzone5DmsDeviceNormalCyclic();
     
    /// @brief Read field notification value, zone5DmsDeviceNormal
    void ReadValuezone5DmsDeviceNormal(ara::com::SamplePtr<zone5::dms::control::proxy::fields::zone5DmsDeviceNormal::FieldType const> samplePtr);
     
    /// @brief Regist callback from software component
    void RegistFieldHandlerzone5DmsDeviceNormal(std::function<void(const zone5::dms::control::proxy::fields::zone5DmsDeviceNormal::FieldType&)> handler);
    
    /// @brief Getter method using by software component, zone5DmsDeviceNormal
    void Getzone5DmsDeviceNormal();
    
    /// @brief Subscribe field notification, zone5DmsDriverStatus
    void Subscribezone5DmsDriverStatus();
     
    /// @brief Stop field subscription, zone5DmsDriverStatus
    void StopSubscribezone5DmsDriverStatus();
     
    /// @brief Field notification receive handler, zone5DmsDriverStatus
    void ReceiveFieldzone5DmsDriverStatusTriggered();
     
    /// @brief Field notification receive handler, zone5DmsDriverStatus
    void ReceiveFieldzone5DmsDriverStatusCyclic();
     
    /// @brief Read field notification value, zone5DmsDriverStatus
    void ReadValuezone5DmsDriverStatus(ara::com::SamplePtr<zone5::dms::control::proxy::fields::zone5DmsDriverStatus::FieldType const> samplePtr);
     
    /// @brief Regist callback from software component
    void RegistFieldHandlerzone5DmsDriverStatus(std::function<void(const zone5::dms::control::proxy::fields::zone5DmsDriverStatus::FieldType&)> handler);
    
    /// @brief Getter method using by software component, zone5DmsDriverStatus
    void Getzone5DmsDriverStatus();
    
    /// @brief Subscribe field notification, zone5DmsStatus
    void Subscribezone5DmsStatus();
     
    /// @brief Stop field subscription, zone5DmsStatus
    void StopSubscribezone5DmsStatus();
     
    /// @brief Field notification receive handler, zone5DmsStatus
    void ReceiveFieldzone5DmsStatusTriggered();
     
    /// @brief Field notification receive handler, zone5DmsStatus
    void ReceiveFieldzone5DmsStatusCyclic();
     
    /// @brief Read field notification value, zone5DmsStatus
    void ReadValuezone5DmsStatus(ara::com::SamplePtr<zone5::dms::control::proxy::fields::zone5DmsStatus::FieldType const> samplePtr);
     
    /// @brief Regist callback from software component
    void RegistFieldHandlerzone5DmsStatus(std::function<void(const zone5::dms::control::proxy::fields::zone5DmsStatus::FieldType&)> handler);
    
    /// @brief Getter method using by software component, zone5DmsStatus
    void Getzone5DmsStatus();
    
    /// @brief Fire and Forget method using by software component, SetDmsPower
    void RequestSetDmsPower(const std::uint8_t& on);
    
private:
    /// @brief Callback for find service
    void Find(ara::com::ServiceHandleContainer<zone5::dms::control::proxy::Zone5DmsProxy::HandleType> handles,
              ara::com::FindServiceHandle findHandle);

    /// @brief Callback for field notification receiver, zone5DmsDeviceNormal
    void RegistReceiverzone5DmsDeviceNormal();
    
    /// @brief Callback for field notification receiver, zone5DmsDriverStatus
    void RegistReceiverzone5DmsDriverStatus();
    
    /// @brief Callback for field notification receiver, zone5DmsStatus
    void RegistReceiverzone5DmsStatus();
    
private:
    /// @brief Logger for this port
    ara::log::Logger& m_logger;
    
    /// @brief Flag of port status
    bool m_running;
    
    /// @brief Flag of find service status
    bool m_found;
    
    /// @brief Mutex for this port
    std::mutex m_mutex; 
    
    /// @brief AUTOSAR Port Interface
    std::unique_ptr<zone5::dms::control::proxy::Zone5DmsProxy> m_interface;
    
    /// @brief Find service handle
    std::unique_ptr<ara::com::FindServiceHandle> m_findHandle;

    /// @brief Callback from software component, zone5DmsDeviceNormal
    std::function<void(const zone5::dms::control::proxy::fields::zone5DmsDeviceNormal::FieldType&)> m_receiverzone5DmsDeviceNormal;
    
    /// @brief Callback from software component, zone5DmsDriverStatus
    std::function<void(const zone5::dms::control::proxy::fields::zone5DmsDriverStatus::FieldType&)> m_receiverzone5DmsDriverStatus;
    
    /// @brief Callback from software component, zone5DmsStatus
    std::function<void(const zone5::dms::control::proxy::fields::zone5DmsStatus::FieldType&)> m_receiverzone5DmsStatus;
    
};
 
} /// namespace port
} /// namespace aa
} /// namespace soa_dms
 
#endif /// PARA_AA_GEN_SOFTWARE_COMPONENT_RPORT_SOA_DMS_AA_RPORT_ZONE5DMS_H