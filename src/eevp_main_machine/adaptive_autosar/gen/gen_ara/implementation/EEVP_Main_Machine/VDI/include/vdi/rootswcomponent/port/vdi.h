///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : vdi.h
/// SOFTWARE COMPONENT NAME           : VDI
/// GENERATED DATE                    : 2025-08-30 10:53:50
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef PARA_AA_GEN_SOFTWARE_COMPONENT_RPORT_VDI_ROOTSWCOMPONENT_VDI_H
#define PARA_AA_GEN_SOFTWARE_COMPONENT_RPORT_VDI_ROOTSWCOMPONENT_VDI_H
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// INCLUSION HEADER FILES
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "ara/vucm/driver/vehicledriverapplication_proxy.h"
 
#include "ara/log/logger.h"
 
#include <mutex>
#include <thread>
 
namespace vdi
{
namespace rootswcomponent
{
namespace port
{
 
class VDI
{
public:
    /// @brief Constructor
    VDI();
    
    /// @brief Destructor
    ~VDI();
    
    /// @brief Start port
    void Start();
    
    /// @brief Terminate port
    void Terminate();

    /// @brief Subscribe field notification, ApprovalRequired
    void SubscribeApprovalRequired();
     
    /// @brief Stop field subscription, ApprovalRequired
    void StopSubscribeApprovalRequired();
     
    /// @brief Field notification receive handler, ApprovalRequired
    void ReceiveFieldApprovalRequiredTriggered();
     
    /// @brief Field notification receive handler, ApprovalRequired
    void ReceiveFieldApprovalRequiredCyclic();
     
    /// @brief Read field notification value, ApprovalRequired
    void ReadValueApprovalRequired(ara::com::SamplePtr<ara::vucm::driver::proxy::fields::ApprovalRequired::FieldType const> samplePtr);
     
    /// @brief Regist callback from software component
    void RegistFieldHandlerApprovalRequired(std::function<void(const ara::vucm::driver::proxy::fields::ApprovalRequired::FieldType&)> handler);
    
    /// @brief Getter method using by software component, ApprovalRequired
    void GetApprovalRequired();
    
    /// @brief Subscribe field notification, CampaignState
    void SubscribeCampaignState();
     
    /// @brief Stop field subscription, CampaignState
    void StopSubscribeCampaignState();
     
    /// @brief Field notification receive handler, CampaignState
    void ReceiveFieldCampaignStateTriggered();
     
    /// @brief Field notification receive handler, CampaignState
    void ReceiveFieldCampaignStateCyclic();
     
    /// @brief Read field notification value, CampaignState
    void ReadValueCampaignState(ara::com::SamplePtr<ara::vucm::driver::proxy::fields::CampaignState::FieldType const> samplePtr);
     
    /// @brief Regist callback from software component
    void RegistFieldHandlerCampaignState(std::function<void(const ara::vucm::driver::proxy::fields::CampaignState::FieldType&)> handler);
    
    /// @brief Getter method using by software component, CampaignState
    void GetCampaignState();
    
    /// @brief Subscribe field notification, SafetyPolicy
    void SubscribeSafetyPolicy();
     
    /// @brief Stop field subscription, SafetyPolicy
    void StopSubscribeSafetyPolicy();
     
    /// @brief Field notification receive handler, SafetyPolicy
    void ReceiveFieldSafetyPolicyTriggered();
     
    /// @brief Field notification receive handler, SafetyPolicy
    void ReceiveFieldSafetyPolicyCyclic();
     
    /// @brief Read field notification value, SafetyPolicy
    void ReadValueSafetyPolicy(ara::com::SamplePtr<ara::vucm::driver::proxy::fields::SafetyPolicy::FieldType const> samplePtr);
     
    /// @brief Regist callback from software component
    void RegistFieldHandlerSafetyPolicy(std::function<void(const ara::vucm::driver::proxy::fields::SafetyPolicy::FieldType&)> handler);
    
    /// @brief Getter method using by software component, SafetyPolicy
    void GetSafetyPolicy();
    
    /// @brief Subscribe field notification, SafetyState
    void SubscribeSafetyState();
     
    /// @brief Stop field subscription, SafetyState
    void StopSubscribeSafetyState();
     
    /// @brief Field notification receive handler, SafetyState
    void ReceiveFieldSafetyStateTriggered();
     
    /// @brief Field notification receive handler, SafetyState
    void ReceiveFieldSafetyStateCyclic();
     
    /// @brief Read field notification value, SafetyState
    void ReadValueSafetyState(ara::com::SamplePtr<ara::vucm::driver::proxy::fields::SafetyState::FieldType const> samplePtr);
     
    /// @brief Regist callback from software component
    void RegistFieldHandlerSafetyState(std::function<void(const ara::vucm::driver::proxy::fields::SafetyState::FieldType&)> handler);
    
    /// @brief Getter method using by software component, SafetyState
    void GetSafetyState();
    
    /// @brief Request with Response method using by software component, AllowCampaign
    void RequestAllowCampaign();
     
    /// @brief Regist callback from software component
    void RegistResponseHandlerAllowCampaign(std::function<void(const ara::vucm::driver::proxy::methods::AllowCampaign::Output&)> handler);
    
    /// @brief Request with Response method using by software component, CancelCampaign
    void RequestCancelCampaign(const bool& DisableCampaign);
     
    /// @brief Regist callback from software component
    void RegistResponseHandlerCancelCampaign(std::function<void(const ara::vucm::driver::proxy::methods::CancelCampaign::Output&)> handler);
    
    /// @brief Request with Response method using by software component, DriverApproval
    void RequestDriverApproval(const bool& Approval, const ara::ucm::SafetyPolicyType& SafetyPolicy);
     
    /// @brief Regist callback from software component
    void RegistResponseHandlerDriverApproval(std::function<void(const ara::vucm::driver::proxy::methods::DriverApproval::Output&)> handler);
    
    /// @brief Request with Response method using by software component, GetCampaignHistory
    void RequestGetCampaignHistory(const std::uint64_t& timestampGE, const std::uint64_t& timestampLT);
     
    /// @brief Regist callback from software component
    void RegistResponseHandlerGetCampaignHistory(std::function<void(const ara::vucm::driver::proxy::methods::GetCampaignHistory::Output&)> handler);
    
    /// @brief Request with Response method using by software component, GetSwClusterDescription
    void RequestGetSwClusterDescription();
     
    /// @brief Regist callback from software component
    void RegistResponseHandlerGetSwClusterDescription(std::function<void(const ara::vucm::driver::proxy::methods::GetSwClusterDescription::Output&)> handler);
    
    /// @brief Request with Response method using by software component, GetSwPackageDescription
    void RequestGetSwPackageDescription();
     
    /// @brief Regist callback from software component
    void RegistResponseHandlerGetSwPackageDescription(std::function<void(const ara::vucm::driver::proxy::methods::GetSwPackageDescription::Output&)> handler);
    
    /// @brief Request with Response method using by software component, GetSwProcessProgress
    void RequestGetSwProcessProgress();
     
    /// @brief Regist callback from software component
    void RegistResponseHandlerGetSwProcessProgress(std::function<void(const ara::vucm::driver::proxy::methods::GetSwProcessProgress::Output&)> handler);
    
    /// @brief Request with Response method using by software component, GetSwTransferProgress
    void RequestGetSwTransferProgress();
     
    /// @brief Regist callback from software component
    void RegistResponseHandlerGetSwTransferProgress(std::function<void(const ara::vucm::driver::proxy::methods::GetSwTransferProgress::Output&)> handler);
    
private:
    /// @brief Callback for find service
    void Find(ara::com::ServiceHandleContainer<ara::vucm::driver::proxy::VehicleDriverApplicationProxy::HandleType> handles,
              ara::com::FindServiceHandle findHandle);

    /// @brief Callback for field notification receiver, ApprovalRequired
    void RegistReceiverApprovalRequired();
    
    /// @brief Callback for field notification receiver, CampaignState
    void RegistReceiverCampaignState();
    
    /// @brief Callback for field notification receiver, SafetyPolicy
    void RegistReceiverSafetyPolicy();
    
    /// @brief Callback for field notification receiver, SafetyState
    void RegistReceiverSafetyState();
    
private:
    /// @brief Logger for this port
    ara::log::Logger& m_logger;
    
    /// @brief Flag of port status
    bool m_running;
    
    /// @brief Flag of find service status
    bool m_found;
    
    /// @brief Mutex for this port
    std::mutex m_mutex; 
    
    /// @brief AUTOSAR Port Interface
    std::unique_ptr<ara::vucm::driver::proxy::VehicleDriverApplicationProxy> m_interface;
    
    /// @brief Find service handle
    std::unique_ptr<ara::com::FindServiceHandle> m_findHandle;

    /// @brief Callback from software component, ApprovalRequired
    std::function<void(const ara::vucm::driver::proxy::fields::ApprovalRequired::FieldType&)> m_receiverApprovalRequired;
    
    /// @brief Callback from software component, CampaignState
    std::function<void(const ara::vucm::driver::proxy::fields::CampaignState::FieldType&)> m_receiverCampaignState;
    
    /// @brief Callback from software component, SafetyPolicy
    std::function<void(const ara::vucm::driver::proxy::fields::SafetyPolicy::FieldType&)> m_receiverSafetyPolicy;
    
    /// @brief Callback from software component, SafetyState
    std::function<void(const ara::vucm::driver::proxy::fields::SafetyState::FieldType&)> m_receiverSafetyState;
    
    /// @brief Callback from software component, AllowCampaign
    std::function<void(const ara::vucm::driver::proxy::methods::AllowCampaign::Output&)> m_responderAllowCampaign;
    
    /// @brief Callback from software component, CancelCampaign
    std::function<void(const ara::vucm::driver::proxy::methods::CancelCampaign::Output&)> m_responderCancelCampaign;
    
    /// @brief Callback from software component, DriverApproval
    std::function<void(const ara::vucm::driver::proxy::methods::DriverApproval::Output&)> m_responderDriverApproval;
    
    /// @brief Callback from software component, GetCampaignHistory
    std::function<void(const ara::vucm::driver::proxy::methods::GetCampaignHistory::Output&)> m_responderGetCampaignHistory;
    
    /// @brief Callback from software component, GetSwClusterDescription
    std::function<void(const ara::vucm::driver::proxy::methods::GetSwClusterDescription::Output&)> m_responderGetSwClusterDescription;
    
    /// @brief Callback from software component, GetSwPackageDescription
    std::function<void(const ara::vucm::driver::proxy::methods::GetSwPackageDescription::Output&)> m_responderGetSwPackageDescription;
    
    /// @brief Callback from software component, GetSwProcessProgress
    std::function<void(const ara::vucm::driver::proxy::methods::GetSwProcessProgress::Output&)> m_responderGetSwProcessProgress;
    
    /// @brief Callback from software component, GetSwTransferProgress
    std::function<void(const ara::vucm::driver::proxy::methods::GetSwTransferProgress::Output&)> m_responderGetSwTransferProgress;
};
 
} /// namespace port
} /// namespace rootswcomponent
} /// namespace vdi
 
#endif /// PARA_AA_GEN_SOFTWARE_COMPONENT_RPORT_VDI_ROOTSWCOMPONENT_VDI_H