///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : vdi.cpp
/// SOFTWARE COMPONENT NAME           : VDI
/// GENERATED DATE                    : 2025-08-30 10:53:50
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// INCLUSION HEADER FILES
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "vdi/rootswcomponent/vdi.h"
 
namespace vdi
{
namespace rootswcomponent
{
 
VDI::VDI()
    : m_logger(ara::log::CreateLogger("VDI", "SWC", ara::log::LogLevel::kVerbose))
    , m_running{false}
    , m_workers(4)
{
}
 
VDI::~VDI()
{
}
 
bool VDI::Initialize()
{
    m_logger.LogVerbose() << "VDI::Initialize";
    
    bool init = true;
    
    m_VDI = std::make_unique<vdi::rootswcomponent::port::VDI>();
    
    // put your code for initialization
    
    return init;
}
 
void VDI::Start()
{
    m_logger.LogVerbose() << "VDI::Start";
    
    m_VDI->Start();
}
 
void VDI::Terminate()
{
    m_logger.LogVerbose() << "VDI::Terminate";
    
    // stop running
    m_running = false;
    
    m_VDI->Terminate();
}
 
void VDI::Run()
{
    m_logger.LogVerbose() << "VDI::Run";
    
    // start running
    m_running = true;
    
    m_workers.Async([this] { m_VDI->ReceiveFieldApprovalRequiredCyclic(); });
    m_workers.Async([this] { m_VDI->ReceiveFieldCampaignStateCyclic(); });
    m_workers.Async([this] { m_VDI->ReceiveFieldSafetyPolicyCyclic(); });
    m_workers.Async([this] { m_VDI->ReceiveFieldSafetyStateCyclic(); });
    
    m_workers.Wait();
}
 
} /// namespace rootswcomponent
} /// namespace vdi
