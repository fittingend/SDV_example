///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : vdi.cpp
/// SOFTWARE COMPONENT NAME           : VDI
/// GENERATED DATE                    : 2025-08-30 10:53:50
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "vdi/rootswcomponent/port/vdi.h"
 
namespace vdi
{
namespace rootswcomponent
{
namespace port
{
 
VDI::VDI()
    : m_logger(ara::log::CreateLogger("VDI", "PORT", ara::log::LogLevel::kVerbose))
    , m_running{false}
    , m_found{false}
    , m_receiverApprovalRequired{nullptr}
    , m_receiverCampaignState{nullptr}
    , m_receiverSafetyPolicy{nullptr}
    , m_receiverSafetyState{nullptr}
    , m_responderAllowCampaign{nullptr}
    , m_responderCancelCampaign{nullptr}
    , m_responderDriverApproval{nullptr}
    , m_responderGetCampaignHistory{nullptr}
    , m_responderGetSwClusterDescription{nullptr}
    , m_responderGetSwPackageDescription{nullptr}
    , m_responderGetSwProcessProgress{nullptr}
    , m_responderGetSwTransferProgress{nullptr}
{
}
 
VDI::~VDI()
{
}
 
void VDI::Start()
{
    m_logger.LogVerbose() << "VDI::Start";
    
    // regist callback
    ara::core::InstanceSpecifier specifier{"VDI/RootSwComponent/VDI"};
    auto handler = [this](ara::com::ServiceHandleContainer<ara::vucm::driver::proxy::VehicleDriverApplicationProxy::HandleType> handles,
                          ara::com::FindServiceHandle findHandle) {
        this->Find(handles, findHandle);
    };
    
    // find service
    auto find = ara::vucm::driver::proxy::VehicleDriverApplicationProxy::StartFindService(handler, specifier);
    if (find.HasValue())
    {
        m_logger.LogVerbose() << "VDI::Start::StartFindService";
    }
    else
    {
        m_logger.LogError() << "VDI::Start::StartFindService::" << find.Error().Message();
    }
    
    // run port
    m_running = true;
}
 
void VDI::Terminate()
{
    m_logger.LogVerbose() << "VDI::Terminate";
    
    // stop port
    m_running = false;
    
    // clear service proxy
    if (m_interface)
    {
        StopSubscribeApprovalRequired();
        StopSubscribeCampaignState();
        StopSubscribeSafetyPolicy();
        StopSubscribeSafetyState();
        
        // stop find service
        m_interface->StopFindService(*m_findHandle);
        m_found = false;
        
        m_logger.LogVerbose() << "VDI::Terminate::StopFindService";
    }
}
 
void VDI::Find(ara::com::ServiceHandleContainer<ara::vucm::driver::proxy::VehicleDriverApplicationProxy::HandleType> handles, ara::com::FindServiceHandle findHandle)
{
    // check finding handles
    if (handles.empty())
    {
        m_logger.LogVerbose() << "VDI::Find::Service Instances not found";
        return;
    }
    else
    {
        for (auto& handle : handles)
        {
            m_logger.LogVerbose() << "VDI::Find::Searched Instance::ServiceId =" << 
                                     handle.GetServiceHandle().serviceId << 
                                     ", InstanceId =" << 
                                     handle.GetServiceHandle().instanceId;
        }
    }
    
    // create proxy
    if (m_interface)
    {
        m_logger.LogVerbose() << "VDI::Find::Proxy is already running";
    }
    else
    {
        m_logger.LogVerbose() << "VDI::Find::Using Instance::ServiceId =" << 
                                 handles[0].GetServiceHandle().serviceId << 
                                 ", InstanceId =" << 
                                 handles[0].GetServiceHandle().instanceId;
        m_interface = std::make_unique<ara::vucm::driver::proxy::VehicleDriverApplicationProxy>(handles[0]);
        m_findHandle = std::make_unique<ara::com::FindServiceHandle>(findHandle);
        m_found = true;
        
        // subscribe field notifications
        SubscribeApprovalRequired();
        SubscribeCampaignState();
        SubscribeSafetyPolicy();
        SubscribeSafetyState();
    }
}
 
void VDI::SubscribeApprovalRequired()
{
    if (m_found)
    {
        // regist receiver handler
        // if you want to enable it, please uncomment below code
        // RegistReceiverApprovalRequired();
        
        // request subscribe
        auto subscribe = m_interface->ApprovalRequired.Subscribe(1);
        if (subscribe.HasValue())
        {
            m_logger.LogVerbose() << "VDI::SubscribeApprovalRequired::Subscribed";
        }
        else
        {
            m_logger.LogError() << "VDI::SubscribeApprovalRequired::" << subscribe.Error().Message();
        }
    }
}
 
void VDI::StopSubscribeApprovalRequired()
{
    if (m_found)
    {
        // request stop subscribe
        m_interface->ApprovalRequired.Unsubscribe();
        m_logger.LogVerbose() << "VDI::StopSubscribeApprovalRequired::Unsubscribed";
    }
}
 
void VDI::RegistReceiverApprovalRequired()
{
    if (m_found)
    {
        // set callback
        auto receiver = [this]() -> void {
            return ReceiveFieldApprovalRequiredTriggered();
        };
        
        // regist callback
        auto callback = m_interface->ApprovalRequired.SetReceiveHandler(receiver);
        if (callback.HasValue())
        {
            m_logger.LogVerbose() << "VDI::RegistReceiverApprovalRequired::SetReceiveHandler";
        }
        else
        {
            m_logger.LogError() << "VDI::RegistReceiverApprovalRequired::SetReceiveHandler::" << callback.Error().Message();
        }
    }
}
 
void VDI::ReceiveFieldApprovalRequiredTriggered()
{
    if (m_found)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_interface->ApprovalRequired.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
        {
            auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->ApprovalRequired.GetNewSamples([&](auto samplePtr) {
                VDI::ReadValueApprovalRequired(std::move(samplePtr));
            }));
            if (recv->HasValue())
            {
                m_logger.LogVerbose() << "VDI::ReceiveFieldApprovalRequired::GetNewSamples::" << recv->Value();
            }
            else
            {
                m_logger.LogError() << "VDI::ReceiveFieldApprovalRequired::GetNewSamples::" << recv->Error().Message();
            }
        }
    }
}
 
void VDI::ReceiveFieldApprovalRequiredCyclic()
{
    while (m_running)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_found)
        {
            if (m_interface->ApprovalRequired.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
            {
                auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->ApprovalRequired.GetNewSamples([&](auto samplePtr) {
                    VDI::ReadValueApprovalRequired(std::move(samplePtr));
                }));
                if (recv->HasValue())
                {
                    m_logger.LogVerbose() << "VDI::ReceiveFieldApprovalRequired::GetNewSamples::" << recv->Value();
                }
                else
                {
                    m_logger.LogError() << "VDI::ReceiveFieldApprovalRequired::GetNewSamples::" << recv->Error().Message();
                }
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void VDI::ReadValueApprovalRequired(ara::com::SamplePtr<ara::vucm::driver::proxy::fields::ApprovalRequired::FieldType const> samplePtr)
{
    auto value = *samplePtr.Get();
    if (m_receiverApprovalRequired)
    {
        m_receiverApprovalRequired(value);
    }
}
 
void VDI::RegistFieldHandlerApprovalRequired(std::function<void(const ara::vucm::driver::proxy::fields::ApprovalRequired::FieldType&)> handler)
{
    m_receiverApprovalRequired = handler;
}
 
void VDI::GetApprovalRequired()
{
    if (m_found)
    {
        auto request = m_interface->ApprovalRequired.Get();
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "VDI::GetApprovalRequired::Responded";
            
            auto result = response.Value();
            if (m_receiverApprovalRequired)
            {
                m_receiverApprovalRequired(result);
            }
        }
        else
        {
            m_logger.LogError() << "VDI::GetApprovalRequired::" << response.Error().Message();
        }
    }
}
 
void VDI::SubscribeCampaignState()
{
    if (m_found)
    {
        // regist receiver handler
        // if you want to enable it, please uncomment below code
        // RegistReceiverCampaignState();
        
        // request subscribe
        auto subscribe = m_interface->CampaignState.Subscribe(1);
        if (subscribe.HasValue())
        {
            m_logger.LogVerbose() << "VDI::SubscribeCampaignState::Subscribed";
        }
        else
        {
            m_logger.LogError() << "VDI::SubscribeCampaignState::" << subscribe.Error().Message();
        }
    }
}
 
void VDI::StopSubscribeCampaignState()
{
    if (m_found)
    {
        // request stop subscribe
        m_interface->CampaignState.Unsubscribe();
        m_logger.LogVerbose() << "VDI::StopSubscribeCampaignState::Unsubscribed";
    }
}
 
void VDI::RegistReceiverCampaignState()
{
    if (m_found)
    {
        // set callback
        auto receiver = [this]() -> void {
            return ReceiveFieldCampaignStateTriggered();
        };
        
        // regist callback
        auto callback = m_interface->CampaignState.SetReceiveHandler(receiver);
        if (callback.HasValue())
        {
            m_logger.LogVerbose() << "VDI::RegistReceiverCampaignState::SetReceiveHandler";
        }
        else
        {
            m_logger.LogError() << "VDI::RegistReceiverCampaignState::SetReceiveHandler::" << callback.Error().Message();
        }
    }
}
 
void VDI::ReceiveFieldCampaignStateTriggered()
{
    if (m_found)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_interface->CampaignState.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
        {
            auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->CampaignState.GetNewSamples([&](auto samplePtr) {
                VDI::ReadValueCampaignState(std::move(samplePtr));
            }));
            if (recv->HasValue())
            {
                m_logger.LogVerbose() << "VDI::ReceiveFieldCampaignState::GetNewSamples::" << recv->Value();
            }
            else
            {
                m_logger.LogError() << "VDI::ReceiveFieldCampaignState::GetNewSamples::" << recv->Error().Message();
            }
        }
    }
}
 
void VDI::ReceiveFieldCampaignStateCyclic()
{
    while (m_running)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_found)
        {
            if (m_interface->CampaignState.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
            {
                auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->CampaignState.GetNewSamples([&](auto samplePtr) {
                    VDI::ReadValueCampaignState(std::move(samplePtr));
                }));
                if (recv->HasValue())
                {
                    m_logger.LogVerbose() << "VDI::ReceiveFieldCampaignState::GetNewSamples::" << recv->Value();
                }
                else
                {
                    m_logger.LogError() << "VDI::ReceiveFieldCampaignState::GetNewSamples::" << recv->Error().Message();
                }
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void VDI::ReadValueCampaignState(ara::com::SamplePtr<ara::vucm::driver::proxy::fields::CampaignState::FieldType const> samplePtr)
{
    auto value = *samplePtr.Get();
    if (m_receiverCampaignState)
    {
        m_receiverCampaignState(value);
    }
}
 
void VDI::RegistFieldHandlerCampaignState(std::function<void(const ara::vucm::driver::proxy::fields::CampaignState::FieldType&)> handler)
{
    m_receiverCampaignState = handler;
}
 
void VDI::GetCampaignState()
{
    if (m_found)
    {
        auto request = m_interface->CampaignState.Get();
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "VDI::GetCampaignState::Responded";
            
            auto result = response.Value();
            if (m_receiverCampaignState)
            {
                m_receiverCampaignState(result);
            }
        }
        else
        {
            m_logger.LogError() << "VDI::GetCampaignState::" << response.Error().Message();
        }
    }
}
 
void VDI::SubscribeSafetyPolicy()
{
    if (m_found)
    {
        // regist receiver handler
        // if you want to enable it, please uncomment below code
        // RegistReceiverSafetyPolicy();
        
        // request subscribe
        auto subscribe = m_interface->SafetyPolicy.Subscribe(1);
        if (subscribe.HasValue())
        {
            m_logger.LogVerbose() << "VDI::SubscribeSafetyPolicy::Subscribed";
        }
        else
        {
            m_logger.LogError() << "VDI::SubscribeSafetyPolicy::" << subscribe.Error().Message();
        }
    }
}
 
void VDI::StopSubscribeSafetyPolicy()
{
    if (m_found)
    {
        // request stop subscribe
        m_interface->SafetyPolicy.Unsubscribe();
        m_logger.LogVerbose() << "VDI::StopSubscribeSafetyPolicy::Unsubscribed";
    }
}
 
void VDI::RegistReceiverSafetyPolicy()
{
    if (m_found)
    {
        // set callback
        auto receiver = [this]() -> void {
            return ReceiveFieldSafetyPolicyTriggered();
        };
        
        // regist callback
        auto callback = m_interface->SafetyPolicy.SetReceiveHandler(receiver);
        if (callback.HasValue())
        {
            m_logger.LogVerbose() << "VDI::RegistReceiverSafetyPolicy::SetReceiveHandler";
        }
        else
        {
            m_logger.LogError() << "VDI::RegistReceiverSafetyPolicy::SetReceiveHandler::" << callback.Error().Message();
        }
    }
}
 
void VDI::ReceiveFieldSafetyPolicyTriggered()
{
    if (m_found)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_interface->SafetyPolicy.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
        {
            auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->SafetyPolicy.GetNewSamples([&](auto samplePtr) {
                VDI::ReadValueSafetyPolicy(std::move(samplePtr));
            }));
            if (recv->HasValue())
            {
                m_logger.LogVerbose() << "VDI::ReceiveFieldSafetyPolicy::GetNewSamples::" << recv->Value();
            }
            else
            {
                m_logger.LogError() << "VDI::ReceiveFieldSafetyPolicy::GetNewSamples::" << recv->Error().Message();
            }
        }
    }
}
 
void VDI::ReceiveFieldSafetyPolicyCyclic()
{
    while (m_running)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_found)
        {
            if (m_interface->SafetyPolicy.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
            {
                auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->SafetyPolicy.GetNewSamples([&](auto samplePtr) {
                    VDI::ReadValueSafetyPolicy(std::move(samplePtr));
                }));
                if (recv->HasValue())
                {
                    m_logger.LogVerbose() << "VDI::ReceiveFieldSafetyPolicy::GetNewSamples::" << recv->Value();
                }
                else
                {
                    m_logger.LogError() << "VDI::ReceiveFieldSafetyPolicy::GetNewSamples::" << recv->Error().Message();
                }
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void VDI::ReadValueSafetyPolicy(ara::com::SamplePtr<ara::vucm::driver::proxy::fields::SafetyPolicy::FieldType const> samplePtr)
{
    auto value = *samplePtr.Get();
    if (m_receiverSafetyPolicy)
    {
        m_receiverSafetyPolicy(value);
    }
}
 
void VDI::RegistFieldHandlerSafetyPolicy(std::function<void(const ara::vucm::driver::proxy::fields::SafetyPolicy::FieldType&)> handler)
{
    m_receiverSafetyPolicy = handler;
}
 
void VDI::GetSafetyPolicy()
{
    if (m_found)
    {
        auto request = m_interface->SafetyPolicy.Get();
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "VDI::GetSafetyPolicy::Responded";
            
            auto result = response.Value();
            if (m_receiverSafetyPolicy)
            {
                m_receiverSafetyPolicy(result);
            }
        }
        else
        {
            m_logger.LogError() << "VDI::GetSafetyPolicy::" << response.Error().Message();
        }
    }
}
 
void VDI::SubscribeSafetyState()
{
    if (m_found)
    {
        // regist receiver handler
        // if you want to enable it, please uncomment below code
        // RegistReceiverSafetyState();
        
        // request subscribe
        auto subscribe = m_interface->SafetyState.Subscribe(1);
        if (subscribe.HasValue())
        {
            m_logger.LogVerbose() << "VDI::SubscribeSafetyState::Subscribed";
        }
        else
        {
            m_logger.LogError() << "VDI::SubscribeSafetyState::" << subscribe.Error().Message();
        }
    }
}
 
void VDI::StopSubscribeSafetyState()
{
    if (m_found)
    {
        // request stop subscribe
        m_interface->SafetyState.Unsubscribe();
        m_logger.LogVerbose() << "VDI::StopSubscribeSafetyState::Unsubscribed";
    }
}
 
void VDI::RegistReceiverSafetyState()
{
    if (m_found)
    {
        // set callback
        auto receiver = [this]() -> void {
            return ReceiveFieldSafetyStateTriggered();
        };
        
        // regist callback
        auto callback = m_interface->SafetyState.SetReceiveHandler(receiver);
        if (callback.HasValue())
        {
            m_logger.LogVerbose() << "VDI::RegistReceiverSafetyState::SetReceiveHandler";
        }
        else
        {
            m_logger.LogError() << "VDI::RegistReceiverSafetyState::SetReceiveHandler::" << callback.Error().Message();
        }
    }
}
 
void VDI::ReceiveFieldSafetyStateTriggered()
{
    if (m_found)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_interface->SafetyState.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
        {
            auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->SafetyState.GetNewSamples([&](auto samplePtr) {
                VDI::ReadValueSafetyState(std::move(samplePtr));
            }));
            if (recv->HasValue())
            {
                m_logger.LogVerbose() << "VDI::ReceiveFieldSafetyState::GetNewSamples::" << recv->Value();
            }
            else
            {
                m_logger.LogError() << "VDI::ReceiveFieldSafetyState::GetNewSamples::" << recv->Error().Message();
            }
        }
    }
}
 
void VDI::ReceiveFieldSafetyStateCyclic()
{
    while (m_running)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_found)
        {
            if (m_interface->SafetyState.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
            {
                auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->SafetyState.GetNewSamples([&](auto samplePtr) {
                    VDI::ReadValueSafetyState(std::move(samplePtr));
                }));
                if (recv->HasValue())
                {
                    m_logger.LogVerbose() << "VDI::ReceiveFieldSafetyState::GetNewSamples::" << recv->Value();
                }
                else
                {
                    m_logger.LogError() << "VDI::ReceiveFieldSafetyState::GetNewSamples::" << recv->Error().Message();
                }
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void VDI::ReadValueSafetyState(ara::com::SamplePtr<ara::vucm::driver::proxy::fields::SafetyState::FieldType const> samplePtr)
{
    auto value = *samplePtr.Get();
    if (m_receiverSafetyState)
    {
        m_receiverSafetyState(value);
    }
}
 
void VDI::RegistFieldHandlerSafetyState(std::function<void(const ara::vucm::driver::proxy::fields::SafetyState::FieldType&)> handler)
{
    m_receiverSafetyState = handler;
}
 
void VDI::GetSafetyState()
{
    if (m_found)
    {
        auto request = m_interface->SafetyState.Get();
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "VDI::GetSafetyState::Responded";
            
            auto result = response.Value();
            if (m_receiverSafetyState)
            {
                m_receiverSafetyState(result);
            }
        }
        else
        {
            m_logger.LogError() << "VDI::GetSafetyState::" << response.Error().Message();
        }
    }
}
 
void VDI::RequestAllowCampaign()
{
    if (m_found)
    {
        auto request = m_interface->AllowCampaign();
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "VDI::RequestAllowCampaign::Responded";
            
            auto result = response.Value();
            if (m_responderAllowCampaign)
            {
                m_responderAllowCampaign(result);
            }
        }
        else
        {
            m_logger.LogError() << "VDI::RequestAllowCampaign::" << response.Error().Message();
        }
    }
}
 
void VDI::RegistResponseHandlerAllowCampaign(std::function<void(const ara::vucm::driver::proxy::methods::AllowCampaign::Output&)> handler)
{
    m_responderAllowCampaign = handler;
}
 
void VDI::RequestCancelCampaign(const bool& DisableCampaign)
{
    if (m_found)
    {
        auto request = m_interface->CancelCampaign(DisableCampaign);
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "VDI::RequestCancelCampaign::Responded";
            
            auto result = response.Value();
            if (m_responderCancelCampaign)
            {
                m_responderCancelCampaign(result);
            }
        }
        else
        {
            m_logger.LogError() << "VDI::RequestCancelCampaign::" << response.Error().Message();
        }
    }
}
 
void VDI::RegistResponseHandlerCancelCampaign(std::function<void(const ara::vucm::driver::proxy::methods::CancelCampaign::Output&)> handler)
{
    m_responderCancelCampaign = handler;
}
 
void VDI::RequestDriverApproval(const bool& Approval, const ara::ucm::SafetyPolicyType& SafetyPolicy)
{
    if (m_found)
    {
        auto request = m_interface->DriverApproval(Approval, SafetyPolicy);
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "VDI::RequestDriverApproval::Responded";
            
            auto result = response.Value();
            if (m_responderDriverApproval)
            {
                m_responderDriverApproval(result);
            }
        }
        else
        {
            m_logger.LogError() << "VDI::RequestDriverApproval::" << response.Error().Message();
        }
    }
}
 
void VDI::RegistResponseHandlerDriverApproval(std::function<void(const ara::vucm::driver::proxy::methods::DriverApproval::Output&)> handler)
{
    m_responderDriverApproval = handler;
}
 
void VDI::RequestGetCampaignHistory(const std::uint64_t& timestampGE, const std::uint64_t& timestampLT)
{
    if (m_found)
    {
        auto request = m_interface->GetCampaignHistory(timestampGE, timestampLT);
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "VDI::RequestGetCampaignHistory::Responded";
            
            auto result = response.Value();
            if (m_responderGetCampaignHistory)
            {
                m_responderGetCampaignHistory(result);
            }
        }
        else
        {
            m_logger.LogError() << "VDI::RequestGetCampaignHistory::" << response.Error().Message();
        }
    }
}
 
void VDI::RegistResponseHandlerGetCampaignHistory(std::function<void(const ara::vucm::driver::proxy::methods::GetCampaignHistory::Output&)> handler)
{
    m_responderGetCampaignHistory = handler;
}
 
void VDI::RequestGetSwClusterDescription()
{
    if (m_found)
    {
        auto request = m_interface->GetSwClusterDescription();
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "VDI::RequestGetSwClusterDescription::Responded";
            
            auto result = response.Value();
            if (m_responderGetSwClusterDescription)
            {
                m_responderGetSwClusterDescription(result);
            }
        }
        else
        {
            m_logger.LogError() << "VDI::RequestGetSwClusterDescription::" << response.Error().Message();
        }
    }
}
 
void VDI::RegistResponseHandlerGetSwClusterDescription(std::function<void(const ara::vucm::driver::proxy::methods::GetSwClusterDescription::Output&)> handler)
{
    m_responderGetSwClusterDescription = handler;
}
 
void VDI::RequestGetSwPackageDescription()
{
    if (m_found)
    {
        auto request = m_interface->GetSwPackageDescription();
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "VDI::RequestGetSwPackageDescription::Responded";
            
            auto result = response.Value();
            if (m_responderGetSwPackageDescription)
            {
                m_responderGetSwPackageDescription(result);
            }
        }
        else
        {
            m_logger.LogError() << "VDI::RequestGetSwPackageDescription::" << response.Error().Message();
        }
    }
}
 
void VDI::RegistResponseHandlerGetSwPackageDescription(std::function<void(const ara::vucm::driver::proxy::methods::GetSwPackageDescription::Output&)> handler)
{
    m_responderGetSwPackageDescription = handler;
}
 
void VDI::RequestGetSwProcessProgress()
{
    if (m_found)
    {
        auto request = m_interface->GetSwProcessProgress();
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "VDI::RequestGetSwProcessProgress::Responded";
            
            auto result = response.Value();
            if (m_responderGetSwProcessProgress)
            {
                m_responderGetSwProcessProgress(result);
            }
        }
        else
        {
            m_logger.LogError() << "VDI::RequestGetSwProcessProgress::" << response.Error().Message();
        }
    }
}
 
void VDI::RegistResponseHandlerGetSwProcessProgress(std::function<void(const ara::vucm::driver::proxy::methods::GetSwProcessProgress::Output&)> handler)
{
    m_responderGetSwProcessProgress = handler;
}
 
void VDI::RequestGetSwTransferProgress()
{
    if (m_found)
    {
        auto request = m_interface->GetSwTransferProgress();
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "VDI::RequestGetSwTransferProgress::Responded";
            
            auto result = response.Value();
            if (m_responderGetSwTransferProgress)
            {
                m_responderGetSwTransferProgress(result);
            }
        }
        else
        {
            m_logger.LogError() << "VDI::RequestGetSwTransferProgress::" << response.Error().Message();
        }
    }
}
 
void VDI::RegistResponseHandlerGetSwTransferProgress(std::function<void(const ara::vucm::driver::proxy::methods::GetSwTransferProgress::Output&)> handler)
{
    m_responderGetSwTransferProgress = handler;
}
 
} /// namespace port
} /// namespace rootswcomponent
} /// namespace vdi
 
/// EOF