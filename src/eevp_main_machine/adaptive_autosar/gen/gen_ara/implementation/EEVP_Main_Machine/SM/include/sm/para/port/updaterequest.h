///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : updaterequest.h
/// SOFTWARE COMPONENT NAME           : UpdateRequest
/// GENERATED DATE                    : 2025-08-30 10:53:32
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef PARA_AA_GEN_SOFTWARE_COMPONENT_PPORT_SM_PARA_UPDATEREQUEST_H
#define PARA_AA_GEN_SOFTWARE_COMPONENT_PPORT_SM_PARA_UPDATEREQUEST_H
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// INCLUSION HEADER FILES
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "ara/sm/updaterequest_skeleton.h"
 
#include "ara/log/logger.h"
#include "ara/exec/function_group.h"
#include "ara/exec/function_group_state.h"
#include "ara/exec/state_client.h"
 
#include <mutex>
#include <thread>
 
namespace ara
{
namespace sm
{
namespace skeleton
{
 
class UpdateRequestSkeletonImpl : public UpdateRequestSkeleton
{
public:
    /// @brief Constructor
    UpdateRequestSkeletonImpl(ara::core::InstanceSpecifier instanceSpec, ara::com::MethodCallProcessingMode mode = ara::com::MethodCallProcessingMode::kEvent);
    
    /// @brief Request with Response method, PrepareRollback
    ara::core::Future<UpdateRequestSkeleton::PrepareRollbackOutput> PrepareRollback(const ara::sm::FunctionGroupList& FunctionGroupList) override;
    
    /// @brief Request with Response method, PrepareUpdate
    ara::core::Future<UpdateRequestSkeleton::PrepareUpdateOutput> PrepareUpdate(const ara::sm::FunctionGroupList& FunctionGroupList) override;
    
    /// @brief Request with Response method, ResetMachine
    ara::core::Future<UpdateRequestSkeleton::ResetMachineOutput> ResetMachine() override;
    
    /// @brief Request with Response method, StartUpdateSession
    ara::core::Future<UpdateRequestSkeleton::StartUpdateSessionOutput> StartUpdateSession() override;
    
    /// @brief Fire & Forget method, StopUpdateSession
    void StopUpdateSession() override;
    
    /// @brief Request with Response method, VerifyUpdate
    ara::core::Future<UpdateRequestSkeleton::VerifyUpdateOutput> VerifyUpdate(const ara::sm::FunctionGroupList& FunctionGroupList) override;

private:
    /// @brief Logger for this port
    ara::log::Logger& m_logger;

    /// @brief State client
    std::unique_ptr<ara::exec::StateClient> m_stateClient;
    
    /// @brief Undefined state callback
    std::function<void(ara::exec::FunctionGroup&)> m_undefinedStateCallback;
};
 
} /// namespace skeleton
} /// namespace sm
} /// namespace ara

namespace sm
{
namespace para
{
namespace port
{
 
class UpdateRequest
{
public:
    /// @brief Constructor
    UpdateRequest();
    
    /// @brief Destructor
    ~UpdateRequest();
    
    /// @brief Start port
    void Start();
    
    /// @brief Terminate port
    void Terminate();
    
private:
    /// @brief Logger for this port
    ara::log::Logger& m_logger;
    
    /// @brief Flag of port status
    bool m_running;
    
    /// @brief Mutex for this port
    std::mutex m_mutex;
    
    /// @brief AUTOSAR Port Interface
    std::unique_ptr<ara::sm::skeleton::UpdateRequestSkeletonImpl> m_interface;
    
};
 
} /// namespace port
} /// namespace para
} /// namespace sm
 
#endif /// PARA_AA_GEN_SOFTWARE_COMPONENT_PPORT_SM_PARA_UPDATEREQUEST_H