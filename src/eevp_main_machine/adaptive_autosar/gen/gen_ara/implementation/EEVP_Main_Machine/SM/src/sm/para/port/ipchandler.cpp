///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : ipchandler.cpp
/// SOFTWARE COMPONENT NAME           : IPCHandler
/// GENERATED DATE                    : 2025-08-30 10:53:32
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "sm/para/port/ipchandler.h"
 
namespace sm
{
namespace para
{
namespace port
{
 
IPCHandler::IPCHandler()
    : m_logger(ara::log::CreateLogger("SM", "PORT", ara::log::LogLevel::kVerbose))
    , m_running{false}
    , m_found{false}
    , m_receiverPeriodicSystemInfo{nullptr}
    , m_receiverSystemControlRequest{nullptr}
    , m_responderASMInfoRequest{nullptr}
    , m_responderGetOneTimeSystemInfo{nullptr}
    , m_responderSetAPSystemInfo{nullptr}
    , m_responderSystemControlResponse{nullptr}
{
}
 
IPCHandler::~IPCHandler()
{
}
 
void IPCHandler::Start()
{
    m_logger.LogVerbose() << "IPCHandler::Start";
    
    // regist callback
    ara::core::InstanceSpecifier specifier{"SM/PARA/IPCHandler"};
    auto handler = [this](ara::com::ServiceHandleContainer<eevp::ipchandler::service::proxy::Main_IPC_RoutingIPCProxy::HandleType> handles,
                          ara::com::FindServiceHandle findHandle) {
        this->Find(handles, findHandle);
    };
    
    // find service
    auto find = eevp::ipchandler::service::proxy::Main_IPC_RoutingIPCProxy::StartFindService(handler, specifier);
    if (find.HasValue())
    {
        m_logger.LogVerbose() << "IPCHandler::Start::StartFindService";
    }
    else
    {
        m_logger.LogError() << "IPCHandler::Start::StartFindService::" << find.Error().Message();
    }
    
    // run port
    m_running = true;
}
 
void IPCHandler::Terminate()
{
    m_logger.LogVerbose() << "IPCHandler::Terminate";
    
    // stop port
    m_running = false;
    
    // clear service proxy
    if (m_interface)
    {
        // stop subscribe
        StopSubscribePeriodicSystemInfo();
        StopSubscribeSystemControlRequest();
        
        // stop find service
        m_interface->StopFindService(*m_findHandle);
        m_found = false;
        
        m_logger.LogVerbose() << "IPCHandler::Terminate::StopFindService";
    }
}
 
void IPCHandler::Find(ara::com::ServiceHandleContainer<eevp::ipchandler::service::proxy::Main_IPC_RoutingIPCProxy::HandleType> handles, ara::com::FindServiceHandle findHandle)
{
    // check finding handles
    if (handles.empty())
    {
        m_logger.LogVerbose() << "IPCHandler::Find::Service Instances not found";
        return;
    }
    else
    {
        for (auto& handle : handles)
        {
            m_logger.LogVerbose() << "IPCHandler::Find::Searched Instance::ServiceId =" << 
                                     handle.GetServiceHandle().serviceId << 
                                     ", InstanceId =" << 
                                     handle.GetServiceHandle().instanceId;
        }
    }
    
    // create proxy
    if (m_interface)
    {
        m_logger.LogVerbose() << "IPCHandler::Find::Proxy is already running";
    }
    else
    {
        m_logger.LogVerbose() << "IPCHandler::Find::Using Instance::ServiceId =" << 
                                 handles[0].GetServiceHandle().serviceId << 
                                 ", InstanceId =" << 
                                 handles[0].GetServiceHandle().instanceId;
        m_interface = std::make_unique<eevp::ipchandler::service::proxy::Main_IPC_RoutingIPCProxy>(handles[0]);
        m_findHandle = std::make_unique<ara::com::FindServiceHandle>(findHandle);
        m_found = true;
        
        // subscribe events
        SubscribePeriodicSystemInfo();
        SubscribeSystemControlRequest();
    }
}
 
void IPCHandler::SubscribePeriodicSystemInfo()
{
    if (m_found)
    {
        // regist receiver handler
        // if you want to enable it, please uncomment below code
        // RegistReceiverPeriodicSystemInfo();
        
        // request subscribe
        auto subscribe = m_interface->PeriodicSystemInfo.Subscribe(1);
        if (subscribe.HasValue())
        {
            m_logger.LogVerbose() << "IPCHandler::SubscribePeriodicSystemInfo::Subscribed";
        }
        else
        {
            m_logger.LogError() << "IPCHandler::SubscribePeriodicSystemInfo::" << subscribe.Error().Message();
        }
    }
}
 
void IPCHandler::StopSubscribePeriodicSystemInfo()
{
    if (m_found)
    {
        // request stop subscribe
        m_interface->PeriodicSystemInfo.Unsubscribe();
        m_logger.LogVerbose() << "IPCHandler::StopSubscribePeriodicSystemInfo::Unsubscribed";
    }
}
 
void IPCHandler::RegistReceiverPeriodicSystemInfo()
{
    if (m_found)
    {
        // set callback
        auto receiver = [this]() -> void {
            return ReceiveEventPeriodicSystemInfoTriggered();
        };
        
        // regist callback
        auto callback = m_interface->PeriodicSystemInfo.SetReceiveHandler(receiver);
        if (callback.HasValue())
        {
            m_logger.LogVerbose() << "IPCHandler::RegistReceiverPeriodicSystemInfo::SetReceiveHandler";
        }
        else
        {
            m_logger.LogError() << "IPCHandler::RegistReceiverPeriodicSystemInfo::SetReceiveHandler::" << callback.Error().Message();
        }
    }
}
 
void IPCHandler::ReceiveEventPeriodicSystemInfoTriggered()
{
    if (m_found)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_interface->PeriodicSystemInfo.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
        {
            auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->PeriodicSystemInfo.GetNewSamples([&](auto samplePtr) {
                IPCHandler::ReadDataPeriodicSystemInfo(std::move(samplePtr));
            }));
            if (recv->HasValue())
            {
                m_logger.LogVerbose() << "IPCHandler::ReceiveEventPeriodicSystemInfo::GetNewSamples::" << recv->Value();
            }
            else
            {
                m_logger.LogError() << "IPCHandler::ReceiveEventPeriodicSystemInfo::GetNewSamples::" << recv->Error().Message();
            }
        }
    }
}
 
void IPCHandler::ReceiveEventPeriodicSystemInfoCyclic()
{
    while (m_running)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_found)
        {
            if (m_interface->PeriodicSystemInfo.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
            {
                auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->PeriodicSystemInfo.GetNewSamples([&](auto samplePtr) {
                    IPCHandler::ReadDataPeriodicSystemInfo(std::move(samplePtr));
                }));
                if (recv->HasValue())
                {
                    m_logger.LogVerbose() << "IPCHandler::ReceiveEventPeriodicSystemInfo::GetNewSamples::" << recv->Value();
                }
                else
                {
                    m_logger.LogError() << "IPCHandler::ReceiveEventPeriodicSystemInfo::GetNewSamples::" << recv->Error().Message();
                }
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void IPCHandler::ReadDataPeriodicSystemInfo(ara::com::SamplePtr<eevp::ipchandler::service::proxy::events::PeriodicSystemInfo::SampleType const> samplePtr)
{
    auto data = *samplePtr.Get();
    if (m_receiverPeriodicSystemInfo)
    {
        m_receiverPeriodicSystemInfo(data);
    }
}
 
void IPCHandler::RegistEventHandlerPeriodicSystemInfo(std::function<void(const eevp::ipchandler::service::proxy::events::PeriodicSystemInfo::SampleType&)> handler)
{
    m_receiverPeriodicSystemInfo = handler;
}
 
void IPCHandler::SubscribeSystemControlRequest()
{
    if (m_found)
    {
        // regist receiver handler
        // if you want to enable it, please uncomment below code
        // RegistReceiverSystemControlRequest();
        
        // request subscribe
        auto subscribe = m_interface->SystemControlRequest.Subscribe(1);
        if (subscribe.HasValue())
        {
            m_logger.LogVerbose() << "IPCHandler::SubscribeSystemControlRequest::Subscribed";
        }
        else
        {
            m_logger.LogError() << "IPCHandler::SubscribeSystemControlRequest::" << subscribe.Error().Message();
        }
    }
}
 
void IPCHandler::StopSubscribeSystemControlRequest()
{
    if (m_found)
    {
        // request stop subscribe
        m_interface->SystemControlRequest.Unsubscribe();
        m_logger.LogVerbose() << "IPCHandler::StopSubscribeSystemControlRequest::Unsubscribed";
    }
}
 
void IPCHandler::RegistReceiverSystemControlRequest()
{
    if (m_found)
    {
        // set callback
        auto receiver = [this]() -> void {
            return ReceiveEventSystemControlRequestTriggered();
        };
        
        // regist callback
        auto callback = m_interface->SystemControlRequest.SetReceiveHandler(receiver);
        if (callback.HasValue())
        {
            m_logger.LogVerbose() << "IPCHandler::RegistReceiverSystemControlRequest::SetReceiveHandler";
        }
        else
        {
            m_logger.LogError() << "IPCHandler::RegistReceiverSystemControlRequest::SetReceiveHandler::" << callback.Error().Message();
        }
    }
}
 
void IPCHandler::ReceiveEventSystemControlRequestTriggered()
{
    if (m_found)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_interface->SystemControlRequest.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
        {
            auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->SystemControlRequest.GetNewSamples([&](auto samplePtr) {
                IPCHandler::ReadDataSystemControlRequest(std::move(samplePtr));
            }));
            if (recv->HasValue())
            {
                m_logger.LogVerbose() << "IPCHandler::ReceiveEventSystemControlRequest::GetNewSamples::" << recv->Value();
            }
            else
            {
                m_logger.LogError() << "IPCHandler::ReceiveEventSystemControlRequest::GetNewSamples::" << recv->Error().Message();
            }
        }
    }
}
 
void IPCHandler::ReceiveEventSystemControlRequestCyclic()
{
    while (m_running)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_found)
        {
            if (m_interface->SystemControlRequest.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
            {
                auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->SystemControlRequest.GetNewSamples([&](auto samplePtr) {
                    IPCHandler::ReadDataSystemControlRequest(std::move(samplePtr));
                }));
                if (recv->HasValue())
                {
                    m_logger.LogVerbose() << "IPCHandler::ReceiveEventSystemControlRequest::GetNewSamples::" << recv->Value();
                }
                else
                {
                    m_logger.LogError() << "IPCHandler::ReceiveEventSystemControlRequest::GetNewSamples::" << recv->Error().Message();
                }
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void IPCHandler::ReadDataSystemControlRequest(ara::com::SamplePtr<eevp::ipchandler::service::proxy::events::SystemControlRequest::SampleType const> samplePtr)
{
    auto data = *samplePtr.Get();
    if (m_receiverSystemControlRequest)
    {
        m_receiverSystemControlRequest(data);
    }
}
 
void IPCHandler::RegistEventHandlerSystemControlRequest(std::function<void(const eevp::ipchandler::service::proxy::events::SystemControlRequest::SampleType&)> handler)
{
    m_receiverSystemControlRequest = handler;
}
 
void IPCHandler::RequestASMInfoRequest()
{
    if (m_found)
    {
        auto request = m_interface->ASMInfoRequest();
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "IPCHandler::RequestASMInfoRequest::Responded";
            
            auto result = response.Value();
            if (m_responderASMInfoRequest)
            {
                m_responderASMInfoRequest(result);
            }
        }
        else
        {
            m_logger.LogError() << "IPCHandler::RequestASMInfoRequest::" << response.Error().Message();
        }
    }
}
 
void IPCHandler::RegistResponseHandlerASMInfoRequest(std::function<void(const eevp::ipchandler::service::proxy::methods::ASMInfoRequest::Output&)> handler)
{
    m_responderASMInfoRequest = handler;
}
 
void IPCHandler::RequestGetOneTimeSystemInfo()
{
    if (m_found)
    {
        auto request = m_interface->GetOneTimeSystemInfo();
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "IPCHandler::RequestGetOneTimeSystemInfo::Responded";
            
            auto result = response.Value();
            if (m_responderGetOneTimeSystemInfo)
            {
                m_responderGetOneTimeSystemInfo(result);
            }
        }
        else
        {
            m_logger.LogError() << "IPCHandler::RequestGetOneTimeSystemInfo::" << response.Error().Message();
        }
    }
}
 
void IPCHandler::RegistResponseHandlerGetOneTimeSystemInfo(std::function<void(const eevp::ipchandler::service::proxy::methods::GetOneTimeSystemInfo::Output&)> handler)
{
    m_responderGetOneTimeSystemInfo = handler;
}
 
void IPCHandler::RequestSetAPSystemInfo(const eevp::type::String& apVersion)
{
    if (m_found)
    {
        auto request = m_interface->SetAPSystemInfo(apVersion);
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "IPCHandler::RequestSetAPSystemInfo::Responded";
            
            auto result = response.Value();
            if (m_responderSetAPSystemInfo)
            {
                m_responderSetAPSystemInfo(result);
            }
        }
        else
        {
            m_logger.LogError() << "IPCHandler::RequestSetAPSystemInfo::" << response.Error().Message();
        }
    }
}
 
void IPCHandler::RegistResponseHandlerSetAPSystemInfo(std::function<void(const eevp::ipchandler::service::proxy::methods::SetAPSystemInfo::Output&)> handler)
{
    m_responderSetAPSystemInfo = handler;
}
 
void IPCHandler::RequestSystemControlResponse(const eevp::ipchandler::type::SysCtrlResp& response)
{
    if (m_found)
    {
        auto request = m_interface->SystemControlResponse(response);
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "IPCHandler::RequestSystemControlResponse::Responded";
            
            auto result = response.Value();
            if (m_responderSystemControlResponse)
            {
                m_responderSystemControlResponse(result);
            }
        }
        else
        {
            m_logger.LogError() << "IPCHandler::RequestSystemControlResponse::" << response.Error().Message();
        }
    }
}
 
void IPCHandler::RegistResponseHandlerSystemControlResponse(std::function<void(const eevp::ipchandler::service::proxy::methods::SystemControlResponse::Output&)> handler)
{
    m_responderSystemControlResponse = handler;
}
 
} /// namespace port
} /// namespace para
} /// namespace sm
 
/// EOF