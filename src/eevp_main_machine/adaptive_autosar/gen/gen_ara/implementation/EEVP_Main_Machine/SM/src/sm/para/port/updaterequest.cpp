///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : updaterequest.cpp
/// SOFTWARE COMPONENT NAME           : UpdateRequest
/// GENERATED DATE                    : 2025-08-30 10:53:32
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "sm/para/port/updaterequest.h"
 
namespace ara
{
namespace sm
{
namespace skeleton
{
 
UpdateRequestSkeletonImpl::UpdateRequestSkeletonImpl(ara::core::InstanceSpecifier instanceSpec, ara::com::MethodCallProcessingMode mode)
    : UpdateRequestSkeleton(instanceSpec, mode)
    , m_logger(ara::log::CreateLogger("SM", "PORT", ara::log::LogLevel::kVerbose))
{
    // create state client
    m_stateClient = std::make_unique<ara::exec::StateClient>(m_undefinedStateCallback);
    
}
 
ara::core::Future<UpdateRequestSkeleton::PrepareRollbackOutput> UpdateRequestSkeletonImpl::PrepareRollback(const ara::sm::FunctionGroupList& FunctionGroupList)
{
    m_logger.LogVerbose() << "UpdateRequest::PrepareRollback::Requested";
    
    PrepareRollbackOutput response;
    ara::core::Promise<PrepareRollbackOutput> promise;
    
    // put your logic
    
    promise.set_value(response);
    return promise.get_future();
}
 
ara::core::Future<UpdateRequestSkeleton::PrepareUpdateOutput> UpdateRequestSkeletonImpl::PrepareUpdate(const ara::sm::FunctionGroupList& FunctionGroupList)
{
    m_logger.LogVerbose() << "UpdateRequest::PrepareUpdate::Requested";
    
    PrepareUpdateOutput response;
    ara::core::Promise<PrepareUpdateOutput> promise;
    
    // put your logic
    
    promise.set_value(response);
    return promise.get_future();
}
 
ara::core::Future<UpdateRequestSkeleton::ResetMachineOutput> UpdateRequestSkeletonImpl::ResetMachine()
{
    m_logger.LogVerbose() << "UpdateRequest::ResetMachine::Requested";
    
    ResetMachineOutput response;
    ara::core::Promise<ResetMachineOutput> promise;
    
    // put your logic
    
    promise.set_value(response);
    return promise.get_future();
}
 
ara::core::Future<UpdateRequestSkeleton::StartUpdateSessionOutput> UpdateRequestSkeletonImpl::StartUpdateSession()
{
    m_logger.LogVerbose() << "UpdateRequest::StartUpdateSession::Requested";
    
    StartUpdateSessionOutput response;
    ara::core::Promise<StartUpdateSessionOutput> promise;
    
    // put your logic
    
    promise.set_value(response);
    return promise.get_future();
}
 
void UpdateRequestSkeletonImpl::StopUpdateSession()
{
    m_logger.LogVerbose() << "UpdateRequest::StopUpdateSession::Triggered";
    
    // put your logic
}
 
ara::core::Future<UpdateRequestSkeleton::VerifyUpdateOutput> UpdateRequestSkeletonImpl::VerifyUpdate(const ara::sm::FunctionGroupList& FunctionGroupList)
{
    m_logger.LogVerbose() << "UpdateRequest::VerifyUpdate::Requested";
    
    VerifyUpdateOutput response;
    ara::core::Promise<VerifyUpdateOutput> promise;
    
    // put your logic
    
    promise.set_value(response);
    return promise.get_future();
}
 
void UpdateRequestSkeletonImpl::UndefinedStateHandler(ara::exec::FunctionGroup& /*functionGroup*/)
{
    // put your logic
}
 
} /// namespace skeleton
} /// namespace sm
} /// namespace ara

namespace sm
{
namespace para
{
namespace port
{
 
UpdateRequest::UpdateRequest()
    : m_logger(ara::log::CreateLogger("SM", "PORT", ara::log::LogLevel::kVerbose))
    , m_running{false}
{
}
 
UpdateRequest::~UpdateRequest()
{
}
 
void UpdateRequest::Start()
{
    m_logger.LogVerbose() << "UpdateRequest::Start";
    
    // construct skeleton
    ara::core::InstanceSpecifier specifier{"SM/PARA/UpdateRequest"};
    m_interface = std::make_unique<ara::sm::skeleton::UpdateRequestSkeletonImpl>(specifier);
    
    // offer service
    auto offer = m_interface->OfferService();
    if (offer.HasValue())
    {
        m_running = true;
        m_logger.LogVerbose() << "UpdateRequest::Start::OfferService";
    }
    else
    {
        m_running = false;
        m_logger.LogError() << "UpdateRequest::Start::OfferService::" << offer.Error().Message();
    }
}
 
void UpdateRequest::Terminate()
{
    m_logger.LogVerbose() << "UpdateRequest::Terminate";
    
    // stop port
    m_running = false;
    
    // stop offer service
    m_interface->StopOfferService();
    m_logger.LogVerbose() << "UpdateRequest::Terminate::StopOfferService";
}
 
} /// namespace port
} /// namespace para
} /// namespace sm
 
/// EOF