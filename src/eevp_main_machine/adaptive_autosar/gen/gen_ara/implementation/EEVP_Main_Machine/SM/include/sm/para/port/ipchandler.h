///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : ipchandler.h
/// SOFTWARE COMPONENT NAME           : IPCHandler
/// GENERATED DATE                    : 2025-08-30 10:53:32
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef PARA_AA_GEN_SOFTWARE_COMPONENT_RPORT_SM_PARA_IPCHANDLER_H
#define PARA_AA_GEN_SOFTWARE_COMPONENT_RPORT_SM_PARA_IPCHANDLER_H
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// INCLUSION HEADER FILES
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "eevp/ipchandler/service/main_ipc_routingipc_proxy.h"
 
#include "ara/log/logger.h"
 
#include <mutex>
#include <thread>
 
namespace sm
{
namespace para
{
namespace port
{
 
class IPCHandler
{
public:
    /// @brief Constructor
    IPCHandler();
    
    /// @brief Destructor
    ~IPCHandler();
    
    /// @brief Start port
    void Start();
    
    /// @brief Terminate port
    void Terminate();
    
    /// @brief Subscribe event, PeriodicSystemInfo
    void SubscribePeriodicSystemInfo();
     
    /// @brief Stop event subscription, PeriodicSystemInfo
    void StopSubscribePeriodicSystemInfo();
     
    /// @brief Event receive handler, PeriodicSystemInfo
    void ReceiveEventPeriodicSystemInfoTriggered();
     
    /// @brief Event receive handler, PeriodicSystemInfo
    void ReceiveEventPeriodicSystemInfoCyclic();
     
    /// @brief Read event data, PeriodicSystemInfo
    void ReadDataPeriodicSystemInfo(ara::com::SamplePtr<eevp::ipchandler::service::proxy::events::PeriodicSystemInfo::SampleType const> samplePtr);
     
    /// @brief Regist callback from software component
    void RegistEventHandlerPeriodicSystemInfo(std::function<void(const eevp::ipchandler::service::proxy::events::PeriodicSystemInfo::SampleType&)> handler);
    
    /// @brief Subscribe event, SystemControlRequest
    void SubscribeSystemControlRequest();
     
    /// @brief Stop event subscription, SystemControlRequest
    void StopSubscribeSystemControlRequest();
     
    /// @brief Event receive handler, SystemControlRequest
    void ReceiveEventSystemControlRequestTriggered();
     
    /// @brief Event receive handler, SystemControlRequest
    void ReceiveEventSystemControlRequestCyclic();
     
    /// @brief Read event data, SystemControlRequest
    void ReadDataSystemControlRequest(ara::com::SamplePtr<eevp::ipchandler::service::proxy::events::SystemControlRequest::SampleType const> samplePtr);
     
    /// @brief Regist callback from software component
    void RegistEventHandlerSystemControlRequest(std::function<void(const eevp::ipchandler::service::proxy::events::SystemControlRequest::SampleType&)> handler);

    /// @brief Request with Response method using by software component, ASMInfoRequest
    void RequestASMInfoRequest();
     
    /// @brief Regist callback from software component
    void RegistResponseHandlerASMInfoRequest(std::function<void(const eevp::ipchandler::service::proxy::methods::ASMInfoRequest::Output&)> handler);
    
    /// @brief Request with Response method using by software component, GetOneTimeSystemInfo
    void RequestGetOneTimeSystemInfo();
     
    /// @brief Regist callback from software component
    void RegistResponseHandlerGetOneTimeSystemInfo(std::function<void(const eevp::ipchandler::service::proxy::methods::GetOneTimeSystemInfo::Output&)> handler);
    
    /// @brief Request with Response method using by software component, SetAPSystemInfo
    void RequestSetAPSystemInfo(const eevp::type::String& apVersion);
     
    /// @brief Regist callback from software component
    void RegistResponseHandlerSetAPSystemInfo(std::function<void(const eevp::ipchandler::service::proxy::methods::SetAPSystemInfo::Output&)> handler);
    
    /// @brief Request with Response method using by software component, SystemControlResponse
    void RequestSystemControlResponse(const eevp::ipchandler::type::SysCtrlResp& response);
     
    /// @brief Regist callback from software component
    void RegistResponseHandlerSystemControlResponse(std::function<void(const eevp::ipchandler::service::proxy::methods::SystemControlResponse::Output&)> handler);
    
private:
    /// @brief Callback for find service
    void Find(ara::com::ServiceHandleContainer<eevp::ipchandler::service::proxy::Main_IPC_RoutingIPCProxy::HandleType> handles,
              ara::com::FindServiceHandle findHandle);
    
    /// @brief Callback for event receiver, PeriodicSystemInfo
    void RegistReceiverPeriodicSystemInfo();
    
    /// @brief Callback for event receiver, SystemControlRequest
    void RegistReceiverSystemControlRequest();

private:
    /// @brief Logger for this port
    ara::log::Logger& m_logger;
    
    /// @brief Flag of port status
    bool m_running;
    
    /// @brief Flag of find service status
    bool m_found;
    
    /// @brief Mutex for this port
    std::mutex m_mutex; 
    
    /// @brief AUTOSAR Port Interface
    std::unique_ptr<eevp::ipchandler::service::proxy::Main_IPC_RoutingIPCProxy> m_interface;
    
    /// @brief Find service handle
    std::unique_ptr<ara::com::FindServiceHandle> m_findHandle;
    
    /// @brief Callback from software component, PeriodicSystemInfo
    std::function<void(const eevp::ipchandler::service::proxy::events::PeriodicSystemInfo::SampleType&)> m_receiverPeriodicSystemInfo;
    
    /// @brief Callback from software component, SystemControlRequest
    std::function<void(const eevp::ipchandler::service::proxy::events::SystemControlRequest::SampleType&)> m_receiverSystemControlRequest;

    /// @brief Callback from software component, ASMInfoRequest
    std::function<void(const eevp::ipchandler::service::proxy::methods::ASMInfoRequest::Output&)> m_responderASMInfoRequest;
    
    /// @brief Callback from software component, GetOneTimeSystemInfo
    std::function<void(const eevp::ipchandler::service::proxy::methods::GetOneTimeSystemInfo::Output&)> m_responderGetOneTimeSystemInfo;
    
    /// @brief Callback from software component, SetAPSystemInfo
    std::function<void(const eevp::ipchandler::service::proxy::methods::SetAPSystemInfo::Output&)> m_responderSetAPSystemInfo;
    
    /// @brief Callback from software component, SystemControlResponse
    std::function<void(const eevp::ipchandler::service::proxy::methods::SystemControlResponse::Output&)> m_responderSystemControlResponse;
};
 
} /// namespace port
} /// namespace para
} /// namespace sm
 
#endif /// PARA_AA_GEN_SOFTWARE_COMPONENT_RPORT_SM_PARA_IPCHANDLER_H