///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : sm.cpp
/// SOFTWARE COMPONENT NAME           : SM
/// GENERATED DATE                    : 2025-08-30 10:53:32
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// INCLUSION HEADER FILES
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "sm/para/sm.h"
 
namespace sm
{
namespace para
{
 
SM::SM()
    : m_logger(ara::log::CreateLogger("SM", "SWC", ara::log::LogLevel::kVerbose))
    , m_running{false}
    , m_workers(3)
{
}
 
SM::~SM()
{
}
 
bool SM::Initialize()
{
    m_logger.LogVerbose() << "SM::Initialize";
    
    bool init = true;
    
    m_IPCHandler = std::make_unique<sm::para::port::IPCHandler>();
    m_MachineFG = std::make_unique<sm::para::port::MachineFG>();
    m_UpdateRequest = std::make_unique<sm::para::port::UpdateRequest>();
    
    // put your code for initialization
    
    return init;
}
 
void SM::Start()
{
    m_logger.LogVerbose() << "SM::Start";
    
    m_IPCHandler->Start();
    m_MachineFG->Start();
    m_UpdateRequest->Start();
}
 
void SM::Terminate()
{
    m_logger.LogVerbose() << "SM::Terminate";
    
    // stop running
    m_running = false;
    
    m_IPCHandler->Terminate();
    m_MachineFG->Terminate();
    m_UpdateRequest->Terminate();
}
 
void SM::Run()
{
    m_logger.LogVerbose() << "SM::Run";
    
    // start running
    m_running = true;
    
    m_workers.Async([this] { m_IPCHandler->ReceiveEventPeriodicSystemInfoCyclic(); });
    m_workers.Async([this] { m_IPCHandler->ReceiveEventSystemControlRequestCyclic(); });
    m_workers.Async([this] { m_MachineFG->NotifyMachineFGCyclic(); });
    
    m_workers.Wait();
}
 
} /// namespace para
} /// namespace sm
