///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : ussfront.h
/// SOFTWARE COMPONENT NAME           : UssFront
/// GENERATED DATE                    : 2025-08-30 10:53:30
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef PARA_AA_GEN_SOFTWARE_COMPONENT_RPORT_SC_PDW_FRONT_ROOTSWCOMPONENT_USSFRONT_H
#define PARA_AA_GEN_SOFTWARE_COMPONENT_RPORT_SC_PDW_FRONT_ROOTSWCOMPONENT_USSFRONT_H
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// INCLUSION HEADER FILES
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "zone/input/service/zone_ussfront_input_proxy.h"
 
#include "ara/log/logger.h"
 
#include <mutex>
#include <thread>
 
namespace sc_pdw_front
{
namespace rootswcomponent
{
namespace port
{
 
class UssFront
{
public:
    /// @brief Constructor
    UssFront();
    
    /// @brief Destructor
    ~UssFront();
    
    /// @brief Start port
    void Start();
    
    /// @brief Terminate port
    void Terminate();
    
    /// @brief Subscribe event, UssFront
    void SubscribeUssFront();
     
    /// @brief Stop event subscription, UssFront
    void StopSubscribeUssFront();
     
    /// @brief Event receive handler, UssFront
    void ReceiveEventUssFrontTriggered();
     
    /// @brief Event receive handler, UssFront
    void ReceiveEventUssFrontCyclic();
     
    /// @brief Read event data, UssFront
    void ReadDataUssFront(ara::com::SamplePtr<zone::input::service::proxy::events::UssFront::SampleType const> samplePtr);
     
    /// @brief Regist callback from software component
    void RegistEventHandlerUssFront(std::function<void(const zone::input::service::proxy::events::UssFront::SampleType&)> handler);

private:
    /// @brief Callback for find service
    void Find(ara::com::ServiceHandleContainer<zone::input::service::proxy::Zone_UssFront_InputProxy::HandleType> handles,
              ara::com::FindServiceHandle findHandle);
    
    /// @brief Callback for event receiver, UssFront
    void RegistReceiverUssFront();

private:
    /// @brief Logger for this port
    ara::log::Logger& m_logger;
    
    /// @brief Flag of port status
    bool m_running;
    
    /// @brief Flag of find service status
    bool m_found;
    
    /// @brief Mutex for this port
    std::mutex m_mutex; 
    
    /// @brief AUTOSAR Port Interface
    std::unique_ptr<zone::input::service::proxy::Zone_UssFront_InputProxy> m_interface;
    
    /// @brief Find service handle
    std::unique_ptr<ara::com::FindServiceHandle> m_findHandle;
    
    /// @brief Callback from software component, UssFront
    std::function<void(const zone::input::service::proxy::events::UssFront::SampleType&)> m_receiverUssFront;

};
 
} /// namespace port
} /// namespace rootswcomponent
} /// namespace sc_pdw_front
 
#endif /// PARA_AA_GEN_SOFTWARE_COMPONENT_RPORT_SC_PDW_FRONT_ROOTSWCOMPONENT_USSFRONT_H