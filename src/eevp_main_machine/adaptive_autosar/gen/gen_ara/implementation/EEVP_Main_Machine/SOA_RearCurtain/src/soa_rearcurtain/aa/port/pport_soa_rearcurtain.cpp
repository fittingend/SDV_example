///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : pport_soa_rearcurtain.cpp
/// SOFTWARE COMPONENT NAME           : PPort_SOA_RearCurtain
/// GENERATED DATE                    : 2025-08-30 10:53:42
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "soa_rearcurtain/aa/port/pport_soa_rearcurtain.h"
 
namespace eevp
{
namespace control
{
namespace skeleton
{
 
SoaRcurtainSkeletonImpl::SoaRcurtainSkeletonImpl(ara::core::InstanceSpecifier instanceSpec, ara::com::MethodCallProcessingMode mode)
    : SoaRcurtainSkeleton(instanceSpec, mode)
    , m_logger(ara::log::CreateLogger("SRCT", "PORT", ara::log::LogLevel::kVerbose))
    , m_soaRctnStatus{eevp::control::SoaErrorState::kOK, eevp::control::SoaRctnMotorDir::kSTOP, eevp::control::SoaRctnState::kFULLY_UP, eevp::control::SoaDeviceIsNormal::kNORMAL}
    , m_soaRctnSwVersion{0U}
{
    // regist get handler, soaRctnStatus
    auto soarctnstatus_get_handler = [this]() {
        return GetsoaRctnStatus();
    };
    soaRctnStatus.RegisterGetHandler(soarctnstatus_get_handler);
    
    // regist get handler, soaRctnSwVersion
    auto soarctnswversion_get_handler = [this]() {
        return GetsoaRctnSwVersion();
    };
    soaRctnSwVersion.RegisterGetHandler(soarctnswversion_get_handler);
}
 
ara::core::Future<SoaRcurtainSkeleton::RequestRearCurtainOperationOutput> SoaRcurtainSkeletonImpl::RequestRearCurtainOperation(const eevp::control::SoaRctnMotorDir& motorDir)
{
    m_logger.LogVerbose() << "PPort_SOA_RearCurtain::RequestRearCurtainOperation::Requested";
    
    RequestRearCurtainOperationOutput response;
    ara::core::Promise<RequestRearCurtainOperationOutput> promise;
    
    // put your logic
    
    promise.set_value(response);
    return promise.get_future();
}
 
void SoaRcurtainSkeletonImpl::RequestRearCurtainPosition(const std::uint8_t& posPercentage)
{
    m_logger.LogVerbose() << "PPort_SOA_RearCurtain::RequestRearCurtainPosition::Triggered";
    
    // put your logic
}
 
ara::core::Future<fields::soaRctnStatus::FieldType> SoaRcurtainSkeletonImpl::GetsoaRctnStatus()
{
    m_logger.LogVerbose() << "PPort_SOA_RearCurtain::GetsoaRctnStatus::Requested";
    
    ara::core::Promise<fields::soaRctnStatus::FieldType> promise;
    
    promise.set_value(m_soaRctnStatus);
    return promise.get_future();
}
 
void SoaRcurtainSkeletonImpl::NotifysoaRctnStatus()
{
    auto notify = soaRctnStatus.Update(m_soaRctnStatus);
    if (notify.HasValue())
    {
        m_logger.LogVerbose() << "PPort_SOA_RearCurtain::NotifysoaRctnStatus::Update";
    }
    else
    {
        m_logger.LogError() << "PPort_SOA_RearCurtain::NotifysoaRctnStatus::Update::" << notify.Error().Message();
    }
}
 
void SoaRcurtainSkeletonImpl::UpdatesoaRctnStatus(const fields::soaRctnStatus::FieldType& value)
{
    m_soaRctnStatus = value;
}
 
ara::core::Future<fields::soaRctnSwVersion::FieldType> SoaRcurtainSkeletonImpl::GetsoaRctnSwVersion()
{
    m_logger.LogVerbose() << "PPort_SOA_RearCurtain::GetsoaRctnSwVersion::Requested";
    
    ara::core::Promise<fields::soaRctnSwVersion::FieldType> promise;
    
    promise.set_value(m_soaRctnSwVersion);
    return promise.get_future();
}
 
void SoaRcurtainSkeletonImpl::NotifysoaRctnSwVersion()
{
    auto notify = soaRctnSwVersion.Update(m_soaRctnSwVersion);
    if (notify.HasValue())
    {
        m_logger.LogVerbose() << "PPort_SOA_RearCurtain::NotifysoaRctnSwVersion::Update";
    }
    else
    {
        m_logger.LogError() << "PPort_SOA_RearCurtain::NotifysoaRctnSwVersion::Update::" << notify.Error().Message();
    }
}
 
void SoaRcurtainSkeletonImpl::UpdatesoaRctnSwVersion(const fields::soaRctnSwVersion::FieldType& value)
{
    m_soaRctnSwVersion = value;
}
 
} /// namespace skeleton
} /// namespace control
} /// namespace eevp

namespace soa_rearcurtain
{
namespace aa
{
namespace port
{
 
PPort_SOA_RearCurtain::PPort_SOA_RearCurtain()
    : m_logger(ara::log::CreateLogger("SRCT", "PORT", ara::log::LogLevel::kVerbose))
    , m_running{false}
{
}
 
PPort_SOA_RearCurtain::~PPort_SOA_RearCurtain()
{
}
 
void PPort_SOA_RearCurtain::Start()
{
    m_logger.LogVerbose() << "PPort_SOA_RearCurtain::Start";
    
    // construct skeleton
    ara::core::InstanceSpecifier specifier{"SOA_RearCurtain/AA/PPort_SOA_RearCurtain"};
    m_interface = std::make_unique<eevp::control::skeleton::SoaRcurtainSkeletonImpl>(specifier);
    
    // offer service
    auto offer = m_interface->OfferService();
    if (offer.HasValue())
    {
        m_running = true;
        m_logger.LogVerbose() << "PPort_SOA_RearCurtain::Start::OfferService";
    }
    else
    {
        m_running = false;
        m_logger.LogError() << "PPort_SOA_RearCurtain::Start::OfferService::" << offer.Error().Message();
    }
}
 
void PPort_SOA_RearCurtain::Terminate()
{
    m_logger.LogVerbose() << "PPort_SOA_RearCurtain::Terminate";
    
    // stop port
    m_running = false;
    
    // stop offer service
    m_interface->StopOfferService();
    m_logger.LogVerbose() << "PPort_SOA_RearCurtain::Terminate::StopOfferService";
}
 
void PPort_SOA_RearCurtain::WriteValuesoaRctnStatus(const eevp::control::skeleton::fields::soaRctnStatus::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdatesoaRctnStatus(value);
}
 
void PPort_SOA_RearCurtain::NotifyFieldsoaRctnStatusCyclic()
{
    while (m_running)
    {
        {
            std::lock_guard<std::mutex> lock(m_mutex);
            
            m_interface->NotifysoaRctnStatus();
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void PPort_SOA_RearCurtain::NotifyFieldsoaRctnStatusTriggered()
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->NotifysoaRctnStatus();
}
 
void PPort_SOA_RearCurtain::NotifyFieldsoaRctnStatusTriggered(const eevp::control::skeleton::fields::soaRctnStatus::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdatesoaRctnStatus(value);
    m_interface->NotifysoaRctnStatus();
}
 
void PPort_SOA_RearCurtain::WriteValuesoaRctnSwVersion(const eevp::control::skeleton::fields::soaRctnSwVersion::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdatesoaRctnSwVersion(value);
}
 
void PPort_SOA_RearCurtain::NotifyFieldsoaRctnSwVersionCyclic()
{
    while (m_running)
    {
        {
            std::lock_guard<std::mutex> lock(m_mutex);
            
            m_interface->NotifysoaRctnSwVersion();
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void PPort_SOA_RearCurtain::NotifyFieldsoaRctnSwVersionTriggered()
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->NotifysoaRctnSwVersion();
}
 
void PPort_SOA_RearCurtain::NotifyFieldsoaRctnSwVersionTriggered(const eevp::control::skeleton::fields::soaRctnSwVersion::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdatesoaRctnSwVersion(value);
    m_interface->NotifysoaRctnSwVersion();
}
 
} /// namespace port
} /// namespace aa
} /// namespace soa_rearcurtain
 
/// EOF