///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : pport_soa_rearcurtain.h
/// SOFTWARE COMPONENT NAME           : PPort_SOA_RearCurtain
/// GENERATED DATE                    : 2025-08-30 10:53:41
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef PARA_AA_GEN_SOFTWARE_COMPONENT_PPORT_SOA_REARCURTAIN_AA_PPORT_SOA_REARCURTAIN_H
#define PARA_AA_GEN_SOFTWARE_COMPONENT_PPORT_SOA_REARCURTAIN_AA_PPORT_SOA_REARCURTAIN_H
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// INCLUSION HEADER FILES
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "eevp/control/soarcurtain_skeleton.h"
 
#include "ara/log/logger.h"
 
#include <mutex>
#include <thread>
 
namespace eevp
{
namespace control
{
namespace skeleton
{
 
class SoaRcurtainSkeletonImpl : public SoaRcurtainSkeleton
{
public:
    /// @brief Constructor
    SoaRcurtainSkeletonImpl(ara::core::InstanceSpecifier instanceSpec, ara::com::MethodCallProcessingMode mode = ara::com::MethodCallProcessingMode::kEvent);
    
    /// @brief Request with Response method, RequestRearCurtainOperation
    ara::core::Future<SoaRcurtainSkeleton::RequestRearCurtainOperationOutput> RequestRearCurtainOperation(const eevp::control::SoaRctnMotorDir& motorDir) override;
    
    /// @brief Fire & Forget method, RequestRearCurtainPosition
    void RequestRearCurtainPosition(const std::uint8_t& posPercentage) override;
    
    /// @brief Getter for field, soaRctnStatus
    ara::core::Future<fields::soaRctnStatus::FieldType> GetsoaRctnStatus();
    
    /// @brief Notifier for field, soaRctnStatus
    void NotifysoaRctnStatus();
    
    /// @brief Update field value by software component, soaRctnStatus
    void UpdatesoaRctnStatus(const fields::soaRctnStatus::FieldType& value);
    
    /// @brief Getter for field, soaRctnSwVersion
    ara::core::Future<fields::soaRctnSwVersion::FieldType> GetsoaRctnSwVersion();
    
    /// @brief Notifier for field, soaRctnSwVersion
    void NotifysoaRctnSwVersion();
    
    /// @brief Update field value by software component, soaRctnSwVersion
    void UpdatesoaRctnSwVersion(const fields::soaRctnSwVersion::FieldType& value);
    
private:
    /// @brief Logger for this port
    ara::log::Logger& m_logger;
    
    /// @brief Field, soaRctnStatus
    fields::soaRctnStatus::FieldType m_soaRctnStatus;
    
    /// @brief Field, soaRctnSwVersion
    fields::soaRctnSwVersion::FieldType m_soaRctnSwVersion;
    
};
 
} /// namespace skeleton
} /// namespace control
} /// namespace eevp

namespace soa_rearcurtain
{
namespace aa
{
namespace port
{
 
class PPort_SOA_RearCurtain
{
public:
    /// @brief Constructor
    PPort_SOA_RearCurtain();
    
    /// @brief Destructor
    ~PPort_SOA_RearCurtain();
    
    /// @brief Start port
    void Start();
    
    /// @brief Terminate port
    void Terminate();
    
    /// @brief Write field value to buffer, soaRctnStatus
    void WriteValuesoaRctnStatus(const eevp::control::skeleton::fields::soaRctnStatus::FieldType& value);
     
    /// @brief Notify field cyclic from buffer, soaRctnStatus
    void NotifyFieldsoaRctnStatusCyclic();
     
    /// @brief Notify field directly from buffer data, soaRctnStatus
    void NotifyFieldsoaRctnStatusTriggered();
     
    /// @brief Notify field directly with argument, soaRctnStatus
    void NotifyFieldsoaRctnStatusTriggered(const eevp::control::skeleton::fields::soaRctnStatus::FieldType& value);

    /// @brief Write field value to buffer, soaRctnSwVersion
    void WriteValuesoaRctnSwVersion(const eevp::control::skeleton::fields::soaRctnSwVersion::FieldType& value);
     
    /// @brief Notify field cyclic from buffer, soaRctnSwVersion
    void NotifyFieldsoaRctnSwVersionCyclic();
     
    /// @brief Notify field directly from buffer data, soaRctnSwVersion
    void NotifyFieldsoaRctnSwVersionTriggered();
     
    /// @brief Notify field directly with argument, soaRctnSwVersion
    void NotifyFieldsoaRctnSwVersionTriggered(const eevp::control::skeleton::fields::soaRctnSwVersion::FieldType& value);
     
private:
    /// @brief Logger for this port
    ara::log::Logger& m_logger;
    
    /// @brief Flag of port status
    bool m_running;
    
    /// @brief Mutex for this port
    std::mutex m_mutex;
    
    /// @brief AUTOSAR Port Interface
    std::unique_ptr<eevp::control::skeleton::SoaRcurtainSkeletonImpl> m_interface;
    
};
 
} /// namespace port
} /// namespace aa
} /// namespace soa_rearcurtain
 
#endif /// PARA_AA_GEN_SOFTWARE_COMPONENT_PPORT_SOA_REARCURTAIN_AA_PPORT_SOA_REARCURTAIN_H