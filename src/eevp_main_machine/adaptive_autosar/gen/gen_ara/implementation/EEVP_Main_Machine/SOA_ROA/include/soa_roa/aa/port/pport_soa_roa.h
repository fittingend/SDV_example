///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : pport_soa_roa.h
/// SOFTWARE COMPONENT NAME           : PPort_SOA_ROA
/// GENERATED DATE                    : 2025-08-30 10:53:40
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef PARA_AA_GEN_SOFTWARE_COMPONENT_PPORT_SOA_ROA_AA_PPORT_SOA_ROA_H
#define PARA_AA_GEN_SOFTWARE_COMPONENT_PPORT_SOA_ROA_AA_PPORT_SOA_ROA_H
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// INCLUSION HEADER FILES
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "eevp/control/soaroa_skeleton.h"
 
#include "ara/log/logger.h"
 
#include <mutex>
#include <thread>
 
namespace eevp
{
namespace control
{
namespace skeleton
{
 
class SoaRoaSkeletonImpl : public SoaRoaSkeleton
{
public:
    /// @brief Constructor
    SoaRoaSkeletonImpl(ara::core::InstanceSpecifier instanceSpec, ara::com::MethodCallProcessingMode mode = ara::com::MethodCallProcessingMode::kEvent);
    
    /// @brief Fire & Forget method, ResetRoaDetectInfo
    void ResetRoaDetectInfo() override;
    
    /// @brief Fire & Forget method, SetRoaMode
    void SetRoaMode(const eevp::control::SoaRoaMode& mode) override;
    
    /// @brief Fire & Forget method, StartRoa
    void StartRoa() override;
    
    /// @brief Fire & Forget method, StopRoa
    void StopRoa() override;
    
    /// @brief Getter for field, soaRoaDetectCount
    ara::core::Future<fields::soaRoaDetectCount::FieldType> GetsoaRoaDetectCount();
    
    /// @brief Notifier for field, soaRoaDetectCount
    void NotifysoaRoaDetectCount();
    
    /// @brief Update field value by software component, soaRoaDetectCount
    void UpdatesoaRoaDetectCount(const fields::soaRoaDetectCount::FieldType& value);
    
    /// @brief Getter for field, soaRoaDetectState
    ara::core::Future<fields::soaRoaDetectState::FieldType> GetsoaRoaDetectState();
    
    /// @brief Notifier for field, soaRoaDetectState
    void NotifysoaRoaDetectState();
    
    /// @brief Update field value by software component, soaRoaDetectState
    void UpdatesoaRoaDetectState(const fields::soaRoaDetectState::FieldType& value);
    
    /// @brief Getter for field, soaRoaDeviceNormal
    ara::core::Future<fields::soaRoaDeviceNormal::FieldType> GetsoaRoaDeviceNormal();
    
    /// @brief Notifier for field, soaRoaDeviceNormal
    void NotifysoaRoaDeviceNormal();
    
    /// @brief Update field value by software component, soaRoaDeviceNormal
    void UpdatesoaRoaDeviceNormal(const fields::soaRoaDeviceNormal::FieldType& value);
    
    /// @brief Getter for field, soaRoaMode
    ara::core::Future<fields::soaRoaMode::FieldType> GetsoaRoaMode();
    
    /// @brief Notifier for field, soaRoaMode
    void NotifysoaRoaMode();
    
    /// @brief Update field value by software component, soaRoaMode
    void UpdatesoaRoaMode(const fields::soaRoaMode::FieldType& value);
    
    /// @brief Getter for field, soaRoaRunningState
    ara::core::Future<fields::soaRoaRunningState::FieldType> GetsoaRoaRunningState();
    
    /// @brief Notifier for field, soaRoaRunningState
    void NotifysoaRoaRunningState();
    
    /// @brief Update field value by software component, soaRoaRunningState
    void UpdatesoaRoaRunningState(const fields::soaRoaRunningState::FieldType& value);
    
    /// @brief Getter for field, soaRoaSensorError
    ara::core::Future<fields::soaRoaSensorError::FieldType> GetsoaRoaSensorError();
    
    /// @brief Notifier for field, soaRoaSensorError
    void NotifysoaRoaSensorError();
    
    /// @brief Update field value by software component, soaRoaSensorError
    void UpdatesoaRoaSensorError(const fields::soaRoaSensorError::FieldType& value);
    
    /// @brief Getter for field, soaRoaSwVersion
    ara::core::Future<fields::soaRoaSwVersion::FieldType> GetsoaRoaSwVersion();
    
    /// @brief Notifier for field, soaRoaSwVersion
    void NotifysoaRoaSwVersion();
    
    /// @brief Update field value by software component, soaRoaSwVersion
    void UpdatesoaRoaSwVersion(const fields::soaRoaSwVersion::FieldType& value);
    
private:
    /// @brief Logger for this port
    ara::log::Logger& m_logger;
    
    /// @brief Field, soaRoaDetectCount
    fields::soaRoaDetectCount::FieldType m_soaRoaDetectCount;
    
    /// @brief Field, soaRoaDetectState
    fields::soaRoaDetectState::FieldType m_soaRoaDetectState;
    
    /// @brief Field, soaRoaDeviceNormal
    fields::soaRoaDeviceNormal::FieldType m_soaRoaDeviceNormal;
    
    /// @brief Field, soaRoaMode
    fields::soaRoaMode::FieldType m_soaRoaMode;
    
    /// @brief Field, soaRoaRunningState
    fields::soaRoaRunningState::FieldType m_soaRoaRunningState;
    
    /// @brief Field, soaRoaSensorError
    fields::soaRoaSensorError::FieldType m_soaRoaSensorError;
    
    /// @brief Field, soaRoaSwVersion
    fields::soaRoaSwVersion::FieldType m_soaRoaSwVersion;
    
};
 
} /// namespace skeleton
} /// namespace control
} /// namespace eevp

namespace soa_roa
{
namespace aa
{
namespace port
{
 
class PPort_SOA_ROA
{
public:
    /// @brief Constructor
    PPort_SOA_ROA();
    
    /// @brief Destructor
    ~PPort_SOA_ROA();
    
    /// @brief Start port
    void Start();
    
    /// @brief Terminate port
    void Terminate();
    
    /// @brief Write field value to buffer, soaRoaDetectCount
    void WriteValuesoaRoaDetectCount(const eevp::control::skeleton::fields::soaRoaDetectCount::FieldType& value);
     
    /// @brief Notify field cyclic from buffer, soaRoaDetectCount
    void NotifyFieldsoaRoaDetectCountCyclic();
     
    /// @brief Notify field directly from buffer data, soaRoaDetectCount
    void NotifyFieldsoaRoaDetectCountTriggered();
     
    /// @brief Notify field directly with argument, soaRoaDetectCount
    void NotifyFieldsoaRoaDetectCountTriggered(const eevp::control::skeleton::fields::soaRoaDetectCount::FieldType& value);

    /// @brief Write field value to buffer, soaRoaDetectState
    void WriteValuesoaRoaDetectState(const eevp::control::skeleton::fields::soaRoaDetectState::FieldType& value);
     
    /// @brief Notify field cyclic from buffer, soaRoaDetectState
    void NotifyFieldsoaRoaDetectStateCyclic();
     
    /// @brief Notify field directly from buffer data, soaRoaDetectState
    void NotifyFieldsoaRoaDetectStateTriggered();
     
    /// @brief Notify field directly with argument, soaRoaDetectState
    void NotifyFieldsoaRoaDetectStateTriggered(const eevp::control::skeleton::fields::soaRoaDetectState::FieldType& value);

    /// @brief Write field value to buffer, soaRoaDeviceNormal
    void WriteValuesoaRoaDeviceNormal(const eevp::control::skeleton::fields::soaRoaDeviceNormal::FieldType& value);
     
    /// @brief Notify field cyclic from buffer, soaRoaDeviceNormal
    void NotifyFieldsoaRoaDeviceNormalCyclic();
     
    /// @brief Notify field directly from buffer data, soaRoaDeviceNormal
    void NotifyFieldsoaRoaDeviceNormalTriggered();
     
    /// @brief Notify field directly with argument, soaRoaDeviceNormal
    void NotifyFieldsoaRoaDeviceNormalTriggered(const eevp::control::skeleton::fields::soaRoaDeviceNormal::FieldType& value);

    /// @brief Write field value to buffer, soaRoaMode
    void WriteValuesoaRoaMode(const eevp::control::skeleton::fields::soaRoaMode::FieldType& value);
     
    /// @brief Notify field cyclic from buffer, soaRoaMode
    void NotifyFieldsoaRoaModeCyclic();
     
    /// @brief Notify field directly from buffer data, soaRoaMode
    void NotifyFieldsoaRoaModeTriggered();
     
    /// @brief Notify field directly with argument, soaRoaMode
    void NotifyFieldsoaRoaModeTriggered(const eevp::control::skeleton::fields::soaRoaMode::FieldType& value);

    /// @brief Write field value to buffer, soaRoaRunningState
    void WriteValuesoaRoaRunningState(const eevp::control::skeleton::fields::soaRoaRunningState::FieldType& value);
     
    /// @brief Notify field cyclic from buffer, soaRoaRunningState
    void NotifyFieldsoaRoaRunningStateCyclic();
     
    /// @brief Notify field directly from buffer data, soaRoaRunningState
    void NotifyFieldsoaRoaRunningStateTriggered();
     
    /// @brief Notify field directly with argument, soaRoaRunningState
    void NotifyFieldsoaRoaRunningStateTriggered(const eevp::control::skeleton::fields::soaRoaRunningState::FieldType& value);

    /// @brief Write field value to buffer, soaRoaSensorError
    void WriteValuesoaRoaSensorError(const eevp::control::skeleton::fields::soaRoaSensorError::FieldType& value);
     
    /// @brief Notify field cyclic from buffer, soaRoaSensorError
    void NotifyFieldsoaRoaSensorErrorCyclic();
     
    /// @brief Notify field directly from buffer data, soaRoaSensorError
    void NotifyFieldsoaRoaSensorErrorTriggered();
     
    /// @brief Notify field directly with argument, soaRoaSensorError
    void NotifyFieldsoaRoaSensorErrorTriggered(const eevp::control::skeleton::fields::soaRoaSensorError::FieldType& value);

    /// @brief Write field value to buffer, soaRoaSwVersion
    void WriteValuesoaRoaSwVersion(const eevp::control::skeleton::fields::soaRoaSwVersion::FieldType& value);
     
    /// @brief Notify field cyclic from buffer, soaRoaSwVersion
    void NotifyFieldsoaRoaSwVersionCyclic();
     
    /// @brief Notify field directly from buffer data, soaRoaSwVersion
    void NotifyFieldsoaRoaSwVersionTriggered();
     
    /// @brief Notify field directly with argument, soaRoaSwVersion
    void NotifyFieldsoaRoaSwVersionTriggered(const eevp::control::skeleton::fields::soaRoaSwVersion::FieldType& value);
     
private:
    /// @brief Logger for this port
    ara::log::Logger& m_logger;
    
    /// @brief Flag of port status
    bool m_running;
    
    /// @brief Mutex for this port
    std::mutex m_mutex;
    
    /// @brief AUTOSAR Port Interface
    std::unique_ptr<eevp::control::skeleton::SoaRoaSkeletonImpl> m_interface;
    
};
 
} /// namespace port
} /// namespace aa
} /// namespace soa_roa
 
#endif /// PARA_AA_GEN_SOFTWARE_COMPONENT_PPORT_SOA_ROA_AA_PPORT_SOA_ROA_H