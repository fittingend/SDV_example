///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : soa_roa.cpp
/// SOFTWARE COMPONENT NAME           : SOA_ROA
/// GENERATED DATE                    : 2025-08-30 10:53:41
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// INCLUSION HEADER FILES
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "soa_roa/aa/soa_roa.h"
 
namespace soa_roa
{
namespace aa
{
 
SOA_ROA::SOA_ROA()
    : m_logger(ara::log::CreateLogger("SROA", "SWC", ara::log::LogLevel::kVerbose))
    , m_running{false}
    , m_workers(9)
{
}
 
SOA_ROA::~SOA_ROA()
{
}
 
bool SOA_ROA::Initialize()
{
    m_logger.LogVerbose() << "SOA_ROA::Initialize";
    
    bool init = true;
    
    m_PPort_SOA_ROA = std::make_unique<soa_roa::aa::port::PPort_SOA_ROA>();
    m_RPort_Zone1VehicleInfo = std::make_unique<soa_roa::aa::port::RPort_Zone1VehicleInfo>();
    m_RPort_Zone2Roa = std::make_unique<soa_roa::aa::port::RPort_Zone2Roa>();
    
    // put your code for initialization
    
    return init;
}
 
void SOA_ROA::Start()
{
    m_logger.LogVerbose() << "SOA_ROA::Start";
    
    m_PPort_SOA_ROA->Start();
    m_RPort_Zone1VehicleInfo->Start();
    m_RPort_Zone2Roa->Start();
}
 
void SOA_ROA::Terminate()
{
    m_logger.LogVerbose() << "SOA_ROA::Terminate";
    
    // stop running
    m_running = false;
    
    m_PPort_SOA_ROA->Terminate();
    m_RPort_Zone1VehicleInfo->Terminate();
    m_RPort_Zone2Roa->Terminate();
}
 
void SOA_ROA::Run()
{
    m_logger.LogVerbose() << "SOA_ROA::Run";
    
    // start running
    m_running = true;
    
    m_workers.Async([this] { m_PPort_SOA_ROA->NotifyFieldsoaRoaDetectCountCyclic(); });
    m_workers.Async([this] { m_PPort_SOA_ROA->NotifyFieldsoaRoaDetectStateCyclic(); });
    m_workers.Async([this] { m_PPort_SOA_ROA->NotifyFieldsoaRoaDeviceNormalCyclic(); });
    m_workers.Async([this] { m_PPort_SOA_ROA->NotifyFieldsoaRoaModeCyclic(); });
    m_workers.Async([this] { m_PPort_SOA_ROA->NotifyFieldsoaRoaRunningStateCyclic(); });
    m_workers.Async([this] { m_PPort_SOA_ROA->NotifyFieldsoaRoaSensorErrorCyclic(); });
    m_workers.Async([this] { m_PPort_SOA_ROA->NotifyFieldsoaRoaSwVersionCyclic(); });
    m_workers.Async([this] { m_RPort_Zone1VehicleInfo->ReceiveEventVehicleInfoCyclic(); });
    m_workers.Async([this] { m_RPort_Zone2Roa->ReceiveFieldzone2RoaSnsrStatusCyclic(); });
    
    m_workers.Wait();
}
 
} /// namespace aa
} /// namespace soa_roa
