///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : pport_soa_roa.cpp
/// SOFTWARE COMPONENT NAME           : PPort_SOA_ROA
/// GENERATED DATE                    : 2025-08-30 10:53:41
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "soa_roa/aa/port/pport_soa_roa.h"
 
namespace eevp
{
namespace control
{
namespace skeleton
{
 
SoaRoaSkeletonImpl::SoaRoaSkeletonImpl(ara::core::InstanceSpecifier instanceSpec, ara::com::MethodCallProcessingMode mode)
    : SoaRoaSkeleton(instanceSpec, mode)
    , m_logger(ara::log::CreateLogger("SROA", "PORT", ara::log::LogLevel::kVerbose))
    , m_soaRoaDetectCount{0U}
    , m_soaRoaDetectState{eevp::control::SoaRoaDetectState::kEMPTY}
    , m_soaRoaDeviceNormal{eevp::control::SoaDeviceIsNormal::kNORMAL}
    , m_soaRoaMode{eevp::control::SoaRoaMode::kOFF}
    , m_soaRoaRunningState{eevp::control::SoaRoaRunningState::kOFF}
    , m_soaRoaSensorError{eevp::control::SoaRoaSensorError::kOK}
    , m_soaRoaSwVersion{0U}
{
    // regist get handler, soaRoaDetectCount
    auto soaroadetectcount_get_handler = [this]() {
        return GetsoaRoaDetectCount();
    };
    soaRoaDetectCount.RegisterGetHandler(soaroadetectcount_get_handler);
    
    // regist get handler, soaRoaDetectState
    auto soaroadetectstate_get_handler = [this]() {
        return GetsoaRoaDetectState();
    };
    soaRoaDetectState.RegisterGetHandler(soaroadetectstate_get_handler);
    
    // regist get handler, soaRoaDeviceNormal
    auto soaroadevicenormal_get_handler = [this]() {
        return GetsoaRoaDeviceNormal();
    };
    soaRoaDeviceNormal.RegisterGetHandler(soaroadevicenormal_get_handler);
    
    // regist get handler, soaRoaMode
    auto soaroamode_get_handler = [this]() {
        return GetsoaRoaMode();
    };
    soaRoaMode.RegisterGetHandler(soaroamode_get_handler);
    
    // regist get handler, soaRoaRunningState
    auto soaroarunningstate_get_handler = [this]() {
        return GetsoaRoaRunningState();
    };
    soaRoaRunningState.RegisterGetHandler(soaroarunningstate_get_handler);
    
    // regist get handler, soaRoaSensorError
    auto soaroasensorerror_get_handler = [this]() {
        return GetsoaRoaSensorError();
    };
    soaRoaSensorError.RegisterGetHandler(soaroasensorerror_get_handler);
    
    // regist get handler, soaRoaSwVersion
    auto soaroaswversion_get_handler = [this]() {
        return GetsoaRoaSwVersion();
    };
    soaRoaSwVersion.RegisterGetHandler(soaroaswversion_get_handler);
}
 
void SoaRoaSkeletonImpl::ResetRoaDetectInfo()
{
    m_logger.LogVerbose() << "PPort_SOA_ROA::ResetRoaDetectInfo::Triggered";
    
    // put your logic
}
 
void SoaRoaSkeletonImpl::SetRoaMode(const eevp::control::SoaRoaMode& mode)
{
    m_logger.LogVerbose() << "PPort_SOA_ROA::SetRoaMode::Triggered";
    
    // put your logic
}
 
void SoaRoaSkeletonImpl::StartRoa()
{
    m_logger.LogVerbose() << "PPort_SOA_ROA::StartRoa::Triggered";
    
    // put your logic
}
 
void SoaRoaSkeletonImpl::StopRoa()
{
    m_logger.LogVerbose() << "PPort_SOA_ROA::StopRoa::Triggered";
    
    // put your logic
}
 
ara::core::Future<fields::soaRoaDetectCount::FieldType> SoaRoaSkeletonImpl::GetsoaRoaDetectCount()
{
    m_logger.LogVerbose() << "PPort_SOA_ROA::GetsoaRoaDetectCount::Requested";
    
    ara::core::Promise<fields::soaRoaDetectCount::FieldType> promise;
    
    promise.set_value(m_soaRoaDetectCount);
    return promise.get_future();
}
 
void SoaRoaSkeletonImpl::NotifysoaRoaDetectCount()
{
    auto notify = soaRoaDetectCount.Update(m_soaRoaDetectCount);
    if (notify.HasValue())
    {
        m_logger.LogVerbose() << "PPort_SOA_ROA::NotifysoaRoaDetectCount::Update";
    }
    else
    {
        m_logger.LogError() << "PPort_SOA_ROA::NotifysoaRoaDetectCount::Update::" << notify.Error().Message();
    }
}
 
void SoaRoaSkeletonImpl::UpdatesoaRoaDetectCount(const fields::soaRoaDetectCount::FieldType& value)
{
    m_soaRoaDetectCount = value;
}
 
ara::core::Future<fields::soaRoaDetectState::FieldType> SoaRoaSkeletonImpl::GetsoaRoaDetectState()
{
    m_logger.LogVerbose() << "PPort_SOA_ROA::GetsoaRoaDetectState::Requested";
    
    ara::core::Promise<fields::soaRoaDetectState::FieldType> promise;
    
    promise.set_value(m_soaRoaDetectState);
    return promise.get_future();
}
 
void SoaRoaSkeletonImpl::NotifysoaRoaDetectState()
{
    auto notify = soaRoaDetectState.Update(m_soaRoaDetectState);
    if (notify.HasValue())
    {
        m_logger.LogVerbose() << "PPort_SOA_ROA::NotifysoaRoaDetectState::Update";
    }
    else
    {
        m_logger.LogError() << "PPort_SOA_ROA::NotifysoaRoaDetectState::Update::" << notify.Error().Message();
    }
}
 
void SoaRoaSkeletonImpl::UpdatesoaRoaDetectState(const fields::soaRoaDetectState::FieldType& value)
{
    m_soaRoaDetectState = value;
}
 
ara::core::Future<fields::soaRoaDeviceNormal::FieldType> SoaRoaSkeletonImpl::GetsoaRoaDeviceNormal()
{
    m_logger.LogVerbose() << "PPort_SOA_ROA::GetsoaRoaDeviceNormal::Requested";
    
    ara::core::Promise<fields::soaRoaDeviceNormal::FieldType> promise;
    
    promise.set_value(m_soaRoaDeviceNormal);
    return promise.get_future();
}
 
void SoaRoaSkeletonImpl::NotifysoaRoaDeviceNormal()
{
    auto notify = soaRoaDeviceNormal.Update(m_soaRoaDeviceNormal);
    if (notify.HasValue())
    {
        m_logger.LogVerbose() << "PPort_SOA_ROA::NotifysoaRoaDeviceNormal::Update";
    }
    else
    {
        m_logger.LogError() << "PPort_SOA_ROA::NotifysoaRoaDeviceNormal::Update::" << notify.Error().Message();
    }
}
 
void SoaRoaSkeletonImpl::UpdatesoaRoaDeviceNormal(const fields::soaRoaDeviceNormal::FieldType& value)
{
    m_soaRoaDeviceNormal = value;
}
 
ara::core::Future<fields::soaRoaMode::FieldType> SoaRoaSkeletonImpl::GetsoaRoaMode()
{
    m_logger.LogVerbose() << "PPort_SOA_ROA::GetsoaRoaMode::Requested";
    
    ara::core::Promise<fields::soaRoaMode::FieldType> promise;
    
    promise.set_value(m_soaRoaMode);
    return promise.get_future();
}
 
void SoaRoaSkeletonImpl::NotifysoaRoaMode()
{
    auto notify = soaRoaMode.Update(m_soaRoaMode);
    if (notify.HasValue())
    {
        m_logger.LogVerbose() << "PPort_SOA_ROA::NotifysoaRoaMode::Update";
    }
    else
    {
        m_logger.LogError() << "PPort_SOA_ROA::NotifysoaRoaMode::Update::" << notify.Error().Message();
    }
}
 
void SoaRoaSkeletonImpl::UpdatesoaRoaMode(const fields::soaRoaMode::FieldType& value)
{
    m_soaRoaMode = value;
}
 
ara::core::Future<fields::soaRoaRunningState::FieldType> SoaRoaSkeletonImpl::GetsoaRoaRunningState()
{
    m_logger.LogVerbose() << "PPort_SOA_ROA::GetsoaRoaRunningState::Requested";
    
    ara::core::Promise<fields::soaRoaRunningState::FieldType> promise;
    
    promise.set_value(m_soaRoaRunningState);
    return promise.get_future();
}
 
void SoaRoaSkeletonImpl::NotifysoaRoaRunningState()
{
    auto notify = soaRoaRunningState.Update(m_soaRoaRunningState);
    if (notify.HasValue())
    {
        m_logger.LogVerbose() << "PPort_SOA_ROA::NotifysoaRoaRunningState::Update";
    }
    else
    {
        m_logger.LogError() << "PPort_SOA_ROA::NotifysoaRoaRunningState::Update::" << notify.Error().Message();
    }
}
 
void SoaRoaSkeletonImpl::UpdatesoaRoaRunningState(const fields::soaRoaRunningState::FieldType& value)
{
    m_soaRoaRunningState = value;
}
 
ara::core::Future<fields::soaRoaSensorError::FieldType> SoaRoaSkeletonImpl::GetsoaRoaSensorError()
{
    m_logger.LogVerbose() << "PPort_SOA_ROA::GetsoaRoaSensorError::Requested";
    
    ara::core::Promise<fields::soaRoaSensorError::FieldType> promise;
    
    promise.set_value(m_soaRoaSensorError);
    return promise.get_future();
}
 
void SoaRoaSkeletonImpl::NotifysoaRoaSensorError()
{
    auto notify = soaRoaSensorError.Update(m_soaRoaSensorError);
    if (notify.HasValue())
    {
        m_logger.LogVerbose() << "PPort_SOA_ROA::NotifysoaRoaSensorError::Update";
    }
    else
    {
        m_logger.LogError() << "PPort_SOA_ROA::NotifysoaRoaSensorError::Update::" << notify.Error().Message();
    }
}
 
void SoaRoaSkeletonImpl::UpdatesoaRoaSensorError(const fields::soaRoaSensorError::FieldType& value)
{
    m_soaRoaSensorError = value;
}
 
ara::core::Future<fields::soaRoaSwVersion::FieldType> SoaRoaSkeletonImpl::GetsoaRoaSwVersion()
{
    m_logger.LogVerbose() << "PPort_SOA_ROA::GetsoaRoaSwVersion::Requested";
    
    ara::core::Promise<fields::soaRoaSwVersion::FieldType> promise;
    
    promise.set_value(m_soaRoaSwVersion);
    return promise.get_future();
}
 
void SoaRoaSkeletonImpl::NotifysoaRoaSwVersion()
{
    auto notify = soaRoaSwVersion.Update(m_soaRoaSwVersion);
    if (notify.HasValue())
    {
        m_logger.LogVerbose() << "PPort_SOA_ROA::NotifysoaRoaSwVersion::Update";
    }
    else
    {
        m_logger.LogError() << "PPort_SOA_ROA::NotifysoaRoaSwVersion::Update::" << notify.Error().Message();
    }
}
 
void SoaRoaSkeletonImpl::UpdatesoaRoaSwVersion(const fields::soaRoaSwVersion::FieldType& value)
{
    m_soaRoaSwVersion = value;
}
 
} /// namespace skeleton
} /// namespace control
} /// namespace eevp

namespace soa_roa
{
namespace aa
{
namespace port
{
 
PPort_SOA_ROA::PPort_SOA_ROA()
    : m_logger(ara::log::CreateLogger("SROA", "PORT", ara::log::LogLevel::kVerbose))
    , m_running{false}
{
}
 
PPort_SOA_ROA::~PPort_SOA_ROA()
{
}
 
void PPort_SOA_ROA::Start()
{
    m_logger.LogVerbose() << "PPort_SOA_ROA::Start";
    
    // construct skeleton
    ara::core::InstanceSpecifier specifier{"SOA_ROA/AA/PPort_SOA_ROA"};
    m_interface = std::make_unique<eevp::control::skeleton::SoaRoaSkeletonImpl>(specifier);
    
    // offer service
    auto offer = m_interface->OfferService();
    if (offer.HasValue())
    {
        m_running = true;
        m_logger.LogVerbose() << "PPort_SOA_ROA::Start::OfferService";
    }
    else
    {
        m_running = false;
        m_logger.LogError() << "PPort_SOA_ROA::Start::OfferService::" << offer.Error().Message();
    }
}
 
void PPort_SOA_ROA::Terminate()
{
    m_logger.LogVerbose() << "PPort_SOA_ROA::Terminate";
    
    // stop port
    m_running = false;
    
    // stop offer service
    m_interface->StopOfferService();
    m_logger.LogVerbose() << "PPort_SOA_ROA::Terminate::StopOfferService";
}
 
void PPort_SOA_ROA::WriteValuesoaRoaDetectCount(const eevp::control::skeleton::fields::soaRoaDetectCount::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdatesoaRoaDetectCount(value);
}
 
void PPort_SOA_ROA::NotifyFieldsoaRoaDetectCountCyclic()
{
    while (m_running)
    {
        {
            std::lock_guard<std::mutex> lock(m_mutex);
            
            m_interface->NotifysoaRoaDetectCount();
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void PPort_SOA_ROA::NotifyFieldsoaRoaDetectCountTriggered()
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->NotifysoaRoaDetectCount();
}
 
void PPort_SOA_ROA::NotifyFieldsoaRoaDetectCountTriggered(const eevp::control::skeleton::fields::soaRoaDetectCount::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdatesoaRoaDetectCount(value);
    m_interface->NotifysoaRoaDetectCount();
}
 
void PPort_SOA_ROA::WriteValuesoaRoaDetectState(const eevp::control::skeleton::fields::soaRoaDetectState::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdatesoaRoaDetectState(value);
}
 
void PPort_SOA_ROA::NotifyFieldsoaRoaDetectStateCyclic()
{
    while (m_running)
    {
        {
            std::lock_guard<std::mutex> lock(m_mutex);
            
            m_interface->NotifysoaRoaDetectState();
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void PPort_SOA_ROA::NotifyFieldsoaRoaDetectStateTriggered()
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->NotifysoaRoaDetectState();
}
 
void PPort_SOA_ROA::NotifyFieldsoaRoaDetectStateTriggered(const eevp::control::skeleton::fields::soaRoaDetectState::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdatesoaRoaDetectState(value);
    m_interface->NotifysoaRoaDetectState();
}
 
void PPort_SOA_ROA::WriteValuesoaRoaDeviceNormal(const eevp::control::skeleton::fields::soaRoaDeviceNormal::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdatesoaRoaDeviceNormal(value);
}
 
void PPort_SOA_ROA::NotifyFieldsoaRoaDeviceNormalCyclic()
{
    while (m_running)
    {
        {
            std::lock_guard<std::mutex> lock(m_mutex);
            
            m_interface->NotifysoaRoaDeviceNormal();
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void PPort_SOA_ROA::NotifyFieldsoaRoaDeviceNormalTriggered()
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->NotifysoaRoaDeviceNormal();
}
 
void PPort_SOA_ROA::NotifyFieldsoaRoaDeviceNormalTriggered(const eevp::control::skeleton::fields::soaRoaDeviceNormal::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdatesoaRoaDeviceNormal(value);
    m_interface->NotifysoaRoaDeviceNormal();
}
 
void PPort_SOA_ROA::WriteValuesoaRoaMode(const eevp::control::skeleton::fields::soaRoaMode::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdatesoaRoaMode(value);
}
 
void PPort_SOA_ROA::NotifyFieldsoaRoaModeCyclic()
{
    while (m_running)
    {
        {
            std::lock_guard<std::mutex> lock(m_mutex);
            
            m_interface->NotifysoaRoaMode();
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void PPort_SOA_ROA::NotifyFieldsoaRoaModeTriggered()
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->NotifysoaRoaMode();
}
 
void PPort_SOA_ROA::NotifyFieldsoaRoaModeTriggered(const eevp::control::skeleton::fields::soaRoaMode::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdatesoaRoaMode(value);
    m_interface->NotifysoaRoaMode();
}
 
void PPort_SOA_ROA::WriteValuesoaRoaRunningState(const eevp::control::skeleton::fields::soaRoaRunningState::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdatesoaRoaRunningState(value);
}
 
void PPort_SOA_ROA::NotifyFieldsoaRoaRunningStateCyclic()
{
    while (m_running)
    {
        {
            std::lock_guard<std::mutex> lock(m_mutex);
            
            m_interface->NotifysoaRoaRunningState();
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void PPort_SOA_ROA::NotifyFieldsoaRoaRunningStateTriggered()
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->NotifysoaRoaRunningState();
}
 
void PPort_SOA_ROA::NotifyFieldsoaRoaRunningStateTriggered(const eevp::control::skeleton::fields::soaRoaRunningState::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdatesoaRoaRunningState(value);
    m_interface->NotifysoaRoaRunningState();
}
 
void PPort_SOA_ROA::WriteValuesoaRoaSensorError(const eevp::control::skeleton::fields::soaRoaSensorError::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdatesoaRoaSensorError(value);
}
 
void PPort_SOA_ROA::NotifyFieldsoaRoaSensorErrorCyclic()
{
    while (m_running)
    {
        {
            std::lock_guard<std::mutex> lock(m_mutex);
            
            m_interface->NotifysoaRoaSensorError();
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void PPort_SOA_ROA::NotifyFieldsoaRoaSensorErrorTriggered()
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->NotifysoaRoaSensorError();
}
 
void PPort_SOA_ROA::NotifyFieldsoaRoaSensorErrorTriggered(const eevp::control::skeleton::fields::soaRoaSensorError::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdatesoaRoaSensorError(value);
    m_interface->NotifysoaRoaSensorError();
}
 
void PPort_SOA_ROA::WriteValuesoaRoaSwVersion(const eevp::control::skeleton::fields::soaRoaSwVersion::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdatesoaRoaSwVersion(value);
}
 
void PPort_SOA_ROA::NotifyFieldsoaRoaSwVersionCyclic()
{
    while (m_running)
    {
        {
            std::lock_guard<std::mutex> lock(m_mutex);
            
            m_interface->NotifysoaRoaSwVersion();
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void PPort_SOA_ROA::NotifyFieldsoaRoaSwVersionTriggered()
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->NotifysoaRoaSwVersion();
}
 
void PPort_SOA_ROA::NotifyFieldsoaRoaSwVersionTriggered(const eevp::control::skeleton::fields::soaRoaSwVersion::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdatesoaRoaSwVersion(value);
    m_interface->NotifysoaRoaSwVersion();
}
 
} /// namespace port
} /// namespace aa
} /// namespace soa_roa
 
/// EOF