///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : rportotasubscription.cpp
/// SOFTWARE COMPONENT NAME           : RPortOtaSubscription
/// GENERATED DATE                    : 2025-08-30 10:53:49
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "subscriptionmanager/aa/port/rportotasubscription.h"
 
namespace subscriptionmanager
{
namespace aa
{
namespace port
{
 
RPortOtaSubscription::RPortOtaSubscription()
    : m_logger(ara::log::CreateLogger("SUSM", "PORT", ara::log::LogLevel::kVerbose))
    , m_running{false}
    , m_found{false}
    , m_receivernotifyAppEvent{nullptr}
    , m_receivernotifyResultInfo{nullptr}
    , m_receivernotifyRollbackComplete{nullptr}
    , m_receivernotifySwClusterInfo{nullptr}
    , m_receivernotifyUpdatableApp{nullptr}
    , m_receivernotifyUpdateComplete{nullptr}
    , m_responderrequestAppInstall{nullptr}
    , m_responderrequestAppRollback{nullptr}
    , m_responderrequestAppUpdate{nullptr}
    , m_responderrequestOtaProcess{nullptr}
    , m_responderrequestVersionInfo{nullptr}
{
}
 
RPortOtaSubscription::~RPortOtaSubscription()
{
}
 
void RPortOtaSubscription::Start()
{
    m_logger.LogVerbose() << "RPortOtaSubscription::Start";
    
    // regist callback
    ara::core::InstanceSpecifier specifier{"SubscriptionManager/AA/RPortOtaSubscription"};
    auto handler = [this](ara::com::ServiceHandleContainer<eevp::ota::subscription::service::proxy::OtaSubscriptionProxy::HandleType> handles,
                          ara::com::FindServiceHandle findHandle) {
        this->Find(handles, findHandle);
    };
    
    // find service
    auto find = eevp::ota::subscription::service::proxy::OtaSubscriptionProxy::StartFindService(handler, specifier);
    if (find.HasValue())
    {
        m_logger.LogVerbose() << "RPortOtaSubscription::Start::StartFindService";
    }
    else
    {
        m_logger.LogError() << "RPortOtaSubscription::Start::StartFindService::" << find.Error().Message();
    }
    
    // run port
    m_running = true;
}
 
void RPortOtaSubscription::Terminate()
{
    m_logger.LogVerbose() << "RPortOtaSubscription::Terminate";
    
    // stop port
    m_running = false;
    
    // clear service proxy
    if (m_interface)
    {
        // stop subscribe
        StopSubscribenotifyAppEvent();
        StopSubscribenotifyResultInfo();
        StopSubscribenotifyRollbackComplete();
        StopSubscribenotifySwClusterInfo();
        StopSubscribenotifyUpdatableApp();
        StopSubscribenotifyUpdateComplete();
        
        // stop find service
        m_interface->StopFindService(*m_findHandle);
        m_found = false;
        
        m_logger.LogVerbose() << "RPortOtaSubscription::Terminate::StopFindService";
    }
}
 
void RPortOtaSubscription::Find(ara::com::ServiceHandleContainer<eevp::ota::subscription::service::proxy::OtaSubscriptionProxy::HandleType> handles, ara::com::FindServiceHandle findHandle)
{
    // check finding handles
    if (handles.empty())
    {
        m_logger.LogVerbose() << "RPortOtaSubscription::Find::Service Instances not found";
        return;
    }
    else
    {
        for (auto& handle : handles)
        {
            m_logger.LogVerbose() << "RPortOtaSubscription::Find::Searched Instance::ServiceId =" << 
                                     handle.GetServiceHandle().serviceId << 
                                     ", InstanceId =" << 
                                     handle.GetServiceHandle().instanceId;
        }
    }
    
    // create proxy
    if (m_interface)
    {
        m_logger.LogVerbose() << "RPortOtaSubscription::Find::Proxy is already running";
    }
    else
    {
        m_logger.LogVerbose() << "RPortOtaSubscription::Find::Using Instance::ServiceId =" << 
                                 handles[0].GetServiceHandle().serviceId << 
                                 ", InstanceId =" << 
                                 handles[0].GetServiceHandle().instanceId;
        m_interface = std::make_unique<eevp::ota::subscription::service::proxy::OtaSubscriptionProxy>(handles[0]);
        m_findHandle = std::make_unique<ara::com::FindServiceHandle>(findHandle);
        m_found = true;
        
        // subscribe events
        SubscribenotifyAppEvent();
        SubscribenotifyResultInfo();
        SubscribenotifyRollbackComplete();
        SubscribenotifySwClusterInfo();
        SubscribenotifyUpdatableApp();
        SubscribenotifyUpdateComplete();
    }
}
 
void RPortOtaSubscription::SubscribenotifyAppEvent()
{
    if (m_found)
    {
        // regist receiver handler
        // if you want to enable it, please uncomment below code
        // RegistReceivernotifyAppEvent();
        
        // request subscribe
        auto subscribe = m_interface->notifyAppEvent.Subscribe(1);
        if (subscribe.HasValue())
        {
            m_logger.LogVerbose() << "RPortOtaSubscription::SubscribenotifyAppEvent::Subscribed";
        }
        else
        {
            m_logger.LogError() << "RPortOtaSubscription::SubscribenotifyAppEvent::" << subscribe.Error().Message();
        }
    }
}
 
void RPortOtaSubscription::StopSubscribenotifyAppEvent()
{
    if (m_found)
    {
        // request stop subscribe
        m_interface->notifyAppEvent.Unsubscribe();
        m_logger.LogVerbose() << "RPortOtaSubscription::StopSubscribenotifyAppEvent::Unsubscribed";
    }
}
 
void RPortOtaSubscription::RegistReceivernotifyAppEvent()
{
    if (m_found)
    {
        // set callback
        auto receiver = [this]() -> void {
            return ReceiveEventnotifyAppEventTriggered();
        };
        
        // regist callback
        auto callback = m_interface->notifyAppEvent.SetReceiveHandler(receiver);
        if (callback.HasValue())
        {
            m_logger.LogVerbose() << "RPortOtaSubscription::RegistReceivernotifyAppEvent::SetReceiveHandler";
        }
        else
        {
            m_logger.LogError() << "RPortOtaSubscription::RegistReceivernotifyAppEvent::SetReceiveHandler::" << callback.Error().Message();
        }
    }
}
 
void RPortOtaSubscription::ReceiveEventnotifyAppEventTriggered()
{
    if (m_found)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_interface->notifyAppEvent.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
        {
            auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->notifyAppEvent.GetNewSamples([&](auto samplePtr) {
                RPortOtaSubscription::ReadDatanotifyAppEvent(std::move(samplePtr));
            }));
            if (recv->HasValue())
            {
                m_logger.LogVerbose() << "RPortOtaSubscription::ReceiveEventnotifyAppEvent::GetNewSamples::" << recv->Value();
            }
            else
            {
                m_logger.LogError() << "RPortOtaSubscription::ReceiveEventnotifyAppEvent::GetNewSamples::" << recv->Error().Message();
            }
        }
    }
}
 
void RPortOtaSubscription::ReceiveEventnotifyAppEventCyclic()
{
    while (m_running)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_found)
        {
            if (m_interface->notifyAppEvent.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
            {
                auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->notifyAppEvent.GetNewSamples([&](auto samplePtr) {
                    RPortOtaSubscription::ReadDatanotifyAppEvent(std::move(samplePtr));
                }));
                if (recv->HasValue())
                {
                    m_logger.LogVerbose() << "RPortOtaSubscription::ReceiveEventnotifyAppEvent::GetNewSamples::" << recv->Value();
                }
                else
                {
                    m_logger.LogError() << "RPortOtaSubscription::ReceiveEventnotifyAppEvent::GetNewSamples::" << recv->Error().Message();
                }
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void RPortOtaSubscription::ReadDatanotifyAppEvent(ara::com::SamplePtr<eevp::ota::subscription::service::proxy::events::notifyAppEvent::SampleType const> samplePtr)
{
    auto data = *samplePtr.Get();
    if (m_receivernotifyAppEvent)
    {
        m_receivernotifyAppEvent(data);
    }
}
 
void RPortOtaSubscription::RegistEventHandlernotifyAppEvent(std::function<void(const eevp::ota::subscription::service::proxy::events::notifyAppEvent::SampleType&)> handler)
{
    m_receivernotifyAppEvent = handler;
}
 
void RPortOtaSubscription::SubscribenotifyResultInfo()
{
    if (m_found)
    {
        // regist receiver handler
        // if you want to enable it, please uncomment below code
        // RegistReceivernotifyResultInfo();
        
        // request subscribe
        auto subscribe = m_interface->notifyResultInfo.Subscribe(1);
        if (subscribe.HasValue())
        {
            m_logger.LogVerbose() << "RPortOtaSubscription::SubscribenotifyResultInfo::Subscribed";
        }
        else
        {
            m_logger.LogError() << "RPortOtaSubscription::SubscribenotifyResultInfo::" << subscribe.Error().Message();
        }
    }
}
 
void RPortOtaSubscription::StopSubscribenotifyResultInfo()
{
    if (m_found)
    {
        // request stop subscribe
        m_interface->notifyResultInfo.Unsubscribe();
        m_logger.LogVerbose() << "RPortOtaSubscription::StopSubscribenotifyResultInfo::Unsubscribed";
    }
}
 
void RPortOtaSubscription::RegistReceivernotifyResultInfo()
{
    if (m_found)
    {
        // set callback
        auto receiver = [this]() -> void {
            return ReceiveEventnotifyResultInfoTriggered();
        };
        
        // regist callback
        auto callback = m_interface->notifyResultInfo.SetReceiveHandler(receiver);
        if (callback.HasValue())
        {
            m_logger.LogVerbose() << "RPortOtaSubscription::RegistReceivernotifyResultInfo::SetReceiveHandler";
        }
        else
        {
            m_logger.LogError() << "RPortOtaSubscription::RegistReceivernotifyResultInfo::SetReceiveHandler::" << callback.Error().Message();
        }
    }
}
 
void RPortOtaSubscription::ReceiveEventnotifyResultInfoTriggered()
{
    if (m_found)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_interface->notifyResultInfo.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
        {
            auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->notifyResultInfo.GetNewSamples([&](auto samplePtr) {
                RPortOtaSubscription::ReadDatanotifyResultInfo(std::move(samplePtr));
            }));
            if (recv->HasValue())
            {
                m_logger.LogVerbose() << "RPortOtaSubscription::ReceiveEventnotifyResultInfo::GetNewSamples::" << recv->Value();
            }
            else
            {
                m_logger.LogError() << "RPortOtaSubscription::ReceiveEventnotifyResultInfo::GetNewSamples::" << recv->Error().Message();
            }
        }
    }
}
 
void RPortOtaSubscription::ReceiveEventnotifyResultInfoCyclic()
{
    while (m_running)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_found)
        {
            if (m_interface->notifyResultInfo.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
            {
                auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->notifyResultInfo.GetNewSamples([&](auto samplePtr) {
                    RPortOtaSubscription::ReadDatanotifyResultInfo(std::move(samplePtr));
                }));
                if (recv->HasValue())
                {
                    m_logger.LogVerbose() << "RPortOtaSubscription::ReceiveEventnotifyResultInfo::GetNewSamples::" << recv->Value();
                }
                else
                {
                    m_logger.LogError() << "RPortOtaSubscription::ReceiveEventnotifyResultInfo::GetNewSamples::" << recv->Error().Message();
                }
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void RPortOtaSubscription::ReadDatanotifyResultInfo(ara::com::SamplePtr<eevp::ota::subscription::service::proxy::events::notifyResultInfo::SampleType const> samplePtr)
{
    auto data = *samplePtr.Get();
    if (m_receivernotifyResultInfo)
    {
        m_receivernotifyResultInfo(data);
    }
}
 
void RPortOtaSubscription::RegistEventHandlernotifyResultInfo(std::function<void(const eevp::ota::subscription::service::proxy::events::notifyResultInfo::SampleType&)> handler)
{
    m_receivernotifyResultInfo = handler;
}
 
void RPortOtaSubscription::SubscribenotifyRollbackComplete()
{
    if (m_found)
    {
        // regist receiver handler
        // if you want to enable it, please uncomment below code
        // RegistReceivernotifyRollbackComplete();
        
        // request subscribe
        auto subscribe = m_interface->notifyRollbackComplete.Subscribe(1);
        if (subscribe.HasValue())
        {
            m_logger.LogVerbose() << "RPortOtaSubscription::SubscribenotifyRollbackComplete::Subscribed";
        }
        else
        {
            m_logger.LogError() << "RPortOtaSubscription::SubscribenotifyRollbackComplete::" << subscribe.Error().Message();
        }
    }
}
 
void RPortOtaSubscription::StopSubscribenotifyRollbackComplete()
{
    if (m_found)
    {
        // request stop subscribe
        m_interface->notifyRollbackComplete.Unsubscribe();
        m_logger.LogVerbose() << "RPortOtaSubscription::StopSubscribenotifyRollbackComplete::Unsubscribed";
    }
}
 
void RPortOtaSubscription::RegistReceivernotifyRollbackComplete()
{
    if (m_found)
    {
        // set callback
        auto receiver = [this]() -> void {
            return ReceiveEventnotifyRollbackCompleteTriggered();
        };
        
        // regist callback
        auto callback = m_interface->notifyRollbackComplete.SetReceiveHandler(receiver);
        if (callback.HasValue())
        {
            m_logger.LogVerbose() << "RPortOtaSubscription::RegistReceivernotifyRollbackComplete::SetReceiveHandler";
        }
        else
        {
            m_logger.LogError() << "RPortOtaSubscription::RegistReceivernotifyRollbackComplete::SetReceiveHandler::" << callback.Error().Message();
        }
    }
}
 
void RPortOtaSubscription::ReceiveEventnotifyRollbackCompleteTriggered()
{
    if (m_found)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_interface->notifyRollbackComplete.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
        {
            auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->notifyRollbackComplete.GetNewSamples([&](auto samplePtr) {
                RPortOtaSubscription::ReadDatanotifyRollbackComplete(std::move(samplePtr));
            }));
            if (recv->HasValue())
            {
                m_logger.LogVerbose() << "RPortOtaSubscription::ReceiveEventnotifyRollbackComplete::GetNewSamples::" << recv->Value();
            }
            else
            {
                m_logger.LogError() << "RPortOtaSubscription::ReceiveEventnotifyRollbackComplete::GetNewSamples::" << recv->Error().Message();
            }
        }
    }
}
 
void RPortOtaSubscription::ReceiveEventnotifyRollbackCompleteCyclic()
{
    while (m_running)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_found)
        {
            if (m_interface->notifyRollbackComplete.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
            {
                auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->notifyRollbackComplete.GetNewSamples([&](auto samplePtr) {
                    RPortOtaSubscription::ReadDatanotifyRollbackComplete(std::move(samplePtr));
                }));
                if (recv->HasValue())
                {
                    m_logger.LogVerbose() << "RPortOtaSubscription::ReceiveEventnotifyRollbackComplete::GetNewSamples::" << recv->Value();
                }
                else
                {
                    m_logger.LogError() << "RPortOtaSubscription::ReceiveEventnotifyRollbackComplete::GetNewSamples::" << recv->Error().Message();
                }
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void RPortOtaSubscription::ReadDatanotifyRollbackComplete(ara::com::SamplePtr<eevp::ota::subscription::service::proxy::events::notifyRollbackComplete::SampleType const> samplePtr)
{
    auto data = *samplePtr.Get();
    if (m_receivernotifyRollbackComplete)
    {
        m_receivernotifyRollbackComplete(data);
    }
}
 
void RPortOtaSubscription::RegistEventHandlernotifyRollbackComplete(std::function<void(const eevp::ota::subscription::service::proxy::events::notifyRollbackComplete::SampleType&)> handler)
{
    m_receivernotifyRollbackComplete = handler;
}
 
void RPortOtaSubscription::SubscribenotifySwClusterInfo()
{
    if (m_found)
    {
        // regist receiver handler
        // if you want to enable it, please uncomment below code
        // RegistReceivernotifySwClusterInfo();
        
        // request subscribe
        auto subscribe = m_interface->notifySwClusterInfo.Subscribe(1);
        if (subscribe.HasValue())
        {
            m_logger.LogVerbose() << "RPortOtaSubscription::SubscribenotifySwClusterInfo::Subscribed";
        }
        else
        {
            m_logger.LogError() << "RPortOtaSubscription::SubscribenotifySwClusterInfo::" << subscribe.Error().Message();
        }
    }
}
 
void RPortOtaSubscription::StopSubscribenotifySwClusterInfo()
{
    if (m_found)
    {
        // request stop subscribe
        m_interface->notifySwClusterInfo.Unsubscribe();
        m_logger.LogVerbose() << "RPortOtaSubscription::StopSubscribenotifySwClusterInfo::Unsubscribed";
    }
}
 
void RPortOtaSubscription::RegistReceivernotifySwClusterInfo()
{
    if (m_found)
    {
        // set callback
        auto receiver = [this]() -> void {
            return ReceiveEventnotifySwClusterInfoTriggered();
        };
        
        // regist callback
        auto callback = m_interface->notifySwClusterInfo.SetReceiveHandler(receiver);
        if (callback.HasValue())
        {
            m_logger.LogVerbose() << "RPortOtaSubscription::RegistReceivernotifySwClusterInfo::SetReceiveHandler";
        }
        else
        {
            m_logger.LogError() << "RPortOtaSubscription::RegistReceivernotifySwClusterInfo::SetReceiveHandler::" << callback.Error().Message();
        }
    }
}
 
void RPortOtaSubscription::ReceiveEventnotifySwClusterInfoTriggered()
{
    if (m_found)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_interface->notifySwClusterInfo.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
        {
            auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->notifySwClusterInfo.GetNewSamples([&](auto samplePtr) {
                RPortOtaSubscription::ReadDatanotifySwClusterInfo(std::move(samplePtr));
            }));
            if (recv->HasValue())
            {
                m_logger.LogVerbose() << "RPortOtaSubscription::ReceiveEventnotifySwClusterInfo::GetNewSamples::" << recv->Value();
            }
            else
            {
                m_logger.LogError() << "RPortOtaSubscription::ReceiveEventnotifySwClusterInfo::GetNewSamples::" << recv->Error().Message();
            }
        }
    }
}
 
void RPortOtaSubscription::ReceiveEventnotifySwClusterInfoCyclic()
{
    while (m_running)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_found)
        {
            if (m_interface->notifySwClusterInfo.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
            {
                auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->notifySwClusterInfo.GetNewSamples([&](auto samplePtr) {
                    RPortOtaSubscription::ReadDatanotifySwClusterInfo(std::move(samplePtr));
                }));
                if (recv->HasValue())
                {
                    m_logger.LogVerbose() << "RPortOtaSubscription::ReceiveEventnotifySwClusterInfo::GetNewSamples::" << recv->Value();
                }
                else
                {
                    m_logger.LogError() << "RPortOtaSubscription::ReceiveEventnotifySwClusterInfo::GetNewSamples::" << recv->Error().Message();
                }
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void RPortOtaSubscription::ReadDatanotifySwClusterInfo(ara::com::SamplePtr<eevp::ota::subscription::service::proxy::events::notifySwClusterInfo::SampleType const> samplePtr)
{
    auto data = *samplePtr.Get();
    if (m_receivernotifySwClusterInfo)
    {
        m_receivernotifySwClusterInfo(data);
    }
}
 
void RPortOtaSubscription::RegistEventHandlernotifySwClusterInfo(std::function<void(const eevp::ota::subscription::service::proxy::events::notifySwClusterInfo::SampleType&)> handler)
{
    m_receivernotifySwClusterInfo = handler;
}
 
void RPortOtaSubscription::SubscribenotifyUpdatableApp()
{
    if (m_found)
    {
        // regist receiver handler
        // if you want to enable it, please uncomment below code
        // RegistReceivernotifyUpdatableApp();
        
        // request subscribe
        auto subscribe = m_interface->notifyUpdatableApp.Subscribe(1);
        if (subscribe.HasValue())
        {
            m_logger.LogVerbose() << "RPortOtaSubscription::SubscribenotifyUpdatableApp::Subscribed";
        }
        else
        {
            m_logger.LogError() << "RPortOtaSubscription::SubscribenotifyUpdatableApp::" << subscribe.Error().Message();
        }
    }
}
 
void RPortOtaSubscription::StopSubscribenotifyUpdatableApp()
{
    if (m_found)
    {
        // request stop subscribe
        m_interface->notifyUpdatableApp.Unsubscribe();
        m_logger.LogVerbose() << "RPortOtaSubscription::StopSubscribenotifyUpdatableApp::Unsubscribed";
    }
}
 
void RPortOtaSubscription::RegistReceivernotifyUpdatableApp()
{
    if (m_found)
    {
        // set callback
        auto receiver = [this]() -> void {
            return ReceiveEventnotifyUpdatableAppTriggered();
        };
        
        // regist callback
        auto callback = m_interface->notifyUpdatableApp.SetReceiveHandler(receiver);
        if (callback.HasValue())
        {
            m_logger.LogVerbose() << "RPortOtaSubscription::RegistReceivernotifyUpdatableApp::SetReceiveHandler";
        }
        else
        {
            m_logger.LogError() << "RPortOtaSubscription::RegistReceivernotifyUpdatableApp::SetReceiveHandler::" << callback.Error().Message();
        }
    }
}
 
void RPortOtaSubscription::ReceiveEventnotifyUpdatableAppTriggered()
{
    if (m_found)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_interface->notifyUpdatableApp.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
        {
            auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->notifyUpdatableApp.GetNewSamples([&](auto samplePtr) {
                RPortOtaSubscription::ReadDatanotifyUpdatableApp(std::move(samplePtr));
            }));
            if (recv->HasValue())
            {
                m_logger.LogVerbose() << "RPortOtaSubscription::ReceiveEventnotifyUpdatableApp::GetNewSamples::" << recv->Value();
            }
            else
            {
                m_logger.LogError() << "RPortOtaSubscription::ReceiveEventnotifyUpdatableApp::GetNewSamples::" << recv->Error().Message();
            }
        }
    }
}
 
void RPortOtaSubscription::ReceiveEventnotifyUpdatableAppCyclic()
{
    while (m_running)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_found)
        {
            if (m_interface->notifyUpdatableApp.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
            {
                auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->notifyUpdatableApp.GetNewSamples([&](auto samplePtr) {
                    RPortOtaSubscription::ReadDatanotifyUpdatableApp(std::move(samplePtr));
                }));
                if (recv->HasValue())
                {
                    m_logger.LogVerbose() << "RPortOtaSubscription::ReceiveEventnotifyUpdatableApp::GetNewSamples::" << recv->Value();
                }
                else
                {
                    m_logger.LogError() << "RPortOtaSubscription::ReceiveEventnotifyUpdatableApp::GetNewSamples::" << recv->Error().Message();
                }
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void RPortOtaSubscription::ReadDatanotifyUpdatableApp(ara::com::SamplePtr<eevp::ota::subscription::service::proxy::events::notifyUpdatableApp::SampleType const> samplePtr)
{
    auto data = *samplePtr.Get();
    if (m_receivernotifyUpdatableApp)
    {
        m_receivernotifyUpdatableApp(data);
    }
}
 
void RPortOtaSubscription::RegistEventHandlernotifyUpdatableApp(std::function<void(const eevp::ota::subscription::service::proxy::events::notifyUpdatableApp::SampleType&)> handler)
{
    m_receivernotifyUpdatableApp = handler;
}
 
void RPortOtaSubscription::SubscribenotifyUpdateComplete()
{
    if (m_found)
    {
        // regist receiver handler
        // if you want to enable it, please uncomment below code
        // RegistReceivernotifyUpdateComplete();
        
        // request subscribe
        auto subscribe = m_interface->notifyUpdateComplete.Subscribe(1);
        if (subscribe.HasValue())
        {
            m_logger.LogVerbose() << "RPortOtaSubscription::SubscribenotifyUpdateComplete::Subscribed";
        }
        else
        {
            m_logger.LogError() << "RPortOtaSubscription::SubscribenotifyUpdateComplete::" << subscribe.Error().Message();
        }
    }
}
 
void RPortOtaSubscription::StopSubscribenotifyUpdateComplete()
{
    if (m_found)
    {
        // request stop subscribe
        m_interface->notifyUpdateComplete.Unsubscribe();
        m_logger.LogVerbose() << "RPortOtaSubscription::StopSubscribenotifyUpdateComplete::Unsubscribed";
    }
}
 
void RPortOtaSubscription::RegistReceivernotifyUpdateComplete()
{
    if (m_found)
    {
        // set callback
        auto receiver = [this]() -> void {
            return ReceiveEventnotifyUpdateCompleteTriggered();
        };
        
        // regist callback
        auto callback = m_interface->notifyUpdateComplete.SetReceiveHandler(receiver);
        if (callback.HasValue())
        {
            m_logger.LogVerbose() << "RPortOtaSubscription::RegistReceivernotifyUpdateComplete::SetReceiveHandler";
        }
        else
        {
            m_logger.LogError() << "RPortOtaSubscription::RegistReceivernotifyUpdateComplete::SetReceiveHandler::" << callback.Error().Message();
        }
    }
}
 
void RPortOtaSubscription::ReceiveEventnotifyUpdateCompleteTriggered()
{
    if (m_found)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_interface->notifyUpdateComplete.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
        {
            auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->notifyUpdateComplete.GetNewSamples([&](auto samplePtr) {
                RPortOtaSubscription::ReadDatanotifyUpdateComplete(std::move(samplePtr));
            }));
            if (recv->HasValue())
            {
                m_logger.LogVerbose() << "RPortOtaSubscription::ReceiveEventnotifyUpdateComplete::GetNewSamples::" << recv->Value();
            }
            else
            {
                m_logger.LogError() << "RPortOtaSubscription::ReceiveEventnotifyUpdateComplete::GetNewSamples::" << recv->Error().Message();
            }
        }
    }
}
 
void RPortOtaSubscription::ReceiveEventnotifyUpdateCompleteCyclic()
{
    while (m_running)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_found)
        {
            if (m_interface->notifyUpdateComplete.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
            {
                auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->notifyUpdateComplete.GetNewSamples([&](auto samplePtr) {
                    RPortOtaSubscription::ReadDatanotifyUpdateComplete(std::move(samplePtr));
                }));
                if (recv->HasValue())
                {
                    m_logger.LogVerbose() << "RPortOtaSubscription::ReceiveEventnotifyUpdateComplete::GetNewSamples::" << recv->Value();
                }
                else
                {
                    m_logger.LogError() << "RPortOtaSubscription::ReceiveEventnotifyUpdateComplete::GetNewSamples::" << recv->Error().Message();
                }
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void RPortOtaSubscription::ReadDatanotifyUpdateComplete(ara::com::SamplePtr<eevp::ota::subscription::service::proxy::events::notifyUpdateComplete::SampleType const> samplePtr)
{
    auto data = *samplePtr.Get();
    if (m_receivernotifyUpdateComplete)
    {
        m_receivernotifyUpdateComplete(data);
    }
}
 
void RPortOtaSubscription::RegistEventHandlernotifyUpdateComplete(std::function<void(const eevp::ota::subscription::service::proxy::events::notifyUpdateComplete::SampleType&)> handler)
{
    m_receivernotifyUpdateComplete = handler;
}
 
void RPortOtaSubscription::RequestrequestAppInstall(const eevp::type::String& appName)
{
    if (m_found)
    {
        auto request = m_interface->requestAppInstall(appName);
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "RPortOtaSubscription::RequestrequestAppInstall::Responded";
            
            auto result = response.Value();
            if (m_responderrequestAppInstall)
            {
                m_responderrequestAppInstall(result);
            }
        }
        else
        {
            m_logger.LogError() << "RPortOtaSubscription::RequestrequestAppInstall::" << response.Error().Message();
        }
    }
}
 
void RPortOtaSubscription::RegistResponseHandlerrequestAppInstall(std::function<void(const eevp::ota::subscription::service::proxy::methods::requestAppInstall::Output&)> handler)
{
    m_responderrequestAppInstall = handler;
}
 
void RPortOtaSubscription::RequestrequestAppRollback()
{
    if (m_found)
    {
        auto request = m_interface->requestAppRollback();
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "RPortOtaSubscription::RequestrequestAppRollback::Responded";
            
            auto result = response.Value();
            if (m_responderrequestAppRollback)
            {
                m_responderrequestAppRollback(result);
            }
        }
        else
        {
            m_logger.LogError() << "RPortOtaSubscription::RequestrequestAppRollback::" << response.Error().Message();
        }
    }
}
 
void RPortOtaSubscription::RegistResponseHandlerrequestAppRollback(std::function<void(const eevp::ota::subscription::service::proxy::methods::requestAppRollback::Output&)> handler)
{
    m_responderrequestAppRollback = handler;
}
 
void RPortOtaSubscription::RequestrequestAppUpdate(const eevp::type::String& appName)
{
    if (m_found)
    {
        auto request = m_interface->requestAppUpdate(appName);
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "RPortOtaSubscription::RequestrequestAppUpdate::Responded";
            
            auto result = response.Value();
            if (m_responderrequestAppUpdate)
            {
                m_responderrequestAppUpdate(result);
            }
        }
        else
        {
            m_logger.LogError() << "RPortOtaSubscription::RequestrequestAppUpdate::" << response.Error().Message();
        }
    }
}
 
void RPortOtaSubscription::RegistResponseHandlerrequestAppUpdate(std::function<void(const eevp::ota::subscription::service::proxy::methods::requestAppUpdate::Output&)> handler)
{
    m_responderrequestAppUpdate = handler;
}
 
void RPortOtaSubscription::RequestrequestOtaProcess(const eevp::type::String& accessToken, const eevp::type::String& refreshToken, const eevp::ota::subscription::type::downloadPackageInfoList& downloadPackageInfo)
{
    if (m_found)
    {
        auto request = m_interface->requestOtaProcess(accessToken, refreshToken, downloadPackageInfo);
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "RPortOtaSubscription::RequestrequestOtaProcess::Responded";
            
            auto result = response.Value();
            if (m_responderrequestOtaProcess)
            {
                m_responderrequestOtaProcess(result);
            }
        }
        else
        {
            m_logger.LogError() << "RPortOtaSubscription::RequestrequestOtaProcess::" << response.Error().Message();
        }
    }
}
 
void RPortOtaSubscription::RegistResponseHandlerrequestOtaProcess(std::function<void(const eevp::ota::subscription::service::proxy::methods::requestOtaProcess::Output&)> handler)
{
    m_responderrequestOtaProcess = handler;
}
 
void RPortOtaSubscription::RequestrequestVersionInfo()
{
    if (m_found)
    {
        auto request = m_interface->requestVersionInfo();
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "RPortOtaSubscription::RequestrequestVersionInfo::Responded";
            
            auto result = response.Value();
            if (m_responderrequestVersionInfo)
            {
                m_responderrequestVersionInfo(result);
            }
        }
        else
        {
            m_logger.LogError() << "RPortOtaSubscription::RequestrequestVersionInfo::" << response.Error().Message();
        }
    }
}
 
void RPortOtaSubscription::RegistResponseHandlerrequestVersionInfo(std::function<void(const eevp::ota::subscription::service::proxy::methods::requestVersionInfo::Output&)> handler)
{
    m_responderrequestVersionInfo = handler;
}
 
} /// namespace port
} /// namespace aa
} /// namespace subscriptionmanager
 
/// EOF