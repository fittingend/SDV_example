///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : rportotasubscription.h
/// SOFTWARE COMPONENT NAME           : RPortOtaSubscription
/// GENERATED DATE                    : 2025-08-30 10:53:49
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef PARA_AA_GEN_SOFTWARE_COMPONENT_RPORT_SUBSCRIPTIONMANAGER_AA_RPORTOTASUBSCRIPTION_H
#define PARA_AA_GEN_SOFTWARE_COMPONENT_RPORT_SUBSCRIPTIONMANAGER_AA_RPORTOTASUBSCRIPTION_H
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// INCLUSION HEADER FILES
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "eevp/ota/subscription/service/otasubscription_proxy.h"
 
#include "ara/log/logger.h"
 
#include <mutex>
#include <thread>
 
namespace subscriptionmanager
{
namespace aa
{
namespace port
{
 
class RPortOtaSubscription
{
public:
    /// @brief Constructor
    RPortOtaSubscription();
    
    /// @brief Destructor
    ~RPortOtaSubscription();
    
    /// @brief Start port
    void Start();
    
    /// @brief Terminate port
    void Terminate();
    
    /// @brief Subscribe event, notifyAppEvent
    void SubscribenotifyAppEvent();
     
    /// @brief Stop event subscription, notifyAppEvent
    void StopSubscribenotifyAppEvent();
     
    /// @brief Event receive handler, notifyAppEvent
    void ReceiveEventnotifyAppEventTriggered();
     
    /// @brief Event receive handler, notifyAppEvent
    void ReceiveEventnotifyAppEventCyclic();
     
    /// @brief Read event data, notifyAppEvent
    void ReadDatanotifyAppEvent(ara::com::SamplePtr<eevp::ota::subscription::service::proxy::events::notifyAppEvent::SampleType const> samplePtr);
     
    /// @brief Regist callback from software component
    void RegistEventHandlernotifyAppEvent(std::function<void(const eevp::ota::subscription::service::proxy::events::notifyAppEvent::SampleType&)> handler);
    
    /// @brief Subscribe event, notifyResultInfo
    void SubscribenotifyResultInfo();
     
    /// @brief Stop event subscription, notifyResultInfo
    void StopSubscribenotifyResultInfo();
     
    /// @brief Event receive handler, notifyResultInfo
    void ReceiveEventnotifyResultInfoTriggered();
     
    /// @brief Event receive handler, notifyResultInfo
    void ReceiveEventnotifyResultInfoCyclic();
     
    /// @brief Read event data, notifyResultInfo
    void ReadDatanotifyResultInfo(ara::com::SamplePtr<eevp::ota::subscription::service::proxy::events::notifyResultInfo::SampleType const> samplePtr);
     
    /// @brief Regist callback from software component
    void RegistEventHandlernotifyResultInfo(std::function<void(const eevp::ota::subscription::service::proxy::events::notifyResultInfo::SampleType&)> handler);
    
    /// @brief Subscribe event, notifyRollbackComplete
    void SubscribenotifyRollbackComplete();
     
    /// @brief Stop event subscription, notifyRollbackComplete
    void StopSubscribenotifyRollbackComplete();
     
    /// @brief Event receive handler, notifyRollbackComplete
    void ReceiveEventnotifyRollbackCompleteTriggered();
     
    /// @brief Event receive handler, notifyRollbackComplete
    void ReceiveEventnotifyRollbackCompleteCyclic();
     
    /// @brief Read event data, notifyRollbackComplete
    void ReadDatanotifyRollbackComplete(ara::com::SamplePtr<eevp::ota::subscription::service::proxy::events::notifyRollbackComplete::SampleType const> samplePtr);
     
    /// @brief Regist callback from software component
    void RegistEventHandlernotifyRollbackComplete(std::function<void(const eevp::ota::subscription::service::proxy::events::notifyRollbackComplete::SampleType&)> handler);
    
    /// @brief Subscribe event, notifySwClusterInfo
    void SubscribenotifySwClusterInfo();
     
    /// @brief Stop event subscription, notifySwClusterInfo
    void StopSubscribenotifySwClusterInfo();
     
    /// @brief Event receive handler, notifySwClusterInfo
    void ReceiveEventnotifySwClusterInfoTriggered();
     
    /// @brief Event receive handler, notifySwClusterInfo
    void ReceiveEventnotifySwClusterInfoCyclic();
     
    /// @brief Read event data, notifySwClusterInfo
    void ReadDatanotifySwClusterInfo(ara::com::SamplePtr<eevp::ota::subscription::service::proxy::events::notifySwClusterInfo::SampleType const> samplePtr);
     
    /// @brief Regist callback from software component
    void RegistEventHandlernotifySwClusterInfo(std::function<void(const eevp::ota::subscription::service::proxy::events::notifySwClusterInfo::SampleType&)> handler);
    
    /// @brief Subscribe event, notifyUpdatableApp
    void SubscribenotifyUpdatableApp();
     
    /// @brief Stop event subscription, notifyUpdatableApp
    void StopSubscribenotifyUpdatableApp();
     
    /// @brief Event receive handler, notifyUpdatableApp
    void ReceiveEventnotifyUpdatableAppTriggered();
     
    /// @brief Event receive handler, notifyUpdatableApp
    void ReceiveEventnotifyUpdatableAppCyclic();
     
    /// @brief Read event data, notifyUpdatableApp
    void ReadDatanotifyUpdatableApp(ara::com::SamplePtr<eevp::ota::subscription::service::proxy::events::notifyUpdatableApp::SampleType const> samplePtr);
     
    /// @brief Regist callback from software component
    void RegistEventHandlernotifyUpdatableApp(std::function<void(const eevp::ota::subscription::service::proxy::events::notifyUpdatableApp::SampleType&)> handler);
    
    /// @brief Subscribe event, notifyUpdateComplete
    void SubscribenotifyUpdateComplete();
     
    /// @brief Stop event subscription, notifyUpdateComplete
    void StopSubscribenotifyUpdateComplete();
     
    /// @brief Event receive handler, notifyUpdateComplete
    void ReceiveEventnotifyUpdateCompleteTriggered();
     
    /// @brief Event receive handler, notifyUpdateComplete
    void ReceiveEventnotifyUpdateCompleteCyclic();
     
    /// @brief Read event data, notifyUpdateComplete
    void ReadDatanotifyUpdateComplete(ara::com::SamplePtr<eevp::ota::subscription::service::proxy::events::notifyUpdateComplete::SampleType const> samplePtr);
     
    /// @brief Regist callback from software component
    void RegistEventHandlernotifyUpdateComplete(std::function<void(const eevp::ota::subscription::service::proxy::events::notifyUpdateComplete::SampleType&)> handler);

    /// @brief Request with Response method using by software component, requestAppInstall
    void RequestrequestAppInstall(const eevp::type::String& appName);
     
    /// @brief Regist callback from software component
    void RegistResponseHandlerrequestAppInstall(std::function<void(const eevp::ota::subscription::service::proxy::methods::requestAppInstall::Output&)> handler);
    
    /// @brief Request with Response method using by software component, requestAppRollback
    void RequestrequestAppRollback();
     
    /// @brief Regist callback from software component
    void RegistResponseHandlerrequestAppRollback(std::function<void(const eevp::ota::subscription::service::proxy::methods::requestAppRollback::Output&)> handler);
    
    /// @brief Request with Response method using by software component, requestAppUpdate
    void RequestrequestAppUpdate(const eevp::type::String& appName);
     
    /// @brief Regist callback from software component
    void RegistResponseHandlerrequestAppUpdate(std::function<void(const eevp::ota::subscription::service::proxy::methods::requestAppUpdate::Output&)> handler);
    
    /// @brief Request with Response method using by software component, requestOtaProcess
    void RequestrequestOtaProcess(const eevp::type::String& accessToken, const eevp::type::String& refreshToken, const eevp::ota::subscription::type::downloadPackageInfoList& downloadPackageInfo);
     
    /// @brief Regist callback from software component
    void RegistResponseHandlerrequestOtaProcess(std::function<void(const eevp::ota::subscription::service::proxy::methods::requestOtaProcess::Output&)> handler);
    
    /// @brief Request with Response method using by software component, requestVersionInfo
    void RequestrequestVersionInfo();
     
    /// @brief Regist callback from software component
    void RegistResponseHandlerrequestVersionInfo(std::function<void(const eevp::ota::subscription::service::proxy::methods::requestVersionInfo::Output&)> handler);
    
private:
    /// @brief Callback for find service
    void Find(ara::com::ServiceHandleContainer<eevp::ota::subscription::service::proxy::OtaSubscriptionProxy::HandleType> handles,
              ara::com::FindServiceHandle findHandle);
    
    /// @brief Callback for event receiver, notifyAppEvent
    void RegistReceivernotifyAppEvent();
    
    /// @brief Callback for event receiver, notifyResultInfo
    void RegistReceivernotifyResultInfo();
    
    /// @brief Callback for event receiver, notifyRollbackComplete
    void RegistReceivernotifyRollbackComplete();
    
    /// @brief Callback for event receiver, notifySwClusterInfo
    void RegistReceivernotifySwClusterInfo();
    
    /// @brief Callback for event receiver, notifyUpdatableApp
    void RegistReceivernotifyUpdatableApp();
    
    /// @brief Callback for event receiver, notifyUpdateComplete
    void RegistReceivernotifyUpdateComplete();

private:
    /// @brief Logger for this port
    ara::log::Logger& m_logger;
    
    /// @brief Flag of port status
    bool m_running;
    
    /// @brief Flag of find service status
    bool m_found;
    
    /// @brief Mutex for this port
    std::mutex m_mutex; 
    
    /// @brief AUTOSAR Port Interface
    std::unique_ptr<eevp::ota::subscription::service::proxy::OtaSubscriptionProxy> m_interface;
    
    /// @brief Find service handle
    std::unique_ptr<ara::com::FindServiceHandle> m_findHandle;
    
    /// @brief Callback from software component, notifyAppEvent
    std::function<void(const eevp::ota::subscription::service::proxy::events::notifyAppEvent::SampleType&)> m_receivernotifyAppEvent;
    
    /// @brief Callback from software component, notifyResultInfo
    std::function<void(const eevp::ota::subscription::service::proxy::events::notifyResultInfo::SampleType&)> m_receivernotifyResultInfo;
    
    /// @brief Callback from software component, notifyRollbackComplete
    std::function<void(const eevp::ota::subscription::service::proxy::events::notifyRollbackComplete::SampleType&)> m_receivernotifyRollbackComplete;
    
    /// @brief Callback from software component, notifySwClusterInfo
    std::function<void(const eevp::ota::subscription::service::proxy::events::notifySwClusterInfo::SampleType&)> m_receivernotifySwClusterInfo;
    
    /// @brief Callback from software component, notifyUpdatableApp
    std::function<void(const eevp::ota::subscription::service::proxy::events::notifyUpdatableApp::SampleType&)> m_receivernotifyUpdatableApp;
    
    /// @brief Callback from software component, notifyUpdateComplete
    std::function<void(const eevp::ota::subscription::service::proxy::events::notifyUpdateComplete::SampleType&)> m_receivernotifyUpdateComplete;

    /// @brief Callback from software component, requestAppInstall
    std::function<void(const eevp::ota::subscription::service::proxy::methods::requestAppInstall::Output&)> m_responderrequestAppInstall;
    
    /// @brief Callback from software component, requestAppRollback
    std::function<void(const eevp::ota::subscription::service::proxy::methods::requestAppRollback::Output&)> m_responderrequestAppRollback;
    
    /// @brief Callback from software component, requestAppUpdate
    std::function<void(const eevp::ota::subscription::service::proxy::methods::requestAppUpdate::Output&)> m_responderrequestAppUpdate;
    
    /// @brief Callback from software component, requestOtaProcess
    std::function<void(const eevp::ota::subscription::service::proxy::methods::requestOtaProcess::Output&)> m_responderrequestOtaProcess;
    
    /// @brief Callback from software component, requestVersionInfo
    std::function<void(const eevp::ota::subscription::service::proxy::methods::requestVersionInfo::Output&)> m_responderrequestVersionInfo;
};
 
} /// namespace port
} /// namespace aa
} /// namespace subscriptionmanager
 
#endif /// PARA_AA_GEN_SOFTWARE_COMPONENT_RPORT_SUBSCRIPTIONMANAGER_AA_RPORTOTASUBSCRIPTION_H