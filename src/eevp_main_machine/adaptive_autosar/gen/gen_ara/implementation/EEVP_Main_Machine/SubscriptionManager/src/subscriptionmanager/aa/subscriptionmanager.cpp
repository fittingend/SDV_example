///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : subscriptionmanager.cpp
/// SOFTWARE COMPONENT NAME           : SubscriptionManager
/// GENERATED DATE                    : 2025-08-30 10:53:49
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// INCLUSION HEADER FILES
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "subscriptionmanager/aa/subscriptionmanager.h"
 
namespace subscriptionmanager
{
namespace aa
{
 
SubscriptionManager::SubscriptionManager()
    : m_logger(ara::log::CreateLogger("SUSM", "SWC", ara::log::LogLevel::kVerbose))
    , m_running{false}
    , m_workers(7)
{
}
 
SubscriptionManager::~SubscriptionManager()
{
}
 
bool SubscriptionManager::Initialize()
{
    m_logger.LogVerbose() << "SubscriptionManager::Initialize";
    
    bool init = true;
    
    m_PPortSubscriptionManagement = std::make_unique<subscriptionmanager::aa::port::PPortSubscriptionManagement>();
    m_RPortOtaSubscription = std::make_unique<subscriptionmanager::aa::port::RPortOtaSubscription>();
    
    // put your code for initialization
    
    return init;
}
 
void SubscriptionManager::Start()
{
    m_logger.LogVerbose() << "SubscriptionManager::Start";
    
    m_PPortSubscriptionManagement->Start();
    m_RPortOtaSubscription->Start();
}
 
void SubscriptionManager::Terminate()
{
    m_logger.LogVerbose() << "SubscriptionManager::Terminate";
    
    // stop running
    m_running = false;
    
    m_PPortSubscriptionManagement->Terminate();
    m_RPortOtaSubscription->Terminate();
}
 
void SubscriptionManager::Run()
{
    m_logger.LogVerbose() << "SubscriptionManager::Run";
    
    // start running
    m_running = true;
    
    m_workers.Async([this] { m_PPortSubscriptionManagement->SendEventnotifySubscriptionInfoCyclic(); });
    m_workers.Async([this] { m_RPortOtaSubscription->ReceiveEventnotifyAppEventCyclic(); });
    m_workers.Async([this] { m_RPortOtaSubscription->ReceiveEventnotifyResultInfoCyclic(); });
    m_workers.Async([this] { m_RPortOtaSubscription->ReceiveEventnotifyRollbackCompleteCyclic(); });
    m_workers.Async([this] { m_RPortOtaSubscription->ReceiveEventnotifySwClusterInfoCyclic(); });
    m_workers.Async([this] { m_RPortOtaSubscription->ReceiveEventnotifyUpdatableAppCyclic(); });
    m_workers.Async([this] { m_RPortOtaSubscription->ReceiveEventnotifyUpdateCompleteCyclic(); });
    
    m_workers.Wait();
}
 
} /// namespace aa
} /// namespace subscriptionmanager
