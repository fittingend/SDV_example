///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : pport_soa_hvac.h
/// SOFTWARE COMPONENT NAME           : PPort_SOA_HVAC
/// GENERATED DATE                    : 2025-08-30 10:53:37
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef PARA_AA_GEN_SOFTWARE_COMPONENT_PPORT_SOA_HVAC_AA_PPORT_SOA_HVAC_H
#define PARA_AA_GEN_SOFTWARE_COMPONENT_PPORT_SOA_HVAC_AA_PPORT_SOA_HVAC_H
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// INCLUSION HEADER FILES
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "eevp/control/soahvac_skeleton.h"
 
#include "ara/log/logger.h"
 
#include <mutex>
#include <thread>
 
namespace eevp
{
namespace control
{
namespace skeleton
{
 
class SoaHvacSkeletonImpl : public SoaHvacSkeleton
{
public:
    /// @brief Constructor
    SoaHvacSkeletonImpl(ara::core::InstanceSpecifier instanceSpec, ara::com::MethodCallProcessingMode mode = ara::com::MethodCallProcessingMode::kEvent);
    
    /// @brief Fire & Forget method, SetAcOnOff
    void SetAcOnOff(const bool& on) override;
    
    /// @brief Fire & Forget method, SetAirSource
    void SetAirSource(const eevp::control::SoaHvacAirSource& src) override;
    
    /// @brief Fire & Forget method, SetAutoTemp
    void SetAutoTemp(const bool& on) override;
    
    /// @brief Fire & Forget method, SetBackwardDefrostOn
    void SetBackwardDefrostOn(const bool& on) override;
    
    /// @brief Fire & Forget method, SetBlowingDirection
    void SetBlowingDirection(const eevp::control::SoaHvacBlowDir& dir) override;
    
    /// @brief Fire & Forget method, SetBlowingForce
    void SetBlowingForce(const std::uint8_t& force) override;
    
    /// @brief Fire & Forget method, SetDriverTemp
    void SetDriverTemp(const std::int8_t& temperature) override;
    
    /// @brief Fire & Forget method, SetForwardDefrostOn
    void SetForwardDefrostOn(const bool& on) override;
    
    /// @brief Fire & Forget method, SetHvacPower
    void SetHvacPower(const bool& on) override;
    
    /// @brief Fire & Forget method, SetPassengerTemp
    void SetPassengerTemp(const std::int8_t& temperature) override;
    
    /// @brief Fire & Forget method, SetSync
    void SetSync(const bool& on) override;
    
    /// @brief Getter for field, SoaHvacSwVersion
    ara::core::Future<fields::SoaHvacSwVersion::FieldType> GetSoaHvacSwVersion();
    
    /// @brief Notifier for field, SoaHvacSwVersion
    void NotifySoaHvacSwVersion();
    
    /// @brief Update field value by software component, SoaHvacSwVersion
    void UpdateSoaHvacSwVersion(const fields::SoaHvacSwVersion::FieldType& value);
    
    /// @brief Getter for field, soaHvacDeviceNormal
    ara::core::Future<fields::soaHvacDeviceNormal::FieldType> GetsoaHvacDeviceNormal();
    
    /// @brief Notifier for field, soaHvacDeviceNormal
    void NotifysoaHvacDeviceNormal();
    
    /// @brief Update field value by software component, soaHvacDeviceNormal
    void UpdatesoaHvacDeviceNormal(const fields::soaHvacDeviceNormal::FieldType& value);
    
    /// @brief Getter for field, soaHvacSetting
    ara::core::Future<fields::soaHvacSetting::FieldType> GetsoaHvacSetting();
    
    /// @brief Notifier for field, soaHvacSetting
    void NotifysoaHvacSetting();
    
    /// @brief Update field value by software component, soaHvacSetting
    void UpdatesoaHvacSetting(const fields::soaHvacSetting::FieldType& value);
    
    /// @brief Getter for field, soaHvacStatus
    ara::core::Future<fields::soaHvacStatus::FieldType> GetsoaHvacStatus();
    
    /// @brief Notifier for field, soaHvacStatus
    void NotifysoaHvacStatus();
    
    /// @brief Update field value by software component, soaHvacStatus
    void UpdatesoaHvacStatus(const fields::soaHvacStatus::FieldType& value);
    
    /// @brief Getter for field, soaHvacTemps
    ara::core::Future<fields::soaHvacTemps::FieldType> GetsoaHvacTemps();
    
    /// @brief Notifier for field, soaHvacTemps
    void NotifysoaHvacTemps();
    
    /// @brief Update field value by software component, soaHvacTemps
    void UpdatesoaHvacTemps(const fields::soaHvacTemps::FieldType& value);
    
private:
    /// @brief Logger for this port
    ara::log::Logger& m_logger;
    
    /// @brief Field, SoaHvacSwVersion
    fields::SoaHvacSwVersion::FieldType m_SoaHvacSwVersion;
    
    /// @brief Field, soaHvacDeviceNormal
    fields::soaHvacDeviceNormal::FieldType m_soaHvacDeviceNormal;
    
    /// @brief Field, soaHvacSetting
    fields::soaHvacSetting::FieldType m_soaHvacSetting;
    
    /// @brief Field, soaHvacStatus
    fields::soaHvacStatus::FieldType m_soaHvacStatus;
    
    /// @brief Field, soaHvacTemps
    fields::soaHvacTemps::FieldType m_soaHvacTemps;
    
};
 
} /// namespace skeleton
} /// namespace control
} /// namespace eevp

namespace soa_hvac
{
namespace aa
{
namespace port
{
 
class PPort_SOA_HVAC
{
public:
    /// @brief Constructor
    PPort_SOA_HVAC();
    
    /// @brief Destructor
    ~PPort_SOA_HVAC();
    
    /// @brief Start port
    void Start();
    
    /// @brief Terminate port
    void Terminate();
    
    /// @brief Write field value to buffer, SoaHvacSwVersion
    void WriteValueSoaHvacSwVersion(const eevp::control::skeleton::fields::SoaHvacSwVersion::FieldType& value);
     
    /// @brief Notify field cyclic from buffer, SoaHvacSwVersion
    void NotifyFieldSoaHvacSwVersionCyclic();
     
    /// @brief Notify field directly from buffer data, SoaHvacSwVersion
    void NotifyFieldSoaHvacSwVersionTriggered();
     
    /// @brief Notify field directly with argument, SoaHvacSwVersion
    void NotifyFieldSoaHvacSwVersionTriggered(const eevp::control::skeleton::fields::SoaHvacSwVersion::FieldType& value);

    /// @brief Write field value to buffer, soaHvacDeviceNormal
    void WriteValuesoaHvacDeviceNormal(const eevp::control::skeleton::fields::soaHvacDeviceNormal::FieldType& value);
     
    /// @brief Notify field cyclic from buffer, soaHvacDeviceNormal
    void NotifyFieldsoaHvacDeviceNormalCyclic();
     
    /// @brief Notify field directly from buffer data, soaHvacDeviceNormal
    void NotifyFieldsoaHvacDeviceNormalTriggered();
     
    /// @brief Notify field directly with argument, soaHvacDeviceNormal
    void NotifyFieldsoaHvacDeviceNormalTriggered(const eevp::control::skeleton::fields::soaHvacDeviceNormal::FieldType& value);

    /// @brief Write field value to buffer, soaHvacSetting
    void WriteValuesoaHvacSetting(const eevp::control::skeleton::fields::soaHvacSetting::FieldType& value);
     
    /// @brief Notify field cyclic from buffer, soaHvacSetting
    void NotifyFieldsoaHvacSettingCyclic();
     
    /// @brief Notify field directly from buffer data, soaHvacSetting
    void NotifyFieldsoaHvacSettingTriggered();
     
    /// @brief Notify field directly with argument, soaHvacSetting
    void NotifyFieldsoaHvacSettingTriggered(const eevp::control::skeleton::fields::soaHvacSetting::FieldType& value);

    /// @brief Write field value to buffer, soaHvacStatus
    void WriteValuesoaHvacStatus(const eevp::control::skeleton::fields::soaHvacStatus::FieldType& value);
     
    /// @brief Notify field cyclic from buffer, soaHvacStatus
    void NotifyFieldsoaHvacStatusCyclic();
     
    /// @brief Notify field directly from buffer data, soaHvacStatus
    void NotifyFieldsoaHvacStatusTriggered();
     
    /// @brief Notify field directly with argument, soaHvacStatus
    void NotifyFieldsoaHvacStatusTriggered(const eevp::control::skeleton::fields::soaHvacStatus::FieldType& value);

    /// @brief Write field value to buffer, soaHvacTemps
    void WriteValuesoaHvacTemps(const eevp::control::skeleton::fields::soaHvacTemps::FieldType& value);
     
    /// @brief Notify field cyclic from buffer, soaHvacTemps
    void NotifyFieldsoaHvacTempsCyclic();
     
    /// @brief Notify field directly from buffer data, soaHvacTemps
    void NotifyFieldsoaHvacTempsTriggered();
     
    /// @brief Notify field directly with argument, soaHvacTemps
    void NotifyFieldsoaHvacTempsTriggered(const eevp::control::skeleton::fields::soaHvacTemps::FieldType& value);
     
private:
    /// @brief Logger for this port
    ara::log::Logger& m_logger;
    
    /// @brief Flag of port status
    bool m_running;
    
    /// @brief Mutex for this port
    std::mutex m_mutex;
    
    /// @brief AUTOSAR Port Interface
    std::unique_ptr<eevp::control::skeleton::SoaHvacSkeletonImpl> m_interface;
    
};
 
} /// namespace port
} /// namespace aa
} /// namespace soa_hvac
 
#endif /// PARA_AA_GEN_SOFTWARE_COMPONENT_PPORT_SOA_HVAC_AA_PPORT_SOA_HVAC_H