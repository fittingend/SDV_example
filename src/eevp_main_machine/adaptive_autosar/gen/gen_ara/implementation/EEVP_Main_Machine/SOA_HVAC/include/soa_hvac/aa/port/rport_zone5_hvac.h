///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : rport_zone5_hvac.h
/// SOFTWARE COMPONENT NAME           : RPort_Zone5_HVAC
/// GENERATED DATE                    : 2025-08-30 10:53:37
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef PARA_AA_GEN_SOFTWARE_COMPONENT_RPORT_SOA_HVAC_AA_RPORT_ZONE5_HVAC_H
#define PARA_AA_GEN_SOFTWARE_COMPONENT_RPORT_SOA_HVAC_AA_RPORT_ZONE5_HVAC_H
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// INCLUSION HEADER FILES
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "zone5/hvac/control/zone5hvac_proxy.h"
 
#include "ara/log/logger.h"
 
#include <mutex>
#include <thread>
 
namespace soa_hvac
{
namespace aa
{
namespace port
{
 
class RPort_Zone5_HVAC
{
public:
    /// @brief Constructor
    RPort_Zone5_HVAC();
    
    /// @brief Destructor
    ~RPort_Zone5_HVAC();
    
    /// @brief Start port
    void Start();
    
    /// @brief Terminate port
    void Terminate();

    /// @brief Subscribe field notification, zone5HvacDeviceNormal
    void Subscribezone5HvacDeviceNormal();
     
    /// @brief Stop field subscription, zone5HvacDeviceNormal
    void StopSubscribezone5HvacDeviceNormal();
     
    /// @brief Field notification receive handler, zone5HvacDeviceNormal
    void ReceiveFieldzone5HvacDeviceNormalTriggered();
     
    /// @brief Field notification receive handler, zone5HvacDeviceNormal
    void ReceiveFieldzone5HvacDeviceNormalCyclic();
     
    /// @brief Read field notification value, zone5HvacDeviceNormal
    void ReadValuezone5HvacDeviceNormal(ara::com::SamplePtr<zone5::hvac::control::proxy::fields::zone5HvacDeviceNormal::FieldType const> samplePtr);
     
    /// @brief Regist callback from software component
    void RegistFieldHandlerzone5HvacDeviceNormal(std::function<void(const zone5::hvac::control::proxy::fields::zone5HvacDeviceNormal::FieldType&)> handler);
    
    /// @brief Getter method using by software component, zone5HvacDeviceNormal
    void Getzone5HvacDeviceNormal();
    
    /// @brief Subscribe field notification, zone5HvacSetting
    void Subscribezone5HvacSetting();
     
    /// @brief Stop field subscription, zone5HvacSetting
    void StopSubscribezone5HvacSetting();
     
    /// @brief Field notification receive handler, zone5HvacSetting
    void ReceiveFieldzone5HvacSettingTriggered();
     
    /// @brief Field notification receive handler, zone5HvacSetting
    void ReceiveFieldzone5HvacSettingCyclic();
     
    /// @brief Read field notification value, zone5HvacSetting
    void ReadValuezone5HvacSetting(ara::com::SamplePtr<zone5::hvac::control::proxy::fields::zone5HvacSetting::FieldType const> samplePtr);
     
    /// @brief Regist callback from software component
    void RegistFieldHandlerzone5HvacSetting(std::function<void(const zone5::hvac::control::proxy::fields::zone5HvacSetting::FieldType&)> handler);
    
    /// @brief Getter method using by software component, zone5HvacSetting
    void Getzone5HvacSetting();
    
    /// @brief Subscribe field notification, zone5HvacStatus
    void Subscribezone5HvacStatus();
     
    /// @brief Stop field subscription, zone5HvacStatus
    void StopSubscribezone5HvacStatus();
     
    /// @brief Field notification receive handler, zone5HvacStatus
    void ReceiveFieldzone5HvacStatusTriggered();
     
    /// @brief Field notification receive handler, zone5HvacStatus
    void ReceiveFieldzone5HvacStatusCyclic();
     
    /// @brief Read field notification value, zone5HvacStatus
    void ReadValuezone5HvacStatus(ara::com::SamplePtr<zone5::hvac::control::proxy::fields::zone5HvacStatus::FieldType const> samplePtr);
     
    /// @brief Regist callback from software component
    void RegistFieldHandlerzone5HvacStatus(std::function<void(const zone5::hvac::control::proxy::fields::zone5HvacStatus::FieldType&)> handler);
    
    /// @brief Getter method using by software component, zone5HvacStatus
    void Getzone5HvacStatus();
    
    /// @brief Subscribe field notification, zone5HvacTemps
    void Subscribezone5HvacTemps();
     
    /// @brief Stop field subscription, zone5HvacTemps
    void StopSubscribezone5HvacTemps();
     
    /// @brief Field notification receive handler, zone5HvacTemps
    void ReceiveFieldzone5HvacTempsTriggered();
     
    /// @brief Field notification receive handler, zone5HvacTemps
    void ReceiveFieldzone5HvacTempsCyclic();
     
    /// @brief Read field notification value, zone5HvacTemps
    void ReadValuezone5HvacTemps(ara::com::SamplePtr<zone5::hvac::control::proxy::fields::zone5HvacTemps::FieldType const> samplePtr);
     
    /// @brief Regist callback from software component
    void RegistFieldHandlerzone5HvacTemps(std::function<void(const zone5::hvac::control::proxy::fields::zone5HvacTemps::FieldType&)> handler);
    
    /// @brief Getter method using by software component, zone5HvacTemps
    void Getzone5HvacTemps();
    
    /// @brief Fire and Forget method using by software component, SetAcOnOff
    void RequestSetAcOnOff(const std::uint8_t& on);
    
    /// @brief Fire and Forget method using by software component, SetAirSource
    void RequestSetAirSource(const std::uint8_t& src);
    
    /// @brief Fire and Forget method using by software component, SetAutoTemp
    void RequestSetAutoTemp(const std::uint8_t& on);
    
    /// @brief Fire and Forget method using by software component, SetBackwardDefrostOn
    void RequestSetBackwardDefrostOn(const std::uint8_t& on);
    
    /// @brief Fire and Forget method using by software component, SetBlowingDirection
    void RequestSetBlowingDirection(const std::uint8_t& dir);
    
    /// @brief Fire and Forget method using by software component, SetBlowingForce
    void RequestSetBlowingForce(const std::uint8_t& force);
    
    /// @brief Fire and Forget method using by software component, SetDriverTemp
    void RequestSetDriverTemp(const std::int8_t& temporature);
    
    /// @brief Fire and Forget method using by software component, SetForwardDefrostOn
    void RequestSetForwardDefrostOn(const std::uint8_t& on);
    
    /// @brief Fire and Forget method using by software component, SetHvacPower
    void RequestSetHvacPower(const std::uint8_t& on);
    
    /// @brief Fire and Forget method using by software component, SetPassengerTemp
    void RequestSetPassengerTemp(const std::int8_t& temporature);
    
    /// @brief Fire and Forget method using by software component, SetSync
    void RequestSetSync(const bool& on);
    
private:
    /// @brief Callback for find service
    void Find(ara::com::ServiceHandleContainer<zone5::hvac::control::proxy::Zone5HvacProxy::HandleType> handles,
              ara::com::FindServiceHandle findHandle);

    /// @brief Callback for field notification receiver, zone5HvacDeviceNormal
    void RegistReceiverzone5HvacDeviceNormal();
    
    /// @brief Callback for field notification receiver, zone5HvacSetting
    void RegistReceiverzone5HvacSetting();
    
    /// @brief Callback for field notification receiver, zone5HvacStatus
    void RegistReceiverzone5HvacStatus();
    
    /// @brief Callback for field notification receiver, zone5HvacTemps
    void RegistReceiverzone5HvacTemps();
    
private:
    /// @brief Logger for this port
    ara::log::Logger& m_logger;
    
    /// @brief Flag of port status
    bool m_running;
    
    /// @brief Flag of find service status
    bool m_found;
    
    /// @brief Mutex for this port
    std::mutex m_mutex; 
    
    /// @brief AUTOSAR Port Interface
    std::unique_ptr<zone5::hvac::control::proxy::Zone5HvacProxy> m_interface;
    
    /// @brief Find service handle
    std::unique_ptr<ara::com::FindServiceHandle> m_findHandle;

    /// @brief Callback from software component, zone5HvacDeviceNormal
    std::function<void(const zone5::hvac::control::proxy::fields::zone5HvacDeviceNormal::FieldType&)> m_receiverzone5HvacDeviceNormal;
    
    /// @brief Callback from software component, zone5HvacSetting
    std::function<void(const zone5::hvac::control::proxy::fields::zone5HvacSetting::FieldType&)> m_receiverzone5HvacSetting;
    
    /// @brief Callback from software component, zone5HvacStatus
    std::function<void(const zone5::hvac::control::proxy::fields::zone5HvacStatus::FieldType&)> m_receiverzone5HvacStatus;
    
    /// @brief Callback from software component, zone5HvacTemps
    std::function<void(const zone5::hvac::control::proxy::fields::zone5HvacTemps::FieldType&)> m_receiverzone5HvacTemps;
    
};
 
} /// namespace port
} /// namespace aa
} /// namespace soa_hvac
 
#endif /// PARA_AA_GEN_SOFTWARE_COMPONENT_RPORT_SOA_HVAC_AA_RPORT_ZONE5_HVAC_H