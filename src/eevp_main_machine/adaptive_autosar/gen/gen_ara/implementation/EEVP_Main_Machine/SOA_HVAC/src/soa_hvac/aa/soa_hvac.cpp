///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : soa_hvac.cpp
/// SOFTWARE COMPONENT NAME           : SOA_HVAC
/// GENERATED DATE                    : 2025-08-30 10:53:37
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// INCLUSION HEADER FILES
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "soa_hvac/aa/soa_hvac.h"
 
namespace soa_hvac
{
namespace aa
{
 
SOA_HVAC::SOA_HVAC()
    : m_logger(ara::log::CreateLogger("SHVC", "SWC", ara::log::LogLevel::kVerbose))
    , m_running{false}
    , m_workers(10)
{
}
 
SOA_HVAC::~SOA_HVAC()
{
}
 
bool SOA_HVAC::Initialize()
{
    m_logger.LogVerbose() << "SOA_HVAC::Initialize";
    
    bool init = true;
    
    m_PPort_SOA_HVAC = std::make_unique<soa_hvac::aa::port::PPort_SOA_HVAC>();
    m_RPort_Zone1VehicleInfo = std::make_unique<soa_hvac::aa::port::RPort_Zone1VehicleInfo>();
    m_RPort_Zone5_HVAC = std::make_unique<soa_hvac::aa::port::RPort_Zone5_HVAC>();
    
    // put your code for initialization
    
    return init;
}
 
void SOA_HVAC::Start()
{
    m_logger.LogVerbose() << "SOA_HVAC::Start";
    
    m_PPort_SOA_HVAC->Start();
    m_RPort_Zone1VehicleInfo->Start();
    m_RPort_Zone5_HVAC->Start();
}
 
void SOA_HVAC::Terminate()
{
    m_logger.LogVerbose() << "SOA_HVAC::Terminate";
    
    // stop running
    m_running = false;
    
    m_PPort_SOA_HVAC->Terminate();
    m_RPort_Zone1VehicleInfo->Terminate();
    m_RPort_Zone5_HVAC->Terminate();
}
 
void SOA_HVAC::Run()
{
    m_logger.LogVerbose() << "SOA_HVAC::Run";
    
    // start running
    m_running = true;
    
    m_workers.Async([this] { m_PPort_SOA_HVAC->NotifyFieldSoaHvacSwVersionCyclic(); });
    m_workers.Async([this] { m_PPort_SOA_HVAC->NotifyFieldsoaHvacDeviceNormalCyclic(); });
    m_workers.Async([this] { m_PPort_SOA_HVAC->NotifyFieldsoaHvacSettingCyclic(); });
    m_workers.Async([this] { m_PPort_SOA_HVAC->NotifyFieldsoaHvacStatusCyclic(); });
    m_workers.Async([this] { m_PPort_SOA_HVAC->NotifyFieldsoaHvacTempsCyclic(); });
    m_workers.Async([this] { m_RPort_Zone1VehicleInfo->ReceiveEventVehicleInfoCyclic(); });
    m_workers.Async([this] { m_RPort_Zone5_HVAC->ReceiveFieldzone5HvacDeviceNormalCyclic(); });
    m_workers.Async([this] { m_RPort_Zone5_HVAC->ReceiveFieldzone5HvacSettingCyclic(); });
    m_workers.Async([this] { m_RPort_Zone5_HVAC->ReceiveFieldzone5HvacStatusCyclic(); });
    m_workers.Async([this] { m_RPort_Zone5_HVAC->ReceiveFieldzone5HvacTempsCyclic(); });
    
    m_workers.Wait();
}
 
} /// namespace aa
} /// namespace soa_hvac
