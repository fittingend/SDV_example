///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : rport_zone5_hvac.cpp
/// SOFTWARE COMPONENT NAME           : RPort_Zone5_HVAC
/// GENERATED DATE                    : 2025-08-30 10:53:37
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "soa_hvac/aa/port/rport_zone5_hvac.h"
 
namespace soa_hvac
{
namespace aa
{
namespace port
{
 
RPort_Zone5_HVAC::RPort_Zone5_HVAC()
    : m_logger(ara::log::CreateLogger("SHVC", "PORT", ara::log::LogLevel::kVerbose))
    , m_running{false}
    , m_found{false}
    , m_receiverzone5HvacDeviceNormal{nullptr}
    , m_receiverzone5HvacSetting{nullptr}
    , m_receiverzone5HvacStatus{nullptr}
    , m_receiverzone5HvacTemps{nullptr}
{
}
 
RPort_Zone5_HVAC::~RPort_Zone5_HVAC()
{
}
 
void RPort_Zone5_HVAC::Start()
{
    m_logger.LogVerbose() << "RPort_Zone5_HVAC::Start";
    
    // regist callback
    ara::core::InstanceSpecifier specifier{"SOA_HVAC/AA/RPort_Zone5_HVAC"};
    auto handler = [this](ara::com::ServiceHandleContainer<zone5::hvac::control::proxy::Zone5HvacProxy::HandleType> handles,
                          ara::com::FindServiceHandle findHandle) {
        this->Find(handles, findHandle);
    };
    
    // find service
    auto find = zone5::hvac::control::proxy::Zone5HvacProxy::StartFindService(handler, specifier);
    if (find.HasValue())
    {
        m_logger.LogVerbose() << "RPort_Zone5_HVAC::Start::StartFindService";
    }
    else
    {
        m_logger.LogError() << "RPort_Zone5_HVAC::Start::StartFindService::" << find.Error().Message();
    }
    
    // run port
    m_running = true;
}
 
void RPort_Zone5_HVAC::Terminate()
{
    m_logger.LogVerbose() << "RPort_Zone5_HVAC::Terminate";
    
    // stop port
    m_running = false;
    
    // clear service proxy
    if (m_interface)
    {
        StopSubscribezone5HvacDeviceNormal();
        StopSubscribezone5HvacSetting();
        StopSubscribezone5HvacStatus();
        StopSubscribezone5HvacTemps();
        
        // stop find service
        m_interface->StopFindService(*m_findHandle);
        m_found = false;
        
        m_logger.LogVerbose() << "RPort_Zone5_HVAC::Terminate::StopFindService";
    }
}
 
void RPort_Zone5_HVAC::Find(ara::com::ServiceHandleContainer<zone5::hvac::control::proxy::Zone5HvacProxy::HandleType> handles, ara::com::FindServiceHandle findHandle)
{
    // check finding handles
    if (handles.empty())
    {
        m_logger.LogVerbose() << "RPort_Zone5_HVAC::Find::Service Instances not found";
        return;
    }
    else
    {
        for (auto& handle : handles)
        {
            m_logger.LogVerbose() << "RPort_Zone5_HVAC::Find::Searched Instance::ServiceId =" << 
                                     handle.GetServiceHandle().serviceId << 
                                     ", InstanceId =" << 
                                     handle.GetServiceHandle().instanceId;
        }
    }
    
    // create proxy
    if (m_interface)
    {
        m_logger.LogVerbose() << "RPort_Zone5_HVAC::Find::Proxy is already running";
    }
    else
    {
        m_logger.LogVerbose() << "RPort_Zone5_HVAC::Find::Using Instance::ServiceId =" << 
                                 handles[0].GetServiceHandle().serviceId << 
                                 ", InstanceId =" << 
                                 handles[0].GetServiceHandle().instanceId;
        m_interface = std::make_unique<zone5::hvac::control::proxy::Zone5HvacProxy>(handles[0]);
        m_findHandle = std::make_unique<ara::com::FindServiceHandle>(findHandle);
        m_found = true;
        
        // subscribe field notifications
        Subscribezone5HvacDeviceNormal();
        Subscribezone5HvacSetting();
        Subscribezone5HvacStatus();
        Subscribezone5HvacTemps();
    }
}
 
void RPort_Zone5_HVAC::Subscribezone5HvacDeviceNormal()
{
    if (m_found)
    {
        // regist receiver handler
        // if you want to enable it, please uncomment below code
        // RegistReceiverzone5HvacDeviceNormal();
        
        // request subscribe
        auto subscribe = m_interface->zone5HvacDeviceNormal.Subscribe(1);
        if (subscribe.HasValue())
        {
            m_logger.LogVerbose() << "RPort_Zone5_HVAC::Subscribezone5HvacDeviceNormal::Subscribed";
        }
        else
        {
            m_logger.LogError() << "RPort_Zone5_HVAC::Subscribezone5HvacDeviceNormal::" << subscribe.Error().Message();
        }
    }
}
 
void RPort_Zone5_HVAC::StopSubscribezone5HvacDeviceNormal()
{
    if (m_found)
    {
        // request stop subscribe
        m_interface->zone5HvacDeviceNormal.Unsubscribe();
        m_logger.LogVerbose() << "RPort_Zone5_HVAC::StopSubscribezone5HvacDeviceNormal::Unsubscribed";
    }
}
 
void RPort_Zone5_HVAC::RegistReceiverzone5HvacDeviceNormal()
{
    if (m_found)
    {
        // set callback
        auto receiver = [this]() -> void {
            return ReceiveFieldzone5HvacDeviceNormalTriggered();
        };
        
        // regist callback
        auto callback = m_interface->zone5HvacDeviceNormal.SetReceiveHandler(receiver);
        if (callback.HasValue())
        {
            m_logger.LogVerbose() << "RPort_Zone5_HVAC::RegistReceiverzone5HvacDeviceNormal::SetReceiveHandler";
        }
        else
        {
            m_logger.LogError() << "RPort_Zone5_HVAC::RegistReceiverzone5HvacDeviceNormal::SetReceiveHandler::" << callback.Error().Message();
        }
    }
}
 
void RPort_Zone5_HVAC::ReceiveFieldzone5HvacDeviceNormalTriggered()
{
    if (m_found)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_interface->zone5HvacDeviceNormal.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
        {
            auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->zone5HvacDeviceNormal.GetNewSamples([&](auto samplePtr) {
                RPort_Zone5_HVAC::ReadValuezone5HvacDeviceNormal(std::move(samplePtr));
            }));
            if (recv->HasValue())
            {
                m_logger.LogVerbose() << "RPort_Zone5_HVAC::ReceiveFieldzone5HvacDeviceNormal::GetNewSamples::" << recv->Value();
            }
            else
            {
                m_logger.LogError() << "RPort_Zone5_HVAC::ReceiveFieldzone5HvacDeviceNormal::GetNewSamples::" << recv->Error().Message();
            }
        }
    }
}
 
void RPort_Zone5_HVAC::ReceiveFieldzone5HvacDeviceNormalCyclic()
{
    while (m_running)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_found)
        {
            if (m_interface->zone5HvacDeviceNormal.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
            {
                auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->zone5HvacDeviceNormal.GetNewSamples([&](auto samplePtr) {
                    RPort_Zone5_HVAC::ReadValuezone5HvacDeviceNormal(std::move(samplePtr));
                }));
                if (recv->HasValue())
                {
                    m_logger.LogVerbose() << "RPort_Zone5_HVAC::ReceiveFieldzone5HvacDeviceNormal::GetNewSamples::" << recv->Value();
                }
                else
                {
                    m_logger.LogError() << "RPort_Zone5_HVAC::ReceiveFieldzone5HvacDeviceNormal::GetNewSamples::" << recv->Error().Message();
                }
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void RPort_Zone5_HVAC::ReadValuezone5HvacDeviceNormal(ara::com::SamplePtr<zone5::hvac::control::proxy::fields::zone5HvacDeviceNormal::FieldType const> samplePtr)
{
    auto value = *samplePtr.Get();
    if (m_receiverzone5HvacDeviceNormal)
    {
        m_receiverzone5HvacDeviceNormal(value);
    }
}
 
void RPort_Zone5_HVAC::RegistFieldHandlerzone5HvacDeviceNormal(std::function<void(const zone5::hvac::control::proxy::fields::zone5HvacDeviceNormal::FieldType&)> handler)
{
    m_receiverzone5HvacDeviceNormal = handler;
}
 
void RPort_Zone5_HVAC::Getzone5HvacDeviceNormal()
{
    if (m_found)
    {
        auto request = m_interface->zone5HvacDeviceNormal.Get();
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "RPort_Zone5_HVAC::Getzone5HvacDeviceNormal::Responded";
            
            auto result = response.Value();
            if (m_receiverzone5HvacDeviceNormal)
            {
                m_receiverzone5HvacDeviceNormal(result);
            }
        }
        else
        {
            m_logger.LogError() << "RPort_Zone5_HVAC::Getzone5HvacDeviceNormal::" << response.Error().Message();
        }
    }
}
 
void RPort_Zone5_HVAC::Subscribezone5HvacSetting()
{
    if (m_found)
    {
        // regist receiver handler
        // if you want to enable it, please uncomment below code
        // RegistReceiverzone5HvacSetting();
        
        // request subscribe
        auto subscribe = m_interface->zone5HvacSetting.Subscribe(1);
        if (subscribe.HasValue())
        {
            m_logger.LogVerbose() << "RPort_Zone5_HVAC::Subscribezone5HvacSetting::Subscribed";
        }
        else
        {
            m_logger.LogError() << "RPort_Zone5_HVAC::Subscribezone5HvacSetting::" << subscribe.Error().Message();
        }
    }
}
 
void RPort_Zone5_HVAC::StopSubscribezone5HvacSetting()
{
    if (m_found)
    {
        // request stop subscribe
        m_interface->zone5HvacSetting.Unsubscribe();
        m_logger.LogVerbose() << "RPort_Zone5_HVAC::StopSubscribezone5HvacSetting::Unsubscribed";
    }
}
 
void RPort_Zone5_HVAC::RegistReceiverzone5HvacSetting()
{
    if (m_found)
    {
        // set callback
        auto receiver = [this]() -> void {
            return ReceiveFieldzone5HvacSettingTriggered();
        };
        
        // regist callback
        auto callback = m_interface->zone5HvacSetting.SetReceiveHandler(receiver);
        if (callback.HasValue())
        {
            m_logger.LogVerbose() << "RPort_Zone5_HVAC::RegistReceiverzone5HvacSetting::SetReceiveHandler";
        }
        else
        {
            m_logger.LogError() << "RPort_Zone5_HVAC::RegistReceiverzone5HvacSetting::SetReceiveHandler::" << callback.Error().Message();
        }
    }
}
 
void RPort_Zone5_HVAC::ReceiveFieldzone5HvacSettingTriggered()
{
    if (m_found)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_interface->zone5HvacSetting.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
        {
            auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->zone5HvacSetting.GetNewSamples([&](auto samplePtr) {
                RPort_Zone5_HVAC::ReadValuezone5HvacSetting(std::move(samplePtr));
            }));
            if (recv->HasValue())
            {
                m_logger.LogVerbose() << "RPort_Zone5_HVAC::ReceiveFieldzone5HvacSetting::GetNewSamples::" << recv->Value();
            }
            else
            {
                m_logger.LogError() << "RPort_Zone5_HVAC::ReceiveFieldzone5HvacSetting::GetNewSamples::" << recv->Error().Message();
            }
        }
    }
}
 
void RPort_Zone5_HVAC::ReceiveFieldzone5HvacSettingCyclic()
{
    while (m_running)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_found)
        {
            if (m_interface->zone5HvacSetting.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
            {
                auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->zone5HvacSetting.GetNewSamples([&](auto samplePtr) {
                    RPort_Zone5_HVAC::ReadValuezone5HvacSetting(std::move(samplePtr));
                }));
                if (recv->HasValue())
                {
                    m_logger.LogVerbose() << "RPort_Zone5_HVAC::ReceiveFieldzone5HvacSetting::GetNewSamples::" << recv->Value();
                }
                else
                {
                    m_logger.LogError() << "RPort_Zone5_HVAC::ReceiveFieldzone5HvacSetting::GetNewSamples::" << recv->Error().Message();
                }
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void RPort_Zone5_HVAC::ReadValuezone5HvacSetting(ara::com::SamplePtr<zone5::hvac::control::proxy::fields::zone5HvacSetting::FieldType const> samplePtr)
{
    auto value = *samplePtr.Get();
    if (m_receiverzone5HvacSetting)
    {
        m_receiverzone5HvacSetting(value);
    }
}
 
void RPort_Zone5_HVAC::RegistFieldHandlerzone5HvacSetting(std::function<void(const zone5::hvac::control::proxy::fields::zone5HvacSetting::FieldType&)> handler)
{
    m_receiverzone5HvacSetting = handler;
}
 
void RPort_Zone5_HVAC::Getzone5HvacSetting()
{
    if (m_found)
    {
        auto request = m_interface->zone5HvacSetting.Get();
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "RPort_Zone5_HVAC::Getzone5HvacSetting::Responded";
            
            auto result = response.Value();
            if (m_receiverzone5HvacSetting)
            {
                m_receiverzone5HvacSetting(result);
            }
        }
        else
        {
            m_logger.LogError() << "RPort_Zone5_HVAC::Getzone5HvacSetting::" << response.Error().Message();
        }
    }
}
 
void RPort_Zone5_HVAC::Subscribezone5HvacStatus()
{
    if (m_found)
    {
        // regist receiver handler
        // if you want to enable it, please uncomment below code
        // RegistReceiverzone5HvacStatus();
        
        // request subscribe
        auto subscribe = m_interface->zone5HvacStatus.Subscribe(1);
        if (subscribe.HasValue())
        {
            m_logger.LogVerbose() << "RPort_Zone5_HVAC::Subscribezone5HvacStatus::Subscribed";
        }
        else
        {
            m_logger.LogError() << "RPort_Zone5_HVAC::Subscribezone5HvacStatus::" << subscribe.Error().Message();
        }
    }
}
 
void RPort_Zone5_HVAC::StopSubscribezone5HvacStatus()
{
    if (m_found)
    {
        // request stop subscribe
        m_interface->zone5HvacStatus.Unsubscribe();
        m_logger.LogVerbose() << "RPort_Zone5_HVAC::StopSubscribezone5HvacStatus::Unsubscribed";
    }
}
 
void RPort_Zone5_HVAC::RegistReceiverzone5HvacStatus()
{
    if (m_found)
    {
        // set callback
        auto receiver = [this]() -> void {
            return ReceiveFieldzone5HvacStatusTriggered();
        };
        
        // regist callback
        auto callback = m_interface->zone5HvacStatus.SetReceiveHandler(receiver);
        if (callback.HasValue())
        {
            m_logger.LogVerbose() << "RPort_Zone5_HVAC::RegistReceiverzone5HvacStatus::SetReceiveHandler";
        }
        else
        {
            m_logger.LogError() << "RPort_Zone5_HVAC::RegistReceiverzone5HvacStatus::SetReceiveHandler::" << callback.Error().Message();
        }
    }
}
 
void RPort_Zone5_HVAC::ReceiveFieldzone5HvacStatusTriggered()
{
    if (m_found)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_interface->zone5HvacStatus.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
        {
            auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->zone5HvacStatus.GetNewSamples([&](auto samplePtr) {
                RPort_Zone5_HVAC::ReadValuezone5HvacStatus(std::move(samplePtr));
            }));
            if (recv->HasValue())
            {
                m_logger.LogVerbose() << "RPort_Zone5_HVAC::ReceiveFieldzone5HvacStatus::GetNewSamples::" << recv->Value();
            }
            else
            {
                m_logger.LogError() << "RPort_Zone5_HVAC::ReceiveFieldzone5HvacStatus::GetNewSamples::" << recv->Error().Message();
            }
        }
    }
}
 
void RPort_Zone5_HVAC::ReceiveFieldzone5HvacStatusCyclic()
{
    while (m_running)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_found)
        {
            if (m_interface->zone5HvacStatus.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
            {
                auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->zone5HvacStatus.GetNewSamples([&](auto samplePtr) {
                    RPort_Zone5_HVAC::ReadValuezone5HvacStatus(std::move(samplePtr));
                }));
                if (recv->HasValue())
                {
                    m_logger.LogVerbose() << "RPort_Zone5_HVAC::ReceiveFieldzone5HvacStatus::GetNewSamples::" << recv->Value();
                }
                else
                {
                    m_logger.LogError() << "RPort_Zone5_HVAC::ReceiveFieldzone5HvacStatus::GetNewSamples::" << recv->Error().Message();
                }
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void RPort_Zone5_HVAC::ReadValuezone5HvacStatus(ara::com::SamplePtr<zone5::hvac::control::proxy::fields::zone5HvacStatus::FieldType const> samplePtr)
{
    auto value = *samplePtr.Get();
    if (m_receiverzone5HvacStatus)
    {
        m_receiverzone5HvacStatus(value);
    }
}
 
void RPort_Zone5_HVAC::RegistFieldHandlerzone5HvacStatus(std::function<void(const zone5::hvac::control::proxy::fields::zone5HvacStatus::FieldType&)> handler)
{
    m_receiverzone5HvacStatus = handler;
}
 
void RPort_Zone5_HVAC::Getzone5HvacStatus()
{
    if (m_found)
    {
        auto request = m_interface->zone5HvacStatus.Get();
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "RPort_Zone5_HVAC::Getzone5HvacStatus::Responded";
            
            auto result = response.Value();
            if (m_receiverzone5HvacStatus)
            {
                m_receiverzone5HvacStatus(result);
            }
        }
        else
        {
            m_logger.LogError() << "RPort_Zone5_HVAC::Getzone5HvacStatus::" << response.Error().Message();
        }
    }
}
 
void RPort_Zone5_HVAC::Subscribezone5HvacTemps()
{
    if (m_found)
    {
        // regist receiver handler
        // if you want to enable it, please uncomment below code
        // RegistReceiverzone5HvacTemps();
        
        // request subscribe
        auto subscribe = m_interface->zone5HvacTemps.Subscribe(1);
        if (subscribe.HasValue())
        {
            m_logger.LogVerbose() << "RPort_Zone5_HVAC::Subscribezone5HvacTemps::Subscribed";
        }
        else
        {
            m_logger.LogError() << "RPort_Zone5_HVAC::Subscribezone5HvacTemps::" << subscribe.Error().Message();
        }
    }
}
 
void RPort_Zone5_HVAC::StopSubscribezone5HvacTemps()
{
    if (m_found)
    {
        // request stop subscribe
        m_interface->zone5HvacTemps.Unsubscribe();
        m_logger.LogVerbose() << "RPort_Zone5_HVAC::StopSubscribezone5HvacTemps::Unsubscribed";
    }
}
 
void RPort_Zone5_HVAC::RegistReceiverzone5HvacTemps()
{
    if (m_found)
    {
        // set callback
        auto receiver = [this]() -> void {
            return ReceiveFieldzone5HvacTempsTriggered();
        };
        
        // regist callback
        auto callback = m_interface->zone5HvacTemps.SetReceiveHandler(receiver);
        if (callback.HasValue())
        {
            m_logger.LogVerbose() << "RPort_Zone5_HVAC::RegistReceiverzone5HvacTemps::SetReceiveHandler";
        }
        else
        {
            m_logger.LogError() << "RPort_Zone5_HVAC::RegistReceiverzone5HvacTemps::SetReceiveHandler::" << callback.Error().Message();
        }
    }
}
 
void RPort_Zone5_HVAC::ReceiveFieldzone5HvacTempsTriggered()
{
    if (m_found)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_interface->zone5HvacTemps.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
        {
            auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->zone5HvacTemps.GetNewSamples([&](auto samplePtr) {
                RPort_Zone5_HVAC::ReadValuezone5HvacTemps(std::move(samplePtr));
            }));
            if (recv->HasValue())
            {
                m_logger.LogVerbose() << "RPort_Zone5_HVAC::ReceiveFieldzone5HvacTemps::GetNewSamples::" << recv->Value();
            }
            else
            {
                m_logger.LogError() << "RPort_Zone5_HVAC::ReceiveFieldzone5HvacTemps::GetNewSamples::" << recv->Error().Message();
            }
        }
    }
}
 
void RPort_Zone5_HVAC::ReceiveFieldzone5HvacTempsCyclic()
{
    while (m_running)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_found)
        {
            if (m_interface->zone5HvacTemps.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
            {
                auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->zone5HvacTemps.GetNewSamples([&](auto samplePtr) {
                    RPort_Zone5_HVAC::ReadValuezone5HvacTemps(std::move(samplePtr));
                }));
                if (recv->HasValue())
                {
                    m_logger.LogVerbose() << "RPort_Zone5_HVAC::ReceiveFieldzone5HvacTemps::GetNewSamples::" << recv->Value();
                }
                else
                {
                    m_logger.LogError() << "RPort_Zone5_HVAC::ReceiveFieldzone5HvacTemps::GetNewSamples::" << recv->Error().Message();
                }
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void RPort_Zone5_HVAC::ReadValuezone5HvacTemps(ara::com::SamplePtr<zone5::hvac::control::proxy::fields::zone5HvacTemps::FieldType const> samplePtr)
{
    auto value = *samplePtr.Get();
    if (m_receiverzone5HvacTemps)
    {
        m_receiverzone5HvacTemps(value);
    }
}
 
void RPort_Zone5_HVAC::RegistFieldHandlerzone5HvacTemps(std::function<void(const zone5::hvac::control::proxy::fields::zone5HvacTemps::FieldType&)> handler)
{
    m_receiverzone5HvacTemps = handler;
}
 
void RPort_Zone5_HVAC::Getzone5HvacTemps()
{
    if (m_found)
    {
        auto request = m_interface->zone5HvacTemps.Get();
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "RPort_Zone5_HVAC::Getzone5HvacTemps::Responded";
            
            auto result = response.Value();
            if (m_receiverzone5HvacTemps)
            {
                m_receiverzone5HvacTemps(result);
            }
        }
        else
        {
            m_logger.LogError() << "RPort_Zone5_HVAC::Getzone5HvacTemps::" << response.Error().Message();
        }
    }
}
 
void RPort_Zone5_HVAC::RequestSetAcOnOff(const std::uint8_t& on)
{
    if (m_found)
    {
        m_interface->SetAcOnOff(on);
    }
}
 
void RPort_Zone5_HVAC::RequestSetAirSource(const std::uint8_t& src)
{
    if (m_found)
    {
        m_interface->SetAirSource(src);
    }
}
 
void RPort_Zone5_HVAC::RequestSetAutoTemp(const std::uint8_t& on)
{
    if (m_found)
    {
        m_interface->SetAutoTemp(on);
    }
}
 
void RPort_Zone5_HVAC::RequestSetBackwardDefrostOn(const std::uint8_t& on)
{
    if (m_found)
    {
        m_interface->SetBackwardDefrostOn(on);
    }
}
 
void RPort_Zone5_HVAC::RequestSetBlowingDirection(const std::uint8_t& dir)
{
    if (m_found)
    {
        m_interface->SetBlowingDirection(dir);
    }
}
 
void RPort_Zone5_HVAC::RequestSetBlowingForce(const std::uint8_t& force)
{
    if (m_found)
    {
        m_interface->SetBlowingForce(force);
    }
}
 
void RPort_Zone5_HVAC::RequestSetDriverTemp(const std::int8_t& temporature)
{
    if (m_found)
    {
        m_interface->SetDriverTemp(temporature);
    }
}
 
void RPort_Zone5_HVAC::RequestSetForwardDefrostOn(const std::uint8_t& on)
{
    if (m_found)
    {
        m_interface->SetForwardDefrostOn(on);
    }
}
 
void RPort_Zone5_HVAC::RequestSetHvacPower(const std::uint8_t& on)
{
    if (m_found)
    {
        m_interface->SetHvacPower(on);
    }
}
 
void RPort_Zone5_HVAC::RequestSetPassengerTemp(const std::int8_t& temporature)
{
    if (m_found)
    {
        m_interface->SetPassengerTemp(temporature);
    }
}
 
void RPort_Zone5_HVAC::RequestSetSync(const bool& on)
{
    if (m_found)
    {
        m_interface->SetSync(on);
    }
}
 
} /// namespace port
} /// namespace aa
} /// namespace soa_hvac
 
/// EOF