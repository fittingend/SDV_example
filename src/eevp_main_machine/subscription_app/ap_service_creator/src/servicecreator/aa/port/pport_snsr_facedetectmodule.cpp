///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : pport_snsr_facedetectmodule.cpp
/// SOFTWARE COMPONENT NAME           : PPort_Snsr_FaceDetectModule
/// GENERATED DATE                    : 2025-08-20 13:31:41
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "servicecreator/aa/port/pport_snsr_facedetectmodule.h"
 
namespace eevp
{
namespace simulation
{
namespace skeleton
{
 
Snsr_FaceDetectModuleSkeletonImpl::Snsr_FaceDetectModuleSkeletonImpl(ara::core::InstanceSpecifier instanceSpec, ara::com::MethodCallProcessingMode mode)
    : Snsr_FaceDetectModuleSkeleton(instanceSpec, mode)
    , m_logger(ara::log::CreateLogger("SVCT", "PORT", ara::log::LogLevel::kVerbose))
{
}
 
ara::core::Future<Snsr_FaceDetectModuleSkeleton::getEmotionOutput> Snsr_FaceDetectModuleSkeletonImpl::getEmotion()
{
    m_logger.LogVerbose() << "PPort_Snsr_FaceDetectModule::getEmotion::Requested";
    
    getEmotionOutput response;
    ara::core::Promise<getEmotionOutput> promise;
    
    // put your logic
    
    promise.set_value(response);
    return promise.get_future();
}
 
ara::core::Future<Snsr_FaceDetectModuleSkeleton::isRunningOutput> Snsr_FaceDetectModuleSkeletonImpl::isRunning()
{
    m_logger.LogVerbose() << "PPort_Snsr_FaceDetectModule::isRunning::Requested";
    
    isRunningOutput response;
    ara::core::Promise<isRunningOutput> promise;
    
    // put your logic
    
    promise.set_value(response);
    return promise.get_future();
}
 
ara::core::Future<Snsr_FaceDetectModuleSkeleton::turnOffOutput> Snsr_FaceDetectModuleSkeletonImpl::turnOff()
{
    m_logger.LogVerbose() << "PPort_Snsr_FaceDetectModule::turnOff::Requested";
    
    turnOffOutput response;
    ara::core::Promise<turnOffOutput> promise;
    
    // put your logic
    
    promise.set_value(response);
    return promise.get_future();
}
 
ara::core::Future<Snsr_FaceDetectModuleSkeleton::turnOnOutput> Snsr_FaceDetectModuleSkeletonImpl::turnOn()
{
    m_logger.LogVerbose() << "PPort_Snsr_FaceDetectModule::turnOn::Requested";
    
    turnOnOutput response;
    ara::core::Promise<turnOnOutput> promise;
    
    // put your logic
    
    promise.set_value(response);
    return promise.get_future();
}
 
} /// namespace skeleton
} /// namespace simulation
} /// namespace eevp

namespace servicecreator
{
namespace aa
{
namespace port
{
 
PPort_Snsr_FaceDetectModule::PPort_Snsr_FaceDetectModule()
    : m_logger(ara::log::CreateLogger("SVCT", "PORT", ara::log::LogLevel::kVerbose))
    , m_running{false}
{
}
 
PPort_Snsr_FaceDetectModule::~PPort_Snsr_FaceDetectModule()
{
}
 
void PPort_Snsr_FaceDetectModule::Start()
{
    m_logger.LogVerbose() << "PPort_Snsr_FaceDetectModule::Start";
    
    // construct skeleton
    ara::core::InstanceSpecifier specifier{"ServiceCreator/AA/PPort_Snsr_FaceDetectModule"};
    m_interface = std::make_unique<eevp::simulation::skeleton::Snsr_FaceDetectModuleSkeletonImpl>(specifier);
    
    // offer service
    auto offer = m_interface->OfferService();
    if (offer.HasValue())
    {
        m_running = true;
        m_logger.LogVerbose() << "PPort_Snsr_FaceDetectModule::Start::OfferService";
    }
    else
    {
        m_running = false;
        m_logger.LogError() << "PPort_Snsr_FaceDetectModule::Start::OfferService::" << offer.Error().Message();
    }
}
 
void PPort_Snsr_FaceDetectModule::Terminate()
{
    m_logger.LogVerbose() << "PPort_Snsr_FaceDetectModule::Terminate";
    
    // stop port
    m_running = false;
    
    // stop offer service
    m_interface->StopOfferService();
    m_logger.LogVerbose() << "PPort_Snsr_FaceDetectModule::Terminate::StopOfferService";
}
 
} /// namespace port
} /// namespace aa
} /// namespace servicecreator
 
/// EOF