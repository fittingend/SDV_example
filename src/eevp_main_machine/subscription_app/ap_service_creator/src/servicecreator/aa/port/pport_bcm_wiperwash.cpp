///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : pport_bcm_wiperwash.cpp
/// SOFTWARE COMPONENT NAME           : PPort_BCM_WiperWash
/// GENERATED DATE                    : 2025-08-20 13:31:41
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "servicecreator/aa/port/pport_bcm_wiperwash.h"
 
namespace eevp
{
namespace simulation
{
namespace skeleton
{
 
BCM_WiperWashSkeletonImpl::BCM_WiperWashSkeletonImpl(ara::core::InstanceSpecifier instanceSpec, ara::com::MethodCallProcessingMode mode)
    : BCM_WiperWashSkeleton(instanceSpec, mode)
    , m_logger(ara::log::CreateLogger("SVCT", "PORT", ara::log::LogLevel::kVerbose))
    , m_wiperInterval{0U}
    , m_wiperLevel{eevp::simulation::BCM_WipingLevel::LOW}
{
    // regist get handler, wiperInterval
    auto wiperinterval_get_handler = [this]() {
        return GetwiperInterval();
    };
    wiperInterval.RegisterGetHandler(wiperinterval_get_handler);
    
    // regist get handler, wiperLevel
    auto wiperlevel_get_handler = [this]() {
        return GetwiperLevel();
    };
    wiperLevel.RegisterGetHandler(wiperlevel_get_handler);
}
 
ara::core::Future<BCM_WiperWashSkeleton::setWipingIntervalOutput> BCM_WiperWashSkeletonImpl::setWipingInterval(const std::uint16_t& wipingInterval)
{
    m_logger.LogVerbose() << "PPort_BCM_WiperWash::setWipingInterval::Requested";
    
    setWipingIntervalOutput response;
    ara::core::Promise<setWipingIntervalOutput> promise;
    
    // put your logic
    
    promise.set_value(response);
    return promise.get_future();
}
 
ara::core::Future<BCM_WiperWashSkeleton::setWipingLevelOutput> BCM_WiperWashSkeletonImpl::setWipingLevel(const eevp::simulation::BCM_WipingLevel& wipingLevel)
{
    m_logger.LogVerbose() << "PPort_BCM_WiperWash::setWipingLevel::Requested";
    
    setWipingLevelOutput response;
    ara::core::Promise<setWipingLevelOutput> promise;
    
    // put your logic
    
    promise.set_value(response);
    return promise.get_future();
}
 
ara::core::Future<BCM_WiperWashSkeleton::startWipingOutput> BCM_WiperWashSkeletonImpl::startWiping()
{
    m_logger.LogVerbose() << "PPort_BCM_WiperWash::startWiping::Requested";
    
    startWipingOutput response;
    ara::core::Promise<startWipingOutput> promise;
    
    // put your logic
    
    promise.set_value(response);
    return promise.get_future();
}
 
ara::core::Future<BCM_WiperWashSkeleton::stopWipingOutput> BCM_WiperWashSkeletonImpl::stopWiping()
{
    m_logger.LogVerbose() << "PPort_BCM_WiperWash::stopWiping::Requested";
    
    stopWipingOutput response;
    ara::core::Promise<stopWipingOutput> promise;
    
    // put your logic
    
    promise.set_value(response);
    return promise.get_future();
}
 
ara::core::Future<fields::wiperInterval::FieldType> BCM_WiperWashSkeletonImpl::GetwiperInterval()
{
    m_logger.LogVerbose() << "PPort_BCM_WiperWash::GetwiperInterval::Requested";
    
    ara::core::Promise<fields::wiperInterval::FieldType> promise;
    
    promise.set_value(m_wiperInterval);
    return promise.get_future();
}
 
void BCM_WiperWashSkeletonImpl::NotifywiperInterval()
{
    auto notify = wiperInterval.Update(m_wiperInterval);
    if (notify.HasValue())
    {
        m_logger.LogVerbose() << "PPort_BCM_WiperWash::NotifywiperInterval::Update";
    }
    else
    {
        m_logger.LogError() << "PPort_BCM_WiperWash::NotifywiperInterval::Update::" << notify.Error().Message();
    }
}
 
void BCM_WiperWashSkeletonImpl::UpdatewiperInterval(const fields::wiperInterval::FieldType& value)
{
    m_wiperInterval = value;
}
 
ara::core::Future<fields::wiperLevel::FieldType> BCM_WiperWashSkeletonImpl::GetwiperLevel()
{
    m_logger.LogVerbose() << "PPort_BCM_WiperWash::GetwiperLevel::Requested";
    
    ara::core::Promise<fields::wiperLevel::FieldType> promise;
    
    promise.set_value(m_wiperLevel);
    return promise.get_future();
}
 
void BCM_WiperWashSkeletonImpl::NotifywiperLevel()
{
    auto notify = wiperLevel.Update(m_wiperLevel);
    if (notify.HasValue())
    {
        m_logger.LogVerbose() << "PPort_BCM_WiperWash::NotifywiperLevel::Update";
    }
    else
    {
        m_logger.LogError() << "PPort_BCM_WiperWash::NotifywiperLevel::Update::" << notify.Error().Message();
    }
}
 
void BCM_WiperWashSkeletonImpl::UpdatewiperLevel(const fields::wiperLevel::FieldType& value)
{
    m_wiperLevel = value;
}
 
} /// namespace skeleton
} /// namespace simulation
} /// namespace eevp

namespace servicecreator
{
namespace aa
{
namespace port
{
 
PPort_BCM_WiperWash::PPort_BCM_WiperWash()
    : m_logger(ara::log::CreateLogger("SVCT", "PORT", ara::log::LogLevel::kVerbose))
    , m_running{false}
{
}
 
PPort_BCM_WiperWash::~PPort_BCM_WiperWash()
{
}
 
void PPort_BCM_WiperWash::Start()
{
    m_logger.LogVerbose() << "PPort_BCM_WiperWash::Start";
    
    // construct skeleton
    ara::core::InstanceSpecifier specifier{"ServiceCreator/AA/PPort_BCM_WiperWash"};
    m_interface = std::make_unique<eevp::simulation::skeleton::BCM_WiperWashSkeletonImpl>(specifier);
    
    // offer service
    auto offer = m_interface->OfferService();
    if (offer.HasValue())
    {
        m_running = true;
        m_logger.LogVerbose() << "PPort_BCM_WiperWash::Start::OfferService";
    }
    else
    {
        m_running = false;
        m_logger.LogError() << "PPort_BCM_WiperWash::Start::OfferService::" << offer.Error().Message();
    }
}
 
void PPort_BCM_WiperWash::Terminate()
{
    m_logger.LogVerbose() << "PPort_BCM_WiperWash::Terminate";
    
    // stop port
    m_running = false;
    
    // stop offer service
    m_interface->StopOfferService();
    m_logger.LogVerbose() << "PPort_BCM_WiperWash::Terminate::StopOfferService";
}
 
void PPort_BCM_WiperWash::WriteValuewiperInterval(const eevp::simulation::skeleton::fields::wiperInterval::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdatewiperInterval(value);
}
 
void PPort_BCM_WiperWash::NotifyFieldwiperIntervalCyclic()
{
    while (m_running)
    {
        {
            std::lock_guard<std::mutex> lock(m_mutex);
            
            m_interface->NotifywiperInterval();
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void PPort_BCM_WiperWash::NotifyFieldwiperIntervalTriggered()
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->NotifywiperInterval();
}
 
void PPort_BCM_WiperWash::NotifyFieldwiperIntervalTriggered(const eevp::simulation::skeleton::fields::wiperInterval::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdatewiperInterval(value);
    m_interface->NotifywiperInterval();
}
 
void PPort_BCM_WiperWash::WriteValuewiperLevel(const eevp::simulation::skeleton::fields::wiperLevel::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdatewiperLevel(value);
}
 
void PPort_BCM_WiperWash::NotifyFieldwiperLevelCyclic()
{
    while (m_running)
    {
        {
            std::lock_guard<std::mutex> lock(m_mutex);
            
            m_interface->NotifywiperLevel();
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void PPort_BCM_WiperWash::NotifyFieldwiperLevelTriggered()
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->NotifywiperLevel();
}
 
void PPort_BCM_WiperWash::NotifyFieldwiperLevelTriggered(const eevp::simulation::skeleton::fields::wiperLevel::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    
    m_interface->UpdatewiperLevel(value);
    m_interface->NotifywiperLevel();
}
 
} /// namespace port
} /// namespace aa
} /// namespace servicecreator
 
/// EOF