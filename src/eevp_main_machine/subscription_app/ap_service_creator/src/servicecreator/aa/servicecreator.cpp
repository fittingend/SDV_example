///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : servicecreator.cpp
/// SOFTWARE COMPONENT NAME           : ServiceCreator
/// GENERATED DATE                    : 2025-08-20 13:31:41
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// INCLUSION HEADER FILES
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "servicecreator/aa/servicecreator.h"
 
namespace servicecreator
{
namespace aa
{
 
ServiceCreator::ServiceCreator()
    : m_logger(ara::log::CreateLogger("SVCT", "SWC", ara::log::LogLevel::kVerbose))
    , m_running{false}
    , m_workers(2)
{
}
 
ServiceCreator::~ServiceCreator()
{
}
 
bool ServiceCreator::Initialize()
{
    m_logger.LogInfo() << "ServiceCreator::Initialize";
    
    bool init = true;
    
    // m_PPort_BCM_WiperWash = std::make_unique<servicecreator::aa::port::PPort_BCM_WiperWash>();
    // m_PPort_Ctrl_MoodLamp = std::make_unique<servicecreator::aa::port::PPort_Ctrl_MoodLamp>();
    // m_PPort_Ctrl_RearCurtain = std::make_unique<servicecreator::aa::port::PPort_Ctrl_RearCurtain>();
    // m_PPort_Snsr_FaceDetectModule = std::make_unique<servicecreator::aa::port::PPort_Snsr_FaceDetectModule>();
    // m_PPort_Snsr_HeartBeat = std::make_unique<servicecreator::aa::port::PPort_Snsr_HeartBeat>();
    // m_PPort_Snsr_USS = std::make_unique<servicecreator::aa::port::PPort_Snsr_USS>();
    // m_PPort_TMS_AC = std::make_unique<servicecreator::aa::port::PPort_TMS_AC>();
    // m_PPort_TMS_EnvMonitor = std::make_unique<servicecreator::aa::port::PPort_TMS_EnvMonitor>();
    // m_PPort_TMS_Fragrance = std::make_unique<servicecreator::aa::port::PPort_TMS_Fragrance>();
    // m_PPort_TMS_Purifier = std::make_unique<servicecreator::aa::port::PPort_TMS_Purifier>();
    // m_PPort_TMS_Ventilation = std::make_unique<servicecreator::aa::port::PPort_TMS_Ventilation>();
    // m_PPort_VCS_AccrPedal = std::make_unique<servicecreator::aa::port::PPort_VCS_AccrPedal>();
    m_PPort_VCS_Brake = std::make_unique<servicecreator::aa::port::PPort_VCS_Brake>();
    m_PPort_VCS_BrakePedal = std::make_unique<servicecreator::aa::port::PPort_VCS_BrakePedal>();
    // m_PPort_VCS_EPB = std::make_unique<servicecreator::aa::port::PPort_VCS_EPB>();
    m_PPort_VCS_Gear = std::make_unique<servicecreator::aa::port::PPort_VCS_Gear>();
    m_PPort_VCS_VehSpd = std::make_unique<servicecreator::aa::port::PPort_VCS_VehSpd>();
    
    // put your code for initialization
    
    return init;
}
 
void ServiceCreator::Start()
{
    m_logger.LogInfo() << "ServiceCreator::Start";
    
    // m_PPort_BCM_WiperWash->Start();
    // m_PPort_Ctrl_MoodLamp->Start();
    // m_PPort_Ctrl_RearCurtain->Start();
    // m_PPort_Snsr_FaceDetectModule->Start();
    // m_PPort_Snsr_HeartBeat->Start();
    // m_PPort_Snsr_USS->Start();
    // m_PPort_TMS_AC->Start();
    // m_PPort_TMS_EnvMonitor->Start();
    // m_PPort_TMS_Fragrance->Start();
    // m_PPort_TMS_Purifier->Start();
    // m_PPort_TMS_Ventilation->Start();
    // m_PPort_VCS_AccrPedal->Start();
    m_PPort_VCS_Brake->Start();
    m_PPort_VCS_BrakePedal->Start();
    // m_PPort_VCS_EPB->Start();
    m_PPort_VCS_Gear->Start();
    m_PPort_VCS_VehSpd->Start();
}
 
void ServiceCreator::Terminate()
{
    m_logger.LogInfo() << "ServiceCreator::Terminate";
    
    // stop running
    m_running = false;
    
    // m_PPort_BCM_WiperWash->Terminate();
    // m_PPort_Ctrl_MoodLamp->Terminate();
    // m_PPort_Ctrl_RearCurtain->Terminate();
    // m_PPort_Snsr_FaceDetectModule->Terminate();
    // m_PPort_Snsr_HeartBeat->Terminate();
    // m_PPort_Snsr_USS->Terminate();
    // m_PPort_TMS_AC->Terminate();
    // m_PPort_TMS_EnvMonitor->Terminate();
    // m_PPort_TMS_Fragrance->Terminate();
    // m_PPort_TMS_Purifier->Terminate();
    // m_PPort_TMS_Ventilation->Terminate();
    // m_PPort_VCS_AccrPedal->Terminate();
    m_PPort_VCS_Brake->Terminate();
    m_PPort_VCS_BrakePedal->Terminate();
    // m_PPort_VCS_EPB->Terminate();
    m_PPort_VCS_Gear->Terminate();
    m_PPort_VCS_VehSpd->Terminate();
}
 
void ServiceCreator::Run()
{
    m_logger.LogInfo() << "ServiceCreator::Run";
    
    // start running
    m_running = true;
    
    // m_workers.Async([this] { m_PPort_BCM_WiperWash->NotifyFieldwiperIntervalCyclic(); });
    // m_workers.Async([this] { m_PPort_BCM_WiperWash->NotifyFieldwiperLevelCyclic(); });
    
    m_workers.Wait();
}
 
} /// namespace aa
} /// namespace servicecreator
