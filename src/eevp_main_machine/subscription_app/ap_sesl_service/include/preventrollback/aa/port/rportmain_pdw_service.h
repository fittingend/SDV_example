///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : rportmain_pdw_service.h
/// SOFTWARE COMPONENT NAME           : RPortMain_PDW_Service
/// GENERATED DATE                    : 2025-08-30 13:10:16
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef PARA_AA_GEN_SOFTWARE_COMPONENT_RPORT_PREVENTROLLBACK_AA_RPORTMAIN_PDW_SERVICE_H
#define PARA_AA_GEN_SOFTWARE_COMPONENT_RPORT_PREVENTROLLBACK_AA_RPORTMAIN_PDW_SERVICE_H
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// INCLUSION HEADER FILES
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "eevp/pdw/service/main_pdw_service_proxy.h"
 
#include "ara/log/logger.h"
 
#include <mutex>
#include <thread>
 
namespace preventrollback
{
namespace aa
{
namespace port
{
 
class RPortMain_PDW_Service
{
public:
    /// @brief Constructor
    RPortMain_PDW_Service();
    
    /// @brief Destructor
    ~RPortMain_PDW_Service();
    
    /// @brief Start port
    void Start();
    
    /// @brief Terminate port
    void Terminate();
    
    /// @brief Subscribe event, DistanceLevel
    void SubscribeDistanceLevel();
     
    /// @brief Stop event subscription, DistanceLevel
    void StopSubscribeDistanceLevel();
     
    /// @brief Event receive handler, DistanceLevel
    void ReceiveEventDistanceLevelTriggered();
     
    /// @brief Event receive handler, DistanceLevel
    void ReceiveEventDistanceLevelCyclic();
     
    /// @brief Read event data, DistanceLevel
    void ReadDataDistanceLevel(ara::com::SamplePtr<eevp::pdw::service::proxy::events::DistanceLevel::SampleType const> samplePtr);
     
    /// @brief Regist callback from software component
    void RegistEventHandlerDistanceLevel(std::function<void(const eevp::pdw::service::proxy::events::DistanceLevel::SampleType&)> handler);
    
    /// @brief Subscribe field notification, UssStatus
    void SubscribeUssStatus();
     
    /// @brief Stop field subscription, UssStatus
    void StopSubscribeUssStatus();
     
    /// @brief Field notification receive handler, UssStatus
    void ReceiveFieldUssStatusTriggered();
     
    /// @brief Field notification receive handler, UssStatus
    void ReceiveFieldUssStatusCyclic();
     
    /// @brief Read field notification value, UssStatus
    void ReadValueUssStatus(ara::com::SamplePtr<eevp::pdw::service::proxy::fields::UssStatus::FieldType const> samplePtr);
     
    /// @brief Regist callback from software component
    void RegistFieldHandlerUssStatus(std::function<void(const eevp::pdw::service::proxy::fields::UssStatus::FieldType&)> handler);
    
    /// @brief Getter method using by software component, UssStatus
    void GetUssStatus();

private:
    /// @brief Callback for find service
    void Find(ara::com::ServiceHandleContainer<eevp::pdw::service::proxy::Main_PDW_ServiceProxy::HandleType> handles,
              ara::com::FindServiceHandle findHandle);
    
    /// @brief Callback for event receiver, DistanceLevel
    void RegistReceiverDistanceLevel();
    
    /// @brief Callback for field notification receiver, UssStatus
    void RegistReceiverUssStatus();
    
private:
    /// @brief Logger for this port
    ara::log::Logger& m_logger;
    
    /// @brief Flag of port status
    bool m_running;
    
    /// @brief Flag of find service status
    bool m_found;
    
    /// @brief Mutex for this port
    std::mutex m_mutex; 
    
    /// @brief AUTOSAR Port Interface
    std::unique_ptr<eevp::pdw::service::proxy::Main_PDW_ServiceProxy> m_interface;
    
    /// @brief Find service handle
    std::unique_ptr<ara::com::FindServiceHandle> m_findHandle;
    
    /// @brief Callback from software component, DistanceLevel
    std::function<void(const eevp::pdw::service::proxy::events::DistanceLevel::SampleType&)> m_receiverDistanceLevel;
    
    /// @brief Callback from software component, UssStatus
    std::function<void(const eevp::pdw::service::proxy::fields::UssStatus::FieldType&)> m_receiverUssStatus;
    
};
 
} /// namespace port
} /// namespace aa
} /// namespace preventrollback
 
#endif /// PARA_AA_GEN_SOFTWARE_COMPONENT_RPORT_PREVENTROLLBACK_AA_RPORTMAIN_PDW_SERVICE_H