///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : preventrollback.h
/// SOFTWARE COMPONENT NAME           : PreventRollback
/// GENERATED DATE                    : 2025-08-29 19:23:16
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef PARA_AA_GEN_SOFTWARE_COMPONENT_PREVENTROLLBACK_AA_H
#define PARA_AA_GEN_SOFTWARE_COMPONENT_PREVENTROLLBACK_AA_H
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// INCLUSION HEADER FILES
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "preventrollback/aa/port/rportaccrpedal.h"
#include "preventrollback/aa/port/rportbcm_exteriorsignal.h"
#include "preventrollback/aa/port/rportbrakepedal.h"
#include "preventrollback/aa/port/rportgear.h"
#include "preventrollback/aa/port/rportmain_pdw_service.h"
#include "preventrollback/aa/port/rportsoavehicleinfo.h"
#include "preventrollback/aa/port/rportsubscriptionmanagement.h"
 
#include "para/swc/port_pool.h"

#include <optional>
#include <atomic>
 
namespace preventrollback
{
namespace aa
{
 
class PreventRollback
{
public:
    /// @brief Constructor
    PreventRollback();
    
    /// @brief Destructor
    ~PreventRollback();
    
    /// @brief Initialize software component
    bool Initialize();
    
    /// @brief Start software component
    void Start();
    
    /// @brief Terminate software component
    void Terminate();
    
    /// @brief Run software component
    void Run();
    
private:
    /// @brief Running status of software component
    bool m_running;
    
    /// @brief Pool of port
    ::para::swc::PortPool m_workers;
    
    /// @brief Logger for software component
    ara::log::Logger& m_logger;
    
    /// @brief Instance of Port {PreventRollback.RPortAccrPedal}
    std::unique_ptr<preventrollback::aa::port::RPortAccrPedal> m_RPortAccrPedal;
    
    /// @brief Instance of Port {PreventRollback.RPortBCM_ExteriorSignal}
    std::unique_ptr<preventrollback::aa::port::RPortBCM_ExteriorSignal> m_RPortBCM_ExteriorSignal;
    
    /// @brief Instance of Port {PreventRollback.RPortBrakePedal}
    std::unique_ptr<preventrollback::aa::port::RPortBrakePedal> m_RPortBrakePedal;
    
    /// @brief Instance of Port {PreventRollback.RPortGear}
    std::unique_ptr<preventrollback::aa::port::RPortGear> m_RPortGear;
    
    /// @brief Instance of Port {PreventRollback.RPortMain_PDW_Service}
    std::unique_ptr<preventrollback::aa::port::RPortMain_PDW_Service> m_RPortMain_PDW_Service;
    
    /// @brief Instance of Port {PreventRollback.RPortSoaVehicleInfo}
    std::unique_ptr<preventrollback::aa::port::RPortSoaVehicleInfo> m_RPortSoaVehicleInfo;
    
    /// @brief Instance of Port {PreventRollback.RPortSubscriptionManagement}
    std::unique_ptr<preventrollback::aa::port::RPortSubscriptionManagement> m_RPortSubscriptionManagement;

    std::mutex mDataMutex;

    // PDW 방향별 최근 값/상태
    struct PdwSnapshot {
        uint8_t left{0};
        uint8_t right{0};
        uint8_t center{0};
        bool    valid{false};
    };
    PdwSnapshot mFrontDL;
    PdwSnapshot mRearDL;

    eevp::pdw::type::State mFrontUssState{eevp::pdw::type::State::NORMAL};
    eevp::pdw::type::State mRearUssState{eevp::pdw::type::State::NORMAL};

    // BCM 관찰 상태
    eevp::simulation::type::BCM_HornState      mHornState{eevp::simulation::type::BCM_HornState::OFF};
    eevp::simulation::type::BCM_HeadlightState mLightState{eevp::simulation::type::BCM_HeadlightState::OFF};

    // 평가 스냅샷(중복 로그 방지용)
    struct Decision {
        int frontRisk{-1};
        int rearRisk{-1};
    } mLastDecision;

    // 콜백(포트에서 호출)
    void onDistanceLevel(const eevp::pdw::service::proxy::events::DistanceLevel::SampleType& dl);
    void onUssStatus(const eevp::pdw::service::proxy::fields::UssStatus::FieldType& st);
    void onHorn(const eevp::simulation::proxy::fields::hornState::FieldType& v);
    void onLight(const eevp::simulation::proxy::fields::lightState::FieldType& v);

    // 평가 로직
    void evaluateDecisionsLocked(); // mDataMutex를 잡고 호출
    static int riskOf(uint8_t l, uint8_t r, uint8_t c);
    static const char* riskStr(int r);

    bool mSubscription{false};
    std::mutex mSubscriptionMutex;
    std::condition_variable mSubscriptionCv;

    static constexpr const char* kAppName = "PreventRollback";

    // 구독 이벤트/메서드 응답 처리
    void onNotifySubscriptionInfo(
        const eevp::subscription::service::proxy::events::notifySubscriptionInfo::SampleType& info);
    void onGetSubscriptionInfoResponse(
        const eevp::subscription::service::proxy::methods::getSubscriptionInfo::Output& out);

    // 초기 1회 조회 트리거
    void requestSubscriptionInfo();

};
 
} /// namespace aa
} /// namespace preventrollback
 
#endif /// PARA_AA_GEN_SOFTWARE_COMPONENT_PREVENTROLLBACK_AA_H