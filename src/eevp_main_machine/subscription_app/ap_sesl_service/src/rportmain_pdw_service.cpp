///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : rportmain_pdw_service.cpp
/// SOFTWARE COMPONENT NAME           : RPortMain_PDW_Service
/// GENERATED DATE                    : 2025-08-30 10:53:29
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "preventrollback/aa/port/rportmain_pdw_service.h"
 
namespace preventrollback
{
namespace aa
{
namespace port
{
 
RPortMain_PDW_Service::RPortMain_PDW_Service()
    : m_logger(ara::log::CreateLogger("PRRB", "PORT", ara::log::LogLevel::kVerbose))
    , m_running{false}
    , m_found{false}
    , m_receiverDistanceLevel{nullptr}
    , m_receiverUssStatus{nullptr}
{
}
 
RPortMain_PDW_Service::~RPortMain_PDW_Service()
{
}
 
void RPortMain_PDW_Service::Start()
{
    m_logger.LogVerbose() << "RPortMain_PDW_Service::Start";
    
    // regist callback
    ara::core::InstanceSpecifier specifier{"PreventRollback/AA/RPortMain_PDW_Service"};
    auto handler = [this](ara::com::ServiceHandleContainer<eevp::pdw::service::proxy::Main_PDW_ServiceProxy::HandleType> handles,
                          ara::com::FindServiceHandle findHandle) {
        this->Find(handles, findHandle);
    };
    
    // find service
    auto find = eevp::pdw::service::proxy::Main_PDW_ServiceProxy::StartFindService(handler, specifier);
    if (find.HasValue())
    {
        m_logger.LogVerbose() << "RPortMain_PDW_Service::Start::StartFindService";
    }
    else
    {
        m_logger.LogError() << "RPortMain_PDW_Service::Start::StartFindService::" << find.Error().Message();
    }
    
    // run port
    m_running = true;
}
 
void RPortMain_PDW_Service::Terminate()
{
    m_logger.LogVerbose() << "RPortMain_PDW_Service::Terminate";
    
    // stop port
    m_running = false;
    
    // clear service proxy
    if (m_interface)
    {
        // stop subscribe
        StopSubscribeDistanceLevel();
        StopSubscribeUssStatus();
        
        // stop find service
        m_interface->StopFindService(*m_findHandle);
        m_found = false;
        
        m_logger.LogVerbose() << "RPortMain_PDW_Service::Terminate::StopFindService";
    }
}
 
void RPortMain_PDW_Service::Find(ara::com::ServiceHandleContainer<eevp::pdw::service::proxy::Main_PDW_ServiceProxy::HandleType> handles, ara::com::FindServiceHandle findHandle)
{
    // check finding handles
    if (handles.empty())
    {
        m_logger.LogVerbose() << "RPortMain_PDW_Service::Find::Service Instances not found";
        return;
    }
    else
    {
        for (auto& handle : handles)
        {
            m_logger.LogVerbose() << "RPortMain_PDW_Service::Find::Searched Instance::ServiceId =" << 
                                     handle.GetServiceHandle().serviceId << 
                                     ", InstanceId =" << 
                                     handle.GetServiceHandle().instanceId;
        }
    }
    
    // create proxy
    if (m_interface)
    {
        m_logger.LogVerbose() << "RPortMain_PDW_Service::Find::Proxy is already running";
    }
    else
    {
        m_logger.LogVerbose() << "RPortMain_PDW_Service::Find::Using Instance::ServiceId =" << 
                                 handles[0].GetServiceHandle().serviceId << 
                                 ", InstanceId =" << 
                                 handles[0].GetServiceHandle().instanceId;
        m_interface = std::make_unique<eevp::pdw::service::proxy::Main_PDW_ServiceProxy>(handles[0]);
        m_findHandle = std::make_unique<ara::com::FindServiceHandle>(findHandle);
        m_found = true;
        
        // subscribe events
        SubscribeDistanceLevel();
        // subscribe field notifications
        SubscribeUssStatus();
    }
}
 
void RPortMain_PDW_Service::SubscribeDistanceLevel()
{
    if (m_found)
    {
        // regist receiver handler
        // if you want to enable it, please uncomment below code
        // RegistReceiverDistanceLevel();
        
        // request subscribe
        auto subscribe = m_interface->DistanceLevel.Subscribe(1);
        if (subscribe.HasValue())
        {
            m_logger.LogVerbose() << "RPortMain_PDW_Service::SubscribeDistanceLevel::Subscribed";
        }
        else
        {
            m_logger.LogError() << "RPortMain_PDW_Service::SubscribeDistanceLevel::" << subscribe.Error().Message();
        }
    }
}
 
void RPortMain_PDW_Service::StopSubscribeDistanceLevel()
{
    if (m_found)
    {
        // request stop subscribe
        m_interface->DistanceLevel.Unsubscribe();
        m_logger.LogVerbose() << "RPortMain_PDW_Service::StopSubscribeDistanceLevel::Unsubscribed";
    }
}
 
void RPortMain_PDW_Service::RegistReceiverDistanceLevel()
{
    if (m_found)
    {
        // set callback
        auto receiver = [this]() -> void {
            return ReceiveEventDistanceLevelTriggered();
        };
        
        // regist callback
        auto callback = m_interface->DistanceLevel.SetReceiveHandler(receiver);
        if (callback.HasValue())
        {
            m_logger.LogVerbose() << "RPortMain_PDW_Service::RegistReceiverDistanceLevel::SetReceiveHandler";
        }
        else
        {
            m_logger.LogError() << "RPortMain_PDW_Service::RegistReceiverDistanceLevel::SetReceiveHandler::" << callback.Error().Message();
        }
    }
}
 
void RPortMain_PDW_Service::ReceiveEventDistanceLevelTriggered()
{
    if (m_found)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_interface->DistanceLevel.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
        {
            auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->DistanceLevel.GetNewSamples([&](auto samplePtr) {
                RPortMain_PDW_Service::ReadDataDistanceLevel(std::move(samplePtr));
            }));
            if (recv->HasValue())
            {
                m_logger.LogVerbose() << "RPortMain_PDW_Service::ReceiveEventDistanceLevel::GetNewSamples::" << recv->Value();
            }
            else
            {
                m_logger.LogError() << "RPortMain_PDW_Service::ReceiveEventDistanceLevel::GetNewSamples::" << recv->Error().Message();
            }
        }
    }
}
 
void RPortMain_PDW_Service::ReceiveEventDistanceLevelCyclic()
{
    while (m_running)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_found)
        {
            if (m_interface->DistanceLevel.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
            {
                auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->DistanceLevel.GetNewSamples([&](auto samplePtr) {
                    RPortMain_PDW_Service::ReadDataDistanceLevel(std::move(samplePtr));
                }));
                if (recv->HasValue())
                {
                    m_logger.LogVerbose() << "RPortMain_PDW_Service::ReceiveEventDistanceLevel::GetNewSamples::" << recv->Value();
                }
                else
                {
                    m_logger.LogError() << "RPortMain_PDW_Service::ReceiveEventDistanceLevel::GetNewSamples::" << recv->Error().Message();
                }
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void RPortMain_PDW_Service::ReadDataDistanceLevel(ara::com::SamplePtr<eevp::pdw::service::proxy::events::DistanceLevel::SampleType const> samplePtr)
{
    auto data = *samplePtr.Get();
    if (m_receiverDistanceLevel)
    {
        m_receiverDistanceLevel(data);
    }
}
 
void RPortMain_PDW_Service::RegistEventHandlerDistanceLevel(std::function<void(const eevp::pdw::service::proxy::events::DistanceLevel::SampleType&)> handler)
{
    m_receiverDistanceLevel = handler;
}
 
void RPortMain_PDW_Service::SubscribeUssStatus()
{
    if (m_found)
    {
        // regist receiver handler
        // if you want to enable it, please uncomment below code
        // RegistReceiverUssStatus();
        
        // request subscribe
        auto subscribe = m_interface->UssStatus.Subscribe(1);
        if (subscribe.HasValue())
        {
            m_logger.LogVerbose() << "RPortMain_PDW_Service::SubscribeUssStatus::Subscribed";
        }
        else
        {
            m_logger.LogError() << "RPortMain_PDW_Service::SubscribeUssStatus::" << subscribe.Error().Message();
        }
    }
}
 
void RPortMain_PDW_Service::StopSubscribeUssStatus()
{
    if (m_found)
    {
        // request stop subscribe
        m_interface->UssStatus.Unsubscribe();
        m_logger.LogVerbose() << "RPortMain_PDW_Service::StopSubscribeUssStatus::Unsubscribed";
    }
}
 
void RPortMain_PDW_Service::RegistReceiverUssStatus()
{
    if (m_found)
    {
        // set callback
        auto receiver = [this]() -> void {
            return ReceiveFieldUssStatusTriggered();
        };
        
        // regist callback
        auto callback = m_interface->UssStatus.SetReceiveHandler(receiver);
        if (callback.HasValue())
        {
            m_logger.LogVerbose() << "RPortMain_PDW_Service::RegistReceiverUssStatus::SetReceiveHandler";
        }
        else
        {
            m_logger.LogError() << "RPortMain_PDW_Service::RegistReceiverUssStatus::SetReceiveHandler::" << callback.Error().Message();
        }
    }
}
 
void RPortMain_PDW_Service::ReceiveFieldUssStatusTriggered()
{
    if (m_found)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_interface->UssStatus.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
        {
            auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->UssStatus.GetNewSamples([&](auto samplePtr) {
                RPortMain_PDW_Service::ReadValueUssStatus(std::move(samplePtr));
            }));
            if (recv->HasValue())
            {
                m_logger.LogVerbose() << "RPortMain_PDW_Service::ReceiveFieldUssStatus::GetNewSamples::" << recv->Value();
            }
            else
            {
                m_logger.LogError() << "RPortMain_PDW_Service::ReceiveFieldUssStatus::GetNewSamples::" << recv->Error().Message();
            }
        }
    }
}
 
void RPortMain_PDW_Service::ReceiveFieldUssStatusCyclic()
{
    while (m_running)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_found)
        {
            if (m_interface->UssStatus.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
            {
                auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->UssStatus.GetNewSamples([&](auto samplePtr) {
                    RPortMain_PDW_Service::ReadValueUssStatus(std::move(samplePtr));
                }));
                if (recv->HasValue())
                {
                    m_logger.LogVerbose() << "RPortMain_PDW_Service::ReceiveFieldUssStatus::GetNewSamples::" << recv->Value();
                }
                else
                {
                    m_logger.LogError() << "RPortMain_PDW_Service::ReceiveFieldUssStatus::GetNewSamples::" << recv->Error().Message();
                }
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void RPortMain_PDW_Service::ReadValueUssStatus(ara::com::SamplePtr<eevp::pdw::service::proxy::fields::UssStatus::FieldType const> samplePtr)
{
    auto value = *samplePtr.Get();
    if (m_receiverUssStatus)
    {
        m_receiverUssStatus(value);
    }
}
 
void RPortMain_PDW_Service::RegistFieldHandlerUssStatus(std::function<void(const eevp::pdw::service::proxy::fields::UssStatus::FieldType&)> handler)
{
    m_receiverUssStatus = handler;
}
 
void RPortMain_PDW_Service::GetUssStatus()
{
    if (m_found)
    {
        auto request = m_interface->UssStatus.Get();
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "RPortMain_PDW_Service::GetUssStatus::Responded";
            
            auto result = response.Value();
            if (m_receiverUssStatus)
            {
                m_receiverUssStatus(result);
            }
        }
        else
        {
            m_logger.LogError() << "RPortMain_PDW_Service::GetUssStatus::" << response.Error().Message();
        }
    }
}
 
} /// namespace port
} /// namespace aa
} /// namespace preventrollback
 
/// EOF